
sx1272mb2das.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800cec8  0800cec8  0001cec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d644  0800d644  0001d644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d64c  0800d64c  0001d64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000000  0800d654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dfc  20000160  0800d7b4  00020160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000f5c  0800d7b4  00020f5c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003895a  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000076ba  00000000  00000000  00058ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011e6e  00000000  00000000  0006019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001658  00000000  00000000  00072010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d90  00000000  00000000  00073668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ed2a  00000000  00000000  000753f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00022544  00000000  00000000  00094122  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a39e4  00000000  00000000  000b6666  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015a04a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000049a0  00000000  00000000  0015a0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  0015ea68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000160 	.word	0x20000160
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ceb0 	.word	0x0800ceb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000164 	.word	0x20000164
 8000104:	0800ceb0 	.word	0x0800ceb0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 ff35 	bl	800229c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f001 fe8d 	bl	800215c <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 ff27 	bl	800229c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff1d 	bl	800229c <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 feaf 	bl	80021d4 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fea5 	bl	80021d4 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_cfrcmple>:
 8000498:	4684      	mov	ip, r0
 800049a:	1c08      	adds	r0, r1, #0
 800049c:	4661      	mov	r1, ip
 800049e:	e7ff      	b.n	80004a0 <__aeabi_cfcmpeq>

080004a0 <__aeabi_cfcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f000 fc97 	bl	8000dd4 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cfcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_fcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f000 fc19 	bl	8000ce8 <__eqsf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_fcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc89 	bl	8000dd4 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_fcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc7f 	bl	8000dd4 <__lesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_fcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fc27 	bl	8000d38 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_fcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 fc1d 	bl	8000d38 <__gesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_fcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_uldivmod>:
 800050c:	2b00      	cmp	r3, #0
 800050e:	d111      	bne.n	8000534 <__aeabi_uldivmod+0x28>
 8000510:	2a00      	cmp	r2, #0
 8000512:	d10f      	bne.n	8000534 <__aeabi_uldivmod+0x28>
 8000514:	2900      	cmp	r1, #0
 8000516:	d100      	bne.n	800051a <__aeabi_uldivmod+0xe>
 8000518:	2800      	cmp	r0, #0
 800051a:	d002      	beq.n	8000522 <__aeabi_uldivmod+0x16>
 800051c:	2100      	movs	r1, #0
 800051e:	43c9      	mvns	r1, r1
 8000520:	1c08      	adds	r0, r1, #0
 8000522:	b407      	push	{r0, r1, r2}
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <__aeabi_uldivmod+0x24>)
 8000526:	a102      	add	r1, pc, #8	; (adr r1, 8000530 <__aeabi_uldivmod+0x24>)
 8000528:	1840      	adds	r0, r0, r1
 800052a:	9002      	str	r0, [sp, #8]
 800052c:	bd03      	pop	{r0, r1, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	fffffee9 	.word	0xfffffee9
 8000534:	b403      	push	{r0, r1}
 8000536:	4668      	mov	r0, sp
 8000538:	b501      	push	{r0, lr}
 800053a:	9802      	ldr	r0, [sp, #8]
 800053c:	f000 f866 	bl	800060c <__udivmoddi4>
 8000540:	9b01      	ldr	r3, [sp, #4]
 8000542:	469e      	mov	lr, r3
 8000544:	b002      	add	sp, #8
 8000546:	bc0c      	pop	{r2, r3}
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)

0800054c <__aeabi_lmul>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	46ce      	mov	lr, r9
 8000550:	4647      	mov	r7, r8
 8000552:	0415      	lsls	r5, r2, #16
 8000554:	0c2d      	lsrs	r5, r5, #16
 8000556:	002e      	movs	r6, r5
 8000558:	b580      	push	{r7, lr}
 800055a:	0407      	lsls	r7, r0, #16
 800055c:	0c14      	lsrs	r4, r2, #16
 800055e:	0c3f      	lsrs	r7, r7, #16
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	437e      	muls	r6, r7
 8000566:	435d      	muls	r5, r3
 8000568:	4367      	muls	r7, r4
 800056a:	4363      	muls	r3, r4
 800056c:	197f      	adds	r7, r7, r5
 800056e:	0c34      	lsrs	r4, r6, #16
 8000570:	19e4      	adds	r4, r4, r7
 8000572:	469c      	mov	ip, r3
 8000574:	42a5      	cmp	r5, r4
 8000576:	d903      	bls.n	8000580 <__aeabi_lmul+0x34>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	025b      	lsls	r3, r3, #9
 800057c:	4698      	mov	r8, r3
 800057e:	44c4      	add	ip, r8
 8000580:	464b      	mov	r3, r9
 8000582:	4343      	muls	r3, r0
 8000584:	4351      	muls	r1, r2
 8000586:	0c25      	lsrs	r5, r4, #16
 8000588:	0436      	lsls	r6, r6, #16
 800058a:	4465      	add	r5, ip
 800058c:	0c36      	lsrs	r6, r6, #16
 800058e:	0424      	lsls	r4, r4, #16
 8000590:	19a4      	adds	r4, r4, r6
 8000592:	195b      	adds	r3, r3, r5
 8000594:	1859      	adds	r1, r3, r1
 8000596:	0020      	movs	r0, r4
 8000598:	bc0c      	pop	{r2, r3}
 800059a:	4690      	mov	r8, r2
 800059c:	4699      	mov	r9, r3
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005a0 <__aeabi_f2uiz>:
 80005a0:	219e      	movs	r1, #158	; 0x9e
 80005a2:	b510      	push	{r4, lr}
 80005a4:	05c9      	lsls	r1, r1, #23
 80005a6:	1c04      	adds	r4, r0, #0
 80005a8:	f7ff ffa6 	bl	80004f8 <__aeabi_fcmpge>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d103      	bne.n	80005b8 <__aeabi_f2uiz+0x18>
 80005b0:	1c20      	adds	r0, r4, #0
 80005b2:	f000 ff55 	bl	8001460 <__aeabi_f2iz>
 80005b6:	bd10      	pop	{r4, pc}
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	1c20      	adds	r0, r4, #0
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	f000 fd8b 	bl	80010d8 <__aeabi_fsub>
 80005c2:	f000 ff4d 	bl	8001460 <__aeabi_f2iz>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	061b      	lsls	r3, r3, #24
 80005ca:	469c      	mov	ip, r3
 80005cc:	4460      	add	r0, ip
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_f2uiz+0x16>

080005d0 <__aeabi_d2uiz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005d6:	0004      	movs	r4, r0
 80005d8:	000d      	movs	r5, r1
 80005da:	f7ff ff53 	bl	8000484 <__aeabi_dcmpge>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d104      	bne.n	80005ec <__aeabi_d2uiz+0x1c>
 80005e2:	0020      	movs	r0, r4
 80005e4:	0029      	movs	r1, r5
 80005e6:	f002 fc7b 	bl	8002ee0 <__aeabi_d2iz>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	0020      	movs	r0, r4
 80005f2:	0029      	movs	r1, r5
 80005f4:	f002 f92c 	bl	8002850 <__aeabi_dsub>
 80005f8:	f002 fc72 	bl	8002ee0 <__aeabi_d2iz>
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	469c      	mov	ip, r3
 8000602:	4460      	add	r0, ip
 8000604:	e7f1      	b.n	80005ea <__aeabi_d2uiz+0x1a>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	41e00000 	.word	0x41e00000

0800060c <__udivmoddi4>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	464f      	mov	r7, r9
 8000610:	4646      	mov	r6, r8
 8000612:	46d6      	mov	lr, sl
 8000614:	b5c0      	push	{r6, r7, lr}
 8000616:	0004      	movs	r4, r0
 8000618:	b082      	sub	sp, #8
 800061a:	000d      	movs	r5, r1
 800061c:	4691      	mov	r9, r2
 800061e:	4698      	mov	r8, r3
 8000620:	428b      	cmp	r3, r1
 8000622:	d82f      	bhi.n	8000684 <__udivmoddi4+0x78>
 8000624:	d02c      	beq.n	8000680 <__udivmoddi4+0x74>
 8000626:	4641      	mov	r1, r8
 8000628:	4648      	mov	r0, r9
 800062a:	f002 fd6b 	bl	8003104 <__clzdi2>
 800062e:	0029      	movs	r1, r5
 8000630:	0006      	movs	r6, r0
 8000632:	0020      	movs	r0, r4
 8000634:	f002 fd66 	bl	8003104 <__clzdi2>
 8000638:	1a33      	subs	r3, r6, r0
 800063a:	469c      	mov	ip, r3
 800063c:	3b20      	subs	r3, #32
 800063e:	469a      	mov	sl, r3
 8000640:	d500      	bpl.n	8000644 <__udivmoddi4+0x38>
 8000642:	e076      	b.n	8000732 <__udivmoddi4+0x126>
 8000644:	464b      	mov	r3, r9
 8000646:	4652      	mov	r2, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001f      	movs	r7, r3
 800064c:	464b      	mov	r3, r9
 800064e:	4662      	mov	r2, ip
 8000650:	4093      	lsls	r3, r2
 8000652:	001e      	movs	r6, r3
 8000654:	42af      	cmp	r7, r5
 8000656:	d828      	bhi.n	80006aa <__udivmoddi4+0x9e>
 8000658:	d025      	beq.n	80006a6 <__udivmoddi4+0x9a>
 800065a:	4653      	mov	r3, sl
 800065c:	1ba4      	subs	r4, r4, r6
 800065e:	41bd      	sbcs	r5, r7
 8000660:	2b00      	cmp	r3, #0
 8000662:	da00      	bge.n	8000666 <__udivmoddi4+0x5a>
 8000664:	e07b      	b.n	800075e <__udivmoddi4+0x152>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	4652      	mov	r2, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	4662      	mov	r2, ip
 800067a:	4093      	lsls	r3, r2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	e018      	b.n	80006b2 <__udivmoddi4+0xa6>
 8000680:	4282      	cmp	r2, r0
 8000682:	d9d0      	bls.n	8000626 <__udivmoddi4+0x1a>
 8000684:	2200      	movs	r2, #0
 8000686:	2300      	movs	r3, #0
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <__udivmoddi4+0x8a>
 8000692:	601c      	str	r4, [r3, #0]
 8000694:	605d      	str	r5, [r3, #4]
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	b002      	add	sp, #8
 800069c:	bc1c      	pop	{r2, r3, r4}
 800069e:	4690      	mov	r8, r2
 80006a0:	4699      	mov	r9, r3
 80006a2:	46a2      	mov	sl, r4
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d9d7      	bls.n	800065a <__udivmoddi4+0x4e>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4663      	mov	r3, ip
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e9      	beq.n	800068c <__udivmoddi4+0x80>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	4698      	mov	r8, r3
 80006bc:	4641      	mov	r1, r8
 80006be:	0872      	lsrs	r2, r6, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	4666      	mov	r6, ip
 80006c6:	e00e      	b.n	80006e6 <__udivmoddi4+0xda>
 80006c8:	42ab      	cmp	r3, r5
 80006ca:	d101      	bne.n	80006d0 <__udivmoddi4+0xc4>
 80006cc:	42a2      	cmp	r2, r4
 80006ce:	d80c      	bhi.n	80006ea <__udivmoddi4+0xde>
 80006d0:	1aa4      	subs	r4, r4, r2
 80006d2:	419d      	sbcs	r5, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	1924      	adds	r4, r4, r4
 80006d8:	416d      	adcs	r5, r5
 80006da:	2100      	movs	r1, #0
 80006dc:	3e01      	subs	r6, #1
 80006de:	1824      	adds	r4, r4, r0
 80006e0:	414d      	adcs	r5, r1
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d006      	beq.n	80006f4 <__udivmoddi4+0xe8>
 80006e6:	42ab      	cmp	r3, r5
 80006e8:	d9ee      	bls.n	80006c8 <__udivmoddi4+0xbc>
 80006ea:	3e01      	subs	r6, #1
 80006ec:	1924      	adds	r4, r4, r4
 80006ee:	416d      	adcs	r5, r5
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d1f8      	bne.n	80006e6 <__udivmoddi4+0xda>
 80006f4:	9800      	ldr	r0, [sp, #0]
 80006f6:	9901      	ldr	r1, [sp, #4]
 80006f8:	4653      	mov	r3, sl
 80006fa:	1900      	adds	r0, r0, r4
 80006fc:	4169      	adcs	r1, r5
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db23      	blt.n	800074a <__udivmoddi4+0x13e>
 8000702:	002b      	movs	r3, r5
 8000704:	4652      	mov	r2, sl
 8000706:	40d3      	lsrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	4664      	mov	r4, ip
 800070c:	40e2      	lsrs	r2, r4
 800070e:	001c      	movs	r4, r3
 8000710:	4653      	mov	r3, sl
 8000712:	0015      	movs	r5, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	db2d      	blt.n	8000774 <__udivmoddi4+0x168>
 8000718:	0026      	movs	r6, r4
 800071a:	4657      	mov	r7, sl
 800071c:	40be      	lsls	r6, r7
 800071e:	0033      	movs	r3, r6
 8000720:	0026      	movs	r6, r4
 8000722:	4667      	mov	r7, ip
 8000724:	40be      	lsls	r6, r7
 8000726:	0032      	movs	r2, r6
 8000728:	1a80      	subs	r0, r0, r2
 800072a:	4199      	sbcs	r1, r3
 800072c:	9000      	str	r0, [sp, #0]
 800072e:	9101      	str	r1, [sp, #4]
 8000730:	e7ac      	b.n	800068c <__udivmoddi4+0x80>
 8000732:	4662      	mov	r2, ip
 8000734:	2320      	movs	r3, #32
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	464a      	mov	r2, r9
 800073a:	40da      	lsrs	r2, r3
 800073c:	4661      	mov	r1, ip
 800073e:	0013      	movs	r3, r2
 8000740:	4642      	mov	r2, r8
 8000742:	408a      	lsls	r2, r1
 8000744:	0017      	movs	r7, r2
 8000746:	431f      	orrs	r7, r3
 8000748:	e780      	b.n	800064c <__udivmoddi4+0x40>
 800074a:	4662      	mov	r2, ip
 800074c:	2320      	movs	r3, #32
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	4666      	mov	r6, ip
 8000754:	409a      	lsls	r2, r3
 8000756:	0023      	movs	r3, r4
 8000758:	40f3      	lsrs	r3, r6
 800075a:	4313      	orrs	r3, r2
 800075c:	e7d4      	b.n	8000708 <__udivmoddi4+0xfc>
 800075e:	4662      	mov	r2, ip
 8000760:	2320      	movs	r3, #32
 8000762:	2100      	movs	r1, #0
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	2200      	movs	r2, #0
 8000768:	9100      	str	r1, [sp, #0]
 800076a:	9201      	str	r2, [sp, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	40da      	lsrs	r2, r3
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	e780      	b.n	8000676 <__udivmoddi4+0x6a>
 8000774:	2320      	movs	r3, #32
 8000776:	4662      	mov	r2, ip
 8000778:	0026      	movs	r6, r4
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	40de      	lsrs	r6, r3
 800077e:	002f      	movs	r7, r5
 8000780:	46b0      	mov	r8, r6
 8000782:	4666      	mov	r6, ip
 8000784:	40b7      	lsls	r7, r6
 8000786:	4646      	mov	r6, r8
 8000788:	003b      	movs	r3, r7
 800078a:	4333      	orrs	r3, r6
 800078c:	e7c8      	b.n	8000720 <__udivmoddi4+0x114>
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <__aeabi_fadd>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	4647      	mov	r7, r8
 8000794:	46ce      	mov	lr, r9
 8000796:	0243      	lsls	r3, r0, #9
 8000798:	0a5b      	lsrs	r3, r3, #9
 800079a:	0044      	lsls	r4, r0, #1
 800079c:	0fc2      	lsrs	r2, r0, #31
 800079e:	469c      	mov	ip, r3
 80007a0:	0048      	lsls	r0, r1, #1
 80007a2:	00dd      	lsls	r5, r3, #3
 80007a4:	024b      	lsls	r3, r1, #9
 80007a6:	0e24      	lsrs	r4, r4, #24
 80007a8:	0a5b      	lsrs	r3, r3, #9
 80007aa:	0e00      	lsrs	r0, r0, #24
 80007ac:	b580      	push	{r7, lr}
 80007ae:	4698      	mov	r8, r3
 80007b0:	0026      	movs	r6, r4
 80007b2:	4691      	mov	r9, r2
 80007b4:	0fc9      	lsrs	r1, r1, #31
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	1a27      	subs	r7, r4, r0
 80007ba:	428a      	cmp	r2, r1
 80007bc:	d029      	beq.n	8000812 <__aeabi_fadd+0x82>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	dd15      	ble.n	80007ee <__aeabi_fadd+0x5e>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d14a      	bne.n	800085c <__aeabi_fadd+0xcc>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x3c>
 80007ca:	e095      	b.n	80008f8 <__aeabi_fadd+0x168>
 80007cc:	08ed      	lsrs	r5, r5, #3
 80007ce:	2cff      	cmp	r4, #255	; 0xff
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x44>
 80007d2:	e088      	b.n	80008e6 <__aeabi_fadd+0x156>
 80007d4:	026b      	lsls	r3, r5, #9
 80007d6:	0a5b      	lsrs	r3, r3, #9
 80007d8:	b2e6      	uxtb	r6, r4
 80007da:	025b      	lsls	r3, r3, #9
 80007dc:	05f6      	lsls	r6, r6, #23
 80007de:	0a58      	lsrs	r0, r3, #9
 80007e0:	4330      	orrs	r0, r6
 80007e2:	07d2      	lsls	r2, r2, #31
 80007e4:	4310      	orrs	r0, r2
 80007e6:	bc0c      	pop	{r2, r3}
 80007e8:	4690      	mov	r8, r2
 80007ea:	4699      	mov	r9, r3
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x64>
 80007f2:	e087      	b.n	8000904 <__aeabi_fadd+0x174>
 80007f4:	1c60      	adds	r0, r4, #1
 80007f6:	b2c0      	uxtb	r0, r0
 80007f8:	2801      	cmp	r0, #1
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fadd+0x6e>
 80007fc:	e0b6      	b.n	800096c <__aeabi_fadd+0x1dc>
 80007fe:	1aee      	subs	r6, r5, r3
 8000800:	0172      	lsls	r2, r6, #5
 8000802:	d500      	bpl.n	8000806 <__aeabi_fadd+0x76>
 8000804:	e0c5      	b.n	8000992 <__aeabi_fadd+0x202>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d13d      	bne.n	8000886 <__aeabi_fadd+0xf6>
 800080a:	2200      	movs	r2, #0
 800080c:	2600      	movs	r6, #0
 800080e:	2300      	movs	r3, #0
 8000810:	e7e3      	b.n	80007da <__aeabi_fadd+0x4a>
 8000812:	2f00      	cmp	r7, #0
 8000814:	dc00      	bgt.n	8000818 <__aeabi_fadd+0x88>
 8000816:	e096      	b.n	8000946 <__aeabi_fadd+0x1b6>
 8000818:	2800      	cmp	r0, #0
 800081a:	d05d      	beq.n	80008d8 <__aeabi_fadd+0x148>
 800081c:	2cff      	cmp	r4, #255	; 0xff
 800081e:	d060      	beq.n	80008e2 <__aeabi_fadd+0x152>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	4313      	orrs	r3, r2
 8000826:	2f1b      	cmp	r7, #27
 8000828:	dd00      	ble.n	800082c <__aeabi_fadd+0x9c>
 800082a:	e0ec      	b.n	8000a06 <__aeabi_fadd+0x276>
 800082c:	2220      	movs	r2, #32
 800082e:	1bd2      	subs	r2, r2, r7
 8000830:	0018      	movs	r0, r3
 8000832:	4093      	lsls	r3, r2
 8000834:	40f8      	lsrs	r0, r7
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	4193      	sbcs	r3, r2
 800083a:	4303      	orrs	r3, r0
 800083c:	18ed      	adds	r5, r5, r3
 800083e:	016b      	lsls	r3, r5, #5
 8000840:	d57b      	bpl.n	800093a <__aeabi_fadd+0x1aa>
 8000842:	3401      	adds	r4, #1
 8000844:	2cff      	cmp	r4, #255	; 0xff
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0xba>
 8000848:	e0b7      	b.n	80009ba <__aeabi_fadd+0x22a>
 800084a:	2201      	movs	r2, #1
 800084c:	2607      	movs	r6, #7
 800084e:	402a      	ands	r2, r5
 8000850:	086b      	lsrs	r3, r5, #1
 8000852:	4d9a      	ldr	r5, [pc, #616]	; (8000abc <__aeabi_fadd+0x32c>)
 8000854:	401d      	ands	r5, r3
 8000856:	4315      	orrs	r5, r2
 8000858:	402e      	ands	r6, r5
 800085a:	e029      	b.n	80008b0 <__aeabi_fadd+0x120>
 800085c:	2cff      	cmp	r4, #255	; 0xff
 800085e:	d0b5      	beq.n	80007cc <__aeabi_fadd+0x3c>
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	04d2      	lsls	r2, r2, #19
 8000864:	4313      	orrs	r3, r2
 8000866:	2f1b      	cmp	r7, #27
 8000868:	dd00      	ble.n	800086c <__aeabi_fadd+0xdc>
 800086a:	e0b2      	b.n	80009d2 <__aeabi_fadd+0x242>
 800086c:	2220      	movs	r2, #32
 800086e:	1bd2      	subs	r2, r2, r7
 8000870:	0019      	movs	r1, r3
 8000872:	4093      	lsls	r3, r2
 8000874:	40f9      	lsrs	r1, r7
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	4193      	sbcs	r3, r2
 800087a:	430b      	orrs	r3, r1
 800087c:	1aed      	subs	r5, r5, r3
 800087e:	016b      	lsls	r3, r5, #5
 8000880:	d55b      	bpl.n	800093a <__aeabi_fadd+0x1aa>
 8000882:	01ad      	lsls	r5, r5, #6
 8000884:	09ae      	lsrs	r6, r5, #6
 8000886:	0030      	movs	r0, r6
 8000888:	f002 fc1e 	bl	80030c8 <__clzsi2>
 800088c:	3805      	subs	r0, #5
 800088e:	4086      	lsls	r6, r0
 8000890:	4284      	cmp	r4, r0
 8000892:	dc65      	bgt.n	8000960 <__aeabi_fadd+0x1d0>
 8000894:	1b04      	subs	r4, r0, r4
 8000896:	0033      	movs	r3, r6
 8000898:	2020      	movs	r0, #32
 800089a:	3401      	adds	r4, #1
 800089c:	40e3      	lsrs	r3, r4
 800089e:	1b04      	subs	r4, r0, r4
 80008a0:	40a6      	lsls	r6, r4
 80008a2:	1e75      	subs	r5, r6, #1
 80008a4:	41ae      	sbcs	r6, r5
 80008a6:	4333      	orrs	r3, r6
 80008a8:	2607      	movs	r6, #7
 80008aa:	001d      	movs	r5, r3
 80008ac:	2400      	movs	r4, #0
 80008ae:	401e      	ands	r6, r3
 80008b0:	2201      	movs	r2, #1
 80008b2:	464b      	mov	r3, r9
 80008b4:	401a      	ands	r2, r3
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d004      	beq.n	80008c4 <__aeabi_fadd+0x134>
 80008ba:	230f      	movs	r3, #15
 80008bc:	402b      	ands	r3, r5
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fadd+0x134>
 80008c2:	3504      	adds	r5, #4
 80008c4:	016b      	lsls	r3, r5, #5
 80008c6:	d400      	bmi.n	80008ca <__aeabi_fadd+0x13a>
 80008c8:	e780      	b.n	80007cc <__aeabi_fadd+0x3c>
 80008ca:	3401      	adds	r4, #1
 80008cc:	b2e6      	uxtb	r6, r4
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d12f      	bne.n	8000932 <__aeabi_fadd+0x1a2>
 80008d2:	26ff      	movs	r6, #255	; 0xff
 80008d4:	2300      	movs	r3, #0
 80008d6:	e780      	b.n	80007da <__aeabi_fadd+0x4a>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d152      	bne.n	8000982 <__aeabi_fadd+0x1f2>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d000      	beq.n	80008e2 <__aeabi_fadd+0x152>
 80008e0:	e774      	b.n	80007cc <__aeabi_fadd+0x3c>
 80008e2:	000a      	movs	r2, r1
 80008e4:	08ed      	lsrs	r5, r5, #3
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d0f3      	beq.n	80008d2 <__aeabi_fadd+0x142>
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	03db      	lsls	r3, r3, #15
 80008ee:	432b      	orrs	r3, r5
 80008f0:	025b      	lsls	r3, r3, #9
 80008f2:	0a5b      	lsrs	r3, r3, #9
 80008f4:	26ff      	movs	r6, #255	; 0xff
 80008f6:	e770      	b.n	80007da <__aeabi_fadd+0x4a>
 80008f8:	3f01      	subs	r7, #1
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d0be      	beq.n	800087c <__aeabi_fadd+0xec>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d1b1      	bne.n	8000866 <__aeabi_fadd+0xd6>
 8000902:	e763      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d047      	beq.n	8000998 <__aeabi_fadd+0x208>
 8000908:	28ff      	cmp	r0, #255	; 0xff
 800090a:	d069      	beq.n	80009e0 <__aeabi_fadd+0x250>
 800090c:	2480      	movs	r4, #128	; 0x80
 800090e:	04e4      	lsls	r4, r4, #19
 8000910:	427a      	negs	r2, r7
 8000912:	4325      	orrs	r5, r4
 8000914:	2a1b      	cmp	r2, #27
 8000916:	dd00      	ble.n	800091a <__aeabi_fadd+0x18a>
 8000918:	e0c5      	b.n	8000aa6 <__aeabi_fadd+0x316>
 800091a:	002c      	movs	r4, r5
 800091c:	2620      	movs	r6, #32
 800091e:	40d4      	lsrs	r4, r2
 8000920:	1ab2      	subs	r2, r6, r2
 8000922:	4095      	lsls	r5, r2
 8000924:	1e6a      	subs	r2, r5, #1
 8000926:	4195      	sbcs	r5, r2
 8000928:	4325      	orrs	r5, r4
 800092a:	1b5d      	subs	r5, r3, r5
 800092c:	0004      	movs	r4, r0
 800092e:	4689      	mov	r9, r1
 8000930:	e7a5      	b.n	800087e <__aeabi_fadd+0xee>
 8000932:	01ab      	lsls	r3, r5, #6
 8000934:	0a5b      	lsrs	r3, r3, #9
 8000936:	e750      	b.n	80007da <__aeabi_fadd+0x4a>
 8000938:	2400      	movs	r4, #0
 800093a:	2201      	movs	r2, #1
 800093c:	464b      	mov	r3, r9
 800093e:	401a      	ands	r2, r3
 8000940:	076b      	lsls	r3, r5, #29
 8000942:	d1ba      	bne.n	80008ba <__aeabi_fadd+0x12a>
 8000944:	e742      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d13b      	bne.n	80009c2 <__aeabi_fadd+0x232>
 800094a:	3401      	adds	r4, #1
 800094c:	b2e0      	uxtb	r0, r4
 800094e:	2801      	cmp	r0, #1
 8000950:	dd4a      	ble.n	80009e8 <__aeabi_fadd+0x258>
 8000952:	2cff      	cmp	r4, #255	; 0xff
 8000954:	d0bd      	beq.n	80008d2 <__aeabi_fadd+0x142>
 8000956:	2607      	movs	r6, #7
 8000958:	18ed      	adds	r5, r5, r3
 800095a:	086d      	lsrs	r5, r5, #1
 800095c:	402e      	ands	r6, r5
 800095e:	e7a7      	b.n	80008b0 <__aeabi_fadd+0x120>
 8000960:	2307      	movs	r3, #7
 8000962:	4d57      	ldr	r5, [pc, #348]	; (8000ac0 <__aeabi_fadd+0x330>)
 8000964:	1a24      	subs	r4, r4, r0
 8000966:	4035      	ands	r5, r6
 8000968:	401e      	ands	r6, r3
 800096a:	e7a1      	b.n	80008b0 <__aeabi_fadd+0x120>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d11b      	bne.n	80009a8 <__aeabi_fadd+0x218>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d16e      	bne.n	8000a52 <__aeabi_fadd+0x2c2>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fadd+0x1ea>
 8000978:	e09a      	b.n	8000ab0 <__aeabi_fadd+0x320>
 800097a:	000a      	movs	r2, r1
 800097c:	001d      	movs	r5, r3
 800097e:	003c      	movs	r4, r7
 8000980:	e724      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000982:	3f01      	subs	r7, #1
 8000984:	2f00      	cmp	r7, #0
 8000986:	d100      	bne.n	800098a <__aeabi_fadd+0x1fa>
 8000988:	e758      	b.n	800083c <__aeabi_fadd+0xac>
 800098a:	2cff      	cmp	r4, #255	; 0xff
 800098c:	d000      	beq.n	8000990 <__aeabi_fadd+0x200>
 800098e:	e74a      	b.n	8000826 <__aeabi_fadd+0x96>
 8000990:	e7a7      	b.n	80008e2 <__aeabi_fadd+0x152>
 8000992:	1b5e      	subs	r6, r3, r5
 8000994:	4689      	mov	r9, r1
 8000996:	e776      	b.n	8000886 <__aeabi_fadd+0xf6>
 8000998:	2d00      	cmp	r5, #0
 800099a:	d11c      	bne.n	80009d6 <__aeabi_fadd+0x246>
 800099c:	000a      	movs	r2, r1
 800099e:	28ff      	cmp	r0, #255	; 0xff
 80009a0:	d01f      	beq.n	80009e2 <__aeabi_fadd+0x252>
 80009a2:	0004      	movs	r4, r0
 80009a4:	001d      	movs	r5, r3
 80009a6:	e711      	b.n	80007cc <__aeabi_fadd+0x3c>
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d15d      	bne.n	8000a68 <__aeabi_fadd+0x2d8>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d117      	bne.n	80009e0 <__aeabi_fadd+0x250>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	2200      	movs	r2, #0
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	26ff      	movs	r6, #255	; 0xff
 80009b8:	e70f      	b.n	80007da <__aeabi_fadd+0x4a>
 80009ba:	000a      	movs	r2, r1
 80009bc:	26ff      	movs	r6, #255	; 0xff
 80009be:	2300      	movs	r3, #0
 80009c0:	e70b      	b.n	80007da <__aeabi_fadd+0x4a>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d121      	bne.n	8000a0a <__aeabi_fadd+0x27a>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	d166      	bne.n	8000a98 <__aeabi_fadd+0x308>
 80009ca:	28ff      	cmp	r0, #255	; 0xff
 80009cc:	d1e9      	bne.n	80009a2 <__aeabi_fadd+0x212>
 80009ce:	001d      	movs	r5, r3
 80009d0:	e787      	b.n	80008e2 <__aeabi_fadd+0x152>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e752      	b.n	800087c <__aeabi_fadd+0xec>
 80009d6:	1c7a      	adds	r2, r7, #1
 80009d8:	d0a7      	beq.n	800092a <__aeabi_fadd+0x19a>
 80009da:	43fa      	mvns	r2, r7
 80009dc:	28ff      	cmp	r0, #255	; 0xff
 80009de:	d199      	bne.n	8000914 <__aeabi_fadd+0x184>
 80009e0:	000a      	movs	r2, r1
 80009e2:	001d      	movs	r5, r3
 80009e4:	24ff      	movs	r4, #255	; 0xff
 80009e6:	e6f1      	b.n	80007cc <__aeabi_fadd+0x3c>
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d121      	bne.n	8000a30 <__aeabi_fadd+0x2a0>
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d04f      	beq.n	8000a90 <__aeabi_fadd+0x300>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d04c      	beq.n	8000a8e <__aeabi_fadd+0x2fe>
 80009f4:	18ed      	adds	r5, r5, r3
 80009f6:	016b      	lsls	r3, r5, #5
 80009f8:	d59e      	bpl.n	8000938 <__aeabi_fadd+0x1a8>
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <__aeabi_fadd+0x330>)
 80009fc:	3607      	adds	r6, #7
 80009fe:	402e      	ands	r6, r5
 8000a00:	2401      	movs	r4, #1
 8000a02:	401d      	ands	r5, r3
 8000a04:	e754      	b.n	80008b0 <__aeabi_fadd+0x120>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e718      	b.n	800083c <__aeabi_fadd+0xac>
 8000a0a:	28ff      	cmp	r0, #255	; 0xff
 8000a0c:	d0df      	beq.n	80009ce <__aeabi_fadd+0x23e>
 8000a0e:	2480      	movs	r4, #128	; 0x80
 8000a10:	04e4      	lsls	r4, r4, #19
 8000a12:	427f      	negs	r7, r7
 8000a14:	4325      	orrs	r5, r4
 8000a16:	2f1b      	cmp	r7, #27
 8000a18:	dc4d      	bgt.n	8000ab6 <__aeabi_fadd+0x326>
 8000a1a:	2620      	movs	r6, #32
 8000a1c:	1bf6      	subs	r6, r6, r7
 8000a1e:	002c      	movs	r4, r5
 8000a20:	40b5      	lsls	r5, r6
 8000a22:	40fc      	lsrs	r4, r7
 8000a24:	1e6a      	subs	r2, r5, #1
 8000a26:	4195      	sbcs	r5, r2
 8000a28:	4325      	orrs	r5, r4
 8000a2a:	18ed      	adds	r5, r5, r3
 8000a2c:	0004      	movs	r4, r0
 8000a2e:	e706      	b.n	800083e <__aeabi_fadd+0xae>
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0cc      	beq.n	80009ce <__aeabi_fadd+0x23e>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fadd+0x2aa>
 8000a38:	e753      	b.n	80008e2 <__aeabi_fadd+0x152>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	4660      	mov	r0, ip
 8000a3e:	03c9      	lsls	r1, r1, #15
 8000a40:	4208      	tst	r0, r1
 8000a42:	d003      	beq.n	8000a4c <__aeabi_fadd+0x2bc>
 8000a44:	4640      	mov	r0, r8
 8000a46:	4208      	tst	r0, r1
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fadd+0x2bc>
 8000a4a:	001d      	movs	r5, r3
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4011      	ands	r1, r2
 8000a50:	e747      	b.n	80008e2 <__aeabi_fadd+0x152>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fadd+0x2c8>
 8000a56:	e6b9      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000a58:	1aea      	subs	r2, r5, r3
 8000a5a:	0150      	lsls	r0, r2, #5
 8000a5c:	d525      	bpl.n	8000aaa <__aeabi_fadd+0x31a>
 8000a5e:	2607      	movs	r6, #7
 8000a60:	1b5d      	subs	r5, r3, r5
 8000a62:	402e      	ands	r6, r5
 8000a64:	4689      	mov	r9, r1
 8000a66:	e723      	b.n	80008b0 <__aeabi_fadd+0x120>
 8000a68:	24ff      	movs	r4, #255	; 0xff
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fadd+0x2e0>
 8000a6e:	e6ad      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	4660      	mov	r0, ip
 8000a74:	03d2      	lsls	r2, r2, #15
 8000a76:	4210      	tst	r0, r2
 8000a78:	d004      	beq.n	8000a84 <__aeabi_fadd+0x2f4>
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	4210      	tst	r0, r2
 8000a7e:	d101      	bne.n	8000a84 <__aeabi_fadd+0x2f4>
 8000a80:	001d      	movs	r5, r3
 8000a82:	4689      	mov	r9, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	464b      	mov	r3, r9
 8000a88:	24ff      	movs	r4, #255	; 0xff
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	e69e      	b.n	80007cc <__aeabi_fadd+0x3c>
 8000a8e:	002b      	movs	r3, r5
 8000a90:	08dd      	lsrs	r5, r3, #3
 8000a92:	000a      	movs	r2, r1
 8000a94:	2400      	movs	r4, #0
 8000a96:	e69d      	b.n	80007d4 <__aeabi_fadd+0x44>
 8000a98:	1c7a      	adds	r2, r7, #1
 8000a9a:	d0c6      	beq.n	8000a2a <__aeabi_fadd+0x29a>
 8000a9c:	43ff      	mvns	r7, r7
 8000a9e:	28ff      	cmp	r0, #255	; 0xff
 8000aa0:	d1b9      	bne.n	8000a16 <__aeabi_fadd+0x286>
 8000aa2:	001d      	movs	r5, r3
 8000aa4:	e71d      	b.n	80008e2 <__aeabi_fadd+0x152>
 8000aa6:	2501      	movs	r5, #1
 8000aa8:	e73f      	b.n	800092a <__aeabi_fadd+0x19a>
 8000aaa:	1e15      	subs	r5, r2, #0
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_fadd+0x320>
 8000aae:	e744      	b.n	800093a <__aeabi_fadd+0x1aa>
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e691      	b.n	80007da <__aeabi_fadd+0x4a>
 8000ab6:	2501      	movs	r5, #1
 8000ab8:	e7b7      	b.n	8000a2a <__aeabi_fadd+0x29a>
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	7dffffff 	.word	0x7dffffff
 8000ac0:	fbffffff 	.word	0xfbffffff

08000ac4 <__aeabi_fdiv>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	464e      	mov	r6, r9
 8000aca:	4645      	mov	r5, r8
 8000acc:	46de      	mov	lr, fp
 8000ace:	0244      	lsls	r4, r0, #9
 8000ad0:	b5e0      	push	{r5, r6, r7, lr}
 8000ad2:	0046      	lsls	r6, r0, #1
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	0a64      	lsrs	r4, r4, #9
 8000ad8:	0e36      	lsrs	r6, r6, #24
 8000ada:	0fc7      	lsrs	r7, r0, #31
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d063      	beq.n	8000ba8 <__aeabi_fdiv+0xe4>
 8000ae0:	2eff      	cmp	r6, #255	; 0xff
 8000ae2:	d024      	beq.n	8000b2e <__aeabi_fdiv+0x6a>
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	00e4      	lsls	r4, r4, #3
 8000ae8:	04db      	lsls	r3, r3, #19
 8000aea:	431c      	orrs	r4, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	4699      	mov	r9, r3
 8000af0:	469b      	mov	fp, r3
 8000af2:	3e7f      	subs	r6, #127	; 0x7f
 8000af4:	4643      	mov	r3, r8
 8000af6:	4642      	mov	r2, r8
 8000af8:	025d      	lsls	r5, r3, #9
 8000afa:	0fd2      	lsrs	r2, r2, #31
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0a6d      	lsrs	r5, r5, #9
 8000b00:	0e1b      	lsrs	r3, r3, #24
 8000b02:	4690      	mov	r8, r2
 8000b04:	4692      	mov	sl, r2
 8000b06:	d065      	beq.n	8000bd4 <__aeabi_fdiv+0x110>
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d055      	beq.n	8000bb8 <__aeabi_fdiv+0xf4>
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	2100      	movs	r1, #0
 8000b10:	00ed      	lsls	r5, r5, #3
 8000b12:	04d2      	lsls	r2, r2, #19
 8000b14:	3b7f      	subs	r3, #127	; 0x7f
 8000b16:	4315      	orrs	r5, r2
 8000b18:	1af6      	subs	r6, r6, r3
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	407b      	eors	r3, r7
 8000b20:	2a0f      	cmp	r2, #15
 8000b22:	d900      	bls.n	8000b26 <__aeabi_fdiv+0x62>
 8000b24:	e08d      	b.n	8000c42 <__aeabi_fdiv+0x17e>
 8000b26:	486d      	ldr	r0, [pc, #436]	; (8000cdc <__aeabi_fdiv+0x218>)
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	5882      	ldr	r2, [r0, r2]
 8000b2c:	4697      	mov	pc, r2
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d154      	bne.n	8000bdc <__aeabi_fdiv+0x118>
 8000b32:	2308      	movs	r3, #8
 8000b34:	4699      	mov	r9, r3
 8000b36:	3b06      	subs	r3, #6
 8000b38:	26ff      	movs	r6, #255	; 0xff
 8000b3a:	469b      	mov	fp, r3
 8000b3c:	e7da      	b.n	8000af4 <__aeabi_fdiv+0x30>
 8000b3e:	2500      	movs	r5, #0
 8000b40:	4653      	mov	r3, sl
 8000b42:	2902      	cmp	r1, #2
 8000b44:	d01b      	beq.n	8000b7e <__aeabi_fdiv+0xba>
 8000b46:	2903      	cmp	r1, #3
 8000b48:	d100      	bne.n	8000b4c <__aeabi_fdiv+0x88>
 8000b4a:	e0bf      	b.n	8000ccc <__aeabi_fdiv+0x208>
 8000b4c:	2901      	cmp	r1, #1
 8000b4e:	d028      	beq.n	8000ba2 <__aeabi_fdiv+0xde>
 8000b50:	0030      	movs	r0, r6
 8000b52:	307f      	adds	r0, #127	; 0x7f
 8000b54:	2800      	cmp	r0, #0
 8000b56:	dd20      	ble.n	8000b9a <__aeabi_fdiv+0xd6>
 8000b58:	076a      	lsls	r2, r5, #29
 8000b5a:	d004      	beq.n	8000b66 <__aeabi_fdiv+0xa2>
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	402a      	ands	r2, r5
 8000b60:	2a04      	cmp	r2, #4
 8000b62:	d000      	beq.n	8000b66 <__aeabi_fdiv+0xa2>
 8000b64:	3504      	adds	r5, #4
 8000b66:	012a      	lsls	r2, r5, #4
 8000b68:	d503      	bpl.n	8000b72 <__aeabi_fdiv+0xae>
 8000b6a:	0030      	movs	r0, r6
 8000b6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ce0 <__aeabi_fdiv+0x21c>)
 8000b6e:	3080      	adds	r0, #128	; 0x80
 8000b70:	4015      	ands	r5, r2
 8000b72:	28fe      	cmp	r0, #254	; 0xfe
 8000b74:	dc03      	bgt.n	8000b7e <__aeabi_fdiv+0xba>
 8000b76:	01ac      	lsls	r4, r5, #6
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	b2c2      	uxtb	r2, r0
 8000b7c:	e001      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	2400      	movs	r4, #0
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	05d2      	lsls	r2, r2, #23
 8000b86:	0a60      	lsrs	r0, r4, #9
 8000b88:	07db      	lsls	r3, r3, #31
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	4318      	orrs	r0, r3
 8000b8e:	bc3c      	pop	{r2, r3, r4, r5}
 8000b90:	4690      	mov	r8, r2
 8000b92:	4699      	mov	r9, r3
 8000b94:	46a2      	mov	sl, r4
 8000b96:	46ab      	mov	fp, r5
 8000b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	1a10      	subs	r0, r2, r0
 8000b9e:	281b      	cmp	r0, #27
 8000ba0:	dd7c      	ble.n	8000c9c <__aeabi_fdiv+0x1d8>
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	e7ec      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d11d      	bne.n	8000be8 <__aeabi_fdiv+0x124>
 8000bac:	2304      	movs	r3, #4
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	469b      	mov	fp, r3
 8000bb6:	e79d      	b.n	8000af4 <__aeabi_fdiv+0x30>
 8000bb8:	3eff      	subs	r6, #255	; 0xff
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d120      	bne.n	8000c00 <__aeabi_fdiv+0x13c>
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	407b      	eors	r3, r7
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	2a0f      	cmp	r2, #15
 8000bca:	d8d8      	bhi.n	8000b7e <__aeabi_fdiv+0xba>
 8000bcc:	4845      	ldr	r0, [pc, #276]	; (8000ce4 <__aeabi_fdiv+0x220>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2d00      	cmp	r5, #0
 8000bd6:	d119      	bne.n	8000c0c <__aeabi_fdiv+0x148>
 8000bd8:	2101      	movs	r1, #1
 8000bda:	e7f1      	b.n	8000bc0 <__aeabi_fdiv+0xfc>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	4699      	mov	r9, r3
 8000be0:	3b09      	subs	r3, #9
 8000be2:	26ff      	movs	r6, #255	; 0xff
 8000be4:	469b      	mov	fp, r3
 8000be6:	e785      	b.n	8000af4 <__aeabi_fdiv+0x30>
 8000be8:	0020      	movs	r0, r4
 8000bea:	f002 fa6d 	bl	80030c8 <__clzsi2>
 8000bee:	2676      	movs	r6, #118	; 0x76
 8000bf0:	1f43      	subs	r3, r0, #5
 8000bf2:	409c      	lsls	r4, r3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4276      	negs	r6, r6
 8000bf8:	1a36      	subs	r6, r6, r0
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	e779      	b.n	8000af4 <__aeabi_fdiv+0x30>
 8000c00:	464a      	mov	r2, r9
 8000c02:	2303      	movs	r3, #3
 8000c04:	431a      	orrs	r2, r3
 8000c06:	4691      	mov	r9, r2
 8000c08:	2103      	movs	r1, #3
 8000c0a:	e786      	b.n	8000b1a <__aeabi_fdiv+0x56>
 8000c0c:	0028      	movs	r0, r5
 8000c0e:	f002 fa5b 	bl	80030c8 <__clzsi2>
 8000c12:	1f43      	subs	r3, r0, #5
 8000c14:	1836      	adds	r6, r6, r0
 8000c16:	409d      	lsls	r5, r3
 8000c18:	3676      	adds	r6, #118	; 0x76
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	e77d      	b.n	8000b1a <__aeabi_fdiv+0x56>
 8000c1e:	2480      	movs	r4, #128	; 0x80
 8000c20:	2300      	movs	r3, #0
 8000c22:	03e4      	lsls	r4, r4, #15
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	e7ac      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000c28:	2500      	movs	r5, #0
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	03db      	lsls	r3, r3, #15
 8000c2e:	421c      	tst	r4, r3
 8000c30:	d028      	beq.n	8000c84 <__aeabi_fdiv+0x1c0>
 8000c32:	421d      	tst	r5, r3
 8000c34:	d126      	bne.n	8000c84 <__aeabi_fdiv+0x1c0>
 8000c36:	432b      	orrs	r3, r5
 8000c38:	025c      	lsls	r4, r3, #9
 8000c3a:	0a64      	lsrs	r4, r4, #9
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	e79f      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000c42:	0162      	lsls	r2, r4, #5
 8000c44:	016c      	lsls	r4, r5, #5
 8000c46:	42a2      	cmp	r2, r4
 8000c48:	d224      	bcs.n	8000c94 <__aeabi_fdiv+0x1d0>
 8000c4a:	211b      	movs	r1, #27
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	3e01      	subs	r6, #1
 8000c50:	2701      	movs	r7, #1
 8000c52:	0010      	movs	r0, r2
 8000c54:	006d      	lsls	r5, r5, #1
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	db01      	blt.n	8000c60 <__aeabi_fdiv+0x19c>
 8000c5c:	4294      	cmp	r4, r2
 8000c5e:	d801      	bhi.n	8000c64 <__aeabi_fdiv+0x1a0>
 8000c60:	1b12      	subs	r2, r2, r4
 8000c62:	433d      	orrs	r5, r7
 8000c64:	3901      	subs	r1, #1
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d1f3      	bne.n	8000c52 <__aeabi_fdiv+0x18e>
 8000c6a:	0014      	movs	r4, r2
 8000c6c:	1e62      	subs	r2, r4, #1
 8000c6e:	4194      	sbcs	r4, r2
 8000c70:	4325      	orrs	r5, r4
 8000c72:	e76d      	b.n	8000b50 <__aeabi_fdiv+0x8c>
 8000c74:	46ba      	mov	sl, r7
 8000c76:	4659      	mov	r1, fp
 8000c78:	0025      	movs	r5, r4
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	2902      	cmp	r1, #2
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fdiv+0x1be>
 8000c80:	e761      	b.n	8000b46 <__aeabi_fdiv+0x82>
 8000c82:	e77c      	b.n	8000b7e <__aeabi_fdiv+0xba>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	03db      	lsls	r3, r3, #15
 8000c88:	431c      	orrs	r4, r3
 8000c8a:	0264      	lsls	r4, r4, #9
 8000c8c:	0a64      	lsrs	r4, r4, #9
 8000c8e:	003b      	movs	r3, r7
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	e776      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000c94:	1b12      	subs	r2, r2, r4
 8000c96:	211a      	movs	r1, #26
 8000c98:	2501      	movs	r5, #1
 8000c9a:	e7d9      	b.n	8000c50 <__aeabi_fdiv+0x18c>
 8000c9c:	369e      	adds	r6, #158	; 0x9e
 8000c9e:	002a      	movs	r2, r5
 8000ca0:	40b5      	lsls	r5, r6
 8000ca2:	002c      	movs	r4, r5
 8000ca4:	40c2      	lsrs	r2, r0
 8000ca6:	1e65      	subs	r5, r4, #1
 8000ca8:	41ac      	sbcs	r4, r5
 8000caa:	4314      	orrs	r4, r2
 8000cac:	0762      	lsls	r2, r4, #29
 8000cae:	d004      	beq.n	8000cba <__aeabi_fdiv+0x1f6>
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	4022      	ands	r2, r4
 8000cb4:	2a04      	cmp	r2, #4
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fdiv+0x1f6>
 8000cb8:	3404      	adds	r4, #4
 8000cba:	0162      	lsls	r2, r4, #5
 8000cbc:	d403      	bmi.n	8000cc6 <__aeabi_fdiv+0x202>
 8000cbe:	01a4      	lsls	r4, r4, #6
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e75d      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2400      	movs	r4, #0
 8000cca:	e75a      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000ccc:	2480      	movs	r4, #128	; 0x80
 8000cce:	03e4      	lsls	r4, r4, #15
 8000cd0:	432c      	orrs	r4, r5
 8000cd2:	0264      	lsls	r4, r4, #9
 8000cd4:	0a64      	lsrs	r4, r4, #9
 8000cd6:	22ff      	movs	r2, #255	; 0xff
 8000cd8:	e753      	b.n	8000b82 <__aeabi_fdiv+0xbe>
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	0800d3e4 	.word	0x0800d3e4
 8000ce0:	f7ffffff 	.word	0xf7ffffff
 8000ce4:	0800d424 	.word	0x0800d424

08000ce8 <__eqsf2>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	0042      	lsls	r2, r0, #1
 8000cec:	024e      	lsls	r6, r1, #9
 8000cee:	004c      	lsls	r4, r1, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	0a6d      	lsrs	r5, r5, #9
 8000cf4:	0e12      	lsrs	r2, r2, #24
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a76      	lsrs	r6, r6, #9
 8000cfa:	0e24      	lsrs	r4, r4, #24
 8000cfc:	0fc9      	lsrs	r1, r1, #31
 8000cfe:	2aff      	cmp	r2, #255	; 0xff
 8000d00:	d00f      	beq.n	8000d22 <__eqsf2+0x3a>
 8000d02:	2cff      	cmp	r4, #255	; 0xff
 8000d04:	d011      	beq.n	8000d2a <__eqsf2+0x42>
 8000d06:	2001      	movs	r0, #1
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	d000      	beq.n	8000d0e <__eqsf2+0x26>
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
 8000d0e:	42b5      	cmp	r5, r6
 8000d10:	d1fc      	bne.n	8000d0c <__eqsf2+0x24>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d00d      	beq.n	8000d32 <__eqsf2+0x4a>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d1f8      	bne.n	8000d0c <__eqsf2+0x24>
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	1e45      	subs	r5, r0, #1
 8000d1e:	41a8      	sbcs	r0, r5
 8000d20:	e7f4      	b.n	8000d0c <__eqsf2+0x24>
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d1f1      	bne.n	8000d0c <__eqsf2+0x24>
 8000d28:	e7eb      	b.n	8000d02 <__eqsf2+0x1a>
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d1ed      	bne.n	8000d0c <__eqsf2+0x24>
 8000d30:	e7e9      	b.n	8000d06 <__eqsf2+0x1e>
 8000d32:	2000      	movs	r0, #0
 8000d34:	e7ea      	b.n	8000d0c <__eqsf2+0x24>
 8000d36:	46c0      	nop			; (mov r8, r8)

08000d38 <__gesf2>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	004a      	lsls	r2, r1, #1
 8000d3c:	024e      	lsls	r6, r1, #9
 8000d3e:	0245      	lsls	r5, r0, #9
 8000d40:	0044      	lsls	r4, r0, #1
 8000d42:	0a6d      	lsrs	r5, r5, #9
 8000d44:	0e24      	lsrs	r4, r4, #24
 8000d46:	0fc3      	lsrs	r3, r0, #31
 8000d48:	0a76      	lsrs	r6, r6, #9
 8000d4a:	0e12      	lsrs	r2, r2, #24
 8000d4c:	0fc9      	lsrs	r1, r1, #31
 8000d4e:	2cff      	cmp	r4, #255	; 0xff
 8000d50:	d015      	beq.n	8000d7e <__gesf2+0x46>
 8000d52:	2aff      	cmp	r2, #255	; 0xff
 8000d54:	d00e      	beq.n	8000d74 <__gesf2+0x3c>
 8000d56:	2c00      	cmp	r4, #0
 8000d58:	d115      	bne.n	8000d86 <__gesf2+0x4e>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d101      	bne.n	8000d62 <__gesf2+0x2a>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d01c      	beq.n	8000d9c <__gesf2+0x64>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d014      	beq.n	8000d90 <__gesf2+0x58>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d027      	beq.n	8000dba <__gesf2+0x82>
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4018      	ands	r0, r3
 8000d70:	3801      	subs	r0, #1
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d0ee      	beq.n	8000d56 <__gesf2+0x1e>
 8000d78:	2002      	movs	r0, #2
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	e7f9      	b.n	8000d72 <__gesf2+0x3a>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d1fa      	bne.n	8000d78 <__gesf2+0x40>
 8000d82:	2aff      	cmp	r2, #255	; 0xff
 8000d84:	d00e      	beq.n	8000da4 <__gesf2+0x6c>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d10e      	bne.n	8000da8 <__gesf2+0x70>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d0ed      	beq.n	8000d6a <__gesf2+0x32>
 8000d8e:	e00b      	b.n	8000da8 <__gesf2+0x70>
 8000d90:	2301      	movs	r3, #1
 8000d92:	3901      	subs	r1, #1
 8000d94:	4399      	bics	r1, r3
 8000d96:	0008      	movs	r0, r1
 8000d98:	3001      	adds	r0, #1
 8000d9a:	e7ea      	b.n	8000d72 <__gesf2+0x3a>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d0e7      	beq.n	8000d72 <__gesf2+0x3a>
 8000da2:	e7e2      	b.n	8000d6a <__gesf2+0x32>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d1e7      	bne.n	8000d78 <__gesf2+0x40>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d1de      	bne.n	8000d6a <__gesf2+0x32>
 8000dac:	4294      	cmp	r4, r2
 8000dae:	dd05      	ble.n	8000dbc <__gesf2+0x84>
 8000db0:	2102      	movs	r1, #2
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	4008      	ands	r0, r1
 8000db6:	3801      	subs	r0, #1
 8000db8:	e7db      	b.n	8000d72 <__gesf2+0x3a>
 8000dba:	2400      	movs	r4, #0
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	dc04      	bgt.n	8000dca <__gesf2+0x92>
 8000dc0:	42b5      	cmp	r5, r6
 8000dc2:	d8d2      	bhi.n	8000d6a <__gesf2+0x32>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	42b5      	cmp	r5, r6
 8000dc8:	d2d3      	bcs.n	8000d72 <__gesf2+0x3a>
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4398      	bics	r0, r3
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	e7ce      	b.n	8000d72 <__gesf2+0x3a>

08000dd4 <__lesf2>:
 8000dd4:	b530      	push	{r4, r5, lr}
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	0244      	lsls	r4, r0, #9
 8000dda:	024d      	lsls	r5, r1, #9
 8000ddc:	0fc3      	lsrs	r3, r0, #31
 8000dde:	0048      	lsls	r0, r1, #1
 8000de0:	0a64      	lsrs	r4, r4, #9
 8000de2:	0e12      	lsrs	r2, r2, #24
 8000de4:	0a6d      	lsrs	r5, r5, #9
 8000de6:	0e00      	lsrs	r0, r0, #24
 8000de8:	0fc9      	lsrs	r1, r1, #31
 8000dea:	2aff      	cmp	r2, #255	; 0xff
 8000dec:	d012      	beq.n	8000e14 <__lesf2+0x40>
 8000dee:	28ff      	cmp	r0, #255	; 0xff
 8000df0:	d00c      	beq.n	8000e0c <__lesf2+0x38>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d112      	bne.n	8000e1c <__lesf2+0x48>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d119      	bne.n	8000e2e <__lesf2+0x5a>
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d117      	bne.n	8000e2e <__lesf2+0x5a>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d02b      	beq.n	8000e5a <__lesf2+0x86>
 8000e02:	2002      	movs	r0, #2
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4018      	ands	r0, r3
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e026      	b.n	8000e5a <__lesf2+0x86>
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0f0      	beq.n	8000df2 <__lesf2+0x1e>
 8000e10:	2002      	movs	r0, #2
 8000e12:	e022      	b.n	8000e5a <__lesf2+0x86>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d1fb      	bne.n	8000e10 <__lesf2+0x3c>
 8000e18:	28ff      	cmp	r0, #255	; 0xff
 8000e1a:	d01f      	beq.n	8000e5c <__lesf2+0x88>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d11f      	bne.n	8000e60 <__lesf2+0x8c>
 8000e20:	2d00      	cmp	r5, #0
 8000e22:	d11d      	bne.n	8000e60 <__lesf2+0x8c>
 8000e24:	2002      	movs	r0, #2
 8000e26:	3b01      	subs	r3, #1
 8000e28:	4018      	ands	r0, r3
 8000e2a:	3801      	subs	r0, #1
 8000e2c:	e015      	b.n	8000e5a <__lesf2+0x86>
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	d00e      	beq.n	8000e50 <__lesf2+0x7c>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d1e5      	bne.n	8000e02 <__lesf2+0x2e>
 8000e36:	2200      	movs	r2, #0
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	dc04      	bgt.n	8000e46 <__lesf2+0x72>
 8000e3c:	42ac      	cmp	r4, r5
 8000e3e:	d8e0      	bhi.n	8000e02 <__lesf2+0x2e>
 8000e40:	2000      	movs	r0, #0
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d209      	bcs.n	8000e5a <__lesf2+0x86>
 8000e46:	1e58      	subs	r0, r3, #1
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4398      	bics	r0, r3
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	e004      	b.n	8000e5a <__lesf2+0x86>
 8000e50:	2301      	movs	r3, #1
 8000e52:	3901      	subs	r1, #1
 8000e54:	4399      	bics	r1, r3
 8000e56:	0008      	movs	r0, r1
 8000e58:	3001      	adds	r0, #1
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	d1d7      	bne.n	8000e10 <__lesf2+0x3c>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d1ce      	bne.n	8000e02 <__lesf2+0x2e>
 8000e64:	4282      	cmp	r2, r0
 8000e66:	dde7      	ble.n	8000e38 <__lesf2+0x64>
 8000e68:	2102      	movs	r1, #2
 8000e6a:	1e58      	subs	r0, r3, #1
 8000e6c:	4008      	ands	r0, r1
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7f3      	b.n	8000e5a <__lesf2+0x86>
 8000e72:	46c0      	nop			; (mov r8, r8)

08000e74 <__aeabi_fmul>:
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	464e      	mov	r6, r9
 8000e78:	4657      	mov	r7, sl
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	46de      	mov	lr, fp
 8000e7e:	b5e0      	push	{r5, r6, r7, lr}
 8000e80:	0243      	lsls	r3, r0, #9
 8000e82:	0a5b      	lsrs	r3, r3, #9
 8000e84:	0045      	lsls	r5, r0, #1
 8000e86:	b083      	sub	sp, #12
 8000e88:	1c0f      	adds	r7, r1, #0
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	0e2d      	lsrs	r5, r5, #24
 8000e8e:	0fc6      	lsrs	r6, r0, #31
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d057      	beq.n	8000f44 <__aeabi_fmul+0xd0>
 8000e94:	2dff      	cmp	r5, #255	; 0xff
 8000e96:	d024      	beq.n	8000ee2 <__aeabi_fmul+0x6e>
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	04c0      	lsls	r0, r0, #19
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	469a      	mov	sl, r3
 8000ea6:	469b      	mov	fp, r3
 8000ea8:	3d7f      	subs	r5, #127	; 0x7f
 8000eaa:	027c      	lsls	r4, r7, #9
 8000eac:	007a      	lsls	r2, r7, #1
 8000eae:	0ffb      	lsrs	r3, r7, #31
 8000eb0:	0a64      	lsrs	r4, r4, #9
 8000eb2:	0e12      	lsrs	r2, r2, #24
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	d023      	beq.n	8000f00 <__aeabi_fmul+0x8c>
 8000eb8:	2aff      	cmp	r2, #255	; 0xff
 8000eba:	d04b      	beq.n	8000f54 <__aeabi_fmul+0xe0>
 8000ebc:	00e3      	lsls	r3, r4, #3
 8000ebe:	2480      	movs	r4, #128	; 0x80
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	04e4      	lsls	r4, r4, #19
 8000ec4:	3a7f      	subs	r2, #127	; 0x7f
 8000ec6:	431c      	orrs	r4, r3
 8000ec8:	18ad      	adds	r5, r5, r2
 8000eca:	1c6b      	adds	r3, r5, #1
 8000ecc:	4647      	mov	r7, r8
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	4077      	eors	r7, r6
 8000ed4:	003a      	movs	r2, r7
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	d848      	bhi.n	8000f6c <__aeabi_fmul+0xf8>
 8000eda:	497d      	ldr	r1, [pc, #500]	; (80010d0 <__aeabi_fmul+0x25c>)
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	58cb      	ldr	r3, [r1, r3]
 8000ee0:	469f      	mov	pc, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_fmul+0x74>
 8000ee6:	e085      	b.n	8000ff4 <__aeabi_fmul+0x180>
 8000ee8:	3308      	adds	r3, #8
 8000eea:	469a      	mov	sl, r3
 8000eec:	3b06      	subs	r3, #6
 8000eee:	469b      	mov	fp, r3
 8000ef0:	027c      	lsls	r4, r7, #9
 8000ef2:	007a      	lsls	r2, r7, #1
 8000ef4:	0ffb      	lsrs	r3, r7, #31
 8000ef6:	25ff      	movs	r5, #255	; 0xff
 8000ef8:	0a64      	lsrs	r4, r4, #9
 8000efa:	0e12      	lsrs	r2, r2, #24
 8000efc:	4698      	mov	r8, r3
 8000efe:	d1db      	bne.n	8000eb8 <__aeabi_fmul+0x44>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d000      	beq.n	8000f06 <__aeabi_fmul+0x92>
 8000f04:	e090      	b.n	8001028 <__aeabi_fmul+0x1b4>
 8000f06:	4652      	mov	r2, sl
 8000f08:	2301      	movs	r3, #1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	4692      	mov	sl, r2
 8000f0e:	2001      	movs	r0, #1
 8000f10:	e7db      	b.n	8000eca <__aeabi_fmul+0x56>
 8000f12:	464c      	mov	r4, r9
 8000f14:	4658      	mov	r0, fp
 8000f16:	0017      	movs	r7, r2
 8000f18:	2802      	cmp	r0, #2
 8000f1a:	d024      	beq.n	8000f66 <__aeabi_fmul+0xf2>
 8000f1c:	2803      	cmp	r0, #3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_fmul+0xae>
 8000f20:	e0cf      	b.n	80010c2 <__aeabi_fmul+0x24e>
 8000f22:	2200      	movs	r2, #0
 8000f24:	2300      	movs	r3, #0
 8000f26:	2801      	cmp	r0, #1
 8000f28:	d14d      	bne.n	8000fc6 <__aeabi_fmul+0x152>
 8000f2a:	0258      	lsls	r0, r3, #9
 8000f2c:	05d2      	lsls	r2, r2, #23
 8000f2e:	0a40      	lsrs	r0, r0, #9
 8000f30:	07ff      	lsls	r7, r7, #31
 8000f32:	4310      	orrs	r0, r2
 8000f34:	4338      	orrs	r0, r7
 8000f36:	b003      	add	sp, #12
 8000f38:	bc3c      	pop	{r2, r3, r4, r5}
 8000f3a:	4690      	mov	r8, r2
 8000f3c:	4699      	mov	r9, r3
 8000f3e:	46a2      	mov	sl, r4
 8000f40:	46ab      	mov	fp, r5
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d15b      	bne.n	8001000 <__aeabi_fmul+0x18c>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	469a      	mov	sl, r3
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	2500      	movs	r5, #0
 8000f50:	469b      	mov	fp, r3
 8000f52:	e7aa      	b.n	8000eaa <__aeabi_fmul+0x36>
 8000f54:	35ff      	adds	r5, #255	; 0xff
 8000f56:	2c00      	cmp	r4, #0
 8000f58:	d160      	bne.n	800101c <__aeabi_fmul+0x1a8>
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	4692      	mov	sl, r2
 8000f62:	2002      	movs	r0, #2
 8000f64:	e7b1      	b.n	8000eca <__aeabi_fmul+0x56>
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e7de      	b.n	8000f2a <__aeabi_fmul+0xb6>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	469c      	mov	ip, r3
 8000f72:	464b      	mov	r3, r9
 8000f74:	0426      	lsls	r6, r4, #16
 8000f76:	0c36      	lsrs	r6, r6, #16
 8000f78:	0418      	lsls	r0, r3, #16
 8000f7a:	4661      	mov	r1, ip
 8000f7c:	0033      	movs	r3, r6
 8000f7e:	0c22      	lsrs	r2, r4, #16
 8000f80:	4664      	mov	r4, ip
 8000f82:	0c00      	lsrs	r0, r0, #16
 8000f84:	4343      	muls	r3, r0
 8000f86:	434e      	muls	r6, r1
 8000f88:	4350      	muls	r0, r2
 8000f8a:	4354      	muls	r4, r2
 8000f8c:	1980      	adds	r0, r0, r6
 8000f8e:	0c1a      	lsrs	r2, r3, #16
 8000f90:	1812      	adds	r2, r2, r0
 8000f92:	4296      	cmp	r6, r2
 8000f94:	d903      	bls.n	8000f9e <__aeabi_fmul+0x12a>
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	468c      	mov	ip, r1
 8000f9c:	4464      	add	r4, ip
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	0410      	lsls	r0, r2, #16
 8000fa4:	18c0      	adds	r0, r0, r3
 8000fa6:	0183      	lsls	r3, r0, #6
 8000fa8:	1e5e      	subs	r6, r3, #1
 8000faa:	41b3      	sbcs	r3, r6
 8000fac:	0e80      	lsrs	r0, r0, #26
 8000fae:	4318      	orrs	r0, r3
 8000fb0:	0c13      	lsrs	r3, r2, #16
 8000fb2:	191b      	adds	r3, r3, r4
 8000fb4:	019b      	lsls	r3, r3, #6
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	001c      	movs	r4, r3
 8000fba:	0123      	lsls	r3, r4, #4
 8000fbc:	d579      	bpl.n	80010b2 <__aeabi_fmul+0x23e>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	0862      	lsrs	r2, r4, #1
 8000fc2:	401c      	ands	r4, r3
 8000fc4:	4314      	orrs	r4, r2
 8000fc6:	9a01      	ldr	r2, [sp, #4]
 8000fc8:	327f      	adds	r2, #127	; 0x7f
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	dd4d      	ble.n	800106a <__aeabi_fmul+0x1f6>
 8000fce:	0763      	lsls	r3, r4, #29
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_fmul+0x168>
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	4023      	ands	r3, r4
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fmul+0x168>
 8000fda:	3404      	adds	r4, #4
 8000fdc:	0123      	lsls	r3, r4, #4
 8000fde:	d503      	bpl.n	8000fe8 <__aeabi_fmul+0x174>
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <__aeabi_fmul+0x260>)
 8000fe2:	9a01      	ldr	r2, [sp, #4]
 8000fe4:	401c      	ands	r4, r3
 8000fe6:	3280      	adds	r2, #128	; 0x80
 8000fe8:	2afe      	cmp	r2, #254	; 0xfe
 8000fea:	dcbc      	bgt.n	8000f66 <__aeabi_fmul+0xf2>
 8000fec:	01a3      	lsls	r3, r4, #6
 8000fee:	0a5b      	lsrs	r3, r3, #9
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	e79a      	b.n	8000f2a <__aeabi_fmul+0xb6>
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	3b09      	subs	r3, #9
 8000ffa:	25ff      	movs	r5, #255	; 0xff
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	e754      	b.n	8000eaa <__aeabi_fmul+0x36>
 8001000:	0018      	movs	r0, r3
 8001002:	f002 f861 	bl	80030c8 <__clzsi2>
 8001006:	464a      	mov	r2, r9
 8001008:	1f43      	subs	r3, r0, #5
 800100a:	2576      	movs	r5, #118	; 0x76
 800100c:	409a      	lsls	r2, r3
 800100e:	2300      	movs	r3, #0
 8001010:	426d      	negs	r5, r5
 8001012:	4691      	mov	r9, r2
 8001014:	1a2d      	subs	r5, r5, r0
 8001016:	469a      	mov	sl, r3
 8001018:	469b      	mov	fp, r3
 800101a:	e746      	b.n	8000eaa <__aeabi_fmul+0x36>
 800101c:	4652      	mov	r2, sl
 800101e:	2303      	movs	r3, #3
 8001020:	431a      	orrs	r2, r3
 8001022:	4692      	mov	sl, r2
 8001024:	2003      	movs	r0, #3
 8001026:	e750      	b.n	8000eca <__aeabi_fmul+0x56>
 8001028:	0020      	movs	r0, r4
 800102a:	f002 f84d 	bl	80030c8 <__clzsi2>
 800102e:	1f43      	subs	r3, r0, #5
 8001030:	1a2d      	subs	r5, r5, r0
 8001032:	409c      	lsls	r4, r3
 8001034:	3d76      	subs	r5, #118	; 0x76
 8001036:	2000      	movs	r0, #0
 8001038:	e747      	b.n	8000eca <__aeabi_fmul+0x56>
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	2700      	movs	r7, #0
 800103e:	03db      	lsls	r3, r3, #15
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	e772      	b.n	8000f2a <__aeabi_fmul+0xb6>
 8001044:	4642      	mov	r2, r8
 8001046:	e766      	b.n	8000f16 <__aeabi_fmul+0xa2>
 8001048:	464c      	mov	r4, r9
 800104a:	0032      	movs	r2, r6
 800104c:	4658      	mov	r0, fp
 800104e:	e762      	b.n	8000f16 <__aeabi_fmul+0xa2>
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	464a      	mov	r2, r9
 8001054:	03db      	lsls	r3, r3, #15
 8001056:	421a      	tst	r2, r3
 8001058:	d022      	beq.n	80010a0 <__aeabi_fmul+0x22c>
 800105a:	421c      	tst	r4, r3
 800105c:	d120      	bne.n	80010a0 <__aeabi_fmul+0x22c>
 800105e:	4323      	orrs	r3, r4
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	4647      	mov	r7, r8
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0xb6>
 800106a:	2301      	movs	r3, #1
 800106c:	1a9a      	subs	r2, r3, r2
 800106e:	2a1b      	cmp	r2, #27
 8001070:	dc21      	bgt.n	80010b6 <__aeabi_fmul+0x242>
 8001072:	0023      	movs	r3, r4
 8001074:	9901      	ldr	r1, [sp, #4]
 8001076:	40d3      	lsrs	r3, r2
 8001078:	319e      	adds	r1, #158	; 0x9e
 800107a:	408c      	lsls	r4, r1
 800107c:	001a      	movs	r2, r3
 800107e:	0023      	movs	r3, r4
 8001080:	1e5c      	subs	r4, r3, #1
 8001082:	41a3      	sbcs	r3, r4
 8001084:	4313      	orrs	r3, r2
 8001086:	075a      	lsls	r2, r3, #29
 8001088:	d004      	beq.n	8001094 <__aeabi_fmul+0x220>
 800108a:	220f      	movs	r2, #15
 800108c:	401a      	ands	r2, r3
 800108e:	2a04      	cmp	r2, #4
 8001090:	d000      	beq.n	8001094 <__aeabi_fmul+0x220>
 8001092:	3304      	adds	r3, #4
 8001094:	015a      	lsls	r2, r3, #5
 8001096:	d411      	bmi.n	80010bc <__aeabi_fmul+0x248>
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	0a5b      	lsrs	r3, r3, #9
 800109c:	2200      	movs	r2, #0
 800109e:	e744      	b.n	8000f2a <__aeabi_fmul+0xb6>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	464a      	mov	r2, r9
 80010a4:	03db      	lsls	r3, r3, #15
 80010a6:	4313      	orrs	r3, r2
 80010a8:	025b      	lsls	r3, r3, #9
 80010aa:	0a5b      	lsrs	r3, r3, #9
 80010ac:	0037      	movs	r7, r6
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	e73b      	b.n	8000f2a <__aeabi_fmul+0xb6>
 80010b2:	9501      	str	r5, [sp, #4]
 80010b4:	e787      	b.n	8000fc6 <__aeabi_fmul+0x152>
 80010b6:	2200      	movs	r2, #0
 80010b8:	2300      	movs	r3, #0
 80010ba:	e736      	b.n	8000f2a <__aeabi_fmul+0xb6>
 80010bc:	2201      	movs	r2, #1
 80010be:	2300      	movs	r3, #0
 80010c0:	e733      	b.n	8000f2a <__aeabi_fmul+0xb6>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	4323      	orrs	r3, r4
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	0a5b      	lsrs	r3, r3, #9
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	e72c      	b.n	8000f2a <__aeabi_fmul+0xb6>
 80010d0:	0800d464 	.word	0x0800d464
 80010d4:	f7ffffff 	.word	0xf7ffffff

080010d8 <__aeabi_fsub>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	4647      	mov	r7, r8
 80010dc:	46ce      	mov	lr, r9
 80010de:	0044      	lsls	r4, r0, #1
 80010e0:	0fc2      	lsrs	r2, r0, #31
 80010e2:	b580      	push	{r7, lr}
 80010e4:	0247      	lsls	r7, r0, #9
 80010e6:	0248      	lsls	r0, r1, #9
 80010e8:	0a40      	lsrs	r0, r0, #9
 80010ea:	4684      	mov	ip, r0
 80010ec:	4666      	mov	r6, ip
 80010ee:	0048      	lsls	r0, r1, #1
 80010f0:	0a7f      	lsrs	r7, r7, #9
 80010f2:	0e24      	lsrs	r4, r4, #24
 80010f4:	00f6      	lsls	r6, r6, #3
 80010f6:	0025      	movs	r5, r4
 80010f8:	4690      	mov	r8, r2
 80010fa:	00fb      	lsls	r3, r7, #3
 80010fc:	0e00      	lsrs	r0, r0, #24
 80010fe:	0fc9      	lsrs	r1, r1, #31
 8001100:	46b1      	mov	r9, r6
 8001102:	28ff      	cmp	r0, #255	; 0xff
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x30>
 8001106:	e085      	b.n	8001214 <__aeabi_fsub+0x13c>
 8001108:	2601      	movs	r6, #1
 800110a:	4071      	eors	r1, r6
 800110c:	1a26      	subs	r6, r4, r0
 800110e:	4291      	cmp	r1, r2
 8001110:	d057      	beq.n	80011c2 <__aeabi_fsub+0xea>
 8001112:	2e00      	cmp	r6, #0
 8001114:	dd43      	ble.n	800119e <__aeabi_fsub+0xc6>
 8001116:	2800      	cmp	r0, #0
 8001118:	d000      	beq.n	800111c <__aeabi_fsub+0x44>
 800111a:	e07f      	b.n	800121c <__aeabi_fsub+0x144>
 800111c:	4649      	mov	r1, r9
 800111e:	2900      	cmp	r1, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_fsub+0x4c>
 8001122:	e0aa      	b.n	800127a <__aeabi_fsub+0x1a2>
 8001124:	3e01      	subs	r6, #1
 8001126:	2e00      	cmp	r6, #0
 8001128:	d000      	beq.n	800112c <__aeabi_fsub+0x54>
 800112a:	e0f7      	b.n	800131c <__aeabi_fsub+0x244>
 800112c:	1a5b      	subs	r3, r3, r1
 800112e:	015a      	lsls	r2, r3, #5
 8001130:	d400      	bmi.n	8001134 <__aeabi_fsub+0x5c>
 8001132:	e08b      	b.n	800124c <__aeabi_fsub+0x174>
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	099c      	lsrs	r4, r3, #6
 8001138:	0020      	movs	r0, r4
 800113a:	f001 ffc5 	bl	80030c8 <__clzsi2>
 800113e:	3805      	subs	r0, #5
 8001140:	4084      	lsls	r4, r0
 8001142:	4285      	cmp	r5, r0
 8001144:	dd00      	ble.n	8001148 <__aeabi_fsub+0x70>
 8001146:	e0d3      	b.n	80012f0 <__aeabi_fsub+0x218>
 8001148:	1b45      	subs	r5, r0, r5
 800114a:	0023      	movs	r3, r4
 800114c:	2020      	movs	r0, #32
 800114e:	3501      	adds	r5, #1
 8001150:	40eb      	lsrs	r3, r5
 8001152:	1b45      	subs	r5, r0, r5
 8001154:	40ac      	lsls	r4, r5
 8001156:	1e62      	subs	r2, r4, #1
 8001158:	4194      	sbcs	r4, r2
 800115a:	4323      	orrs	r3, r4
 800115c:	2407      	movs	r4, #7
 800115e:	2500      	movs	r5, #0
 8001160:	401c      	ands	r4, r3
 8001162:	2201      	movs	r2, #1
 8001164:	4641      	mov	r1, r8
 8001166:	400a      	ands	r2, r1
 8001168:	2c00      	cmp	r4, #0
 800116a:	d004      	beq.n	8001176 <__aeabi_fsub+0x9e>
 800116c:	210f      	movs	r1, #15
 800116e:	4019      	ands	r1, r3
 8001170:	2904      	cmp	r1, #4
 8001172:	d000      	beq.n	8001176 <__aeabi_fsub+0x9e>
 8001174:	3304      	adds	r3, #4
 8001176:	0159      	lsls	r1, r3, #5
 8001178:	d400      	bmi.n	800117c <__aeabi_fsub+0xa4>
 800117a:	e080      	b.n	800127e <__aeabi_fsub+0x1a6>
 800117c:	3501      	adds	r5, #1
 800117e:	b2ec      	uxtb	r4, r5
 8001180:	2dff      	cmp	r5, #255	; 0xff
 8001182:	d000      	beq.n	8001186 <__aeabi_fsub+0xae>
 8001184:	e0a3      	b.n	80012ce <__aeabi_fsub+0x1f6>
 8001186:	24ff      	movs	r4, #255	; 0xff
 8001188:	2300      	movs	r3, #0
 800118a:	025b      	lsls	r3, r3, #9
 800118c:	05e4      	lsls	r4, r4, #23
 800118e:	0a58      	lsrs	r0, r3, #9
 8001190:	07d2      	lsls	r2, r2, #31
 8001192:	4320      	orrs	r0, r4
 8001194:	4310      	orrs	r0, r2
 8001196:	bc0c      	pop	{r2, r3}
 8001198:	4690      	mov	r8, r2
 800119a:	4699      	mov	r9, r3
 800119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d174      	bne.n	800128c <__aeabi_fsub+0x1b4>
 80011a2:	1c60      	adds	r0, r4, #1
 80011a4:	b2c0      	uxtb	r0, r0
 80011a6:	2801      	cmp	r0, #1
 80011a8:	dc00      	bgt.n	80011ac <__aeabi_fsub+0xd4>
 80011aa:	e0a7      	b.n	80012fc <__aeabi_fsub+0x224>
 80011ac:	464a      	mov	r2, r9
 80011ae:	1a9c      	subs	r4, r3, r2
 80011b0:	0162      	lsls	r2, r4, #5
 80011b2:	d500      	bpl.n	80011b6 <__aeabi_fsub+0xde>
 80011b4:	e0b6      	b.n	8001324 <__aeabi_fsub+0x24c>
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d1be      	bne.n	8001138 <__aeabi_fsub+0x60>
 80011ba:	2200      	movs	r2, #0
 80011bc:	2400      	movs	r4, #0
 80011be:	2300      	movs	r3, #0
 80011c0:	e7e3      	b.n	800118a <__aeabi_fsub+0xb2>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_fsub+0xf0>
 80011c6:	e085      	b.n	80012d4 <__aeabi_fsub+0x1fc>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d046      	beq.n	800125a <__aeabi_fsub+0x182>
 80011cc:	2cff      	cmp	r4, #255	; 0xff
 80011ce:	d049      	beq.n	8001264 <__aeabi_fsub+0x18c>
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	4648      	mov	r0, r9
 80011d4:	04d2      	lsls	r2, r2, #19
 80011d6:	4310      	orrs	r0, r2
 80011d8:	4681      	mov	r9, r0
 80011da:	2201      	movs	r2, #1
 80011dc:	2e1b      	cmp	r6, #27
 80011de:	dc09      	bgt.n	80011f4 <__aeabi_fsub+0x11c>
 80011e0:	2020      	movs	r0, #32
 80011e2:	464c      	mov	r4, r9
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	4084      	lsls	r4, r0
 80011e8:	464a      	mov	r2, r9
 80011ea:	0020      	movs	r0, r4
 80011ec:	40f2      	lsrs	r2, r6
 80011ee:	1e44      	subs	r4, r0, #1
 80011f0:	41a0      	sbcs	r0, r4
 80011f2:	4302      	orrs	r2, r0
 80011f4:	189b      	adds	r3, r3, r2
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	d528      	bpl.n	800124c <__aeabi_fsub+0x174>
 80011fa:	3501      	adds	r5, #1
 80011fc:	2dff      	cmp	r5, #255	; 0xff
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x12a>
 8001200:	e0a8      	b.n	8001354 <__aeabi_fsub+0x27c>
 8001202:	2201      	movs	r2, #1
 8001204:	2407      	movs	r4, #7
 8001206:	4994      	ldr	r1, [pc, #592]	; (8001458 <__aeabi_fsub+0x380>)
 8001208:	401a      	ands	r2, r3
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	400b      	ands	r3, r1
 800120e:	4313      	orrs	r3, r2
 8001210:	401c      	ands	r4, r3
 8001212:	e7a6      	b.n	8001162 <__aeabi_fsub+0x8a>
 8001214:	2e00      	cmp	r6, #0
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x142>
 8001218:	e778      	b.n	800110c <__aeabi_fsub+0x34>
 800121a:	e775      	b.n	8001108 <__aeabi_fsub+0x30>
 800121c:	2cff      	cmp	r4, #255	; 0xff
 800121e:	d054      	beq.n	80012ca <__aeabi_fsub+0x1f2>
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	4649      	mov	r1, r9
 8001224:	04d2      	lsls	r2, r2, #19
 8001226:	4311      	orrs	r1, r2
 8001228:	4689      	mov	r9, r1
 800122a:	2201      	movs	r2, #1
 800122c:	2e1b      	cmp	r6, #27
 800122e:	dc09      	bgt.n	8001244 <__aeabi_fsub+0x16c>
 8001230:	2120      	movs	r1, #32
 8001232:	4648      	mov	r0, r9
 8001234:	1b89      	subs	r1, r1, r6
 8001236:	4088      	lsls	r0, r1
 8001238:	464a      	mov	r2, r9
 800123a:	0001      	movs	r1, r0
 800123c:	40f2      	lsrs	r2, r6
 800123e:	1e48      	subs	r0, r1, #1
 8001240:	4181      	sbcs	r1, r0
 8001242:	430a      	orrs	r2, r1
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	d500      	bpl.n	800124c <__aeabi_fsub+0x174>
 800124a:	e773      	b.n	8001134 <__aeabi_fsub+0x5c>
 800124c:	2201      	movs	r2, #1
 800124e:	4641      	mov	r1, r8
 8001250:	400a      	ands	r2, r1
 8001252:	0759      	lsls	r1, r3, #29
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x180>
 8001256:	e789      	b.n	800116c <__aeabi_fsub+0x94>
 8001258:	e011      	b.n	800127e <__aeabi_fsub+0x1a6>
 800125a:	4648      	mov	r0, r9
 800125c:	2800      	cmp	r0, #0
 800125e:	d158      	bne.n	8001312 <__aeabi_fsub+0x23a>
 8001260:	2cff      	cmp	r4, #255	; 0xff
 8001262:	d10c      	bne.n	800127e <__aeabi_fsub+0x1a6>
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d100      	bne.n	800126c <__aeabi_fsub+0x194>
 800126a:	e78c      	b.n	8001186 <__aeabi_fsub+0xae>
 800126c:	2080      	movs	r0, #128	; 0x80
 800126e:	03c0      	lsls	r0, r0, #15
 8001270:	4303      	orrs	r3, r0
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	0a5b      	lsrs	r3, r3, #9
 8001276:	24ff      	movs	r4, #255	; 0xff
 8001278:	e787      	b.n	800118a <__aeabi_fsub+0xb2>
 800127a:	2cff      	cmp	r4, #255	; 0xff
 800127c:	d025      	beq.n	80012ca <__aeabi_fsub+0x1f2>
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	2dff      	cmp	r5, #255	; 0xff
 8001282:	d0f0      	beq.n	8001266 <__aeabi_fsub+0x18e>
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	0a5b      	lsrs	r3, r3, #9
 8001288:	b2ec      	uxtb	r4, r5
 800128a:	e77e      	b.n	800118a <__aeabi_fsub+0xb2>
 800128c:	2c00      	cmp	r4, #0
 800128e:	d04d      	beq.n	800132c <__aeabi_fsub+0x254>
 8001290:	28ff      	cmp	r0, #255	; 0xff
 8001292:	d018      	beq.n	80012c6 <__aeabi_fsub+0x1ee>
 8001294:	2480      	movs	r4, #128	; 0x80
 8001296:	04e4      	lsls	r4, r4, #19
 8001298:	4272      	negs	r2, r6
 800129a:	4323      	orrs	r3, r4
 800129c:	2a1b      	cmp	r2, #27
 800129e:	dd00      	ble.n	80012a2 <__aeabi_fsub+0x1ca>
 80012a0:	e0c4      	b.n	800142c <__aeabi_fsub+0x354>
 80012a2:	001c      	movs	r4, r3
 80012a4:	2520      	movs	r5, #32
 80012a6:	40d4      	lsrs	r4, r2
 80012a8:	1aaa      	subs	r2, r5, r2
 80012aa:	4093      	lsls	r3, r2
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	4193      	sbcs	r3, r2
 80012b0:	4323      	orrs	r3, r4
 80012b2:	464a      	mov	r2, r9
 80012b4:	0005      	movs	r5, r0
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	4688      	mov	r8, r1
 80012ba:	e738      	b.n	800112e <__aeabi_fsub+0x56>
 80012bc:	1c72      	adds	r2, r6, #1
 80012be:	d0f8      	beq.n	80012b2 <__aeabi_fsub+0x1da>
 80012c0:	43f2      	mvns	r2, r6
 80012c2:	28ff      	cmp	r0, #255	; 0xff
 80012c4:	d1ea      	bne.n	800129c <__aeabi_fsub+0x1c4>
 80012c6:	000a      	movs	r2, r1
 80012c8:	464b      	mov	r3, r9
 80012ca:	25ff      	movs	r5, #255	; 0xff
 80012cc:	e7d7      	b.n	800127e <__aeabi_fsub+0x1a6>
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	0a5b      	lsrs	r3, r3, #9
 80012d2:	e75a      	b.n	800118a <__aeabi_fsub+0xb2>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d141      	bne.n	800135c <__aeabi_fsub+0x284>
 80012d8:	1c65      	adds	r5, r4, #1
 80012da:	b2e9      	uxtb	r1, r5
 80012dc:	2901      	cmp	r1, #1
 80012de:	dd45      	ble.n	800136c <__aeabi_fsub+0x294>
 80012e0:	2dff      	cmp	r5, #255	; 0xff
 80012e2:	d100      	bne.n	80012e6 <__aeabi_fsub+0x20e>
 80012e4:	e74f      	b.n	8001186 <__aeabi_fsub+0xae>
 80012e6:	2407      	movs	r4, #7
 80012e8:	444b      	add	r3, r9
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	401c      	ands	r4, r3
 80012ee:	e738      	b.n	8001162 <__aeabi_fsub+0x8a>
 80012f0:	2207      	movs	r2, #7
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <__aeabi_fsub+0x384>)
 80012f4:	1a2d      	subs	r5, r5, r0
 80012f6:	4023      	ands	r3, r4
 80012f8:	4014      	ands	r4, r2
 80012fa:	e732      	b.n	8001162 <__aeabi_fsub+0x8a>
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d11d      	bne.n	800133c <__aeabi_fsub+0x264>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d17a      	bne.n	80013fa <__aeabi_fsub+0x322>
 8001304:	464b      	mov	r3, r9
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x234>
 800130a:	e091      	b.n	8001430 <__aeabi_fsub+0x358>
 800130c:	000a      	movs	r2, r1
 800130e:	2500      	movs	r5, #0
 8001310:	e7b5      	b.n	800127e <__aeabi_fsub+0x1a6>
 8001312:	3e01      	subs	r6, #1
 8001314:	2e00      	cmp	r6, #0
 8001316:	d119      	bne.n	800134c <__aeabi_fsub+0x274>
 8001318:	444b      	add	r3, r9
 800131a:	e76c      	b.n	80011f6 <__aeabi_fsub+0x11e>
 800131c:	2cff      	cmp	r4, #255	; 0xff
 800131e:	d184      	bne.n	800122a <__aeabi_fsub+0x152>
 8001320:	25ff      	movs	r5, #255	; 0xff
 8001322:	e7ac      	b.n	800127e <__aeabi_fsub+0x1a6>
 8001324:	464a      	mov	r2, r9
 8001326:	4688      	mov	r8, r1
 8001328:	1ad4      	subs	r4, r2, r3
 800132a:	e705      	b.n	8001138 <__aeabi_fsub+0x60>
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1c5      	bne.n	80012bc <__aeabi_fsub+0x1e4>
 8001330:	000a      	movs	r2, r1
 8001332:	28ff      	cmp	r0, #255	; 0xff
 8001334:	d0c8      	beq.n	80012c8 <__aeabi_fsub+0x1f0>
 8001336:	0005      	movs	r5, r0
 8001338:	464b      	mov	r3, r9
 800133a:	e7a0      	b.n	800127e <__aeabi_fsub+0x1a6>
 800133c:	2b00      	cmp	r3, #0
 800133e:	d149      	bne.n	80013d4 <__aeabi_fsub+0x2fc>
 8001340:	464b      	mov	r3, r9
 8001342:	2b00      	cmp	r3, #0
 8001344:	d077      	beq.n	8001436 <__aeabi_fsub+0x35e>
 8001346:	000a      	movs	r2, r1
 8001348:	25ff      	movs	r5, #255	; 0xff
 800134a:	e798      	b.n	800127e <__aeabi_fsub+0x1a6>
 800134c:	2cff      	cmp	r4, #255	; 0xff
 800134e:	d000      	beq.n	8001352 <__aeabi_fsub+0x27a>
 8001350:	e743      	b.n	80011da <__aeabi_fsub+0x102>
 8001352:	e787      	b.n	8001264 <__aeabi_fsub+0x18c>
 8001354:	000a      	movs	r2, r1
 8001356:	24ff      	movs	r4, #255	; 0xff
 8001358:	2300      	movs	r3, #0
 800135a:	e716      	b.n	800118a <__aeabi_fsub+0xb2>
 800135c:	2c00      	cmp	r4, #0
 800135e:	d115      	bne.n	800138c <__aeabi_fsub+0x2b4>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d157      	bne.n	8001414 <__aeabi_fsub+0x33c>
 8001364:	28ff      	cmp	r0, #255	; 0xff
 8001366:	d1e6      	bne.n	8001336 <__aeabi_fsub+0x25e>
 8001368:	464b      	mov	r3, r9
 800136a:	e77b      	b.n	8001264 <__aeabi_fsub+0x18c>
 800136c:	2c00      	cmp	r4, #0
 800136e:	d120      	bne.n	80013b2 <__aeabi_fsub+0x2da>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d057      	beq.n	8001424 <__aeabi_fsub+0x34c>
 8001374:	4649      	mov	r1, r9
 8001376:	2900      	cmp	r1, #0
 8001378:	d053      	beq.n	8001422 <__aeabi_fsub+0x34a>
 800137a:	444b      	add	r3, r9
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	d568      	bpl.n	8001452 <__aeabi_fsub+0x37a>
 8001380:	2407      	movs	r4, #7
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <__aeabi_fsub+0x384>)
 8001384:	401c      	ands	r4, r3
 8001386:	2501      	movs	r5, #1
 8001388:	4013      	ands	r3, r2
 800138a:	e6ea      	b.n	8001162 <__aeabi_fsub+0x8a>
 800138c:	28ff      	cmp	r0, #255	; 0xff
 800138e:	d0eb      	beq.n	8001368 <__aeabi_fsub+0x290>
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	04d2      	lsls	r2, r2, #19
 8001394:	4276      	negs	r6, r6
 8001396:	4313      	orrs	r3, r2
 8001398:	2e1b      	cmp	r6, #27
 800139a:	dc53      	bgt.n	8001444 <__aeabi_fsub+0x36c>
 800139c:	2520      	movs	r5, #32
 800139e:	1bad      	subs	r5, r5, r6
 80013a0:	001a      	movs	r2, r3
 80013a2:	40ab      	lsls	r3, r5
 80013a4:	40f2      	lsrs	r2, r6
 80013a6:	1e5c      	subs	r4, r3, #1
 80013a8:	41a3      	sbcs	r3, r4
 80013aa:	4313      	orrs	r3, r2
 80013ac:	444b      	add	r3, r9
 80013ae:	0005      	movs	r5, r0
 80013b0:	e721      	b.n	80011f6 <__aeabi_fsub+0x11e>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0d8      	beq.n	8001368 <__aeabi_fsub+0x290>
 80013b6:	4649      	mov	r1, r9
 80013b8:	2900      	cmp	r1, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x2e6>
 80013bc:	e752      	b.n	8001264 <__aeabi_fsub+0x18c>
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	03c9      	lsls	r1, r1, #15
 80013c2:	420f      	tst	r7, r1
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x2f0>
 80013c6:	e74d      	b.n	8001264 <__aeabi_fsub+0x18c>
 80013c8:	4660      	mov	r0, ip
 80013ca:	4208      	tst	r0, r1
 80013cc:	d000      	beq.n	80013d0 <__aeabi_fsub+0x2f8>
 80013ce:	e749      	b.n	8001264 <__aeabi_fsub+0x18c>
 80013d0:	464b      	mov	r3, r9
 80013d2:	e747      	b.n	8001264 <__aeabi_fsub+0x18c>
 80013d4:	4648      	mov	r0, r9
 80013d6:	25ff      	movs	r5, #255	; 0xff
 80013d8:	2800      	cmp	r0, #0
 80013da:	d100      	bne.n	80013de <__aeabi_fsub+0x306>
 80013dc:	e74f      	b.n	800127e <__aeabi_fsub+0x1a6>
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	03d2      	lsls	r2, r2, #15
 80013e2:	4217      	tst	r7, r2
 80013e4:	d004      	beq.n	80013f0 <__aeabi_fsub+0x318>
 80013e6:	4660      	mov	r0, ip
 80013e8:	4210      	tst	r0, r2
 80013ea:	d101      	bne.n	80013f0 <__aeabi_fsub+0x318>
 80013ec:	464b      	mov	r3, r9
 80013ee:	4688      	mov	r8, r1
 80013f0:	2201      	movs	r2, #1
 80013f2:	4641      	mov	r1, r8
 80013f4:	25ff      	movs	r5, #255	; 0xff
 80013f6:	400a      	ands	r2, r1
 80013f8:	e741      	b.n	800127e <__aeabi_fsub+0x1a6>
 80013fa:	4648      	mov	r0, r9
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d01f      	beq.n	8001440 <__aeabi_fsub+0x368>
 8001400:	1a1a      	subs	r2, r3, r0
 8001402:	0150      	lsls	r0, r2, #5
 8001404:	d520      	bpl.n	8001448 <__aeabi_fsub+0x370>
 8001406:	464a      	mov	r2, r9
 8001408:	2407      	movs	r4, #7
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	401c      	ands	r4, r3
 800140e:	4688      	mov	r8, r1
 8001410:	2500      	movs	r5, #0
 8001412:	e6a6      	b.n	8001162 <__aeabi_fsub+0x8a>
 8001414:	1c74      	adds	r4, r6, #1
 8001416:	d0c9      	beq.n	80013ac <__aeabi_fsub+0x2d4>
 8001418:	43f6      	mvns	r6, r6
 800141a:	28ff      	cmp	r0, #255	; 0xff
 800141c:	d1bc      	bne.n	8001398 <__aeabi_fsub+0x2c0>
 800141e:	464b      	mov	r3, r9
 8001420:	e720      	b.n	8001264 <__aeabi_fsub+0x18c>
 8001422:	4699      	mov	r9, r3
 8001424:	464b      	mov	r3, r9
 8001426:	2500      	movs	r5, #0
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	e72b      	b.n	8001284 <__aeabi_fsub+0x1ac>
 800142c:	2301      	movs	r3, #1
 800142e:	e740      	b.n	80012b2 <__aeabi_fsub+0x1da>
 8001430:	2200      	movs	r2, #0
 8001432:	2300      	movs	r3, #0
 8001434:	e6a9      	b.n	800118a <__aeabi_fsub+0xb2>
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	2200      	movs	r2, #0
 800143a:	03db      	lsls	r3, r3, #15
 800143c:	24ff      	movs	r4, #255	; 0xff
 800143e:	e6a4      	b.n	800118a <__aeabi_fsub+0xb2>
 8001440:	2500      	movs	r5, #0
 8001442:	e71c      	b.n	800127e <__aeabi_fsub+0x1a6>
 8001444:	2301      	movs	r3, #1
 8001446:	e7b1      	b.n	80013ac <__aeabi_fsub+0x2d4>
 8001448:	2a00      	cmp	r2, #0
 800144a:	d0f1      	beq.n	8001430 <__aeabi_fsub+0x358>
 800144c:	0013      	movs	r3, r2
 800144e:	2500      	movs	r5, #0
 8001450:	e6fc      	b.n	800124c <__aeabi_fsub+0x174>
 8001452:	2500      	movs	r5, #0
 8001454:	e6fa      	b.n	800124c <__aeabi_fsub+0x174>
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	7dffffff 	.word	0x7dffffff
 800145c:	fbffffff 	.word	0xfbffffff

08001460 <__aeabi_f2iz>:
 8001460:	0241      	lsls	r1, r0, #9
 8001462:	0042      	lsls	r2, r0, #1
 8001464:	0fc3      	lsrs	r3, r0, #31
 8001466:	0a49      	lsrs	r1, r1, #9
 8001468:	0e12      	lsrs	r2, r2, #24
 800146a:	2000      	movs	r0, #0
 800146c:	2a7e      	cmp	r2, #126	; 0x7e
 800146e:	d90d      	bls.n	800148c <__aeabi_f2iz+0x2c>
 8001470:	2a9d      	cmp	r2, #157	; 0x9d
 8001472:	d80c      	bhi.n	800148e <__aeabi_f2iz+0x2e>
 8001474:	2080      	movs	r0, #128	; 0x80
 8001476:	0400      	lsls	r0, r0, #16
 8001478:	4301      	orrs	r1, r0
 800147a:	2a95      	cmp	r2, #149	; 0x95
 800147c:	dc0a      	bgt.n	8001494 <__aeabi_f2iz+0x34>
 800147e:	2096      	movs	r0, #150	; 0x96
 8001480:	1a82      	subs	r2, r0, r2
 8001482:	40d1      	lsrs	r1, r2
 8001484:	4248      	negs	r0, r1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d100      	bne.n	800148c <__aeabi_f2iz+0x2c>
 800148a:	0008      	movs	r0, r1
 800148c:	4770      	bx	lr
 800148e:	4a03      	ldr	r2, [pc, #12]	; (800149c <__aeabi_f2iz+0x3c>)
 8001490:	1898      	adds	r0, r3, r2
 8001492:	e7fb      	b.n	800148c <__aeabi_f2iz+0x2c>
 8001494:	3a96      	subs	r2, #150	; 0x96
 8001496:	4091      	lsls	r1, r2
 8001498:	e7f4      	b.n	8001484 <__aeabi_f2iz+0x24>
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	7fffffff 	.word	0x7fffffff

080014a0 <__aeabi_ui2f>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	1e04      	subs	r4, r0, #0
 80014a4:	d034      	beq.n	8001510 <__aeabi_ui2f+0x70>
 80014a6:	f001 fe0f 	bl	80030c8 <__clzsi2>
 80014aa:	229e      	movs	r2, #158	; 0x9e
 80014ac:	1a12      	subs	r2, r2, r0
 80014ae:	2a96      	cmp	r2, #150	; 0x96
 80014b0:	dc07      	bgt.n	80014c2 <__aeabi_ui2f+0x22>
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	2808      	cmp	r0, #8
 80014b6:	dd2e      	ble.n	8001516 <__aeabi_ui2f+0x76>
 80014b8:	3808      	subs	r0, #8
 80014ba:	4084      	lsls	r4, r0
 80014bc:	0260      	lsls	r0, r4, #9
 80014be:	0a40      	lsrs	r0, r0, #9
 80014c0:	e021      	b.n	8001506 <__aeabi_ui2f+0x66>
 80014c2:	2a99      	cmp	r2, #153	; 0x99
 80014c4:	dd09      	ble.n	80014da <__aeabi_ui2f+0x3a>
 80014c6:	0003      	movs	r3, r0
 80014c8:	0021      	movs	r1, r4
 80014ca:	331b      	adds	r3, #27
 80014cc:	4099      	lsls	r1, r3
 80014ce:	1e4b      	subs	r3, r1, #1
 80014d0:	4199      	sbcs	r1, r3
 80014d2:	2305      	movs	r3, #5
 80014d4:	1a1b      	subs	r3, r3, r0
 80014d6:	40dc      	lsrs	r4, r3
 80014d8:	430c      	orrs	r4, r1
 80014da:	2805      	cmp	r0, #5
 80014dc:	dd01      	ble.n	80014e2 <__aeabi_ui2f+0x42>
 80014de:	1f43      	subs	r3, r0, #5
 80014e0:	409c      	lsls	r4, r3
 80014e2:	0023      	movs	r3, r4
 80014e4:	490d      	ldr	r1, [pc, #52]	; (800151c <__aeabi_ui2f+0x7c>)
 80014e6:	400b      	ands	r3, r1
 80014e8:	0765      	lsls	r5, r4, #29
 80014ea:	d009      	beq.n	8001500 <__aeabi_ui2f+0x60>
 80014ec:	250f      	movs	r5, #15
 80014ee:	402c      	ands	r4, r5
 80014f0:	2c04      	cmp	r4, #4
 80014f2:	d005      	beq.n	8001500 <__aeabi_ui2f+0x60>
 80014f4:	3304      	adds	r3, #4
 80014f6:	015c      	lsls	r4, r3, #5
 80014f8:	d502      	bpl.n	8001500 <__aeabi_ui2f+0x60>
 80014fa:	229f      	movs	r2, #159	; 0x9f
 80014fc:	400b      	ands	r3, r1
 80014fe:	1a12      	subs	r2, r2, r0
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	0a58      	lsrs	r0, r3, #9
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	0240      	lsls	r0, r0, #9
 8001508:	05d2      	lsls	r2, r2, #23
 800150a:	0a40      	lsrs	r0, r0, #9
 800150c:	4310      	orrs	r0, r2
 800150e:	bd70      	pop	{r4, r5, r6, pc}
 8001510:	2200      	movs	r2, #0
 8001512:	2000      	movs	r0, #0
 8001514:	e7f7      	b.n	8001506 <__aeabi_ui2f+0x66>
 8001516:	0260      	lsls	r0, r4, #9
 8001518:	0a40      	lsrs	r0, r0, #9
 800151a:	e7f4      	b.n	8001506 <__aeabi_ui2f+0x66>
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_dadd>:
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	464f      	mov	r7, r9
 8001524:	4646      	mov	r6, r8
 8001526:	46d6      	mov	lr, sl
 8001528:	000c      	movs	r4, r1
 800152a:	0309      	lsls	r1, r1, #12
 800152c:	b5c0      	push	{r6, r7, lr}
 800152e:	0a49      	lsrs	r1, r1, #9
 8001530:	0f47      	lsrs	r7, r0, #29
 8001532:	005e      	lsls	r6, r3, #1
 8001534:	4339      	orrs	r1, r7
 8001536:	031f      	lsls	r7, r3, #12
 8001538:	0fdb      	lsrs	r3, r3, #31
 800153a:	469c      	mov	ip, r3
 800153c:	0065      	lsls	r5, r4, #1
 800153e:	0a7b      	lsrs	r3, r7, #9
 8001540:	0f57      	lsrs	r7, r2, #29
 8001542:	431f      	orrs	r7, r3
 8001544:	0d6d      	lsrs	r5, r5, #21
 8001546:	0fe4      	lsrs	r4, r4, #31
 8001548:	0d76      	lsrs	r6, r6, #21
 800154a:	46a1      	mov	r9, r4
 800154c:	00c0      	lsls	r0, r0, #3
 800154e:	46b8      	mov	r8, r7
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	1bab      	subs	r3, r5, r6
 8001554:	4564      	cmp	r4, ip
 8001556:	d07b      	beq.n	8001650 <__aeabi_dadd+0x130>
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd5f      	ble.n	800161c <__aeabi_dadd+0xfc>
 800155c:	2e00      	cmp	r6, #0
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x42>
 8001560:	e0a4      	b.n	80016ac <__aeabi_dadd+0x18c>
 8001562:	003e      	movs	r6, r7
 8001564:	4316      	orrs	r6, r2
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x4a>
 8001568:	e112      	b.n	8001790 <__aeabi_dadd+0x270>
 800156a:	1e5e      	subs	r6, r3, #1
 800156c:	2e00      	cmp	r6, #0
 800156e:	d000      	beq.n	8001572 <__aeabi_dadd+0x52>
 8001570:	e19e      	b.n	80018b0 <__aeabi_dadd+0x390>
 8001572:	1a87      	subs	r7, r0, r2
 8001574:	4643      	mov	r3, r8
 8001576:	42b8      	cmp	r0, r7
 8001578:	4180      	sbcs	r0, r0
 800157a:	2501      	movs	r5, #1
 800157c:	1ac9      	subs	r1, r1, r3
 800157e:	4240      	negs	r0, r0
 8001580:	1a09      	subs	r1, r1, r0
 8001582:	020b      	lsls	r3, r1, #8
 8001584:	d400      	bmi.n	8001588 <__aeabi_dadd+0x68>
 8001586:	e131      	b.n	80017ec <__aeabi_dadd+0x2cc>
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	0a4e      	lsrs	r6, r1, #9
 800158c:	2e00      	cmp	r6, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x72>
 8001590:	e16e      	b.n	8001870 <__aeabi_dadd+0x350>
 8001592:	0030      	movs	r0, r6
 8001594:	f001 fd98 	bl	80030c8 <__clzsi2>
 8001598:	0003      	movs	r3, r0
 800159a:	3b08      	subs	r3, #8
 800159c:	2b1f      	cmp	r3, #31
 800159e:	dd00      	ble.n	80015a2 <__aeabi_dadd+0x82>
 80015a0:	e161      	b.n	8001866 <__aeabi_dadd+0x346>
 80015a2:	2220      	movs	r2, #32
 80015a4:	0039      	movs	r1, r7
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	409e      	lsls	r6, r3
 80015aa:	40d1      	lsrs	r1, r2
 80015ac:	409f      	lsls	r7, r3
 80015ae:	430e      	orrs	r6, r1
 80015b0:	429d      	cmp	r5, r3
 80015b2:	dd00      	ble.n	80015b6 <__aeabi_dadd+0x96>
 80015b4:	e151      	b.n	800185a <__aeabi_dadd+0x33a>
 80015b6:	1b5d      	subs	r5, r3, r5
 80015b8:	1c6b      	adds	r3, r5, #1
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	dd00      	ble.n	80015c0 <__aeabi_dadd+0xa0>
 80015be:	e17c      	b.n	80018ba <__aeabi_dadd+0x39a>
 80015c0:	2120      	movs	r1, #32
 80015c2:	1ac9      	subs	r1, r1, r3
 80015c4:	003d      	movs	r5, r7
 80015c6:	0030      	movs	r0, r6
 80015c8:	408f      	lsls	r7, r1
 80015ca:	4088      	lsls	r0, r1
 80015cc:	40dd      	lsrs	r5, r3
 80015ce:	1e79      	subs	r1, r7, #1
 80015d0:	418f      	sbcs	r7, r1
 80015d2:	0031      	movs	r1, r6
 80015d4:	2207      	movs	r2, #7
 80015d6:	4328      	orrs	r0, r5
 80015d8:	40d9      	lsrs	r1, r3
 80015da:	2500      	movs	r5, #0
 80015dc:	4307      	orrs	r7, r0
 80015de:	403a      	ands	r2, r7
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d009      	beq.n	80015f8 <__aeabi_dadd+0xd8>
 80015e4:	230f      	movs	r3, #15
 80015e6:	403b      	ands	r3, r7
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <__aeabi_dadd+0xd8>
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	42bb      	cmp	r3, r7
 80015f0:	41bf      	sbcs	r7, r7
 80015f2:	427f      	negs	r7, r7
 80015f4:	19c9      	adds	r1, r1, r7
 80015f6:	001f      	movs	r7, r3
 80015f8:	020b      	lsls	r3, r1, #8
 80015fa:	d400      	bmi.n	80015fe <__aeabi_dadd+0xde>
 80015fc:	e226      	b.n	8001a4c <__aeabi_dadd+0x52c>
 80015fe:	1c6a      	adds	r2, r5, #1
 8001600:	4bc6      	ldr	r3, [pc, #792]	; (800191c <__aeabi_dadd+0x3fc>)
 8001602:	0555      	lsls	r5, r2, #21
 8001604:	0d6d      	lsrs	r5, r5, #21
 8001606:	429a      	cmp	r2, r3
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0xec>
 800160a:	e106      	b.n	800181a <__aeabi_dadd+0x2fa>
 800160c:	4ac4      	ldr	r2, [pc, #784]	; (8001920 <__aeabi_dadd+0x400>)
 800160e:	08ff      	lsrs	r7, r7, #3
 8001610:	400a      	ands	r2, r1
 8001612:	0753      	lsls	r3, r2, #29
 8001614:	0252      	lsls	r2, r2, #9
 8001616:	433b      	orrs	r3, r7
 8001618:	0b12      	lsrs	r2, r2, #12
 800161a:	e08e      	b.n	800173a <__aeabi_dadd+0x21a>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d000      	beq.n	8001622 <__aeabi_dadd+0x102>
 8001620:	e0b8      	b.n	8001794 <__aeabi_dadd+0x274>
 8001622:	1c6b      	adds	r3, r5, #1
 8001624:	055b      	lsls	r3, r3, #21
 8001626:	0d5b      	lsrs	r3, r3, #21
 8001628:	2b01      	cmp	r3, #1
 800162a:	dc00      	bgt.n	800162e <__aeabi_dadd+0x10e>
 800162c:	e130      	b.n	8001890 <__aeabi_dadd+0x370>
 800162e:	1a87      	subs	r7, r0, r2
 8001630:	4643      	mov	r3, r8
 8001632:	42b8      	cmp	r0, r7
 8001634:	41b6      	sbcs	r6, r6
 8001636:	1acb      	subs	r3, r1, r3
 8001638:	4276      	negs	r6, r6
 800163a:	1b9e      	subs	r6, r3, r6
 800163c:	0233      	lsls	r3, r6, #8
 800163e:	d500      	bpl.n	8001642 <__aeabi_dadd+0x122>
 8001640:	e14c      	b.n	80018dc <__aeabi_dadd+0x3bc>
 8001642:	003b      	movs	r3, r7
 8001644:	4333      	orrs	r3, r6
 8001646:	d1a1      	bne.n	800158c <__aeabi_dadd+0x6c>
 8001648:	2200      	movs	r2, #0
 800164a:	2400      	movs	r4, #0
 800164c:	2500      	movs	r5, #0
 800164e:	e070      	b.n	8001732 <__aeabi_dadd+0x212>
 8001650:	2b00      	cmp	r3, #0
 8001652:	dc00      	bgt.n	8001656 <__aeabi_dadd+0x136>
 8001654:	e0e5      	b.n	8001822 <__aeabi_dadd+0x302>
 8001656:	2e00      	cmp	r6, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dadd+0x13c>
 800165a:	e083      	b.n	8001764 <__aeabi_dadd+0x244>
 800165c:	4eaf      	ldr	r6, [pc, #700]	; (800191c <__aeabi_dadd+0x3fc>)
 800165e:	42b5      	cmp	r5, r6
 8001660:	d060      	beq.n	8001724 <__aeabi_dadd+0x204>
 8001662:	2680      	movs	r6, #128	; 0x80
 8001664:	0436      	lsls	r6, r6, #16
 8001666:	4337      	orrs	r7, r6
 8001668:	46b8      	mov	r8, r7
 800166a:	2b38      	cmp	r3, #56	; 0x38
 800166c:	dc00      	bgt.n	8001670 <__aeabi_dadd+0x150>
 800166e:	e13e      	b.n	80018ee <__aeabi_dadd+0x3ce>
 8001670:	4643      	mov	r3, r8
 8001672:	4313      	orrs	r3, r2
 8001674:	001f      	movs	r7, r3
 8001676:	1e7a      	subs	r2, r7, #1
 8001678:	4197      	sbcs	r7, r2
 800167a:	183f      	adds	r7, r7, r0
 800167c:	4287      	cmp	r7, r0
 800167e:	4180      	sbcs	r0, r0
 8001680:	4240      	negs	r0, r0
 8001682:	1809      	adds	r1, r1, r0
 8001684:	020b      	lsls	r3, r1, #8
 8001686:	d400      	bmi.n	800168a <__aeabi_dadd+0x16a>
 8001688:	e0b0      	b.n	80017ec <__aeabi_dadd+0x2cc>
 800168a:	4ba4      	ldr	r3, [pc, #656]	; (800191c <__aeabi_dadd+0x3fc>)
 800168c:	3501      	adds	r5, #1
 800168e:	429d      	cmp	r5, r3
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x174>
 8001692:	e0c3      	b.n	800181c <__aeabi_dadd+0x2fc>
 8001694:	4aa2      	ldr	r2, [pc, #648]	; (8001920 <__aeabi_dadd+0x400>)
 8001696:	087b      	lsrs	r3, r7, #1
 8001698:	400a      	ands	r2, r1
 800169a:	2101      	movs	r1, #1
 800169c:	400f      	ands	r7, r1
 800169e:	431f      	orrs	r7, r3
 80016a0:	0851      	lsrs	r1, r2, #1
 80016a2:	07d3      	lsls	r3, r2, #31
 80016a4:	2207      	movs	r2, #7
 80016a6:	431f      	orrs	r7, r3
 80016a8:	403a      	ands	r2, r7
 80016aa:	e799      	b.n	80015e0 <__aeabi_dadd+0xc0>
 80016ac:	4e9b      	ldr	r6, [pc, #620]	; (800191c <__aeabi_dadd+0x3fc>)
 80016ae:	42b5      	cmp	r5, r6
 80016b0:	d038      	beq.n	8001724 <__aeabi_dadd+0x204>
 80016b2:	2680      	movs	r6, #128	; 0x80
 80016b4:	0436      	lsls	r6, r6, #16
 80016b6:	4337      	orrs	r7, r6
 80016b8:	46b8      	mov	r8, r7
 80016ba:	2b38      	cmp	r3, #56	; 0x38
 80016bc:	dd00      	ble.n	80016c0 <__aeabi_dadd+0x1a0>
 80016be:	e0dc      	b.n	800187a <__aeabi_dadd+0x35a>
 80016c0:	2b1f      	cmp	r3, #31
 80016c2:	dc00      	bgt.n	80016c6 <__aeabi_dadd+0x1a6>
 80016c4:	e130      	b.n	8001928 <__aeabi_dadd+0x408>
 80016c6:	001e      	movs	r6, r3
 80016c8:	4647      	mov	r7, r8
 80016ca:	3e20      	subs	r6, #32
 80016cc:	40f7      	lsrs	r7, r6
 80016ce:	46bc      	mov	ip, r7
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d004      	beq.n	80016de <__aeabi_dadd+0x1be>
 80016d4:	2640      	movs	r6, #64	; 0x40
 80016d6:	1af3      	subs	r3, r6, r3
 80016d8:	4646      	mov	r6, r8
 80016da:	409e      	lsls	r6, r3
 80016dc:	4332      	orrs	r2, r6
 80016de:	0017      	movs	r7, r2
 80016e0:	4663      	mov	r3, ip
 80016e2:	1e7a      	subs	r2, r7, #1
 80016e4:	4197      	sbcs	r7, r2
 80016e6:	431f      	orrs	r7, r3
 80016e8:	e0cc      	b.n	8001884 <__aeabi_dadd+0x364>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dadd+0x1d0>
 80016ee:	e204      	b.n	8001afa <__aeabi_dadd+0x5da>
 80016f0:	4643      	mov	r3, r8
 80016f2:	4313      	orrs	r3, r2
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x1d8>
 80016f6:	e159      	b.n	80019ac <__aeabi_dadd+0x48c>
 80016f8:	074b      	lsls	r3, r1, #29
 80016fa:	08c0      	lsrs	r0, r0, #3
 80016fc:	4318      	orrs	r0, r3
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	08c9      	lsrs	r1, r1, #3
 8001702:	031b      	lsls	r3, r3, #12
 8001704:	4219      	tst	r1, r3
 8001706:	d008      	beq.n	800171a <__aeabi_dadd+0x1fa>
 8001708:	4645      	mov	r5, r8
 800170a:	08ed      	lsrs	r5, r5, #3
 800170c:	421d      	tst	r5, r3
 800170e:	d104      	bne.n	800171a <__aeabi_dadd+0x1fa>
 8001710:	4643      	mov	r3, r8
 8001712:	08d0      	lsrs	r0, r2, #3
 8001714:	0759      	lsls	r1, r3, #29
 8001716:	4308      	orrs	r0, r1
 8001718:	0029      	movs	r1, r5
 800171a:	0f42      	lsrs	r2, r0, #29
 800171c:	00c9      	lsls	r1, r1, #3
 800171e:	4d7f      	ldr	r5, [pc, #508]	; (800191c <__aeabi_dadd+0x3fc>)
 8001720:	4311      	orrs	r1, r2
 8001722:	00c0      	lsls	r0, r0, #3
 8001724:	074b      	lsls	r3, r1, #29
 8001726:	08ca      	lsrs	r2, r1, #3
 8001728:	497c      	ldr	r1, [pc, #496]	; (800191c <__aeabi_dadd+0x3fc>)
 800172a:	08c0      	lsrs	r0, r0, #3
 800172c:	4303      	orrs	r3, r0
 800172e:	428d      	cmp	r5, r1
 8001730:	d068      	beq.n	8001804 <__aeabi_dadd+0x2e4>
 8001732:	0312      	lsls	r2, r2, #12
 8001734:	056d      	lsls	r5, r5, #21
 8001736:	0b12      	lsrs	r2, r2, #12
 8001738:	0d6d      	lsrs	r5, r5, #21
 800173a:	2100      	movs	r1, #0
 800173c:	0312      	lsls	r2, r2, #12
 800173e:	0018      	movs	r0, r3
 8001740:	0b13      	lsrs	r3, r2, #12
 8001742:	0d0a      	lsrs	r2, r1, #20
 8001744:	0512      	lsls	r2, r2, #20
 8001746:	431a      	orrs	r2, r3
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <__aeabi_dadd+0x404>)
 800174a:	052d      	lsls	r5, r5, #20
 800174c:	4013      	ands	r3, r2
 800174e:	432b      	orrs	r3, r5
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	07e4      	lsls	r4, r4, #31
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	4323      	orrs	r3, r4
 8001758:	0019      	movs	r1, r3
 800175a:	bc1c      	pop	{r2, r3, r4}
 800175c:	4690      	mov	r8, r2
 800175e:	4699      	mov	r9, r3
 8001760:	46a2      	mov	sl, r4
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001764:	003e      	movs	r6, r7
 8001766:	4316      	orrs	r6, r2
 8001768:	d012      	beq.n	8001790 <__aeabi_dadd+0x270>
 800176a:	1e5e      	subs	r6, r3, #1
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x252>
 8001770:	e100      	b.n	8001974 <__aeabi_dadd+0x454>
 8001772:	1887      	adds	r7, r0, r2
 8001774:	4287      	cmp	r7, r0
 8001776:	4180      	sbcs	r0, r0
 8001778:	4441      	add	r1, r8
 800177a:	4240      	negs	r0, r0
 800177c:	1809      	adds	r1, r1, r0
 800177e:	2501      	movs	r5, #1
 8001780:	020b      	lsls	r3, r1, #8
 8001782:	d533      	bpl.n	80017ec <__aeabi_dadd+0x2cc>
 8001784:	2502      	movs	r5, #2
 8001786:	e785      	b.n	8001694 <__aeabi_dadd+0x174>
 8001788:	4664      	mov	r4, ip
 800178a:	0033      	movs	r3, r6
 800178c:	4641      	mov	r1, r8
 800178e:	0010      	movs	r0, r2
 8001790:	001d      	movs	r5, r3
 8001792:	e7c7      	b.n	8001724 <__aeabi_dadd+0x204>
 8001794:	2d00      	cmp	r5, #0
 8001796:	d000      	beq.n	800179a <__aeabi_dadd+0x27a>
 8001798:	e0da      	b.n	8001950 <__aeabi_dadd+0x430>
 800179a:	000c      	movs	r4, r1
 800179c:	4304      	orrs	r4, r0
 800179e:	d0f3      	beq.n	8001788 <__aeabi_dadd+0x268>
 80017a0:	1c5c      	adds	r4, r3, #1
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x286>
 80017a4:	e19f      	b.n	8001ae6 <__aeabi_dadd+0x5c6>
 80017a6:	4c5d      	ldr	r4, [pc, #372]	; (800191c <__aeabi_dadd+0x3fc>)
 80017a8:	42a6      	cmp	r6, r4
 80017aa:	d100      	bne.n	80017ae <__aeabi_dadd+0x28e>
 80017ac:	e12f      	b.n	8001a0e <__aeabi_dadd+0x4ee>
 80017ae:	43db      	mvns	r3, r3
 80017b0:	2b38      	cmp	r3, #56	; 0x38
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dadd+0x296>
 80017b4:	e166      	b.n	8001a84 <__aeabi_dadd+0x564>
 80017b6:	2b1f      	cmp	r3, #31
 80017b8:	dd00      	ble.n	80017bc <__aeabi_dadd+0x29c>
 80017ba:	e183      	b.n	8001ac4 <__aeabi_dadd+0x5a4>
 80017bc:	2420      	movs	r4, #32
 80017be:	0005      	movs	r5, r0
 80017c0:	1ae4      	subs	r4, r4, r3
 80017c2:	000f      	movs	r7, r1
 80017c4:	40dd      	lsrs	r5, r3
 80017c6:	40d9      	lsrs	r1, r3
 80017c8:	40a0      	lsls	r0, r4
 80017ca:	4643      	mov	r3, r8
 80017cc:	40a7      	lsls	r7, r4
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	1e44      	subs	r4, r0, #1
 80017d2:	41a0      	sbcs	r0, r4
 80017d4:	4698      	mov	r8, r3
 80017d6:	432f      	orrs	r7, r5
 80017d8:	4338      	orrs	r0, r7
 80017da:	1a17      	subs	r7, r2, r0
 80017dc:	42ba      	cmp	r2, r7
 80017de:	4192      	sbcs	r2, r2
 80017e0:	4643      	mov	r3, r8
 80017e2:	4252      	negs	r2, r2
 80017e4:	1a99      	subs	r1, r3, r2
 80017e6:	4664      	mov	r4, ip
 80017e8:	0035      	movs	r5, r6
 80017ea:	e6ca      	b.n	8001582 <__aeabi_dadd+0x62>
 80017ec:	2207      	movs	r2, #7
 80017ee:	403a      	ands	r2, r7
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dadd+0x2d6>
 80017f4:	e6f6      	b.n	80015e4 <__aeabi_dadd+0xc4>
 80017f6:	074b      	lsls	r3, r1, #29
 80017f8:	08ca      	lsrs	r2, r1, #3
 80017fa:	4948      	ldr	r1, [pc, #288]	; (800191c <__aeabi_dadd+0x3fc>)
 80017fc:	08ff      	lsrs	r7, r7, #3
 80017fe:	433b      	orrs	r3, r7
 8001800:	428d      	cmp	r5, r1
 8001802:	d196      	bne.n	8001732 <__aeabi_dadd+0x212>
 8001804:	0019      	movs	r1, r3
 8001806:	4311      	orrs	r1, r2
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x2ec>
 800180a:	e19e      	b.n	8001b4a <__aeabi_dadd+0x62a>
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0309      	lsls	r1, r1, #12
 8001810:	430a      	orrs	r2, r1
 8001812:	0312      	lsls	r2, r2, #12
 8001814:	0b12      	lsrs	r2, r2, #12
 8001816:	4d41      	ldr	r5, [pc, #260]	; (800191c <__aeabi_dadd+0x3fc>)
 8001818:	e78f      	b.n	800173a <__aeabi_dadd+0x21a>
 800181a:	0015      	movs	r5, r2
 800181c:	2200      	movs	r2, #0
 800181e:	2300      	movs	r3, #0
 8001820:	e78b      	b.n	800173a <__aeabi_dadd+0x21a>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d000      	beq.n	8001828 <__aeabi_dadd+0x308>
 8001826:	e0c7      	b.n	80019b8 <__aeabi_dadd+0x498>
 8001828:	1c6b      	adds	r3, r5, #1
 800182a:	055f      	lsls	r7, r3, #21
 800182c:	0d7f      	lsrs	r7, r7, #21
 800182e:	2f01      	cmp	r7, #1
 8001830:	dc00      	bgt.n	8001834 <__aeabi_dadd+0x314>
 8001832:	e0f1      	b.n	8001a18 <__aeabi_dadd+0x4f8>
 8001834:	4d39      	ldr	r5, [pc, #228]	; (800191c <__aeabi_dadd+0x3fc>)
 8001836:	42ab      	cmp	r3, r5
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x31c>
 800183a:	e0b9      	b.n	80019b0 <__aeabi_dadd+0x490>
 800183c:	1885      	adds	r5, r0, r2
 800183e:	000a      	movs	r2, r1
 8001840:	4285      	cmp	r5, r0
 8001842:	4189      	sbcs	r1, r1
 8001844:	4442      	add	r2, r8
 8001846:	4249      	negs	r1, r1
 8001848:	1851      	adds	r1, r2, r1
 800184a:	2207      	movs	r2, #7
 800184c:	07cf      	lsls	r7, r1, #31
 800184e:	086d      	lsrs	r5, r5, #1
 8001850:	432f      	orrs	r7, r5
 8001852:	0849      	lsrs	r1, r1, #1
 8001854:	403a      	ands	r2, r7
 8001856:	001d      	movs	r5, r3
 8001858:	e6c2      	b.n	80015e0 <__aeabi_dadd+0xc0>
 800185a:	2207      	movs	r2, #7
 800185c:	4930      	ldr	r1, [pc, #192]	; (8001920 <__aeabi_dadd+0x400>)
 800185e:	1aed      	subs	r5, r5, r3
 8001860:	4031      	ands	r1, r6
 8001862:	403a      	ands	r2, r7
 8001864:	e6bc      	b.n	80015e0 <__aeabi_dadd+0xc0>
 8001866:	003e      	movs	r6, r7
 8001868:	3828      	subs	r0, #40	; 0x28
 800186a:	4086      	lsls	r6, r0
 800186c:	2700      	movs	r7, #0
 800186e:	e69f      	b.n	80015b0 <__aeabi_dadd+0x90>
 8001870:	0038      	movs	r0, r7
 8001872:	f001 fc29 	bl	80030c8 <__clzsi2>
 8001876:	3020      	adds	r0, #32
 8001878:	e68e      	b.n	8001598 <__aeabi_dadd+0x78>
 800187a:	4643      	mov	r3, r8
 800187c:	4313      	orrs	r3, r2
 800187e:	001f      	movs	r7, r3
 8001880:	1e7a      	subs	r2, r7, #1
 8001882:	4197      	sbcs	r7, r2
 8001884:	1bc7      	subs	r7, r0, r7
 8001886:	42b8      	cmp	r0, r7
 8001888:	4180      	sbcs	r0, r0
 800188a:	4240      	negs	r0, r0
 800188c:	1a09      	subs	r1, r1, r0
 800188e:	e678      	b.n	8001582 <__aeabi_dadd+0x62>
 8001890:	000e      	movs	r6, r1
 8001892:	003b      	movs	r3, r7
 8001894:	4306      	orrs	r6, r0
 8001896:	4313      	orrs	r3, r2
 8001898:	2d00      	cmp	r5, #0
 800189a:	d161      	bne.n	8001960 <__aeabi_dadd+0x440>
 800189c:	2e00      	cmp	r6, #0
 800189e:	d000      	beq.n	80018a2 <__aeabi_dadd+0x382>
 80018a0:	e0f4      	b.n	8001a8c <__aeabi_dadd+0x56c>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x388>
 80018a6:	e11b      	b.n	8001ae0 <__aeabi_dadd+0x5c0>
 80018a8:	4664      	mov	r4, ip
 80018aa:	0039      	movs	r1, r7
 80018ac:	0010      	movs	r0, r2
 80018ae:	e739      	b.n	8001724 <__aeabi_dadd+0x204>
 80018b0:	4f1a      	ldr	r7, [pc, #104]	; (800191c <__aeabi_dadd+0x3fc>)
 80018b2:	42bb      	cmp	r3, r7
 80018b4:	d07a      	beq.n	80019ac <__aeabi_dadd+0x48c>
 80018b6:	0033      	movs	r3, r6
 80018b8:	e6ff      	b.n	80016ba <__aeabi_dadd+0x19a>
 80018ba:	0030      	movs	r0, r6
 80018bc:	3d1f      	subs	r5, #31
 80018be:	40e8      	lsrs	r0, r5
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d003      	beq.n	80018cc <__aeabi_dadd+0x3ac>
 80018c4:	2140      	movs	r1, #64	; 0x40
 80018c6:	1acb      	subs	r3, r1, r3
 80018c8:	409e      	lsls	r6, r3
 80018ca:	4337      	orrs	r7, r6
 80018cc:	1e7b      	subs	r3, r7, #1
 80018ce:	419f      	sbcs	r7, r3
 80018d0:	2207      	movs	r2, #7
 80018d2:	4307      	orrs	r7, r0
 80018d4:	403a      	ands	r2, r7
 80018d6:	2100      	movs	r1, #0
 80018d8:	2500      	movs	r5, #0
 80018da:	e789      	b.n	80017f0 <__aeabi_dadd+0x2d0>
 80018dc:	1a17      	subs	r7, r2, r0
 80018de:	4643      	mov	r3, r8
 80018e0:	42ba      	cmp	r2, r7
 80018e2:	41b6      	sbcs	r6, r6
 80018e4:	1a59      	subs	r1, r3, r1
 80018e6:	4276      	negs	r6, r6
 80018e8:	1b8e      	subs	r6, r1, r6
 80018ea:	4664      	mov	r4, ip
 80018ec:	e64e      	b.n	800158c <__aeabi_dadd+0x6c>
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dadd+0x3d4>
 80018f2:	e0ad      	b.n	8001a50 <__aeabi_dadd+0x530>
 80018f4:	2620      	movs	r6, #32
 80018f6:	4647      	mov	r7, r8
 80018f8:	1af6      	subs	r6, r6, r3
 80018fa:	40b7      	lsls	r7, r6
 80018fc:	46b9      	mov	r9, r7
 80018fe:	0017      	movs	r7, r2
 8001900:	46b2      	mov	sl, r6
 8001902:	40df      	lsrs	r7, r3
 8001904:	464e      	mov	r6, r9
 8001906:	433e      	orrs	r6, r7
 8001908:	0037      	movs	r7, r6
 800190a:	4656      	mov	r6, sl
 800190c:	40b2      	lsls	r2, r6
 800190e:	1e56      	subs	r6, r2, #1
 8001910:	41b2      	sbcs	r2, r6
 8001912:	4317      	orrs	r7, r2
 8001914:	4642      	mov	r2, r8
 8001916:	40da      	lsrs	r2, r3
 8001918:	1889      	adds	r1, r1, r2
 800191a:	e6ae      	b.n	800167a <__aeabi_dadd+0x15a>
 800191c:	000007ff 	.word	0x000007ff
 8001920:	ff7fffff 	.word	0xff7fffff
 8001924:	800fffff 	.word	0x800fffff
 8001928:	2620      	movs	r6, #32
 800192a:	4647      	mov	r7, r8
 800192c:	1af6      	subs	r6, r6, r3
 800192e:	40b7      	lsls	r7, r6
 8001930:	46b9      	mov	r9, r7
 8001932:	0017      	movs	r7, r2
 8001934:	46b2      	mov	sl, r6
 8001936:	40df      	lsrs	r7, r3
 8001938:	464e      	mov	r6, r9
 800193a:	433e      	orrs	r6, r7
 800193c:	0037      	movs	r7, r6
 800193e:	4656      	mov	r6, sl
 8001940:	40b2      	lsls	r2, r6
 8001942:	1e56      	subs	r6, r2, #1
 8001944:	41b2      	sbcs	r2, r6
 8001946:	4317      	orrs	r7, r2
 8001948:	4642      	mov	r2, r8
 800194a:	40da      	lsrs	r2, r3
 800194c:	1a89      	subs	r1, r1, r2
 800194e:	e799      	b.n	8001884 <__aeabi_dadd+0x364>
 8001950:	4c7f      	ldr	r4, [pc, #508]	; (8001b50 <__aeabi_dadd+0x630>)
 8001952:	42a6      	cmp	r6, r4
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dadd+0x4ee>
 8001956:	2480      	movs	r4, #128	; 0x80
 8001958:	0424      	lsls	r4, r4, #16
 800195a:	425b      	negs	r3, r3
 800195c:	4321      	orrs	r1, r4
 800195e:	e727      	b.n	80017b0 <__aeabi_dadd+0x290>
 8001960:	2e00      	cmp	r6, #0
 8001962:	d10c      	bne.n	800197e <__aeabi_dadd+0x45e>
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <__aeabi_dadd+0x44a>
 8001968:	e0cb      	b.n	8001b02 <__aeabi_dadd+0x5e2>
 800196a:	4664      	mov	r4, ip
 800196c:	0039      	movs	r1, r7
 800196e:	0010      	movs	r0, r2
 8001970:	4d77      	ldr	r5, [pc, #476]	; (8001b50 <__aeabi_dadd+0x630>)
 8001972:	e6d7      	b.n	8001724 <__aeabi_dadd+0x204>
 8001974:	4f76      	ldr	r7, [pc, #472]	; (8001b50 <__aeabi_dadd+0x630>)
 8001976:	42bb      	cmp	r3, r7
 8001978:	d018      	beq.n	80019ac <__aeabi_dadd+0x48c>
 800197a:	0033      	movs	r3, r6
 800197c:	e675      	b.n	800166a <__aeabi_dadd+0x14a>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d014      	beq.n	80019ac <__aeabi_dadd+0x48c>
 8001982:	074b      	lsls	r3, r1, #29
 8001984:	08c0      	lsrs	r0, r0, #3
 8001986:	4318      	orrs	r0, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	08c9      	lsrs	r1, r1, #3
 800198c:	031b      	lsls	r3, r3, #12
 800198e:	4219      	tst	r1, r3
 8001990:	d007      	beq.n	80019a2 <__aeabi_dadd+0x482>
 8001992:	08fc      	lsrs	r4, r7, #3
 8001994:	421c      	tst	r4, r3
 8001996:	d104      	bne.n	80019a2 <__aeabi_dadd+0x482>
 8001998:	0779      	lsls	r1, r7, #29
 800199a:	08d0      	lsrs	r0, r2, #3
 800199c:	4308      	orrs	r0, r1
 800199e:	46e1      	mov	r9, ip
 80019a0:	0021      	movs	r1, r4
 80019a2:	464c      	mov	r4, r9
 80019a4:	0f42      	lsrs	r2, r0, #29
 80019a6:	00c9      	lsls	r1, r1, #3
 80019a8:	4311      	orrs	r1, r2
 80019aa:	00c0      	lsls	r0, r0, #3
 80019ac:	4d68      	ldr	r5, [pc, #416]	; (8001b50 <__aeabi_dadd+0x630>)
 80019ae:	e6b9      	b.n	8001724 <__aeabi_dadd+0x204>
 80019b0:	001d      	movs	r5, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	2300      	movs	r3, #0
 80019b6:	e6c0      	b.n	800173a <__aeabi_dadd+0x21a>
 80019b8:	2d00      	cmp	r5, #0
 80019ba:	d15b      	bne.n	8001a74 <__aeabi_dadd+0x554>
 80019bc:	000d      	movs	r5, r1
 80019be:	4305      	orrs	r5, r0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dadd+0x4a4>
 80019c2:	e6e2      	b.n	800178a <__aeabi_dadd+0x26a>
 80019c4:	1c5d      	adds	r5, r3, #1
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x4aa>
 80019c8:	e0b0      	b.n	8001b2c <__aeabi_dadd+0x60c>
 80019ca:	4d61      	ldr	r5, [pc, #388]	; (8001b50 <__aeabi_dadd+0x630>)
 80019cc:	42ae      	cmp	r6, r5
 80019ce:	d01f      	beq.n	8001a10 <__aeabi_dadd+0x4f0>
 80019d0:	43db      	mvns	r3, r3
 80019d2:	2b38      	cmp	r3, #56	; 0x38
 80019d4:	dc71      	bgt.n	8001aba <__aeabi_dadd+0x59a>
 80019d6:	2b1f      	cmp	r3, #31
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dadd+0x4bc>
 80019da:	e096      	b.n	8001b0a <__aeabi_dadd+0x5ea>
 80019dc:	2520      	movs	r5, #32
 80019de:	000f      	movs	r7, r1
 80019e0:	1aed      	subs	r5, r5, r3
 80019e2:	40af      	lsls	r7, r5
 80019e4:	46b9      	mov	r9, r7
 80019e6:	0007      	movs	r7, r0
 80019e8:	46aa      	mov	sl, r5
 80019ea:	40df      	lsrs	r7, r3
 80019ec:	464d      	mov	r5, r9
 80019ee:	433d      	orrs	r5, r7
 80019f0:	002f      	movs	r7, r5
 80019f2:	4655      	mov	r5, sl
 80019f4:	40a8      	lsls	r0, r5
 80019f6:	40d9      	lsrs	r1, r3
 80019f8:	1e45      	subs	r5, r0, #1
 80019fa:	41a8      	sbcs	r0, r5
 80019fc:	4488      	add	r8, r1
 80019fe:	4307      	orrs	r7, r0
 8001a00:	18bf      	adds	r7, r7, r2
 8001a02:	4297      	cmp	r7, r2
 8001a04:	4192      	sbcs	r2, r2
 8001a06:	4251      	negs	r1, r2
 8001a08:	4441      	add	r1, r8
 8001a0a:	0035      	movs	r5, r6
 8001a0c:	e63a      	b.n	8001684 <__aeabi_dadd+0x164>
 8001a0e:	4664      	mov	r4, ip
 8001a10:	0035      	movs	r5, r6
 8001a12:	4641      	mov	r1, r8
 8001a14:	0010      	movs	r0, r2
 8001a16:	e685      	b.n	8001724 <__aeabi_dadd+0x204>
 8001a18:	000b      	movs	r3, r1
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	2d00      	cmp	r5, #0
 8001a1e:	d000      	beq.n	8001a22 <__aeabi_dadd+0x502>
 8001a20:	e663      	b.n	80016ea <__aeabi_dadd+0x1ca>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f5      	beq.n	8001a12 <__aeabi_dadd+0x4f2>
 8001a26:	4643      	mov	r3, r8
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dadd+0x50e>
 8001a2c:	e67a      	b.n	8001724 <__aeabi_dadd+0x204>
 8001a2e:	1887      	adds	r7, r0, r2
 8001a30:	4287      	cmp	r7, r0
 8001a32:	4180      	sbcs	r0, r0
 8001a34:	2207      	movs	r2, #7
 8001a36:	4441      	add	r1, r8
 8001a38:	4240      	negs	r0, r0
 8001a3a:	1809      	adds	r1, r1, r0
 8001a3c:	403a      	ands	r2, r7
 8001a3e:	020b      	lsls	r3, r1, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dadd+0x524>
 8001a42:	e6d5      	b.n	80017f0 <__aeabi_dadd+0x2d0>
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <__aeabi_dadd+0x634>)
 8001a46:	3501      	adds	r5, #1
 8001a48:	4019      	ands	r1, r3
 8001a4a:	e5c9      	b.n	80015e0 <__aeabi_dadd+0xc0>
 8001a4c:	0038      	movs	r0, r7
 8001a4e:	e669      	b.n	8001724 <__aeabi_dadd+0x204>
 8001a50:	001e      	movs	r6, r3
 8001a52:	4647      	mov	r7, r8
 8001a54:	3e20      	subs	r6, #32
 8001a56:	40f7      	lsrs	r7, r6
 8001a58:	46bc      	mov	ip, r7
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x548>
 8001a5e:	2640      	movs	r6, #64	; 0x40
 8001a60:	1af3      	subs	r3, r6, r3
 8001a62:	4646      	mov	r6, r8
 8001a64:	409e      	lsls	r6, r3
 8001a66:	4332      	orrs	r2, r6
 8001a68:	0017      	movs	r7, r2
 8001a6a:	4663      	mov	r3, ip
 8001a6c:	1e7a      	subs	r2, r7, #1
 8001a6e:	4197      	sbcs	r7, r2
 8001a70:	431f      	orrs	r7, r3
 8001a72:	e602      	b.n	800167a <__aeabi_dadd+0x15a>
 8001a74:	4d36      	ldr	r5, [pc, #216]	; (8001b50 <__aeabi_dadd+0x630>)
 8001a76:	42ae      	cmp	r6, r5
 8001a78:	d0ca      	beq.n	8001a10 <__aeabi_dadd+0x4f0>
 8001a7a:	2580      	movs	r5, #128	; 0x80
 8001a7c:	042d      	lsls	r5, r5, #16
 8001a7e:	425b      	negs	r3, r3
 8001a80:	4329      	orrs	r1, r5
 8001a82:	e7a6      	b.n	80019d2 <__aeabi_dadd+0x4b2>
 8001a84:	4308      	orrs	r0, r1
 8001a86:	1e41      	subs	r1, r0, #1
 8001a88:	4188      	sbcs	r0, r1
 8001a8a:	e6a6      	b.n	80017da <__aeabi_dadd+0x2ba>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x572>
 8001a90:	e648      	b.n	8001724 <__aeabi_dadd+0x204>
 8001a92:	1a87      	subs	r7, r0, r2
 8001a94:	4643      	mov	r3, r8
 8001a96:	42b8      	cmp	r0, r7
 8001a98:	41b6      	sbcs	r6, r6
 8001a9a:	1acb      	subs	r3, r1, r3
 8001a9c:	4276      	negs	r6, r6
 8001a9e:	1b9e      	subs	r6, r3, r6
 8001aa0:	0233      	lsls	r3, r6, #8
 8001aa2:	d54b      	bpl.n	8001b3c <__aeabi_dadd+0x61c>
 8001aa4:	1a17      	subs	r7, r2, r0
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	42ba      	cmp	r2, r7
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	1a59      	subs	r1, r3, r1
 8001aae:	4252      	negs	r2, r2
 8001ab0:	1a89      	subs	r1, r1, r2
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	403a      	ands	r2, r7
 8001ab8:	e592      	b.n	80015e0 <__aeabi_dadd+0xc0>
 8001aba:	4301      	orrs	r1, r0
 8001abc:	000f      	movs	r7, r1
 8001abe:	1e79      	subs	r1, r7, #1
 8001ac0:	418f      	sbcs	r7, r1
 8001ac2:	e79d      	b.n	8001a00 <__aeabi_dadd+0x4e0>
 8001ac4:	001c      	movs	r4, r3
 8001ac6:	000f      	movs	r7, r1
 8001ac8:	3c20      	subs	r4, #32
 8001aca:	40e7      	lsrs	r7, r4
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d003      	beq.n	8001ad8 <__aeabi_dadd+0x5b8>
 8001ad0:	2440      	movs	r4, #64	; 0x40
 8001ad2:	1ae3      	subs	r3, r4, r3
 8001ad4:	4099      	lsls	r1, r3
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4338      	orrs	r0, r7
 8001ade:	e67c      	b.n	80017da <__aeabi_dadd+0x2ba>
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	e625      	b.n	8001732 <__aeabi_dadd+0x212>
 8001ae6:	1a17      	subs	r7, r2, r0
 8001ae8:	4643      	mov	r3, r8
 8001aea:	42ba      	cmp	r2, r7
 8001aec:	4192      	sbcs	r2, r2
 8001aee:	1a59      	subs	r1, r3, r1
 8001af0:	4252      	negs	r2, r2
 8001af2:	1a89      	subs	r1, r1, r2
 8001af4:	4664      	mov	r4, ip
 8001af6:	0035      	movs	r5, r6
 8001af8:	e543      	b.n	8001582 <__aeabi_dadd+0x62>
 8001afa:	4641      	mov	r1, r8
 8001afc:	0010      	movs	r0, r2
 8001afe:	4d14      	ldr	r5, [pc, #80]	; (8001b50 <__aeabi_dadd+0x630>)
 8001b00:	e610      	b.n	8001724 <__aeabi_dadd+0x204>
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	2400      	movs	r4, #0
 8001b06:	0312      	lsls	r2, r2, #12
 8001b08:	e680      	b.n	800180c <__aeabi_dadd+0x2ec>
 8001b0a:	001d      	movs	r5, r3
 8001b0c:	000f      	movs	r7, r1
 8001b0e:	3d20      	subs	r5, #32
 8001b10:	40ef      	lsrs	r7, r5
 8001b12:	46bc      	mov	ip, r7
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d003      	beq.n	8001b20 <__aeabi_dadd+0x600>
 8001b18:	2540      	movs	r5, #64	; 0x40
 8001b1a:	1aeb      	subs	r3, r5, r3
 8001b1c:	4099      	lsls	r1, r3
 8001b1e:	4308      	orrs	r0, r1
 8001b20:	0007      	movs	r7, r0
 8001b22:	4663      	mov	r3, ip
 8001b24:	1e78      	subs	r0, r7, #1
 8001b26:	4187      	sbcs	r7, r0
 8001b28:	431f      	orrs	r7, r3
 8001b2a:	e769      	b.n	8001a00 <__aeabi_dadd+0x4e0>
 8001b2c:	1887      	adds	r7, r0, r2
 8001b2e:	4297      	cmp	r7, r2
 8001b30:	419b      	sbcs	r3, r3
 8001b32:	4441      	add	r1, r8
 8001b34:	425b      	negs	r3, r3
 8001b36:	18c9      	adds	r1, r1, r3
 8001b38:	0035      	movs	r5, r6
 8001b3a:	e5a3      	b.n	8001684 <__aeabi_dadd+0x164>
 8001b3c:	003b      	movs	r3, r7
 8001b3e:	4333      	orrs	r3, r6
 8001b40:	d0ce      	beq.n	8001ae0 <__aeabi_dadd+0x5c0>
 8001b42:	2207      	movs	r2, #7
 8001b44:	0031      	movs	r1, r6
 8001b46:	403a      	ands	r2, r7
 8001b48:	e652      	b.n	80017f0 <__aeabi_dadd+0x2d0>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	e5f4      	b.n	800173a <__aeabi_dadd+0x21a>
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	ff7fffff 	.word	0xff7fffff

08001b58 <__aeabi_ddiv>:
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	4657      	mov	r7, sl
 8001b5c:	46de      	mov	lr, fp
 8001b5e:	464e      	mov	r6, r9
 8001b60:	4645      	mov	r5, r8
 8001b62:	b5e0      	push	{r5, r6, r7, lr}
 8001b64:	4683      	mov	fp, r0
 8001b66:	0007      	movs	r7, r0
 8001b68:	030e      	lsls	r6, r1, #12
 8001b6a:	0048      	lsls	r0, r1, #1
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	4692      	mov	sl, r2
 8001b70:	001c      	movs	r4, r3
 8001b72:	0b36      	lsrs	r6, r6, #12
 8001b74:	0d40      	lsrs	r0, r0, #21
 8001b76:	0fcd      	lsrs	r5, r1, #31
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x26>
 8001b7c:	e09d      	b.n	8001cba <__aeabi_ddiv+0x162>
 8001b7e:	4b95      	ldr	r3, [pc, #596]	; (8001dd4 <__aeabi_ddiv+0x27c>)
 8001b80:	4298      	cmp	r0, r3
 8001b82:	d039      	beq.n	8001bf8 <__aeabi_ddiv+0xa0>
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	00f6      	lsls	r6, r6, #3
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431e      	orrs	r6, r3
 8001b8c:	4a92      	ldr	r2, [pc, #584]	; (8001dd8 <__aeabi_ddiv+0x280>)
 8001b8e:	0f7b      	lsrs	r3, r7, #29
 8001b90:	4333      	orrs	r3, r6
 8001b92:	4699      	mov	r9, r3
 8001b94:	4694      	mov	ip, r2
 8001b96:	0003      	movs	r3, r0
 8001b98:	4463      	add	r3, ip
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	00ff      	lsls	r7, r7, #3
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	0323      	lsls	r3, r4, #12
 8001ba6:	0b1b      	lsrs	r3, r3, #12
 8001ba8:	4698      	mov	r8, r3
 8001baa:	0063      	lsls	r3, r4, #1
 8001bac:	0fe4      	lsrs	r4, r4, #31
 8001bae:	4652      	mov	r2, sl
 8001bb0:	0d5b      	lsrs	r3, r3, #21
 8001bb2:	9401      	str	r4, [sp, #4]
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0x60>
 8001bb6:	e0b3      	b.n	8001d20 <__aeabi_ddiv+0x1c8>
 8001bb8:	4986      	ldr	r1, [pc, #536]	; (8001dd4 <__aeabi_ddiv+0x27c>)
 8001bba:	428b      	cmp	r3, r1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0x68>
 8001bbe:	e09e      	b.n	8001cfe <__aeabi_ddiv+0x1a6>
 8001bc0:	4642      	mov	r2, r8
 8001bc2:	00d1      	lsls	r1, r2, #3
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0412      	lsls	r2, r2, #16
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	4651      	mov	r1, sl
 8001bcc:	0f49      	lsrs	r1, r1, #29
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	468b      	mov	fp, r1
 8001bd2:	4981      	ldr	r1, [pc, #516]	; (8001dd8 <__aeabi_ddiv+0x280>)
 8001bd4:	4652      	mov	r2, sl
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	4463      	add	r3, ip
 8001bdc:	1acb      	subs	r3, r1, r3
 8001bde:	2100      	movs	r1, #0
 8001be0:	00d2      	lsls	r2, r2, #3
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	002b      	movs	r3, r5
 8001be6:	4063      	eors	r3, r4
 8001be8:	469a      	mov	sl, r3
 8001bea:	2e0f      	cmp	r6, #15
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x98>
 8001bee:	e105      	b.n	8001dfc <__aeabi_ddiv+0x2a4>
 8001bf0:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <__aeabi_ddiv+0x284>)
 8001bf2:	00b6      	lsls	r6, r6, #2
 8001bf4:	599b      	ldr	r3, [r3, r6]
 8001bf6:	469f      	mov	pc, r3
 8001bf8:	465b      	mov	r3, fp
 8001bfa:	4333      	orrs	r3, r6
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	d000      	beq.n	8001c02 <__aeabi_ddiv+0xaa>
 8001c00:	e0b8      	b.n	8001d74 <__aeabi_ddiv+0x21c>
 8001c02:	2302      	movs	r3, #2
 8001c04:	2608      	movs	r6, #8
 8001c06:	2700      	movs	r7, #0
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	e7ca      	b.n	8001ba4 <__aeabi_ddiv+0x4c>
 8001c0e:	46cb      	mov	fp, r9
 8001c10:	003a      	movs	r2, r7
 8001c12:	9902      	ldr	r1, [sp, #8]
 8001c14:	9501      	str	r5, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	469a      	mov	sl, r3
 8001c1a:	2902      	cmp	r1, #2
 8001c1c:	d027      	beq.n	8001c6e <__aeabi_ddiv+0x116>
 8001c1e:	2903      	cmp	r1, #3
 8001c20:	d100      	bne.n	8001c24 <__aeabi_ddiv+0xcc>
 8001c22:	e280      	b.n	8002126 <__aeabi_ddiv+0x5ce>
 8001c24:	2901      	cmp	r1, #1
 8001c26:	d044      	beq.n	8001cb2 <__aeabi_ddiv+0x15a>
 8001c28:	496d      	ldr	r1, [pc, #436]	; (8001de0 <__aeabi_ddiv+0x288>)
 8001c2a:	9b00      	ldr	r3, [sp, #0]
 8001c2c:	468c      	mov	ip, r1
 8001c2e:	4463      	add	r3, ip
 8001c30:	001c      	movs	r4, r3
 8001c32:	2c00      	cmp	r4, #0
 8001c34:	dd38      	ble.n	8001ca8 <__aeabi_ddiv+0x150>
 8001c36:	0753      	lsls	r3, r2, #29
 8001c38:	d000      	beq.n	8001c3c <__aeabi_ddiv+0xe4>
 8001c3a:	e213      	b.n	8002064 <__aeabi_ddiv+0x50c>
 8001c3c:	08d2      	lsrs	r2, r2, #3
 8001c3e:	465b      	mov	r3, fp
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	d509      	bpl.n	8001c58 <__aeabi_ddiv+0x100>
 8001c44:	4659      	mov	r1, fp
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <__aeabi_ddiv+0x28c>)
 8001c48:	4019      	ands	r1, r3
 8001c4a:	468b      	mov	fp, r1
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	00c9      	lsls	r1, r1, #3
 8001c50:	468c      	mov	ip, r1
 8001c52:	9b00      	ldr	r3, [sp, #0]
 8001c54:	4463      	add	r3, ip
 8001c56:	001c      	movs	r4, r3
 8001c58:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <__aeabi_ddiv+0x290>)
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	dc07      	bgt.n	8001c6e <__aeabi_ddiv+0x116>
 8001c5e:	465b      	mov	r3, fp
 8001c60:	0564      	lsls	r4, r4, #21
 8001c62:	075f      	lsls	r7, r3, #29
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	4317      	orrs	r7, r2
 8001c68:	0b1b      	lsrs	r3, r3, #12
 8001c6a:	0d62      	lsrs	r2, r4, #21
 8001c6c:	e002      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2700      	movs	r7, #0
 8001c72:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <__aeabi_ddiv+0x27c>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0b1c      	lsrs	r4, r3, #12
 8001c7a:	0d0b      	lsrs	r3, r1, #20
 8001c7c:	051b      	lsls	r3, r3, #20
 8001c7e:	4323      	orrs	r3, r4
 8001c80:	0514      	lsls	r4, r2, #20
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <__aeabi_ddiv+0x294>)
 8001c84:	0038      	movs	r0, r7
 8001c86:	4013      	ands	r3, r2
 8001c88:	431c      	orrs	r4, r3
 8001c8a:	4653      	mov	r3, sl
 8001c8c:	0064      	lsls	r4, r4, #1
 8001c8e:	07db      	lsls	r3, r3, #31
 8001c90:	0864      	lsrs	r4, r4, #1
 8001c92:	431c      	orrs	r4, r3
 8001c94:	0021      	movs	r1, r4
 8001c96:	b005      	add	sp, #20
 8001c98:	bc3c      	pop	{r2, r3, r4, r5}
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	46a2      	mov	sl, r4
 8001ca0:	46ab      	mov	fp, r5
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	2301      	movs	r3, #1
 8001caa:	1b1b      	subs	r3, r3, r4
 8001cac:	2b38      	cmp	r3, #56	; 0x38
 8001cae:	dc00      	bgt.n	8001cb2 <__aeabi_ddiv+0x15a>
 8001cb0:	e1ad      	b.n	800200e <__aeabi_ddiv+0x4b6>
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	2700      	movs	r7, #0
 8001cb8:	e7dc      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8001cba:	465b      	mov	r3, fp
 8001cbc:	4333      	orrs	r3, r6
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	d05e      	beq.n	8001d80 <__aeabi_ddiv+0x228>
 8001cc2:	2e00      	cmp	r6, #0
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_ddiv+0x170>
 8001cc6:	e18a      	b.n	8001fde <__aeabi_ddiv+0x486>
 8001cc8:	0030      	movs	r0, r6
 8001cca:	f001 f9fd 	bl	80030c8 <__clzsi2>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	3b0b      	subs	r3, #11
 8001cd2:	2b1c      	cmp	r3, #28
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_ddiv+0x180>
 8001cd6:	e17b      	b.n	8001fd0 <__aeabi_ddiv+0x478>
 8001cd8:	221d      	movs	r2, #29
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	465a      	mov	r2, fp
 8001cde:	0001      	movs	r1, r0
 8001ce0:	40da      	lsrs	r2, r3
 8001ce2:	3908      	subs	r1, #8
 8001ce4:	408e      	lsls	r6, r1
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	465f      	mov	r7, fp
 8001cea:	4333      	orrs	r3, r6
 8001cec:	4699      	mov	r9, r3
 8001cee:	408f      	lsls	r7, r1
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <__aeabi_ddiv+0x298>)
 8001cf2:	2600      	movs	r6, #0
 8001cf4:	1a1b      	subs	r3, r3, r0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	e752      	b.n	8001ba4 <__aeabi_ddiv+0x4c>
 8001cfe:	4641      	mov	r1, r8
 8001d00:	4653      	mov	r3, sl
 8001d02:	430b      	orrs	r3, r1
 8001d04:	493b      	ldr	r1, [pc, #236]	; (8001df4 <__aeabi_ddiv+0x29c>)
 8001d06:	469b      	mov	fp, r3
 8001d08:	468c      	mov	ip, r1
 8001d0a:	9b00      	ldr	r3, [sp, #0]
 8001d0c:	4463      	add	r3, ip
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	465b      	mov	r3, fp
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13b      	bne.n	8001d8e <__aeabi_ddiv+0x236>
 8001d16:	2302      	movs	r3, #2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	431e      	orrs	r6, r3
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	e761      	b.n	8001be4 <__aeabi_ddiv+0x8c>
 8001d20:	4643      	mov	r3, r8
 8001d22:	4313      	orrs	r3, r2
 8001d24:	469b      	mov	fp, r3
 8001d26:	d037      	beq.n	8001d98 <__aeabi_ddiv+0x240>
 8001d28:	4643      	mov	r3, r8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x1d8>
 8001d2e:	e162      	b.n	8001ff6 <__aeabi_ddiv+0x49e>
 8001d30:	4640      	mov	r0, r8
 8001d32:	f001 f9c9 	bl	80030c8 <__clzsi2>
 8001d36:	0003      	movs	r3, r0
 8001d38:	3b0b      	subs	r3, #11
 8001d3a:	2b1c      	cmp	r3, #28
 8001d3c:	dd00      	ble.n	8001d40 <__aeabi_ddiv+0x1e8>
 8001d3e:	e153      	b.n	8001fe8 <__aeabi_ddiv+0x490>
 8001d40:	0002      	movs	r2, r0
 8001d42:	4641      	mov	r1, r8
 8001d44:	3a08      	subs	r2, #8
 8001d46:	4091      	lsls	r1, r2
 8001d48:	4688      	mov	r8, r1
 8001d4a:	211d      	movs	r1, #29
 8001d4c:	1acb      	subs	r3, r1, r3
 8001d4e:	4651      	mov	r1, sl
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	000b      	movs	r3, r1
 8001d54:	4641      	mov	r1, r8
 8001d56:	430b      	orrs	r3, r1
 8001d58:	469b      	mov	fp, r3
 8001d5a:	4653      	mov	r3, sl
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	001a      	movs	r2, r3
 8001d60:	9b00      	ldr	r3, [sp, #0]
 8001d62:	4925      	ldr	r1, [pc, #148]	; (8001df8 <__aeabi_ddiv+0x2a0>)
 8001d64:	469c      	mov	ip, r3
 8001d66:	4460      	add	r0, ip
 8001d68:	0003      	movs	r3, r0
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	4463      	add	r3, ip
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2100      	movs	r1, #0
 8001d72:	e737      	b.n	8001be4 <__aeabi_ddiv+0x8c>
 8001d74:	2303      	movs	r3, #3
 8001d76:	46b1      	mov	r9, r6
 8001d78:	9000      	str	r0, [sp, #0]
 8001d7a:	260c      	movs	r6, #12
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	e711      	b.n	8001ba4 <__aeabi_ddiv+0x4c>
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	2604      	movs	r6, #4
 8001d88:	2700      	movs	r7, #0
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	e70a      	b.n	8001ba4 <__aeabi_ddiv+0x4c>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	46c3      	mov	fp, r8
 8001d92:	431e      	orrs	r6, r3
 8001d94:	2103      	movs	r1, #3
 8001d96:	e725      	b.n	8001be4 <__aeabi_ddiv+0x8c>
 8001d98:	3301      	adds	r3, #1
 8001d9a:	431e      	orrs	r6, r3
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	e720      	b.n	8001be4 <__aeabi_ddiv+0x8c>
 8001da2:	2300      	movs	r3, #0
 8001da4:	469a      	mov	sl, r3
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	2700      	movs	r7, #0
 8001daa:	031b      	lsls	r3, r3, #12
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <__aeabi_ddiv+0x27c>)
 8001dae:	e761      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	4649      	mov	r1, r9
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	4219      	tst	r1, r3
 8001db8:	d100      	bne.n	8001dbc <__aeabi_ddiv+0x264>
 8001dba:	e0e2      	b.n	8001f82 <__aeabi_ddiv+0x42a>
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	4219      	tst	r1, r3
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_ddiv+0x26c>
 8001dc2:	e0de      	b.n	8001f82 <__aeabi_ddiv+0x42a>
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	031b      	lsls	r3, r3, #12
 8001dc8:	0017      	movs	r7, r2
 8001dca:	0b1b      	lsrs	r3, r3, #12
 8001dcc:	46a2      	mov	sl, r4
 8001dce:	4a01      	ldr	r2, [pc, #4]	; (8001dd4 <__aeabi_ddiv+0x27c>)
 8001dd0:	e750      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	fffffc01 	.word	0xfffffc01
 8001ddc:	0800d4a4 	.word	0x0800d4a4
 8001de0:	000003ff 	.word	0x000003ff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	000007fe 	.word	0x000007fe
 8001dec:	800fffff 	.word	0x800fffff
 8001df0:	fffffc0d 	.word	0xfffffc0d
 8001df4:	fffff801 	.word	0xfffff801
 8001df8:	000003f3 	.word	0x000003f3
 8001dfc:	45d9      	cmp	r9, fp
 8001dfe:	d900      	bls.n	8001e02 <__aeabi_ddiv+0x2aa>
 8001e00:	e0cb      	b.n	8001f9a <__aeabi_ddiv+0x442>
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x2ae>
 8001e04:	e0c6      	b.n	8001f94 <__aeabi_ddiv+0x43c>
 8001e06:	003c      	movs	r4, r7
 8001e08:	4648      	mov	r0, r9
 8001e0a:	2700      	movs	r7, #0
 8001e0c:	9b00      	ldr	r3, [sp, #0]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	465b      	mov	r3, fp
 8001e14:	0e16      	lsrs	r6, r2, #24
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	431e      	orrs	r6, r3
 8001e1a:	0213      	lsls	r3, r2, #8
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	0433      	lsls	r3, r6, #16
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	4699      	mov	r9, r3
 8001e24:	0c31      	lsrs	r1, r6, #16
 8001e26:	9101      	str	r1, [sp, #4]
 8001e28:	f7fe fa08 	bl	800023c <__aeabi_uidivmod>
 8001e2c:	464a      	mov	r2, r9
 8001e2e:	4342      	muls	r2, r0
 8001e30:	040b      	lsls	r3, r1, #16
 8001e32:	0c21      	lsrs	r1, r4, #16
 8001e34:	0005      	movs	r5, r0
 8001e36:	4319      	orrs	r1, r3
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d907      	bls.n	8001e4c <__aeabi_ddiv+0x2f4>
 8001e3c:	1989      	adds	r1, r1, r6
 8001e3e:	3d01      	subs	r5, #1
 8001e40:	428e      	cmp	r6, r1
 8001e42:	d803      	bhi.n	8001e4c <__aeabi_ddiv+0x2f4>
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d901      	bls.n	8001e4c <__aeabi_ddiv+0x2f4>
 8001e48:	1e85      	subs	r5, r0, #2
 8001e4a:	1989      	adds	r1, r1, r6
 8001e4c:	1a88      	subs	r0, r1, r2
 8001e4e:	9901      	ldr	r1, [sp, #4]
 8001e50:	f7fe f9f4 	bl	800023c <__aeabi_uidivmod>
 8001e54:	0409      	lsls	r1, r1, #16
 8001e56:	468c      	mov	ip, r1
 8001e58:	464a      	mov	r2, r9
 8001e5a:	0421      	lsls	r1, r4, #16
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	4342      	muls	r2, r0
 8001e60:	0c09      	lsrs	r1, r1, #16
 8001e62:	0003      	movs	r3, r0
 8001e64:	4321      	orrs	r1, r4
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d904      	bls.n	8001e74 <__aeabi_ddiv+0x31c>
 8001e6a:	1989      	adds	r1, r1, r6
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	428e      	cmp	r6, r1
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x31c>
 8001e72:	e0f1      	b.n	8002058 <__aeabi_ddiv+0x500>
 8001e74:	042d      	lsls	r5, r5, #16
 8001e76:	431d      	orrs	r5, r3
 8001e78:	46ab      	mov	fp, r5
 8001e7a:	4643      	mov	r3, r8
 8001e7c:	1a89      	subs	r1, r1, r2
 8001e7e:	4642      	mov	r2, r8
 8001e80:	0c28      	lsrs	r0, r5, #16
 8001e82:	0412      	lsls	r2, r2, #16
 8001e84:	0c1d      	lsrs	r5, r3, #16
 8001e86:	465b      	mov	r3, fp
 8001e88:	0c14      	lsrs	r4, r2, #16
 8001e8a:	0022      	movs	r2, r4
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	0c1b      	lsrs	r3, r3, #16
 8001e90:	435a      	muls	r2, r3
 8001e92:	9403      	str	r4, [sp, #12]
 8001e94:	436b      	muls	r3, r5
 8001e96:	4344      	muls	r4, r0
 8001e98:	9502      	str	r5, [sp, #8]
 8001e9a:	4368      	muls	r0, r5
 8001e9c:	191b      	adds	r3, r3, r4
 8001e9e:	0c15      	lsrs	r5, r2, #16
 8001ea0:	18eb      	adds	r3, r5, r3
 8001ea2:	429c      	cmp	r4, r3
 8001ea4:	d903      	bls.n	8001eae <__aeabi_ddiv+0x356>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0264      	lsls	r4, r4, #9
 8001eaa:	46a4      	mov	ip, r4
 8001eac:	4460      	add	r0, ip
 8001eae:	0c1c      	lsrs	r4, r3, #16
 8001eb0:	0415      	lsls	r5, r2, #16
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	0c2d      	lsrs	r5, r5, #16
 8001eb6:	1820      	adds	r0, r4, r0
 8001eb8:	195d      	adds	r5, r3, r5
 8001eba:	4281      	cmp	r1, r0
 8001ebc:	d377      	bcc.n	8001fae <__aeabi_ddiv+0x456>
 8001ebe:	d073      	beq.n	8001fa8 <__aeabi_ddiv+0x450>
 8001ec0:	1a0c      	subs	r4, r1, r0
 8001ec2:	4aa2      	ldr	r2, [pc, #648]	; (800214c <__aeabi_ddiv+0x5f4>)
 8001ec4:	1b7d      	subs	r5, r7, r5
 8001ec6:	42af      	cmp	r7, r5
 8001ec8:	41bf      	sbcs	r7, r7
 8001eca:	4694      	mov	ip, r2
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	427f      	negs	r7, r7
 8001ed0:	4463      	add	r3, ip
 8001ed2:	1be0      	subs	r0, r4, r7
 8001ed4:	001c      	movs	r4, r3
 8001ed6:	4286      	cmp	r6, r0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_ddiv+0x384>
 8001eda:	e0db      	b.n	8002094 <__aeabi_ddiv+0x53c>
 8001edc:	9901      	ldr	r1, [sp, #4]
 8001ede:	f7fe f9ad 	bl	800023c <__aeabi_uidivmod>
 8001ee2:	464a      	mov	r2, r9
 8001ee4:	4342      	muls	r2, r0
 8001ee6:	040b      	lsls	r3, r1, #16
 8001ee8:	0c29      	lsrs	r1, r5, #16
 8001eea:	0007      	movs	r7, r0
 8001eec:	4319      	orrs	r1, r3
 8001eee:	428a      	cmp	r2, r1
 8001ef0:	d907      	bls.n	8001f02 <__aeabi_ddiv+0x3aa>
 8001ef2:	1989      	adds	r1, r1, r6
 8001ef4:	3f01      	subs	r7, #1
 8001ef6:	428e      	cmp	r6, r1
 8001ef8:	d803      	bhi.n	8001f02 <__aeabi_ddiv+0x3aa>
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d901      	bls.n	8001f02 <__aeabi_ddiv+0x3aa>
 8001efe:	1e87      	subs	r7, r0, #2
 8001f00:	1989      	adds	r1, r1, r6
 8001f02:	1a88      	subs	r0, r1, r2
 8001f04:	9901      	ldr	r1, [sp, #4]
 8001f06:	f7fe f999 	bl	800023c <__aeabi_uidivmod>
 8001f0a:	0409      	lsls	r1, r1, #16
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	4689      	mov	r9, r1
 8001f10:	0429      	lsls	r1, r5, #16
 8001f12:	464d      	mov	r5, r9
 8001f14:	4342      	muls	r2, r0
 8001f16:	0c09      	lsrs	r1, r1, #16
 8001f18:	0003      	movs	r3, r0
 8001f1a:	4329      	orrs	r1, r5
 8001f1c:	428a      	cmp	r2, r1
 8001f1e:	d907      	bls.n	8001f30 <__aeabi_ddiv+0x3d8>
 8001f20:	1989      	adds	r1, r1, r6
 8001f22:	3b01      	subs	r3, #1
 8001f24:	428e      	cmp	r6, r1
 8001f26:	d803      	bhi.n	8001f30 <__aeabi_ddiv+0x3d8>
 8001f28:	428a      	cmp	r2, r1
 8001f2a:	d901      	bls.n	8001f30 <__aeabi_ddiv+0x3d8>
 8001f2c:	1e83      	subs	r3, r0, #2
 8001f2e:	1989      	adds	r1, r1, r6
 8001f30:	043f      	lsls	r7, r7, #16
 8001f32:	1a89      	subs	r1, r1, r2
 8001f34:	003a      	movs	r2, r7
 8001f36:	9f03      	ldr	r7, [sp, #12]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	0038      	movs	r0, r7
 8001f3c:	0413      	lsls	r3, r2, #16
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	4358      	muls	r0, r3
 8001f42:	4681      	mov	r9, r0
 8001f44:	9802      	ldr	r0, [sp, #8]
 8001f46:	0c15      	lsrs	r5, r2, #16
 8001f48:	436f      	muls	r7, r5
 8001f4a:	4343      	muls	r3, r0
 8001f4c:	4345      	muls	r5, r0
 8001f4e:	4648      	mov	r0, r9
 8001f50:	0c00      	lsrs	r0, r0, #16
 8001f52:	4684      	mov	ip, r0
 8001f54:	19db      	adds	r3, r3, r7
 8001f56:	4463      	add	r3, ip
 8001f58:	429f      	cmp	r7, r3
 8001f5a:	d903      	bls.n	8001f64 <__aeabi_ddiv+0x40c>
 8001f5c:	2080      	movs	r0, #128	; 0x80
 8001f5e:	0240      	lsls	r0, r0, #9
 8001f60:	4684      	mov	ip, r0
 8001f62:	4465      	add	r5, ip
 8001f64:	4648      	mov	r0, r9
 8001f66:	0c1f      	lsrs	r7, r3, #16
 8001f68:	0400      	lsls	r0, r0, #16
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	0c00      	lsrs	r0, r0, #16
 8001f6e:	197d      	adds	r5, r7, r5
 8001f70:	1818      	adds	r0, r3, r0
 8001f72:	42a9      	cmp	r1, r5
 8001f74:	d200      	bcs.n	8001f78 <__aeabi_ddiv+0x420>
 8001f76:	e084      	b.n	8002082 <__aeabi_ddiv+0x52a>
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x424>
 8001f7a:	e07f      	b.n	800207c <__aeabi_ddiv+0x524>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	e657      	b.n	8001c32 <__aeabi_ddiv+0xda>
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	464a      	mov	r2, r9
 8001f86:	031b      	lsls	r3, r3, #12
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	0b1b      	lsrs	r3, r3, #12
 8001f8e:	46aa      	mov	sl, r5
 8001f90:	4a6f      	ldr	r2, [pc, #444]	; (8002150 <__aeabi_ddiv+0x5f8>)
 8001f92:	e66f      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8001f94:	42ba      	cmp	r2, r7
 8001f96:	d900      	bls.n	8001f9a <__aeabi_ddiv+0x442>
 8001f98:	e735      	b.n	8001e06 <__aeabi_ddiv+0x2ae>
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	07dc      	lsls	r4, r3, #31
 8001f9e:	0858      	lsrs	r0, r3, #1
 8001fa0:	087b      	lsrs	r3, r7, #1
 8001fa2:	431c      	orrs	r4, r3
 8001fa4:	07ff      	lsls	r7, r7, #31
 8001fa6:	e734      	b.n	8001e12 <__aeabi_ddiv+0x2ba>
 8001fa8:	2400      	movs	r4, #0
 8001faa:	42af      	cmp	r7, r5
 8001fac:	d289      	bcs.n	8001ec2 <__aeabi_ddiv+0x36a>
 8001fae:	4447      	add	r7, r8
 8001fb0:	4547      	cmp	r7, r8
 8001fb2:	41a4      	sbcs	r4, r4
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	4264      	negs	r4, r4
 8001fb8:	19a4      	adds	r4, r4, r6
 8001fba:	1864      	adds	r4, r4, r1
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	42a6      	cmp	r6, r4
 8001fc0:	d21e      	bcs.n	8002000 <__aeabi_ddiv+0x4a8>
 8001fc2:	42a0      	cmp	r0, r4
 8001fc4:	d86d      	bhi.n	80020a2 <__aeabi_ddiv+0x54a>
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x472>
 8001fc8:	e0b6      	b.n	8002138 <__aeabi_ddiv+0x5e0>
 8001fca:	1a24      	subs	r4, r4, r0
 8001fcc:	469b      	mov	fp, r3
 8001fce:	e778      	b.n	8001ec2 <__aeabi_ddiv+0x36a>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	465a      	mov	r2, fp
 8001fd4:	3b28      	subs	r3, #40	; 0x28
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	2700      	movs	r7, #0
 8001fda:	4691      	mov	r9, r2
 8001fdc:	e688      	b.n	8001cf0 <__aeabi_ddiv+0x198>
 8001fde:	4658      	mov	r0, fp
 8001fe0:	f001 f872 	bl	80030c8 <__clzsi2>
 8001fe4:	3020      	adds	r0, #32
 8001fe6:	e672      	b.n	8001cce <__aeabi_ddiv+0x176>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	4652      	mov	r2, sl
 8001fec:	3b28      	subs	r3, #40	; 0x28
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	4693      	mov	fp, r2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	e6b4      	b.n	8001d60 <__aeabi_ddiv+0x208>
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	f001 f866 	bl	80030c8 <__clzsi2>
 8001ffc:	3020      	adds	r0, #32
 8001ffe:	e69a      	b.n	8001d36 <__aeabi_ddiv+0x1de>
 8002000:	42a6      	cmp	r6, r4
 8002002:	d1e2      	bne.n	8001fca <__aeabi_ddiv+0x472>
 8002004:	45b8      	cmp	r8, r7
 8002006:	d9dc      	bls.n	8001fc2 <__aeabi_ddiv+0x46a>
 8002008:	1a34      	subs	r4, r6, r0
 800200a:	469b      	mov	fp, r3
 800200c:	e759      	b.n	8001ec2 <__aeabi_ddiv+0x36a>
 800200e:	2b1f      	cmp	r3, #31
 8002010:	dc65      	bgt.n	80020de <__aeabi_ddiv+0x586>
 8002012:	4c50      	ldr	r4, [pc, #320]	; (8002154 <__aeabi_ddiv+0x5fc>)
 8002014:	9900      	ldr	r1, [sp, #0]
 8002016:	46a4      	mov	ip, r4
 8002018:	465c      	mov	r4, fp
 800201a:	4461      	add	r1, ip
 800201c:	0008      	movs	r0, r1
 800201e:	408c      	lsls	r4, r1
 8002020:	0011      	movs	r1, r2
 8002022:	4082      	lsls	r2, r0
 8002024:	40d9      	lsrs	r1, r3
 8002026:	1e50      	subs	r0, r2, #1
 8002028:	4182      	sbcs	r2, r0
 800202a:	430c      	orrs	r4, r1
 800202c:	4314      	orrs	r4, r2
 800202e:	465a      	mov	r2, fp
 8002030:	40da      	lsrs	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	0762      	lsls	r2, r4, #29
 8002036:	d009      	beq.n	800204c <__aeabi_ddiv+0x4f4>
 8002038:	220f      	movs	r2, #15
 800203a:	4022      	ands	r2, r4
 800203c:	2a04      	cmp	r2, #4
 800203e:	d005      	beq.n	800204c <__aeabi_ddiv+0x4f4>
 8002040:	0022      	movs	r2, r4
 8002042:	1d14      	adds	r4, r2, #4
 8002044:	4294      	cmp	r4, r2
 8002046:	4189      	sbcs	r1, r1
 8002048:	4249      	negs	r1, r1
 800204a:	185b      	adds	r3, r3, r1
 800204c:	021a      	lsls	r2, r3, #8
 800204e:	d562      	bpl.n	8002116 <__aeabi_ddiv+0x5be>
 8002050:	2201      	movs	r2, #1
 8002052:	2300      	movs	r3, #0
 8002054:	2700      	movs	r7, #0
 8002056:	e60d      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8002058:	428a      	cmp	r2, r1
 800205a:	d800      	bhi.n	800205e <__aeabi_ddiv+0x506>
 800205c:	e70a      	b.n	8001e74 <__aeabi_ddiv+0x31c>
 800205e:	1e83      	subs	r3, r0, #2
 8002060:	1989      	adds	r1, r1, r6
 8002062:	e707      	b.n	8001e74 <__aeabi_ddiv+0x31c>
 8002064:	230f      	movs	r3, #15
 8002066:	4013      	ands	r3, r2
 8002068:	2b04      	cmp	r3, #4
 800206a:	d100      	bne.n	800206e <__aeabi_ddiv+0x516>
 800206c:	e5e6      	b.n	8001c3c <__aeabi_ddiv+0xe4>
 800206e:	1d17      	adds	r7, r2, #4
 8002070:	4297      	cmp	r7, r2
 8002072:	4192      	sbcs	r2, r2
 8002074:	4253      	negs	r3, r2
 8002076:	449b      	add	fp, r3
 8002078:	08fa      	lsrs	r2, r7, #3
 800207a:	e5e0      	b.n	8001c3e <__aeabi_ddiv+0xe6>
 800207c:	2800      	cmp	r0, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_ddiv+0x52a>
 8002080:	e5d7      	b.n	8001c32 <__aeabi_ddiv+0xda>
 8002082:	1871      	adds	r1, r6, r1
 8002084:	1e53      	subs	r3, r2, #1
 8002086:	42b1      	cmp	r1, r6
 8002088:	d327      	bcc.n	80020da <__aeabi_ddiv+0x582>
 800208a:	42a9      	cmp	r1, r5
 800208c:	d315      	bcc.n	80020ba <__aeabi_ddiv+0x562>
 800208e:	d058      	beq.n	8002142 <__aeabi_ddiv+0x5ea>
 8002090:	001a      	movs	r2, r3
 8002092:	e773      	b.n	8001f7c <__aeabi_ddiv+0x424>
 8002094:	2b00      	cmp	r3, #0
 8002096:	dc00      	bgt.n	800209a <__aeabi_ddiv+0x542>
 8002098:	e604      	b.n	8001ca4 <__aeabi_ddiv+0x14c>
 800209a:	2301      	movs	r3, #1
 800209c:	2200      	movs	r2, #0
 800209e:	449b      	add	fp, r3
 80020a0:	e5cd      	b.n	8001c3e <__aeabi_ddiv+0xe6>
 80020a2:	2302      	movs	r3, #2
 80020a4:	4447      	add	r7, r8
 80020a6:	4547      	cmp	r7, r8
 80020a8:	4189      	sbcs	r1, r1
 80020aa:	425b      	negs	r3, r3
 80020ac:	469c      	mov	ip, r3
 80020ae:	4249      	negs	r1, r1
 80020b0:	1989      	adds	r1, r1, r6
 80020b2:	190c      	adds	r4, r1, r4
 80020b4:	44e3      	add	fp, ip
 80020b6:	1a24      	subs	r4, r4, r0
 80020b8:	e703      	b.n	8001ec2 <__aeabi_ddiv+0x36a>
 80020ba:	4643      	mov	r3, r8
 80020bc:	005f      	lsls	r7, r3, #1
 80020be:	4547      	cmp	r7, r8
 80020c0:	419b      	sbcs	r3, r3
 80020c2:	46b8      	mov	r8, r7
 80020c4:	425b      	negs	r3, r3
 80020c6:	199e      	adds	r6, r3, r6
 80020c8:	3a02      	subs	r2, #2
 80020ca:	1989      	adds	r1, r1, r6
 80020cc:	42a9      	cmp	r1, r5
 80020ce:	d000      	beq.n	80020d2 <__aeabi_ddiv+0x57a>
 80020d0:	e754      	b.n	8001f7c <__aeabi_ddiv+0x424>
 80020d2:	4540      	cmp	r0, r8
 80020d4:	d000      	beq.n	80020d8 <__aeabi_ddiv+0x580>
 80020d6:	e751      	b.n	8001f7c <__aeabi_ddiv+0x424>
 80020d8:	e5ab      	b.n	8001c32 <__aeabi_ddiv+0xda>
 80020da:	001a      	movs	r2, r3
 80020dc:	e7f6      	b.n	80020cc <__aeabi_ddiv+0x574>
 80020de:	211f      	movs	r1, #31
 80020e0:	465f      	mov	r7, fp
 80020e2:	4249      	negs	r1, r1
 80020e4:	1b0c      	subs	r4, r1, r4
 80020e6:	40e7      	lsrs	r7, r4
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d007      	beq.n	80020fc <__aeabi_ddiv+0x5a4>
 80020ec:	491a      	ldr	r1, [pc, #104]	; (8002158 <__aeabi_ddiv+0x600>)
 80020ee:	9b00      	ldr	r3, [sp, #0]
 80020f0:	468c      	mov	ip, r1
 80020f2:	4463      	add	r3, ip
 80020f4:	0018      	movs	r0, r3
 80020f6:	465b      	mov	r3, fp
 80020f8:	4083      	lsls	r3, r0
 80020fa:	431a      	orrs	r2, r3
 80020fc:	1e50      	subs	r0, r2, #1
 80020fe:	4182      	sbcs	r2, r0
 8002100:	433a      	orrs	r2, r7
 8002102:	2707      	movs	r7, #7
 8002104:	2300      	movs	r3, #0
 8002106:	4017      	ands	r7, r2
 8002108:	d009      	beq.n	800211e <__aeabi_ddiv+0x5c6>
 800210a:	210f      	movs	r1, #15
 800210c:	2300      	movs	r3, #0
 800210e:	4011      	ands	r1, r2
 8002110:	0014      	movs	r4, r2
 8002112:	2904      	cmp	r1, #4
 8002114:	d195      	bne.n	8002042 <__aeabi_ddiv+0x4ea>
 8002116:	0022      	movs	r2, r4
 8002118:	075f      	lsls	r7, r3, #29
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	0b1b      	lsrs	r3, r3, #12
 800211e:	08d2      	lsrs	r2, r2, #3
 8002120:	4317      	orrs	r7, r2
 8002122:	2200      	movs	r2, #0
 8002124:	e5a6      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	4659      	mov	r1, fp
 800212a:	031b      	lsls	r3, r3, #12
 800212c:	430b      	orrs	r3, r1
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	0017      	movs	r7, r2
 8002132:	0b1b      	lsrs	r3, r3, #12
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <__aeabi_ddiv+0x5f8>)
 8002136:	e59d      	b.n	8001c74 <__aeabi_ddiv+0x11c>
 8002138:	42bd      	cmp	r5, r7
 800213a:	d8b2      	bhi.n	80020a2 <__aeabi_ddiv+0x54a>
 800213c:	469b      	mov	fp, r3
 800213e:	2400      	movs	r4, #0
 8002140:	e6bf      	b.n	8001ec2 <__aeabi_ddiv+0x36a>
 8002142:	4580      	cmp	r8, r0
 8002144:	d3b9      	bcc.n	80020ba <__aeabi_ddiv+0x562>
 8002146:	001a      	movs	r2, r3
 8002148:	e7c3      	b.n	80020d2 <__aeabi_ddiv+0x57a>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	000003ff 	.word	0x000003ff
 8002150:	000007ff 	.word	0x000007ff
 8002154:	0000041e 	.word	0x0000041e
 8002158:	0000043e 	.word	0x0000043e

0800215c <__eqdf2>:
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	464f      	mov	r7, r9
 8002160:	4646      	mov	r6, r8
 8002162:	46d6      	mov	lr, sl
 8002164:	4684      	mov	ip, r0
 8002166:	b5c0      	push	{r6, r7, lr}
 8002168:	4680      	mov	r8, r0
 800216a:	4e19      	ldr	r6, [pc, #100]	; (80021d0 <__eqdf2+0x74>)
 800216c:	0318      	lsls	r0, r3, #12
 800216e:	030f      	lsls	r7, r1, #12
 8002170:	004d      	lsls	r5, r1, #1
 8002172:	0b00      	lsrs	r0, r0, #12
 8002174:	005c      	lsls	r4, r3, #1
 8002176:	4682      	mov	sl, r0
 8002178:	0b3f      	lsrs	r7, r7, #12
 800217a:	0d6d      	lsrs	r5, r5, #21
 800217c:	0fc9      	lsrs	r1, r1, #31
 800217e:	4691      	mov	r9, r2
 8002180:	0d64      	lsrs	r4, r4, #21
 8002182:	0fdb      	lsrs	r3, r3, #31
 8002184:	2001      	movs	r0, #1
 8002186:	42b5      	cmp	r5, r6
 8002188:	d00a      	beq.n	80021a0 <__eqdf2+0x44>
 800218a:	42b4      	cmp	r4, r6
 800218c:	d003      	beq.n	8002196 <__eqdf2+0x3a>
 800218e:	42a5      	cmp	r5, r4
 8002190:	d101      	bne.n	8002196 <__eqdf2+0x3a>
 8002192:	4557      	cmp	r7, sl
 8002194:	d00c      	beq.n	80021b0 <__eqdf2+0x54>
 8002196:	bc1c      	pop	{r2, r3, r4}
 8002198:	4690      	mov	r8, r2
 800219a:	4699      	mov	r9, r3
 800219c:	46a2      	mov	sl, r4
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a0:	4666      	mov	r6, ip
 80021a2:	433e      	orrs	r6, r7
 80021a4:	d1f7      	bne.n	8002196 <__eqdf2+0x3a>
 80021a6:	42ac      	cmp	r4, r5
 80021a8:	d1f5      	bne.n	8002196 <__eqdf2+0x3a>
 80021aa:	4654      	mov	r4, sl
 80021ac:	4314      	orrs	r4, r2
 80021ae:	d1f2      	bne.n	8002196 <__eqdf2+0x3a>
 80021b0:	2001      	movs	r0, #1
 80021b2:	45c8      	cmp	r8, r9
 80021b4:	d1ef      	bne.n	8002196 <__eqdf2+0x3a>
 80021b6:	4299      	cmp	r1, r3
 80021b8:	d007      	beq.n	80021ca <__eqdf2+0x6e>
 80021ba:	2d00      	cmp	r5, #0
 80021bc:	d1eb      	bne.n	8002196 <__eqdf2+0x3a>
 80021be:	4663      	mov	r3, ip
 80021c0:	431f      	orrs	r7, r3
 80021c2:	0038      	movs	r0, r7
 80021c4:	1e47      	subs	r7, r0, #1
 80021c6:	41b8      	sbcs	r0, r7
 80021c8:	e7e5      	b.n	8002196 <__eqdf2+0x3a>
 80021ca:	2000      	movs	r0, #0
 80021cc:	e7e3      	b.n	8002196 <__eqdf2+0x3a>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__gedf2>:
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	464f      	mov	r7, r9
 80021d8:	4646      	mov	r6, r8
 80021da:	46d6      	mov	lr, sl
 80021dc:	004d      	lsls	r5, r1, #1
 80021de:	b5c0      	push	{r6, r7, lr}
 80021e0:	030e      	lsls	r6, r1, #12
 80021e2:	0fc9      	lsrs	r1, r1, #31
 80021e4:	468a      	mov	sl, r1
 80021e6:	492c      	ldr	r1, [pc, #176]	; (8002298 <__gedf2+0xc4>)
 80021e8:	031f      	lsls	r7, r3, #12
 80021ea:	005c      	lsls	r4, r3, #1
 80021ec:	4680      	mov	r8, r0
 80021ee:	0b36      	lsrs	r6, r6, #12
 80021f0:	0d6d      	lsrs	r5, r5, #21
 80021f2:	4691      	mov	r9, r2
 80021f4:	0b3f      	lsrs	r7, r7, #12
 80021f6:	0d64      	lsrs	r4, r4, #21
 80021f8:	0fdb      	lsrs	r3, r3, #31
 80021fa:	428d      	cmp	r5, r1
 80021fc:	d01e      	beq.n	800223c <__gedf2+0x68>
 80021fe:	428c      	cmp	r4, r1
 8002200:	d016      	beq.n	8002230 <__gedf2+0x5c>
 8002202:	2d00      	cmp	r5, #0
 8002204:	d11e      	bne.n	8002244 <__gedf2+0x70>
 8002206:	4330      	orrs	r0, r6
 8002208:	4684      	mov	ip, r0
 800220a:	2c00      	cmp	r4, #0
 800220c:	d101      	bne.n	8002212 <__gedf2+0x3e>
 800220e:	433a      	orrs	r2, r7
 8002210:	d023      	beq.n	800225a <__gedf2+0x86>
 8002212:	4662      	mov	r2, ip
 8002214:	2a00      	cmp	r2, #0
 8002216:	d01a      	beq.n	800224e <__gedf2+0x7a>
 8002218:	459a      	cmp	sl, r3
 800221a:	d029      	beq.n	8002270 <__gedf2+0x9c>
 800221c:	4651      	mov	r1, sl
 800221e:	2002      	movs	r0, #2
 8002220:	3901      	subs	r1, #1
 8002222:	4008      	ands	r0, r1
 8002224:	3801      	subs	r0, #1
 8002226:	bc1c      	pop	{r2, r3, r4}
 8002228:	4690      	mov	r8, r2
 800222a:	4699      	mov	r9, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002230:	0039      	movs	r1, r7
 8002232:	4311      	orrs	r1, r2
 8002234:	d0e5      	beq.n	8002202 <__gedf2+0x2e>
 8002236:	2002      	movs	r0, #2
 8002238:	4240      	negs	r0, r0
 800223a:	e7f4      	b.n	8002226 <__gedf2+0x52>
 800223c:	4330      	orrs	r0, r6
 800223e:	d1fa      	bne.n	8002236 <__gedf2+0x62>
 8002240:	42ac      	cmp	r4, r5
 8002242:	d00f      	beq.n	8002264 <__gedf2+0x90>
 8002244:	2c00      	cmp	r4, #0
 8002246:	d10f      	bne.n	8002268 <__gedf2+0x94>
 8002248:	433a      	orrs	r2, r7
 800224a:	d0e7      	beq.n	800221c <__gedf2+0x48>
 800224c:	e00c      	b.n	8002268 <__gedf2+0x94>
 800224e:	2201      	movs	r2, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	4393      	bics	r3, r2
 8002254:	0018      	movs	r0, r3
 8002256:	3001      	adds	r0, #1
 8002258:	e7e5      	b.n	8002226 <__gedf2+0x52>
 800225a:	4663      	mov	r3, ip
 800225c:	2000      	movs	r0, #0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0e1      	beq.n	8002226 <__gedf2+0x52>
 8002262:	e7db      	b.n	800221c <__gedf2+0x48>
 8002264:	433a      	orrs	r2, r7
 8002266:	d1e6      	bne.n	8002236 <__gedf2+0x62>
 8002268:	459a      	cmp	sl, r3
 800226a:	d1d7      	bne.n	800221c <__gedf2+0x48>
 800226c:	42a5      	cmp	r5, r4
 800226e:	dcd5      	bgt.n	800221c <__gedf2+0x48>
 8002270:	42a5      	cmp	r5, r4
 8002272:	db05      	blt.n	8002280 <__gedf2+0xac>
 8002274:	42be      	cmp	r6, r7
 8002276:	d8d1      	bhi.n	800221c <__gedf2+0x48>
 8002278:	d008      	beq.n	800228c <__gedf2+0xb8>
 800227a:	2000      	movs	r0, #0
 800227c:	42be      	cmp	r6, r7
 800227e:	d2d2      	bcs.n	8002226 <__gedf2+0x52>
 8002280:	4650      	mov	r0, sl
 8002282:	2301      	movs	r3, #1
 8002284:	3801      	subs	r0, #1
 8002286:	4398      	bics	r0, r3
 8002288:	3001      	adds	r0, #1
 800228a:	e7cc      	b.n	8002226 <__gedf2+0x52>
 800228c:	45c8      	cmp	r8, r9
 800228e:	d8c5      	bhi.n	800221c <__gedf2+0x48>
 8002290:	2000      	movs	r0, #0
 8002292:	45c8      	cmp	r8, r9
 8002294:	d3f4      	bcc.n	8002280 <__gedf2+0xac>
 8002296:	e7c6      	b.n	8002226 <__gedf2+0x52>
 8002298:	000007ff 	.word	0x000007ff

0800229c <__ledf2>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	464f      	mov	r7, r9
 80022a0:	4646      	mov	r6, r8
 80022a2:	46d6      	mov	lr, sl
 80022a4:	004d      	lsls	r5, r1, #1
 80022a6:	b5c0      	push	{r6, r7, lr}
 80022a8:	030e      	lsls	r6, r1, #12
 80022aa:	0fc9      	lsrs	r1, r1, #31
 80022ac:	468a      	mov	sl, r1
 80022ae:	492e      	ldr	r1, [pc, #184]	; (8002368 <__ledf2+0xcc>)
 80022b0:	031f      	lsls	r7, r3, #12
 80022b2:	005c      	lsls	r4, r3, #1
 80022b4:	4680      	mov	r8, r0
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d6d      	lsrs	r5, r5, #21
 80022ba:	4691      	mov	r9, r2
 80022bc:	0b3f      	lsrs	r7, r7, #12
 80022be:	0d64      	lsrs	r4, r4, #21
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	428d      	cmp	r5, r1
 80022c4:	d018      	beq.n	80022f8 <__ledf2+0x5c>
 80022c6:	428c      	cmp	r4, r1
 80022c8:	d011      	beq.n	80022ee <__ledf2+0x52>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d118      	bne.n	8002300 <__ledf2+0x64>
 80022ce:	4330      	orrs	r0, r6
 80022d0:	4684      	mov	ip, r0
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d11e      	bne.n	8002314 <__ledf2+0x78>
 80022d6:	433a      	orrs	r2, r7
 80022d8:	d11c      	bne.n	8002314 <__ledf2+0x78>
 80022da:	4663      	mov	r3, ip
 80022dc:	2000      	movs	r0, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d030      	beq.n	8002344 <__ledf2+0xa8>
 80022e2:	4651      	mov	r1, sl
 80022e4:	2002      	movs	r0, #2
 80022e6:	3901      	subs	r1, #1
 80022e8:	4008      	ands	r0, r1
 80022ea:	3801      	subs	r0, #1
 80022ec:	e02a      	b.n	8002344 <__ledf2+0xa8>
 80022ee:	0039      	movs	r1, r7
 80022f0:	4311      	orrs	r1, r2
 80022f2:	d0ea      	beq.n	80022ca <__ledf2+0x2e>
 80022f4:	2002      	movs	r0, #2
 80022f6:	e025      	b.n	8002344 <__ledf2+0xa8>
 80022f8:	4330      	orrs	r0, r6
 80022fa:	d1fb      	bne.n	80022f4 <__ledf2+0x58>
 80022fc:	42ac      	cmp	r4, r5
 80022fe:	d026      	beq.n	800234e <__ledf2+0xb2>
 8002300:	2c00      	cmp	r4, #0
 8002302:	d126      	bne.n	8002352 <__ledf2+0xb6>
 8002304:	433a      	orrs	r2, r7
 8002306:	d124      	bne.n	8002352 <__ledf2+0xb6>
 8002308:	4651      	mov	r1, sl
 800230a:	2002      	movs	r0, #2
 800230c:	3901      	subs	r1, #1
 800230e:	4008      	ands	r0, r1
 8002310:	3801      	subs	r0, #1
 8002312:	e017      	b.n	8002344 <__ledf2+0xa8>
 8002314:	4662      	mov	r2, ip
 8002316:	2a00      	cmp	r2, #0
 8002318:	d00f      	beq.n	800233a <__ledf2+0x9e>
 800231a:	459a      	cmp	sl, r3
 800231c:	d1e1      	bne.n	80022e2 <__ledf2+0x46>
 800231e:	42a5      	cmp	r5, r4
 8002320:	db05      	blt.n	800232e <__ledf2+0x92>
 8002322:	42be      	cmp	r6, r7
 8002324:	d8dd      	bhi.n	80022e2 <__ledf2+0x46>
 8002326:	d019      	beq.n	800235c <__ledf2+0xc0>
 8002328:	2000      	movs	r0, #0
 800232a:	42be      	cmp	r6, r7
 800232c:	d20a      	bcs.n	8002344 <__ledf2+0xa8>
 800232e:	4650      	mov	r0, sl
 8002330:	2301      	movs	r3, #1
 8002332:	3801      	subs	r0, #1
 8002334:	4398      	bics	r0, r3
 8002336:	3001      	adds	r0, #1
 8002338:	e004      	b.n	8002344 <__ledf2+0xa8>
 800233a:	2201      	movs	r2, #1
 800233c:	3b01      	subs	r3, #1
 800233e:	4393      	bics	r3, r2
 8002340:	0018      	movs	r0, r3
 8002342:	3001      	adds	r0, #1
 8002344:	bc1c      	pop	{r2, r3, r4}
 8002346:	4690      	mov	r8, r2
 8002348:	4699      	mov	r9, r3
 800234a:	46a2      	mov	sl, r4
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234e:	433a      	orrs	r2, r7
 8002350:	d1d0      	bne.n	80022f4 <__ledf2+0x58>
 8002352:	459a      	cmp	sl, r3
 8002354:	d1c5      	bne.n	80022e2 <__ledf2+0x46>
 8002356:	42a5      	cmp	r5, r4
 8002358:	dcc3      	bgt.n	80022e2 <__ledf2+0x46>
 800235a:	e7e0      	b.n	800231e <__ledf2+0x82>
 800235c:	45c8      	cmp	r8, r9
 800235e:	d8c0      	bhi.n	80022e2 <__ledf2+0x46>
 8002360:	2000      	movs	r0, #0
 8002362:	45c8      	cmp	r8, r9
 8002364:	d3e3      	bcc.n	800232e <__ledf2+0x92>
 8002366:	e7ed      	b.n	8002344 <__ledf2+0xa8>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__aeabi_dmul>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	46de      	mov	lr, fp
 8002372:	464e      	mov	r6, r9
 8002374:	4645      	mov	r5, r8
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	4683      	mov	fp, r0
 800237a:	0006      	movs	r6, r0
 800237c:	030f      	lsls	r7, r1, #12
 800237e:	0048      	lsls	r0, r1, #1
 8002380:	b087      	sub	sp, #28
 8002382:	4692      	mov	sl, r2
 8002384:	001d      	movs	r5, r3
 8002386:	0b3f      	lsrs	r7, r7, #12
 8002388:	0d40      	lsrs	r0, r0, #21
 800238a:	0fcc      	lsrs	r4, r1, #31
 800238c:	2800      	cmp	r0, #0
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0x26>
 8002390:	e06f      	b.n	8002472 <__aeabi_dmul+0x106>
 8002392:	4bde      	ldr	r3, [pc, #888]	; (800270c <__aeabi_dmul+0x3a0>)
 8002394:	4298      	cmp	r0, r3
 8002396:	d038      	beq.n	800240a <__aeabi_dmul+0x9e>
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	00ff      	lsls	r7, r7, #3
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431f      	orrs	r7, r3
 80023a0:	0f73      	lsrs	r3, r6, #29
 80023a2:	433b      	orrs	r3, r7
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	4bda      	ldr	r3, [pc, #872]	; (8002710 <__aeabi_dmul+0x3a4>)
 80023a8:	2700      	movs	r7, #0
 80023aa:	4699      	mov	r9, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	469b      	mov	fp, r3
 80023b0:	00f6      	lsls	r6, r6, #3
 80023b2:	4481      	add	r9, r0
 80023b4:	032b      	lsls	r3, r5, #12
 80023b6:	0069      	lsls	r1, r5, #1
 80023b8:	0b1b      	lsrs	r3, r3, #12
 80023ba:	4652      	mov	r2, sl
 80023bc:	4698      	mov	r8, r3
 80023be:	0d49      	lsrs	r1, r1, #21
 80023c0:	0fed      	lsrs	r5, r5, #31
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dmul+0x5c>
 80023c6:	e085      	b.n	80024d4 <__aeabi_dmul+0x168>
 80023c8:	4bd0      	ldr	r3, [pc, #832]	; (800270c <__aeabi_dmul+0x3a0>)
 80023ca:	4299      	cmp	r1, r3
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dmul+0x64>
 80023ce:	e073      	b.n	80024b8 <__aeabi_dmul+0x14c>
 80023d0:	4643      	mov	r3, r8
 80023d2:	00da      	lsls	r2, r3, #3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	4313      	orrs	r3, r2
 80023da:	4652      	mov	r2, sl
 80023dc:	48cc      	ldr	r0, [pc, #816]	; (8002710 <__aeabi_dmul+0x3a4>)
 80023de:	0f52      	lsrs	r2, r2, #29
 80023e0:	4684      	mov	ip, r0
 80023e2:	4313      	orrs	r3, r2
 80023e4:	4652      	mov	r2, sl
 80023e6:	2000      	movs	r0, #0
 80023e8:	4461      	add	r1, ip
 80023ea:	00d2      	lsls	r2, r2, #3
 80023ec:	4489      	add	r9, r1
 80023ee:	0021      	movs	r1, r4
 80023f0:	4069      	eors	r1, r5
 80023f2:	9100      	str	r1, [sp, #0]
 80023f4:	468c      	mov	ip, r1
 80023f6:	2101      	movs	r1, #1
 80023f8:	4449      	add	r1, r9
 80023fa:	468a      	mov	sl, r1
 80023fc:	2f0f      	cmp	r7, #15
 80023fe:	d900      	bls.n	8002402 <__aeabi_dmul+0x96>
 8002400:	e090      	b.n	8002524 <__aeabi_dmul+0x1b8>
 8002402:	49c4      	ldr	r1, [pc, #784]	; (8002714 <__aeabi_dmul+0x3a8>)
 8002404:	00bf      	lsls	r7, r7, #2
 8002406:	59cf      	ldr	r7, [r1, r7]
 8002408:	46bf      	mov	pc, r7
 800240a:	465b      	mov	r3, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	d000      	beq.n	8002414 <__aeabi_dmul+0xa8>
 8002412:	e16a      	b.n	80026ea <__aeabi_dmul+0x37e>
 8002414:	2302      	movs	r3, #2
 8002416:	2708      	movs	r7, #8
 8002418:	2600      	movs	r6, #0
 800241a:	4681      	mov	r9, r0
 800241c:	469b      	mov	fp, r3
 800241e:	e7c9      	b.n	80023b4 <__aeabi_dmul+0x48>
 8002420:	0032      	movs	r2, r6
 8002422:	4658      	mov	r0, fp
 8002424:	9b01      	ldr	r3, [sp, #4]
 8002426:	4661      	mov	r1, ip
 8002428:	9100      	str	r1, [sp, #0]
 800242a:	2802      	cmp	r0, #2
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0xc4>
 800242e:	e075      	b.n	800251c <__aeabi_dmul+0x1b0>
 8002430:	2803      	cmp	r0, #3
 8002432:	d100      	bne.n	8002436 <__aeabi_dmul+0xca>
 8002434:	e1fe      	b.n	8002834 <__aeabi_dmul+0x4c8>
 8002436:	2801      	cmp	r0, #1
 8002438:	d000      	beq.n	800243c <__aeabi_dmul+0xd0>
 800243a:	e12c      	b.n	8002696 <__aeabi_dmul+0x32a>
 800243c:	2300      	movs	r3, #0
 800243e:	2700      	movs	r7, #0
 8002440:	2600      	movs	r6, #0
 8002442:	2500      	movs	r5, #0
 8002444:	033f      	lsls	r7, r7, #12
 8002446:	0d2a      	lsrs	r2, r5, #20
 8002448:	0b3f      	lsrs	r7, r7, #12
 800244a:	48b3      	ldr	r0, [pc, #716]	; (8002718 <__aeabi_dmul+0x3ac>)
 800244c:	0512      	lsls	r2, r2, #20
 800244e:	433a      	orrs	r2, r7
 8002450:	4002      	ands	r2, r0
 8002452:	051b      	lsls	r3, r3, #20
 8002454:	4313      	orrs	r3, r2
 8002456:	9a00      	ldr	r2, [sp, #0]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	07d1      	lsls	r1, r2, #31
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	430b      	orrs	r3, r1
 8002460:	0030      	movs	r0, r6
 8002462:	0019      	movs	r1, r3
 8002464:	b007      	add	sp, #28
 8002466:	bc3c      	pop	{r2, r3, r4, r5}
 8002468:	4690      	mov	r8, r2
 800246a:	4699      	mov	r9, r3
 800246c:	46a2      	mov	sl, r4
 800246e:	46ab      	mov	fp, r5
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002472:	465b      	mov	r3, fp
 8002474:	433b      	orrs	r3, r7
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	d100      	bne.n	800247c <__aeabi_dmul+0x110>
 800247a:	e12f      	b.n	80026dc <__aeabi_dmul+0x370>
 800247c:	2f00      	cmp	r7, #0
 800247e:	d100      	bne.n	8002482 <__aeabi_dmul+0x116>
 8002480:	e1a5      	b.n	80027ce <__aeabi_dmul+0x462>
 8002482:	0038      	movs	r0, r7
 8002484:	f000 fe20 	bl	80030c8 <__clzsi2>
 8002488:	0003      	movs	r3, r0
 800248a:	3b0b      	subs	r3, #11
 800248c:	2b1c      	cmp	r3, #28
 800248e:	dd00      	ble.n	8002492 <__aeabi_dmul+0x126>
 8002490:	e196      	b.n	80027c0 <__aeabi_dmul+0x454>
 8002492:	221d      	movs	r2, #29
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	465a      	mov	r2, fp
 8002498:	0001      	movs	r1, r0
 800249a:	40da      	lsrs	r2, r3
 800249c:	465e      	mov	r6, fp
 800249e:	3908      	subs	r1, #8
 80024a0:	408f      	lsls	r7, r1
 80024a2:	0013      	movs	r3, r2
 80024a4:	408e      	lsls	r6, r1
 80024a6:	433b      	orrs	r3, r7
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	4b9c      	ldr	r3, [pc, #624]	; (800271c <__aeabi_dmul+0x3b0>)
 80024ac:	2700      	movs	r7, #0
 80024ae:	1a1b      	subs	r3, r3, r0
 80024b0:	4699      	mov	r9, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	469b      	mov	fp, r3
 80024b6:	e77d      	b.n	80023b4 <__aeabi_dmul+0x48>
 80024b8:	4641      	mov	r1, r8
 80024ba:	4653      	mov	r3, sl
 80024bc:	430b      	orrs	r3, r1
 80024be:	4993      	ldr	r1, [pc, #588]	; (800270c <__aeabi_dmul+0x3a0>)
 80024c0:	468c      	mov	ip, r1
 80024c2:	44e1      	add	r9, ip
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d000      	beq.n	80024ca <__aeabi_dmul+0x15e>
 80024c8:	e11a      	b.n	8002700 <__aeabi_dmul+0x394>
 80024ca:	2202      	movs	r2, #2
 80024cc:	2002      	movs	r0, #2
 80024ce:	4317      	orrs	r7, r2
 80024d0:	2200      	movs	r2, #0
 80024d2:	e78c      	b.n	80023ee <__aeabi_dmul+0x82>
 80024d4:	4313      	orrs	r3, r2
 80024d6:	d100      	bne.n	80024da <__aeabi_dmul+0x16e>
 80024d8:	e10d      	b.n	80026f6 <__aeabi_dmul+0x38a>
 80024da:	4643      	mov	r3, r8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d100      	bne.n	80024e2 <__aeabi_dmul+0x176>
 80024e0:	e181      	b.n	80027e6 <__aeabi_dmul+0x47a>
 80024e2:	4640      	mov	r0, r8
 80024e4:	f000 fdf0 	bl	80030c8 <__clzsi2>
 80024e8:	0002      	movs	r2, r0
 80024ea:	3a0b      	subs	r2, #11
 80024ec:	2a1c      	cmp	r2, #28
 80024ee:	dd00      	ble.n	80024f2 <__aeabi_dmul+0x186>
 80024f0:	e172      	b.n	80027d8 <__aeabi_dmul+0x46c>
 80024f2:	0001      	movs	r1, r0
 80024f4:	4643      	mov	r3, r8
 80024f6:	3908      	subs	r1, #8
 80024f8:	408b      	lsls	r3, r1
 80024fa:	4698      	mov	r8, r3
 80024fc:	231d      	movs	r3, #29
 80024fe:	1a9a      	subs	r2, r3, r2
 8002500:	4653      	mov	r3, sl
 8002502:	40d3      	lsrs	r3, r2
 8002504:	001a      	movs	r2, r3
 8002506:	4643      	mov	r3, r8
 8002508:	4313      	orrs	r3, r2
 800250a:	4652      	mov	r2, sl
 800250c:	408a      	lsls	r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	1a08      	subs	r0, r1, r0
 8002512:	4982      	ldr	r1, [pc, #520]	; (800271c <__aeabi_dmul+0x3b0>)
 8002514:	4689      	mov	r9, r1
 8002516:	4481      	add	r9, r0
 8002518:	2000      	movs	r0, #0
 800251a:	e768      	b.n	80023ee <__aeabi_dmul+0x82>
 800251c:	4b7b      	ldr	r3, [pc, #492]	; (800270c <__aeabi_dmul+0x3a0>)
 800251e:	2700      	movs	r7, #0
 8002520:	2600      	movs	r6, #0
 8002522:	e78e      	b.n	8002442 <__aeabi_dmul+0xd6>
 8002524:	0c14      	lsrs	r4, r2, #16
 8002526:	0412      	lsls	r2, r2, #16
 8002528:	0c12      	lsrs	r2, r2, #16
 800252a:	0011      	movs	r1, r2
 800252c:	0c37      	lsrs	r7, r6, #16
 800252e:	0436      	lsls	r6, r6, #16
 8002530:	0c35      	lsrs	r5, r6, #16
 8002532:	4379      	muls	r1, r7
 8002534:	0028      	movs	r0, r5
 8002536:	468c      	mov	ip, r1
 8002538:	002e      	movs	r6, r5
 800253a:	4360      	muls	r0, r4
 800253c:	4460      	add	r0, ip
 800253e:	4683      	mov	fp, r0
 8002540:	4356      	muls	r6, r2
 8002542:	0021      	movs	r1, r4
 8002544:	0c30      	lsrs	r0, r6, #16
 8002546:	4680      	mov	r8, r0
 8002548:	4658      	mov	r0, fp
 800254a:	4379      	muls	r1, r7
 800254c:	4440      	add	r0, r8
 800254e:	9102      	str	r1, [sp, #8]
 8002550:	4584      	cmp	ip, r0
 8002552:	d906      	bls.n	8002562 <__aeabi_dmul+0x1f6>
 8002554:	4688      	mov	r8, r1
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0249      	lsls	r1, r1, #9
 800255a:	468c      	mov	ip, r1
 800255c:	44e0      	add	r8, ip
 800255e:	4641      	mov	r1, r8
 8002560:	9102      	str	r1, [sp, #8]
 8002562:	0436      	lsls	r6, r6, #16
 8002564:	0c01      	lsrs	r1, r0, #16
 8002566:	0c36      	lsrs	r6, r6, #16
 8002568:	0400      	lsls	r0, r0, #16
 800256a:	468b      	mov	fp, r1
 800256c:	1981      	adds	r1, r0, r6
 800256e:	0c1e      	lsrs	r6, r3, #16
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	9103      	str	r1, [sp, #12]
 8002576:	0019      	movs	r1, r3
 8002578:	4379      	muls	r1, r7
 800257a:	468c      	mov	ip, r1
 800257c:	0028      	movs	r0, r5
 800257e:	4375      	muls	r5, r6
 8002580:	4465      	add	r5, ip
 8002582:	46a8      	mov	r8, r5
 8002584:	4358      	muls	r0, r3
 8002586:	0c05      	lsrs	r5, r0, #16
 8002588:	4445      	add	r5, r8
 800258a:	4377      	muls	r7, r6
 800258c:	42a9      	cmp	r1, r5
 800258e:	d903      	bls.n	8002598 <__aeabi_dmul+0x22c>
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0249      	lsls	r1, r1, #9
 8002594:	468c      	mov	ip, r1
 8002596:	4467      	add	r7, ip
 8002598:	0c29      	lsrs	r1, r5, #16
 800259a:	468c      	mov	ip, r1
 800259c:	0039      	movs	r1, r7
 800259e:	0400      	lsls	r0, r0, #16
 80025a0:	0c00      	lsrs	r0, r0, #16
 80025a2:	042d      	lsls	r5, r5, #16
 80025a4:	182d      	adds	r5, r5, r0
 80025a6:	4461      	add	r1, ip
 80025a8:	44ab      	add	fp, r5
 80025aa:	9105      	str	r1, [sp, #20]
 80025ac:	4659      	mov	r1, fp
 80025ae:	9104      	str	r1, [sp, #16]
 80025b0:	9901      	ldr	r1, [sp, #4]
 80025b2:	040f      	lsls	r7, r1, #16
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	0c08      	lsrs	r0, r1, #16
 80025b8:	0039      	movs	r1, r7
 80025ba:	4351      	muls	r1, r2
 80025bc:	4342      	muls	r2, r0
 80025be:	4690      	mov	r8, r2
 80025c0:	0002      	movs	r2, r0
 80025c2:	468c      	mov	ip, r1
 80025c4:	0c09      	lsrs	r1, r1, #16
 80025c6:	468b      	mov	fp, r1
 80025c8:	4362      	muls	r2, r4
 80025ca:	437c      	muls	r4, r7
 80025cc:	4444      	add	r4, r8
 80025ce:	445c      	add	r4, fp
 80025d0:	45a0      	cmp	r8, r4
 80025d2:	d903      	bls.n	80025dc <__aeabi_dmul+0x270>
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0249      	lsls	r1, r1, #9
 80025d8:	4688      	mov	r8, r1
 80025da:	4442      	add	r2, r8
 80025dc:	0c21      	lsrs	r1, r4, #16
 80025de:	4688      	mov	r8, r1
 80025e0:	4661      	mov	r1, ip
 80025e2:	0409      	lsls	r1, r1, #16
 80025e4:	0c09      	lsrs	r1, r1, #16
 80025e6:	468c      	mov	ip, r1
 80025e8:	0039      	movs	r1, r7
 80025ea:	4359      	muls	r1, r3
 80025ec:	4343      	muls	r3, r0
 80025ee:	4370      	muls	r0, r6
 80025f0:	437e      	muls	r6, r7
 80025f2:	0c0f      	lsrs	r7, r1, #16
 80025f4:	18f6      	adds	r6, r6, r3
 80025f6:	0424      	lsls	r4, r4, #16
 80025f8:	19be      	adds	r6, r7, r6
 80025fa:	4464      	add	r4, ip
 80025fc:	4442      	add	r2, r8
 80025fe:	468c      	mov	ip, r1
 8002600:	42b3      	cmp	r3, r6
 8002602:	d903      	bls.n	800260c <__aeabi_dmul+0x2a0>
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	4698      	mov	r8, r3
 800260a:	4440      	add	r0, r8
 800260c:	9b02      	ldr	r3, [sp, #8]
 800260e:	4661      	mov	r1, ip
 8002610:	4698      	mov	r8, r3
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	0437      	lsls	r7, r6, #16
 8002616:	4443      	add	r3, r8
 8002618:	469b      	mov	fp, r3
 800261a:	45ab      	cmp	fp, r5
 800261c:	41ad      	sbcs	r5, r5
 800261e:	426b      	negs	r3, r5
 8002620:	040d      	lsls	r5, r1, #16
 8002622:	9905      	ldr	r1, [sp, #20]
 8002624:	0c2d      	lsrs	r5, r5, #16
 8002626:	468c      	mov	ip, r1
 8002628:	197f      	adds	r7, r7, r5
 800262a:	4467      	add	r7, ip
 800262c:	18fd      	adds	r5, r7, r3
 800262e:	46a8      	mov	r8, r5
 8002630:	465d      	mov	r5, fp
 8002632:	192d      	adds	r5, r5, r4
 8002634:	42a5      	cmp	r5, r4
 8002636:	41a4      	sbcs	r4, r4
 8002638:	4693      	mov	fp, r2
 800263a:	4264      	negs	r4, r4
 800263c:	46a4      	mov	ip, r4
 800263e:	44c3      	add	fp, r8
 8002640:	44dc      	add	ip, fp
 8002642:	428f      	cmp	r7, r1
 8002644:	41bf      	sbcs	r7, r7
 8002646:	4598      	cmp	r8, r3
 8002648:	419b      	sbcs	r3, r3
 800264a:	4593      	cmp	fp, r2
 800264c:	4192      	sbcs	r2, r2
 800264e:	45a4      	cmp	ip, r4
 8002650:	41a4      	sbcs	r4, r4
 8002652:	425b      	negs	r3, r3
 8002654:	427f      	negs	r7, r7
 8002656:	431f      	orrs	r7, r3
 8002658:	0c36      	lsrs	r6, r6, #16
 800265a:	4252      	negs	r2, r2
 800265c:	4264      	negs	r4, r4
 800265e:	19bf      	adds	r7, r7, r6
 8002660:	4322      	orrs	r2, r4
 8002662:	18bf      	adds	r7, r7, r2
 8002664:	4662      	mov	r2, ip
 8002666:	1838      	adds	r0, r7, r0
 8002668:	0243      	lsls	r3, r0, #9
 800266a:	0dd2      	lsrs	r2, r2, #23
 800266c:	9903      	ldr	r1, [sp, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	026a      	lsls	r2, r5, #9
 8002672:	430a      	orrs	r2, r1
 8002674:	1e50      	subs	r0, r2, #1
 8002676:	4182      	sbcs	r2, r0
 8002678:	4661      	mov	r1, ip
 800267a:	0ded      	lsrs	r5, r5, #23
 800267c:	432a      	orrs	r2, r5
 800267e:	024e      	lsls	r6, r1, #9
 8002680:	4332      	orrs	r2, r6
 8002682:	01d9      	lsls	r1, r3, #7
 8002684:	d400      	bmi.n	8002688 <__aeabi_dmul+0x31c>
 8002686:	e0b3      	b.n	80027f0 <__aeabi_dmul+0x484>
 8002688:	2601      	movs	r6, #1
 800268a:	0850      	lsrs	r0, r2, #1
 800268c:	4032      	ands	r2, r6
 800268e:	4302      	orrs	r2, r0
 8002690:	07de      	lsls	r6, r3, #31
 8002692:	4332      	orrs	r2, r6
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	4c22      	ldr	r4, [pc, #136]	; (8002720 <__aeabi_dmul+0x3b4>)
 8002698:	4454      	add	r4, sl
 800269a:	2c00      	cmp	r4, #0
 800269c:	dd62      	ble.n	8002764 <__aeabi_dmul+0x3f8>
 800269e:	0751      	lsls	r1, r2, #29
 80026a0:	d009      	beq.n	80026b6 <__aeabi_dmul+0x34a>
 80026a2:	200f      	movs	r0, #15
 80026a4:	4010      	ands	r0, r2
 80026a6:	2804      	cmp	r0, #4
 80026a8:	d005      	beq.n	80026b6 <__aeabi_dmul+0x34a>
 80026aa:	1d10      	adds	r0, r2, #4
 80026ac:	4290      	cmp	r0, r2
 80026ae:	4192      	sbcs	r2, r2
 80026b0:	4252      	negs	r2, r2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	0002      	movs	r2, r0
 80026b6:	01d9      	lsls	r1, r3, #7
 80026b8:	d504      	bpl.n	80026c4 <__aeabi_dmul+0x358>
 80026ba:	2480      	movs	r4, #128	; 0x80
 80026bc:	4819      	ldr	r0, [pc, #100]	; (8002724 <__aeabi_dmul+0x3b8>)
 80026be:	00e4      	lsls	r4, r4, #3
 80026c0:	4003      	ands	r3, r0
 80026c2:	4454      	add	r4, sl
 80026c4:	4818      	ldr	r0, [pc, #96]	; (8002728 <__aeabi_dmul+0x3bc>)
 80026c6:	4284      	cmp	r4, r0
 80026c8:	dd00      	ble.n	80026cc <__aeabi_dmul+0x360>
 80026ca:	e727      	b.n	800251c <__aeabi_dmul+0x1b0>
 80026cc:	075e      	lsls	r6, r3, #29
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	08d2      	lsrs	r2, r2, #3
 80026d2:	0b1f      	lsrs	r7, r3, #12
 80026d4:	0563      	lsls	r3, r4, #21
 80026d6:	4316      	orrs	r6, r2
 80026d8:	0d5b      	lsrs	r3, r3, #21
 80026da:	e6b2      	b.n	8002442 <__aeabi_dmul+0xd6>
 80026dc:	2300      	movs	r3, #0
 80026de:	4699      	mov	r9, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	2704      	movs	r7, #4
 80026e4:	2600      	movs	r6, #0
 80026e6:	469b      	mov	fp, r3
 80026e8:	e664      	b.n	80023b4 <__aeabi_dmul+0x48>
 80026ea:	2303      	movs	r3, #3
 80026ec:	9701      	str	r7, [sp, #4]
 80026ee:	4681      	mov	r9, r0
 80026f0:	270c      	movs	r7, #12
 80026f2:	469b      	mov	fp, r3
 80026f4:	e65e      	b.n	80023b4 <__aeabi_dmul+0x48>
 80026f6:	2201      	movs	r2, #1
 80026f8:	2001      	movs	r0, #1
 80026fa:	4317      	orrs	r7, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	e676      	b.n	80023ee <__aeabi_dmul+0x82>
 8002700:	2303      	movs	r3, #3
 8002702:	2003      	movs	r0, #3
 8002704:	431f      	orrs	r7, r3
 8002706:	4643      	mov	r3, r8
 8002708:	e671      	b.n	80023ee <__aeabi_dmul+0x82>
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	000007ff 	.word	0x000007ff
 8002710:	fffffc01 	.word	0xfffffc01
 8002714:	0800d4e4 	.word	0x0800d4e4
 8002718:	800fffff 	.word	0x800fffff
 800271c:	fffffc0d 	.word	0xfffffc0d
 8002720:	000003ff 	.word	0x000003ff
 8002724:	feffffff 	.word	0xfeffffff
 8002728:	000007fe 	.word	0x000007fe
 800272c:	2300      	movs	r3, #0
 800272e:	2780      	movs	r7, #128	; 0x80
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	033f      	lsls	r7, r7, #12
 8002734:	2600      	movs	r6, #0
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <__aeabi_dmul+0x4d8>)
 8002738:	e683      	b.n	8002442 <__aeabi_dmul+0xd6>
 800273a:	9b01      	ldr	r3, [sp, #4]
 800273c:	0032      	movs	r2, r6
 800273e:	46a4      	mov	ip, r4
 8002740:	4658      	mov	r0, fp
 8002742:	e670      	b.n	8002426 <__aeabi_dmul+0xba>
 8002744:	46ac      	mov	ip, r5
 8002746:	e66e      	b.n	8002426 <__aeabi_dmul+0xba>
 8002748:	2780      	movs	r7, #128	; 0x80
 800274a:	9901      	ldr	r1, [sp, #4]
 800274c:	033f      	lsls	r7, r7, #12
 800274e:	4239      	tst	r1, r7
 8002750:	d02d      	beq.n	80027ae <__aeabi_dmul+0x442>
 8002752:	423b      	tst	r3, r7
 8002754:	d12b      	bne.n	80027ae <__aeabi_dmul+0x442>
 8002756:	431f      	orrs	r7, r3
 8002758:	033f      	lsls	r7, r7, #12
 800275a:	0b3f      	lsrs	r7, r7, #12
 800275c:	9500      	str	r5, [sp, #0]
 800275e:	0016      	movs	r6, r2
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <__aeabi_dmul+0x4d8>)
 8002762:	e66e      	b.n	8002442 <__aeabi_dmul+0xd6>
 8002764:	2501      	movs	r5, #1
 8002766:	1b2d      	subs	r5, r5, r4
 8002768:	2d38      	cmp	r5, #56	; 0x38
 800276a:	dd00      	ble.n	800276e <__aeabi_dmul+0x402>
 800276c:	e666      	b.n	800243c <__aeabi_dmul+0xd0>
 800276e:	2d1f      	cmp	r5, #31
 8002770:	dc40      	bgt.n	80027f4 <__aeabi_dmul+0x488>
 8002772:	4835      	ldr	r0, [pc, #212]	; (8002848 <__aeabi_dmul+0x4dc>)
 8002774:	001c      	movs	r4, r3
 8002776:	4450      	add	r0, sl
 8002778:	0016      	movs	r6, r2
 800277a:	4082      	lsls	r2, r0
 800277c:	4084      	lsls	r4, r0
 800277e:	40ee      	lsrs	r6, r5
 8002780:	1e50      	subs	r0, r2, #1
 8002782:	4182      	sbcs	r2, r0
 8002784:	4334      	orrs	r4, r6
 8002786:	4314      	orrs	r4, r2
 8002788:	40eb      	lsrs	r3, r5
 800278a:	0762      	lsls	r2, r4, #29
 800278c:	d009      	beq.n	80027a2 <__aeabi_dmul+0x436>
 800278e:	220f      	movs	r2, #15
 8002790:	4022      	ands	r2, r4
 8002792:	2a04      	cmp	r2, #4
 8002794:	d005      	beq.n	80027a2 <__aeabi_dmul+0x436>
 8002796:	0022      	movs	r2, r4
 8002798:	1d14      	adds	r4, r2, #4
 800279a:	4294      	cmp	r4, r2
 800279c:	4180      	sbcs	r0, r0
 800279e:	4240      	negs	r0, r0
 80027a0:	181b      	adds	r3, r3, r0
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	d53e      	bpl.n	8002824 <__aeabi_dmul+0x4b8>
 80027a6:	2301      	movs	r3, #1
 80027a8:	2700      	movs	r7, #0
 80027aa:	2600      	movs	r6, #0
 80027ac:	e649      	b.n	8002442 <__aeabi_dmul+0xd6>
 80027ae:	2780      	movs	r7, #128	; 0x80
 80027b0:	9b01      	ldr	r3, [sp, #4]
 80027b2:	033f      	lsls	r7, r7, #12
 80027b4:	431f      	orrs	r7, r3
 80027b6:	033f      	lsls	r7, r7, #12
 80027b8:	0b3f      	lsrs	r7, r7, #12
 80027ba:	9400      	str	r4, [sp, #0]
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <__aeabi_dmul+0x4d8>)
 80027be:	e640      	b.n	8002442 <__aeabi_dmul+0xd6>
 80027c0:	0003      	movs	r3, r0
 80027c2:	465a      	mov	r2, fp
 80027c4:	3b28      	subs	r3, #40	; 0x28
 80027c6:	409a      	lsls	r2, r3
 80027c8:	2600      	movs	r6, #0
 80027ca:	9201      	str	r2, [sp, #4]
 80027cc:	e66d      	b.n	80024aa <__aeabi_dmul+0x13e>
 80027ce:	4658      	mov	r0, fp
 80027d0:	f000 fc7a 	bl	80030c8 <__clzsi2>
 80027d4:	3020      	adds	r0, #32
 80027d6:	e657      	b.n	8002488 <__aeabi_dmul+0x11c>
 80027d8:	0003      	movs	r3, r0
 80027da:	4652      	mov	r2, sl
 80027dc:	3b28      	subs	r3, #40	; 0x28
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	e693      	b.n	800250e <__aeabi_dmul+0x1a2>
 80027e6:	4650      	mov	r0, sl
 80027e8:	f000 fc6e 	bl	80030c8 <__clzsi2>
 80027ec:	3020      	adds	r0, #32
 80027ee:	e67b      	b.n	80024e8 <__aeabi_dmul+0x17c>
 80027f0:	46ca      	mov	sl, r9
 80027f2:	e750      	b.n	8002696 <__aeabi_dmul+0x32a>
 80027f4:	201f      	movs	r0, #31
 80027f6:	001e      	movs	r6, r3
 80027f8:	4240      	negs	r0, r0
 80027fa:	1b04      	subs	r4, r0, r4
 80027fc:	40e6      	lsrs	r6, r4
 80027fe:	2d20      	cmp	r5, #32
 8002800:	d003      	beq.n	800280a <__aeabi_dmul+0x49e>
 8002802:	4c12      	ldr	r4, [pc, #72]	; (800284c <__aeabi_dmul+0x4e0>)
 8002804:	4454      	add	r4, sl
 8002806:	40a3      	lsls	r3, r4
 8002808:	431a      	orrs	r2, r3
 800280a:	1e50      	subs	r0, r2, #1
 800280c:	4182      	sbcs	r2, r0
 800280e:	4332      	orrs	r2, r6
 8002810:	2607      	movs	r6, #7
 8002812:	2700      	movs	r7, #0
 8002814:	4016      	ands	r6, r2
 8002816:	d009      	beq.n	800282c <__aeabi_dmul+0x4c0>
 8002818:	200f      	movs	r0, #15
 800281a:	2300      	movs	r3, #0
 800281c:	4010      	ands	r0, r2
 800281e:	0014      	movs	r4, r2
 8002820:	2804      	cmp	r0, #4
 8002822:	d1b9      	bne.n	8002798 <__aeabi_dmul+0x42c>
 8002824:	0022      	movs	r2, r4
 8002826:	075e      	lsls	r6, r3, #29
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	0b1f      	lsrs	r7, r3, #12
 800282c:	08d2      	lsrs	r2, r2, #3
 800282e:	4316      	orrs	r6, r2
 8002830:	2300      	movs	r3, #0
 8002832:	e606      	b.n	8002442 <__aeabi_dmul+0xd6>
 8002834:	2780      	movs	r7, #128	; 0x80
 8002836:	033f      	lsls	r7, r7, #12
 8002838:	431f      	orrs	r7, r3
 800283a:	033f      	lsls	r7, r7, #12
 800283c:	0b3f      	lsrs	r7, r7, #12
 800283e:	0016      	movs	r6, r2
 8002840:	4b00      	ldr	r3, [pc, #0]	; (8002844 <__aeabi_dmul+0x4d8>)
 8002842:	e5fe      	b.n	8002442 <__aeabi_dmul+0xd6>
 8002844:	000007ff 	.word	0x000007ff
 8002848:	0000041e 	.word	0x0000041e
 800284c:	0000043e 	.word	0x0000043e

08002850 <__aeabi_dsub>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4657      	mov	r7, sl
 8002854:	464e      	mov	r6, r9
 8002856:	4645      	mov	r5, r8
 8002858:	46de      	mov	lr, fp
 800285a:	000c      	movs	r4, r1
 800285c:	0309      	lsls	r1, r1, #12
 800285e:	b5e0      	push	{r5, r6, r7, lr}
 8002860:	0a49      	lsrs	r1, r1, #9
 8002862:	0f46      	lsrs	r6, r0, #29
 8002864:	005f      	lsls	r7, r3, #1
 8002866:	4331      	orrs	r1, r6
 8002868:	031e      	lsls	r6, r3, #12
 800286a:	0fdb      	lsrs	r3, r3, #31
 800286c:	0a76      	lsrs	r6, r6, #9
 800286e:	469b      	mov	fp, r3
 8002870:	0f53      	lsrs	r3, r2, #29
 8002872:	4333      	orrs	r3, r6
 8002874:	4ec8      	ldr	r6, [pc, #800]	; (8002b98 <__aeabi_dsub+0x348>)
 8002876:	0065      	lsls	r5, r4, #1
 8002878:	00c0      	lsls	r0, r0, #3
 800287a:	0fe4      	lsrs	r4, r4, #31
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	0d6d      	lsrs	r5, r5, #21
 8002880:	46a2      	mov	sl, r4
 8002882:	4681      	mov	r9, r0
 8002884:	0d7f      	lsrs	r7, r7, #21
 8002886:	469c      	mov	ip, r3
 8002888:	4690      	mov	r8, r2
 800288a:	42b7      	cmp	r7, r6
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x40>
 800288e:	e0b9      	b.n	8002a04 <__aeabi_dsub+0x1b4>
 8002890:	465b      	mov	r3, fp
 8002892:	2601      	movs	r6, #1
 8002894:	4073      	eors	r3, r6
 8002896:	469b      	mov	fp, r3
 8002898:	1bee      	subs	r6, r5, r7
 800289a:	45a3      	cmp	fp, r4
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x50>
 800289e:	e083      	b.n	80029a8 <__aeabi_dsub+0x158>
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	dd63      	ble.n	800296c <__aeabi_dsub+0x11c>
 80028a4:	2f00      	cmp	r7, #0
 80028a6:	d000      	beq.n	80028aa <__aeabi_dsub+0x5a>
 80028a8:	e0b1      	b.n	8002a0e <__aeabi_dsub+0x1be>
 80028aa:	4663      	mov	r3, ip
 80028ac:	4313      	orrs	r3, r2
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x62>
 80028b0:	e123      	b.n	8002afa <__aeabi_dsub+0x2aa>
 80028b2:	1e73      	subs	r3, r6, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d000      	beq.n	80028ba <__aeabi_dsub+0x6a>
 80028b8:	e1ba      	b.n	8002c30 <__aeabi_dsub+0x3e0>
 80028ba:	1a86      	subs	r6, r0, r2
 80028bc:	4663      	mov	r3, ip
 80028be:	42b0      	cmp	r0, r6
 80028c0:	4180      	sbcs	r0, r0
 80028c2:	2501      	movs	r5, #1
 80028c4:	1ac9      	subs	r1, r1, r3
 80028c6:	4240      	negs	r0, r0
 80028c8:	1a09      	subs	r1, r1, r0
 80028ca:	020b      	lsls	r3, r1, #8
 80028cc:	d400      	bmi.n	80028d0 <__aeabi_dsub+0x80>
 80028ce:	e147      	b.n	8002b60 <__aeabi_dsub+0x310>
 80028d0:	0249      	lsls	r1, r1, #9
 80028d2:	0a4b      	lsrs	r3, r1, #9
 80028d4:	4698      	mov	r8, r3
 80028d6:	4643      	mov	r3, r8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x8e>
 80028dc:	e189      	b.n	8002bf2 <__aeabi_dsub+0x3a2>
 80028de:	4640      	mov	r0, r8
 80028e0:	f000 fbf2 	bl	80030c8 <__clzsi2>
 80028e4:	0003      	movs	r3, r0
 80028e6:	3b08      	subs	r3, #8
 80028e8:	2b1f      	cmp	r3, #31
 80028ea:	dd00      	ble.n	80028ee <__aeabi_dsub+0x9e>
 80028ec:	e17c      	b.n	8002be8 <__aeabi_dsub+0x398>
 80028ee:	2220      	movs	r2, #32
 80028f0:	0030      	movs	r0, r6
 80028f2:	1ad2      	subs	r2, r2, r3
 80028f4:	4641      	mov	r1, r8
 80028f6:	40d0      	lsrs	r0, r2
 80028f8:	4099      	lsls	r1, r3
 80028fa:	0002      	movs	r2, r0
 80028fc:	409e      	lsls	r6, r3
 80028fe:	430a      	orrs	r2, r1
 8002900:	429d      	cmp	r5, r3
 8002902:	dd00      	ble.n	8002906 <__aeabi_dsub+0xb6>
 8002904:	e16a      	b.n	8002bdc <__aeabi_dsub+0x38c>
 8002906:	1b5d      	subs	r5, r3, r5
 8002908:	1c6b      	adds	r3, r5, #1
 800290a:	2b1f      	cmp	r3, #31
 800290c:	dd00      	ble.n	8002910 <__aeabi_dsub+0xc0>
 800290e:	e194      	b.n	8002c3a <__aeabi_dsub+0x3ea>
 8002910:	2120      	movs	r1, #32
 8002912:	0010      	movs	r0, r2
 8002914:	0035      	movs	r5, r6
 8002916:	1ac9      	subs	r1, r1, r3
 8002918:	408e      	lsls	r6, r1
 800291a:	40da      	lsrs	r2, r3
 800291c:	4088      	lsls	r0, r1
 800291e:	40dd      	lsrs	r5, r3
 8002920:	1e71      	subs	r1, r6, #1
 8002922:	418e      	sbcs	r6, r1
 8002924:	0011      	movs	r1, r2
 8002926:	2207      	movs	r2, #7
 8002928:	4328      	orrs	r0, r5
 800292a:	2500      	movs	r5, #0
 800292c:	4306      	orrs	r6, r0
 800292e:	4032      	ands	r2, r6
 8002930:	2a00      	cmp	r2, #0
 8002932:	d009      	beq.n	8002948 <__aeabi_dsub+0xf8>
 8002934:	230f      	movs	r3, #15
 8002936:	4033      	ands	r3, r6
 8002938:	2b04      	cmp	r3, #4
 800293a:	d005      	beq.n	8002948 <__aeabi_dsub+0xf8>
 800293c:	1d33      	adds	r3, r6, #4
 800293e:	42b3      	cmp	r3, r6
 8002940:	41b6      	sbcs	r6, r6
 8002942:	4276      	negs	r6, r6
 8002944:	1989      	adds	r1, r1, r6
 8002946:	001e      	movs	r6, r3
 8002948:	020b      	lsls	r3, r1, #8
 800294a:	d400      	bmi.n	800294e <__aeabi_dsub+0xfe>
 800294c:	e23d      	b.n	8002dca <__aeabi_dsub+0x57a>
 800294e:	1c6a      	adds	r2, r5, #1
 8002950:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <__aeabi_dsub+0x348>)
 8002952:	0555      	lsls	r5, r2, #21
 8002954:	0d6d      	lsrs	r5, r5, #21
 8002956:	429a      	cmp	r2, r3
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x10c>
 800295a:	e119      	b.n	8002b90 <__aeabi_dsub+0x340>
 800295c:	4a8f      	ldr	r2, [pc, #572]	; (8002b9c <__aeabi_dsub+0x34c>)
 800295e:	08f6      	lsrs	r6, r6, #3
 8002960:	400a      	ands	r2, r1
 8002962:	0757      	lsls	r7, r2, #29
 8002964:	0252      	lsls	r2, r2, #9
 8002966:	4337      	orrs	r7, r6
 8002968:	0b12      	lsrs	r2, r2, #12
 800296a:	e09b      	b.n	8002aa4 <__aeabi_dsub+0x254>
 800296c:	2e00      	cmp	r6, #0
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x122>
 8002970:	e0c5      	b.n	8002afe <__aeabi_dsub+0x2ae>
 8002972:	1c6e      	adds	r6, r5, #1
 8002974:	0576      	lsls	r6, r6, #21
 8002976:	0d76      	lsrs	r6, r6, #21
 8002978:	2e01      	cmp	r6, #1
 800297a:	dc00      	bgt.n	800297e <__aeabi_dsub+0x12e>
 800297c:	e148      	b.n	8002c10 <__aeabi_dsub+0x3c0>
 800297e:	4667      	mov	r7, ip
 8002980:	1a86      	subs	r6, r0, r2
 8002982:	1bcb      	subs	r3, r1, r7
 8002984:	42b0      	cmp	r0, r6
 8002986:	41bf      	sbcs	r7, r7
 8002988:	427f      	negs	r7, r7
 800298a:	46b8      	mov	r8, r7
 800298c:	001f      	movs	r7, r3
 800298e:	4643      	mov	r3, r8
 8002990:	1aff      	subs	r7, r7, r3
 8002992:	003b      	movs	r3, r7
 8002994:	46b8      	mov	r8, r7
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	d500      	bpl.n	800299c <__aeabi_dsub+0x14c>
 800299a:	e15f      	b.n	8002c5c <__aeabi_dsub+0x40c>
 800299c:	4337      	orrs	r7, r6
 800299e:	d19a      	bne.n	80028d6 <__aeabi_dsub+0x86>
 80029a0:	2200      	movs	r2, #0
 80029a2:	2400      	movs	r4, #0
 80029a4:	2500      	movs	r5, #0
 80029a6:	e079      	b.n	8002a9c <__aeabi_dsub+0x24c>
 80029a8:	2e00      	cmp	r6, #0
 80029aa:	dc00      	bgt.n	80029ae <__aeabi_dsub+0x15e>
 80029ac:	e0fa      	b.n	8002ba4 <__aeabi_dsub+0x354>
 80029ae:	2f00      	cmp	r7, #0
 80029b0:	d100      	bne.n	80029b4 <__aeabi_dsub+0x164>
 80029b2:	e08d      	b.n	8002ad0 <__aeabi_dsub+0x280>
 80029b4:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <__aeabi_dsub+0x348>)
 80029b6:	429d      	cmp	r5, r3
 80029b8:	d067      	beq.n	8002a8a <__aeabi_dsub+0x23a>
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	4667      	mov	r7, ip
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	431f      	orrs	r7, r3
 80029c2:	46bc      	mov	ip, r7
 80029c4:	2e38      	cmp	r6, #56	; 0x38
 80029c6:	dc00      	bgt.n	80029ca <__aeabi_dsub+0x17a>
 80029c8:	e152      	b.n	8002c70 <__aeabi_dsub+0x420>
 80029ca:	4663      	mov	r3, ip
 80029cc:	4313      	orrs	r3, r2
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4193      	sbcs	r3, r2
 80029d2:	181e      	adds	r6, r3, r0
 80029d4:	4286      	cmp	r6, r0
 80029d6:	4180      	sbcs	r0, r0
 80029d8:	4240      	negs	r0, r0
 80029da:	1809      	adds	r1, r1, r0
 80029dc:	020b      	lsls	r3, r1, #8
 80029de:	d400      	bmi.n	80029e2 <__aeabi_dsub+0x192>
 80029e0:	e0be      	b.n	8002b60 <__aeabi_dsub+0x310>
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <__aeabi_dsub+0x348>)
 80029e4:	3501      	adds	r5, #1
 80029e6:	429d      	cmp	r5, r3
 80029e8:	d100      	bne.n	80029ec <__aeabi_dsub+0x19c>
 80029ea:	e0d2      	b.n	8002b92 <__aeabi_dsub+0x342>
 80029ec:	4a6b      	ldr	r2, [pc, #428]	; (8002b9c <__aeabi_dsub+0x34c>)
 80029ee:	0873      	lsrs	r3, r6, #1
 80029f0:	400a      	ands	r2, r1
 80029f2:	2101      	movs	r1, #1
 80029f4:	400e      	ands	r6, r1
 80029f6:	431e      	orrs	r6, r3
 80029f8:	0851      	lsrs	r1, r2, #1
 80029fa:	07d3      	lsls	r3, r2, #31
 80029fc:	2207      	movs	r2, #7
 80029fe:	431e      	orrs	r6, r3
 8002a00:	4032      	ands	r2, r6
 8002a02:	e795      	b.n	8002930 <__aeabi_dsub+0xe0>
 8002a04:	001e      	movs	r6, r3
 8002a06:	4316      	orrs	r6, r2
 8002a08:	d000      	beq.n	8002a0c <__aeabi_dsub+0x1bc>
 8002a0a:	e745      	b.n	8002898 <__aeabi_dsub+0x48>
 8002a0c:	e740      	b.n	8002890 <__aeabi_dsub+0x40>
 8002a0e:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <__aeabi_dsub+0x348>)
 8002a10:	429d      	cmp	r5, r3
 8002a12:	d03a      	beq.n	8002a8a <__aeabi_dsub+0x23a>
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	4667      	mov	r7, ip
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431f      	orrs	r7, r3
 8002a1c:	46bc      	mov	ip, r7
 8002a1e:	2e38      	cmp	r6, #56	; 0x38
 8002a20:	dd00      	ble.n	8002a24 <__aeabi_dsub+0x1d4>
 8002a22:	e0eb      	b.n	8002bfc <__aeabi_dsub+0x3ac>
 8002a24:	2e1f      	cmp	r6, #31
 8002a26:	dc00      	bgt.n	8002a2a <__aeabi_dsub+0x1da>
 8002a28:	e13a      	b.n	8002ca0 <__aeabi_dsub+0x450>
 8002a2a:	0033      	movs	r3, r6
 8002a2c:	4667      	mov	r7, ip
 8002a2e:	3b20      	subs	r3, #32
 8002a30:	40df      	lsrs	r7, r3
 8002a32:	003b      	movs	r3, r7
 8002a34:	2e20      	cmp	r6, #32
 8002a36:	d005      	beq.n	8002a44 <__aeabi_dsub+0x1f4>
 8002a38:	2740      	movs	r7, #64	; 0x40
 8002a3a:	1bbf      	subs	r7, r7, r6
 8002a3c:	4666      	mov	r6, ip
 8002a3e:	40be      	lsls	r6, r7
 8002a40:	4332      	orrs	r2, r6
 8002a42:	4690      	mov	r8, r2
 8002a44:	4646      	mov	r6, r8
 8002a46:	1e72      	subs	r2, r6, #1
 8002a48:	4196      	sbcs	r6, r2
 8002a4a:	4333      	orrs	r3, r6
 8002a4c:	e0da      	b.n	8002c04 <__aeabi_dsub+0x3b4>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x204>
 8002a52:	e214      	b.n	8002e7e <__aeabi_dsub+0x62e>
 8002a54:	4663      	mov	r3, ip
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x20c>
 8002a5a:	e168      	b.n	8002d2e <__aeabi_dsub+0x4de>
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	074e      	lsls	r6, r1, #29
 8002a60:	08c0      	lsrs	r0, r0, #3
 8002a62:	08c9      	lsrs	r1, r1, #3
 8002a64:	031b      	lsls	r3, r3, #12
 8002a66:	4306      	orrs	r6, r0
 8002a68:	4219      	tst	r1, r3
 8002a6a:	d008      	beq.n	8002a7e <__aeabi_dsub+0x22e>
 8002a6c:	4660      	mov	r0, ip
 8002a6e:	08c0      	lsrs	r0, r0, #3
 8002a70:	4218      	tst	r0, r3
 8002a72:	d104      	bne.n	8002a7e <__aeabi_dsub+0x22e>
 8002a74:	4663      	mov	r3, ip
 8002a76:	0001      	movs	r1, r0
 8002a78:	08d2      	lsrs	r2, r2, #3
 8002a7a:	075e      	lsls	r6, r3, #29
 8002a7c:	4316      	orrs	r6, r2
 8002a7e:	00f3      	lsls	r3, r6, #3
 8002a80:	4699      	mov	r9, r3
 8002a82:	00c9      	lsls	r1, r1, #3
 8002a84:	0f72      	lsrs	r2, r6, #29
 8002a86:	4d44      	ldr	r5, [pc, #272]	; (8002b98 <__aeabi_dsub+0x348>)
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	08de      	lsrs	r6, r3, #3
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <__aeabi_dsub+0x348>)
 8002a90:	074f      	lsls	r7, r1, #29
 8002a92:	4337      	orrs	r7, r6
 8002a94:	08ca      	lsrs	r2, r1, #3
 8002a96:	429d      	cmp	r5, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x24c>
 8002a9a:	e06e      	b.n	8002b7a <__aeabi_dsub+0x32a>
 8002a9c:	0312      	lsls	r2, r2, #12
 8002a9e:	056d      	lsls	r5, r5, #21
 8002aa0:	0b12      	lsrs	r2, r2, #12
 8002aa2:	0d6d      	lsrs	r5, r5, #21
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0312      	lsls	r2, r2, #12
 8002aa8:	0b13      	lsrs	r3, r2, #12
 8002aaa:	0d0a      	lsrs	r2, r1, #20
 8002aac:	0512      	lsls	r2, r2, #20
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <__aeabi_dsub+0x350>)
 8002ab2:	052d      	lsls	r5, r5, #20
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	432b      	orrs	r3, r5
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	07e4      	lsls	r4, r4, #31
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	4323      	orrs	r3, r4
 8002ac0:	0038      	movs	r0, r7
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	bc3c      	pop	{r2, r3, r4, r5}
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	4699      	mov	r9, r3
 8002aca:	46a2      	mov	sl, r4
 8002acc:	46ab      	mov	fp, r5
 8002ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	d011      	beq.n	8002afa <__aeabi_dsub+0x2aa>
 8002ad6:	1e73      	subs	r3, r6, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d000      	beq.n	8002ade <__aeabi_dsub+0x28e>
 8002adc:	e107      	b.n	8002cee <__aeabi_dsub+0x49e>
 8002ade:	1886      	adds	r6, r0, r2
 8002ae0:	4286      	cmp	r6, r0
 8002ae2:	4180      	sbcs	r0, r0
 8002ae4:	4461      	add	r1, ip
 8002ae6:	4240      	negs	r0, r0
 8002ae8:	1809      	adds	r1, r1, r0
 8002aea:	2501      	movs	r5, #1
 8002aec:	020b      	lsls	r3, r1, #8
 8002aee:	d537      	bpl.n	8002b60 <__aeabi_dsub+0x310>
 8002af0:	2502      	movs	r5, #2
 8002af2:	e77b      	b.n	80029ec <__aeabi_dsub+0x19c>
 8002af4:	003e      	movs	r6, r7
 8002af6:	4661      	mov	r1, ip
 8002af8:	4691      	mov	r9, r2
 8002afa:	0035      	movs	r5, r6
 8002afc:	e7c5      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002afe:	465c      	mov	r4, fp
 8002b00:	2d00      	cmp	r5, #0
 8002b02:	d000      	beq.n	8002b06 <__aeabi_dsub+0x2b6>
 8002b04:	e0e1      	b.n	8002cca <__aeabi_dsub+0x47a>
 8002b06:	000b      	movs	r3, r1
 8002b08:	4303      	orrs	r3, r0
 8002b0a:	d0f3      	beq.n	8002af4 <__aeabi_dsub+0x2a4>
 8002b0c:	1c73      	adds	r3, r6, #1
 8002b0e:	d100      	bne.n	8002b12 <__aeabi_dsub+0x2c2>
 8002b10:	e1ac      	b.n	8002e6c <__aeabi_dsub+0x61c>
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <__aeabi_dsub+0x348>)
 8002b14:	429f      	cmp	r7, r3
 8002b16:	d100      	bne.n	8002b1a <__aeabi_dsub+0x2ca>
 8002b18:	e13a      	b.n	8002d90 <__aeabi_dsub+0x540>
 8002b1a:	43f3      	mvns	r3, r6
 8002b1c:	2b38      	cmp	r3, #56	; 0x38
 8002b1e:	dd00      	ble.n	8002b22 <__aeabi_dsub+0x2d2>
 8002b20:	e16f      	b.n	8002e02 <__aeabi_dsub+0x5b2>
 8002b22:	2b1f      	cmp	r3, #31
 8002b24:	dd00      	ble.n	8002b28 <__aeabi_dsub+0x2d8>
 8002b26:	e18c      	b.n	8002e42 <__aeabi_dsub+0x5f2>
 8002b28:	2520      	movs	r5, #32
 8002b2a:	000e      	movs	r6, r1
 8002b2c:	1aed      	subs	r5, r5, r3
 8002b2e:	40ae      	lsls	r6, r5
 8002b30:	46b0      	mov	r8, r6
 8002b32:	0006      	movs	r6, r0
 8002b34:	46aa      	mov	sl, r5
 8002b36:	40de      	lsrs	r6, r3
 8002b38:	4645      	mov	r5, r8
 8002b3a:	4335      	orrs	r5, r6
 8002b3c:	002e      	movs	r6, r5
 8002b3e:	4655      	mov	r5, sl
 8002b40:	40d9      	lsrs	r1, r3
 8002b42:	40a8      	lsls	r0, r5
 8002b44:	4663      	mov	r3, ip
 8002b46:	1e45      	subs	r5, r0, #1
 8002b48:	41a8      	sbcs	r0, r5
 8002b4a:	1a5b      	subs	r3, r3, r1
 8002b4c:	469c      	mov	ip, r3
 8002b4e:	4330      	orrs	r0, r6
 8002b50:	1a16      	subs	r6, r2, r0
 8002b52:	42b2      	cmp	r2, r6
 8002b54:	4192      	sbcs	r2, r2
 8002b56:	4663      	mov	r3, ip
 8002b58:	4252      	negs	r2, r2
 8002b5a:	1a99      	subs	r1, r3, r2
 8002b5c:	003d      	movs	r5, r7
 8002b5e:	e6b4      	b.n	80028ca <__aeabi_dsub+0x7a>
 8002b60:	2207      	movs	r2, #7
 8002b62:	4032      	ands	r2, r6
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x31a>
 8002b68:	e6e4      	b.n	8002934 <__aeabi_dsub+0xe4>
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <__aeabi_dsub+0x348>)
 8002b6c:	08f6      	lsrs	r6, r6, #3
 8002b6e:	074f      	lsls	r7, r1, #29
 8002b70:	4337      	orrs	r7, r6
 8002b72:	08ca      	lsrs	r2, r1, #3
 8002b74:	429d      	cmp	r5, r3
 8002b76:	d000      	beq.n	8002b7a <__aeabi_dsub+0x32a>
 8002b78:	e790      	b.n	8002a9c <__aeabi_dsub+0x24c>
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <__aeabi_dsub+0x332>
 8002b80:	e1a6      	b.n	8002ed0 <__aeabi_dsub+0x680>
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	031b      	lsls	r3, r3, #12
 8002b86:	431a      	orrs	r2, r3
 8002b88:	0312      	lsls	r2, r2, #12
 8002b8a:	0b12      	lsrs	r2, r2, #12
 8002b8c:	4d02      	ldr	r5, [pc, #8]	; (8002b98 <__aeabi_dsub+0x348>)
 8002b8e:	e789      	b.n	8002aa4 <__aeabi_dsub+0x254>
 8002b90:	0015      	movs	r5, r2
 8002b92:	2200      	movs	r2, #0
 8002b94:	2700      	movs	r7, #0
 8002b96:	e785      	b.n	8002aa4 <__aeabi_dsub+0x254>
 8002b98:	000007ff 	.word	0x000007ff
 8002b9c:	ff7fffff 	.word	0xff7fffff
 8002ba0:	800fffff 	.word	0x800fffff
 8002ba4:	2e00      	cmp	r6, #0
 8002ba6:	d000      	beq.n	8002baa <__aeabi_dsub+0x35a>
 8002ba8:	e0c7      	b.n	8002d3a <__aeabi_dsub+0x4ea>
 8002baa:	1c6b      	adds	r3, r5, #1
 8002bac:	055e      	lsls	r6, r3, #21
 8002bae:	0d76      	lsrs	r6, r6, #21
 8002bb0:	2e01      	cmp	r6, #1
 8002bb2:	dc00      	bgt.n	8002bb6 <__aeabi_dsub+0x366>
 8002bb4:	e0f0      	b.n	8002d98 <__aeabi_dsub+0x548>
 8002bb6:	4dc8      	ldr	r5, [pc, #800]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002bb8:	42ab      	cmp	r3, r5
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x36e>
 8002bbc:	e0b9      	b.n	8002d32 <__aeabi_dsub+0x4e2>
 8002bbe:	1885      	adds	r5, r0, r2
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	4285      	cmp	r5, r0
 8002bc4:	4189      	sbcs	r1, r1
 8002bc6:	4462      	add	r2, ip
 8002bc8:	4249      	negs	r1, r1
 8002bca:	1851      	adds	r1, r2, r1
 8002bcc:	2207      	movs	r2, #7
 8002bce:	07ce      	lsls	r6, r1, #31
 8002bd0:	086d      	lsrs	r5, r5, #1
 8002bd2:	432e      	orrs	r6, r5
 8002bd4:	0849      	lsrs	r1, r1, #1
 8002bd6:	4032      	ands	r2, r6
 8002bd8:	001d      	movs	r5, r3
 8002bda:	e6a9      	b.n	8002930 <__aeabi_dsub+0xe0>
 8002bdc:	49bf      	ldr	r1, [pc, #764]	; (8002edc <__aeabi_dsub+0x68c>)
 8002bde:	1aed      	subs	r5, r5, r3
 8002be0:	4011      	ands	r1, r2
 8002be2:	2207      	movs	r2, #7
 8002be4:	4032      	ands	r2, r6
 8002be6:	e6a3      	b.n	8002930 <__aeabi_dsub+0xe0>
 8002be8:	0032      	movs	r2, r6
 8002bea:	3828      	subs	r0, #40	; 0x28
 8002bec:	4082      	lsls	r2, r0
 8002bee:	2600      	movs	r6, #0
 8002bf0:	e686      	b.n	8002900 <__aeabi_dsub+0xb0>
 8002bf2:	0030      	movs	r0, r6
 8002bf4:	f000 fa68 	bl	80030c8 <__clzsi2>
 8002bf8:	3020      	adds	r0, #32
 8002bfa:	e673      	b.n	80028e4 <__aeabi_dsub+0x94>
 8002bfc:	4663      	mov	r3, ip
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	4193      	sbcs	r3, r2
 8002c04:	1ac6      	subs	r6, r0, r3
 8002c06:	42b0      	cmp	r0, r6
 8002c08:	4180      	sbcs	r0, r0
 8002c0a:	4240      	negs	r0, r0
 8002c0c:	1a09      	subs	r1, r1, r0
 8002c0e:	e65c      	b.n	80028ca <__aeabi_dsub+0x7a>
 8002c10:	000e      	movs	r6, r1
 8002c12:	4667      	mov	r7, ip
 8002c14:	4306      	orrs	r6, r0
 8002c16:	4317      	orrs	r7, r2
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d15e      	bne.n	8002cda <__aeabi_dsub+0x48a>
 8002c1c:	2e00      	cmp	r6, #0
 8002c1e:	d000      	beq.n	8002c22 <__aeabi_dsub+0x3d2>
 8002c20:	e0f3      	b.n	8002e0a <__aeabi_dsub+0x5ba>
 8002c22:	2f00      	cmp	r7, #0
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0x3d8>
 8002c26:	e11e      	b.n	8002e66 <__aeabi_dsub+0x616>
 8002c28:	465c      	mov	r4, fp
 8002c2a:	4661      	mov	r1, ip
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	e72c      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002c30:	4fa9      	ldr	r7, [pc, #676]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002c32:	42be      	cmp	r6, r7
 8002c34:	d07b      	beq.n	8002d2e <__aeabi_dsub+0x4de>
 8002c36:	001e      	movs	r6, r3
 8002c38:	e6f1      	b.n	8002a1e <__aeabi_dsub+0x1ce>
 8002c3a:	0010      	movs	r0, r2
 8002c3c:	3d1f      	subs	r5, #31
 8002c3e:	40e8      	lsrs	r0, r5
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d003      	beq.n	8002c4c <__aeabi_dsub+0x3fc>
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	1acb      	subs	r3, r1, r3
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	4316      	orrs	r6, r2
 8002c4c:	1e73      	subs	r3, r6, #1
 8002c4e:	419e      	sbcs	r6, r3
 8002c50:	2207      	movs	r2, #7
 8002c52:	4306      	orrs	r6, r0
 8002c54:	4032      	ands	r2, r6
 8002c56:	2100      	movs	r1, #0
 8002c58:	2500      	movs	r5, #0
 8002c5a:	e783      	b.n	8002b64 <__aeabi_dsub+0x314>
 8002c5c:	1a16      	subs	r6, r2, r0
 8002c5e:	4663      	mov	r3, ip
 8002c60:	42b2      	cmp	r2, r6
 8002c62:	4180      	sbcs	r0, r0
 8002c64:	1a59      	subs	r1, r3, r1
 8002c66:	4240      	negs	r0, r0
 8002c68:	1a0b      	subs	r3, r1, r0
 8002c6a:	4698      	mov	r8, r3
 8002c6c:	465c      	mov	r4, fp
 8002c6e:	e632      	b.n	80028d6 <__aeabi_dsub+0x86>
 8002c70:	2e1f      	cmp	r6, #31
 8002c72:	dd00      	ble.n	8002c76 <__aeabi_dsub+0x426>
 8002c74:	e0ab      	b.n	8002dce <__aeabi_dsub+0x57e>
 8002c76:	2720      	movs	r7, #32
 8002c78:	1bbb      	subs	r3, r7, r6
 8002c7a:	469a      	mov	sl, r3
 8002c7c:	4663      	mov	r3, ip
 8002c7e:	4657      	mov	r7, sl
 8002c80:	40bb      	lsls	r3, r7
 8002c82:	4699      	mov	r9, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	464f      	mov	r7, r9
 8002c88:	40f3      	lsrs	r3, r6
 8002c8a:	431f      	orrs	r7, r3
 8002c8c:	003b      	movs	r3, r7
 8002c8e:	4657      	mov	r7, sl
 8002c90:	40ba      	lsls	r2, r7
 8002c92:	1e57      	subs	r7, r2, #1
 8002c94:	41ba      	sbcs	r2, r7
 8002c96:	4313      	orrs	r3, r2
 8002c98:	4662      	mov	r2, ip
 8002c9a:	40f2      	lsrs	r2, r6
 8002c9c:	1889      	adds	r1, r1, r2
 8002c9e:	e698      	b.n	80029d2 <__aeabi_dsub+0x182>
 8002ca0:	2720      	movs	r7, #32
 8002ca2:	1bbb      	subs	r3, r7, r6
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	4663      	mov	r3, ip
 8002ca8:	4657      	mov	r7, sl
 8002caa:	40bb      	lsls	r3, r7
 8002cac:	4699      	mov	r9, r3
 8002cae:	0013      	movs	r3, r2
 8002cb0:	464f      	mov	r7, r9
 8002cb2:	40f3      	lsrs	r3, r6
 8002cb4:	431f      	orrs	r7, r3
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	4657      	mov	r7, sl
 8002cba:	40ba      	lsls	r2, r7
 8002cbc:	1e57      	subs	r7, r2, #1
 8002cbe:	41ba      	sbcs	r2, r7
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	4662      	mov	r2, ip
 8002cc4:	40f2      	lsrs	r2, r6
 8002cc6:	1a89      	subs	r1, r1, r2
 8002cc8:	e79c      	b.n	8002c04 <__aeabi_dsub+0x3b4>
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002ccc:	429f      	cmp	r7, r3
 8002cce:	d05f      	beq.n	8002d90 <__aeabi_dsub+0x540>
 8002cd0:	2580      	movs	r5, #128	; 0x80
 8002cd2:	042d      	lsls	r5, r5, #16
 8002cd4:	4273      	negs	r3, r6
 8002cd6:	4329      	orrs	r1, r5
 8002cd8:	e720      	b.n	8002b1c <__aeabi_dsub+0x2cc>
 8002cda:	2e00      	cmp	r6, #0
 8002cdc:	d10c      	bne.n	8002cf8 <__aeabi_dsub+0x4a8>
 8002cde:	2f00      	cmp	r7, #0
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x494>
 8002ce2:	e0d0      	b.n	8002e86 <__aeabi_dsub+0x636>
 8002ce4:	465c      	mov	r4, fp
 8002ce6:	4661      	mov	r1, ip
 8002ce8:	4691      	mov	r9, r2
 8002cea:	4d7b      	ldr	r5, [pc, #492]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002cec:	e6cd      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002cee:	4f7a      	ldr	r7, [pc, #488]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002cf0:	42be      	cmp	r6, r7
 8002cf2:	d01c      	beq.n	8002d2e <__aeabi_dsub+0x4de>
 8002cf4:	001e      	movs	r6, r3
 8002cf6:	e665      	b.n	80029c4 <__aeabi_dsub+0x174>
 8002cf8:	2f00      	cmp	r7, #0
 8002cfa:	d018      	beq.n	8002d2e <__aeabi_dsub+0x4de>
 8002cfc:	08c0      	lsrs	r0, r0, #3
 8002cfe:	074e      	lsls	r6, r1, #29
 8002d00:	4306      	orrs	r6, r0
 8002d02:	2080      	movs	r0, #128	; 0x80
 8002d04:	08c9      	lsrs	r1, r1, #3
 8002d06:	0300      	lsls	r0, r0, #12
 8002d08:	4201      	tst	r1, r0
 8002d0a:	d008      	beq.n	8002d1e <__aeabi_dsub+0x4ce>
 8002d0c:	4663      	mov	r3, ip
 8002d0e:	08dc      	lsrs	r4, r3, #3
 8002d10:	4204      	tst	r4, r0
 8002d12:	d104      	bne.n	8002d1e <__aeabi_dsub+0x4ce>
 8002d14:	0021      	movs	r1, r4
 8002d16:	46da      	mov	sl, fp
 8002d18:	08d2      	lsrs	r2, r2, #3
 8002d1a:	075e      	lsls	r6, r3, #29
 8002d1c:	4316      	orrs	r6, r2
 8002d1e:	00f3      	lsls	r3, r6, #3
 8002d20:	4699      	mov	r9, r3
 8002d22:	2401      	movs	r4, #1
 8002d24:	4653      	mov	r3, sl
 8002d26:	00c9      	lsls	r1, r1, #3
 8002d28:	0f72      	lsrs	r2, r6, #29
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	401c      	ands	r4, r3
 8002d2e:	4d6a      	ldr	r5, [pc, #424]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002d30:	e6ab      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002d32:	001d      	movs	r5, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	2700      	movs	r7, #0
 8002d38:	e6b4      	b.n	8002aa4 <__aeabi_dsub+0x254>
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d159      	bne.n	8002df2 <__aeabi_dsub+0x5a2>
 8002d3e:	000b      	movs	r3, r1
 8002d40:	4303      	orrs	r3, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x4f6>
 8002d44:	e6d6      	b.n	8002af4 <__aeabi_dsub+0x2a4>
 8002d46:	1c73      	adds	r3, r6, #1
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x4fc>
 8002d4a:	e0b2      	b.n	8002eb2 <__aeabi_dsub+0x662>
 8002d4c:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002d4e:	429f      	cmp	r7, r3
 8002d50:	d01e      	beq.n	8002d90 <__aeabi_dsub+0x540>
 8002d52:	43f3      	mvns	r3, r6
 8002d54:	2b38      	cmp	r3, #56	; 0x38
 8002d56:	dc6f      	bgt.n	8002e38 <__aeabi_dsub+0x5e8>
 8002d58:	2b1f      	cmp	r3, #31
 8002d5a:	dd00      	ble.n	8002d5e <__aeabi_dsub+0x50e>
 8002d5c:	e097      	b.n	8002e8e <__aeabi_dsub+0x63e>
 8002d5e:	2520      	movs	r5, #32
 8002d60:	000e      	movs	r6, r1
 8002d62:	1aed      	subs	r5, r5, r3
 8002d64:	40ae      	lsls	r6, r5
 8002d66:	46b0      	mov	r8, r6
 8002d68:	0006      	movs	r6, r0
 8002d6a:	46aa      	mov	sl, r5
 8002d6c:	40de      	lsrs	r6, r3
 8002d6e:	4645      	mov	r5, r8
 8002d70:	4335      	orrs	r5, r6
 8002d72:	002e      	movs	r6, r5
 8002d74:	4655      	mov	r5, sl
 8002d76:	40a8      	lsls	r0, r5
 8002d78:	40d9      	lsrs	r1, r3
 8002d7a:	1e45      	subs	r5, r0, #1
 8002d7c:	41a8      	sbcs	r0, r5
 8002d7e:	448c      	add	ip, r1
 8002d80:	4306      	orrs	r6, r0
 8002d82:	18b6      	adds	r6, r6, r2
 8002d84:	4296      	cmp	r6, r2
 8002d86:	4192      	sbcs	r2, r2
 8002d88:	4251      	negs	r1, r2
 8002d8a:	4461      	add	r1, ip
 8002d8c:	003d      	movs	r5, r7
 8002d8e:	e625      	b.n	80029dc <__aeabi_dsub+0x18c>
 8002d90:	003d      	movs	r5, r7
 8002d92:	4661      	mov	r1, ip
 8002d94:	4691      	mov	r9, r2
 8002d96:	e678      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002d98:	000b      	movs	r3, r1
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	2d00      	cmp	r5, #0
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x552>
 8002da0:	e655      	b.n	8002a4e <__aeabi_dsub+0x1fe>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f5      	beq.n	8002d92 <__aeabi_dsub+0x542>
 8002da6:	4663      	mov	r3, ip
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x55e>
 8002dac:	e66d      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002dae:	1886      	adds	r6, r0, r2
 8002db0:	4286      	cmp	r6, r0
 8002db2:	4180      	sbcs	r0, r0
 8002db4:	4461      	add	r1, ip
 8002db6:	4240      	negs	r0, r0
 8002db8:	1809      	adds	r1, r1, r0
 8002dba:	2200      	movs	r2, #0
 8002dbc:	020b      	lsls	r3, r1, #8
 8002dbe:	d400      	bmi.n	8002dc2 <__aeabi_dsub+0x572>
 8002dc0:	e6d0      	b.n	8002b64 <__aeabi_dsub+0x314>
 8002dc2:	4b46      	ldr	r3, [pc, #280]	; (8002edc <__aeabi_dsub+0x68c>)
 8002dc4:	3501      	adds	r5, #1
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	e5b2      	b.n	8002930 <__aeabi_dsub+0xe0>
 8002dca:	46b1      	mov	r9, r6
 8002dcc:	e65d      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002dce:	0033      	movs	r3, r6
 8002dd0:	4667      	mov	r7, ip
 8002dd2:	3b20      	subs	r3, #32
 8002dd4:	40df      	lsrs	r7, r3
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	2e20      	cmp	r6, #32
 8002dda:	d005      	beq.n	8002de8 <__aeabi_dsub+0x598>
 8002ddc:	2740      	movs	r7, #64	; 0x40
 8002dde:	1bbf      	subs	r7, r7, r6
 8002de0:	4666      	mov	r6, ip
 8002de2:	40be      	lsls	r6, r7
 8002de4:	4332      	orrs	r2, r6
 8002de6:	4690      	mov	r8, r2
 8002de8:	4646      	mov	r6, r8
 8002dea:	1e72      	subs	r2, r6, #1
 8002dec:	4196      	sbcs	r6, r2
 8002dee:	4333      	orrs	r3, r6
 8002df0:	e5ef      	b.n	80029d2 <__aeabi_dsub+0x182>
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002df4:	429f      	cmp	r7, r3
 8002df6:	d0cb      	beq.n	8002d90 <__aeabi_dsub+0x540>
 8002df8:	2580      	movs	r5, #128	; 0x80
 8002dfa:	042d      	lsls	r5, r5, #16
 8002dfc:	4273      	negs	r3, r6
 8002dfe:	4329      	orrs	r1, r5
 8002e00:	e7a8      	b.n	8002d54 <__aeabi_dsub+0x504>
 8002e02:	4308      	orrs	r0, r1
 8002e04:	1e41      	subs	r1, r0, #1
 8002e06:	4188      	sbcs	r0, r1
 8002e08:	e6a2      	b.n	8002b50 <__aeabi_dsub+0x300>
 8002e0a:	2f00      	cmp	r7, #0
 8002e0c:	d100      	bne.n	8002e10 <__aeabi_dsub+0x5c0>
 8002e0e:	e63c      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002e10:	4663      	mov	r3, ip
 8002e12:	1a86      	subs	r6, r0, r2
 8002e14:	1acf      	subs	r7, r1, r3
 8002e16:	42b0      	cmp	r0, r6
 8002e18:	419b      	sbcs	r3, r3
 8002e1a:	425b      	negs	r3, r3
 8002e1c:	1afb      	subs	r3, r7, r3
 8002e1e:	4698      	mov	r8, r3
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	d54e      	bpl.n	8002ec2 <__aeabi_dsub+0x672>
 8002e24:	1a16      	subs	r6, r2, r0
 8002e26:	4663      	mov	r3, ip
 8002e28:	42b2      	cmp	r2, r6
 8002e2a:	4192      	sbcs	r2, r2
 8002e2c:	1a59      	subs	r1, r3, r1
 8002e2e:	4252      	negs	r2, r2
 8002e30:	1a89      	subs	r1, r1, r2
 8002e32:	465c      	mov	r4, fp
 8002e34:	2200      	movs	r2, #0
 8002e36:	e57b      	b.n	8002930 <__aeabi_dsub+0xe0>
 8002e38:	4301      	orrs	r1, r0
 8002e3a:	000e      	movs	r6, r1
 8002e3c:	1e71      	subs	r1, r6, #1
 8002e3e:	418e      	sbcs	r6, r1
 8002e40:	e79f      	b.n	8002d82 <__aeabi_dsub+0x532>
 8002e42:	001d      	movs	r5, r3
 8002e44:	000e      	movs	r6, r1
 8002e46:	3d20      	subs	r5, #32
 8002e48:	40ee      	lsrs	r6, r5
 8002e4a:	46b0      	mov	r8, r6
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d004      	beq.n	8002e5a <__aeabi_dsub+0x60a>
 8002e50:	2540      	movs	r5, #64	; 0x40
 8002e52:	1aeb      	subs	r3, r5, r3
 8002e54:	4099      	lsls	r1, r3
 8002e56:	4308      	orrs	r0, r1
 8002e58:	4681      	mov	r9, r0
 8002e5a:	4648      	mov	r0, r9
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	1e41      	subs	r1, r0, #1
 8002e60:	4188      	sbcs	r0, r1
 8002e62:	4318      	orrs	r0, r3
 8002e64:	e674      	b.n	8002b50 <__aeabi_dsub+0x300>
 8002e66:	2200      	movs	r2, #0
 8002e68:	2400      	movs	r4, #0
 8002e6a:	e617      	b.n	8002a9c <__aeabi_dsub+0x24c>
 8002e6c:	1a16      	subs	r6, r2, r0
 8002e6e:	4663      	mov	r3, ip
 8002e70:	42b2      	cmp	r2, r6
 8002e72:	4192      	sbcs	r2, r2
 8002e74:	1a59      	subs	r1, r3, r1
 8002e76:	4252      	negs	r2, r2
 8002e78:	1a89      	subs	r1, r1, r2
 8002e7a:	003d      	movs	r5, r7
 8002e7c:	e525      	b.n	80028ca <__aeabi_dsub+0x7a>
 8002e7e:	4661      	mov	r1, ip
 8002e80:	4691      	mov	r9, r2
 8002e82:	4d15      	ldr	r5, [pc, #84]	; (8002ed8 <__aeabi_dsub+0x688>)
 8002e84:	e601      	b.n	8002a8a <__aeabi_dsub+0x23a>
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	2400      	movs	r4, #0
 8002e8a:	0312      	lsls	r2, r2, #12
 8002e8c:	e679      	b.n	8002b82 <__aeabi_dsub+0x332>
 8002e8e:	001d      	movs	r5, r3
 8002e90:	000e      	movs	r6, r1
 8002e92:	3d20      	subs	r5, #32
 8002e94:	40ee      	lsrs	r6, r5
 8002e96:	46b0      	mov	r8, r6
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d004      	beq.n	8002ea6 <__aeabi_dsub+0x656>
 8002e9c:	2540      	movs	r5, #64	; 0x40
 8002e9e:	1aeb      	subs	r3, r5, r3
 8002ea0:	4099      	lsls	r1, r3
 8002ea2:	4308      	orrs	r0, r1
 8002ea4:	4681      	mov	r9, r0
 8002ea6:	464e      	mov	r6, r9
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	1e71      	subs	r1, r6, #1
 8002eac:	418e      	sbcs	r6, r1
 8002eae:	431e      	orrs	r6, r3
 8002eb0:	e767      	b.n	8002d82 <__aeabi_dsub+0x532>
 8002eb2:	1886      	adds	r6, r0, r2
 8002eb4:	4296      	cmp	r6, r2
 8002eb6:	419b      	sbcs	r3, r3
 8002eb8:	4461      	add	r1, ip
 8002eba:	425b      	negs	r3, r3
 8002ebc:	18c9      	adds	r1, r1, r3
 8002ebe:	003d      	movs	r5, r7
 8002ec0:	e58c      	b.n	80029dc <__aeabi_dsub+0x18c>
 8002ec2:	4647      	mov	r7, r8
 8002ec4:	4337      	orrs	r7, r6
 8002ec6:	d0ce      	beq.n	8002e66 <__aeabi_dsub+0x616>
 8002ec8:	2207      	movs	r2, #7
 8002eca:	4641      	mov	r1, r8
 8002ecc:	4032      	ands	r2, r6
 8002ece:	e649      	b.n	8002b64 <__aeabi_dsub+0x314>
 8002ed0:	2700      	movs	r7, #0
 8002ed2:	003a      	movs	r2, r7
 8002ed4:	e5e6      	b.n	8002aa4 <__aeabi_dsub+0x254>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	000007ff 	.word	0x000007ff
 8002edc:	ff7fffff 	.word	0xff7fffff

08002ee0 <__aeabi_d2iz>:
 8002ee0:	b530      	push	{r4, r5, lr}
 8002ee2:	4d14      	ldr	r5, [pc, #80]	; (8002f34 <__aeabi_d2iz+0x54>)
 8002ee4:	030a      	lsls	r2, r1, #12
 8002ee6:	004b      	lsls	r3, r1, #1
 8002ee8:	0b12      	lsrs	r2, r2, #12
 8002eea:	0d5b      	lsrs	r3, r3, #21
 8002eec:	0fc9      	lsrs	r1, r1, #31
 8002eee:	2400      	movs	r4, #0
 8002ef0:	42ab      	cmp	r3, r5
 8002ef2:	dd11      	ble.n	8002f18 <__aeabi_d2iz+0x38>
 8002ef4:	4c10      	ldr	r4, [pc, #64]	; (8002f38 <__aeabi_d2iz+0x58>)
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	dc10      	bgt.n	8002f1c <__aeabi_d2iz+0x3c>
 8002efa:	2480      	movs	r4, #128	; 0x80
 8002efc:	0364      	lsls	r4, r4, #13
 8002efe:	4322      	orrs	r2, r4
 8002f00:	4c0e      	ldr	r4, [pc, #56]	; (8002f3c <__aeabi_d2iz+0x5c>)
 8002f02:	1ae4      	subs	r4, r4, r3
 8002f04:	2c1f      	cmp	r4, #31
 8002f06:	dd0c      	ble.n	8002f22 <__aeabi_d2iz+0x42>
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <__aeabi_d2iz+0x60>)
 8002f0a:	1ac3      	subs	r3, r0, r3
 8002f0c:	40da      	lsrs	r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	425c      	negs	r4, r3
 8002f12:	2900      	cmp	r1, #0
 8002f14:	d100      	bne.n	8002f18 <__aeabi_d2iz+0x38>
 8002f16:	001c      	movs	r4, r3
 8002f18:	0020      	movs	r0, r4
 8002f1a:	bd30      	pop	{r4, r5, pc}
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <__aeabi_d2iz+0x64>)
 8002f1e:	18cc      	adds	r4, r1, r3
 8002f20:	e7fa      	b.n	8002f18 <__aeabi_d2iz+0x38>
 8002f22:	4d09      	ldr	r5, [pc, #36]	; (8002f48 <__aeabi_d2iz+0x68>)
 8002f24:	40e0      	lsrs	r0, r4
 8002f26:	46ac      	mov	ip, r5
 8002f28:	4463      	add	r3, ip
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	4303      	orrs	r3, r0
 8002f30:	e7ee      	b.n	8002f10 <__aeabi_d2iz+0x30>
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	000003fe 	.word	0x000003fe
 8002f38:	0000041d 	.word	0x0000041d
 8002f3c:	00000433 	.word	0x00000433
 8002f40:	00000413 	.word	0x00000413
 8002f44:	7fffffff 	.word	0x7fffffff
 8002f48:	fffffbed 	.word	0xfffffbed

08002f4c <__aeabi_i2d>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d02d      	beq.n	8002fae <__aeabi_i2d+0x62>
 8002f52:	17c3      	asrs	r3, r0, #31
 8002f54:	18c5      	adds	r5, r0, r3
 8002f56:	405d      	eors	r5, r3
 8002f58:	0fc4      	lsrs	r4, r0, #31
 8002f5a:	0028      	movs	r0, r5
 8002f5c:	f000 f8b4 	bl	80030c8 <__clzsi2>
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <__aeabi_i2d+0x6c>)
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	055b      	lsls	r3, r3, #21
 8002f66:	0d5b      	lsrs	r3, r3, #21
 8002f68:	280a      	cmp	r0, #10
 8002f6a:	dd15      	ble.n	8002f98 <__aeabi_i2d+0x4c>
 8002f6c:	380b      	subs	r0, #11
 8002f6e:	4085      	lsls	r5, r0
 8002f70:	2200      	movs	r2, #0
 8002f72:	032d      	lsls	r5, r5, #12
 8002f74:	0b2d      	lsrs	r5, r5, #12
 8002f76:	2100      	movs	r1, #0
 8002f78:	0010      	movs	r0, r2
 8002f7a:	032d      	lsls	r5, r5, #12
 8002f7c:	0d0a      	lsrs	r2, r1, #20
 8002f7e:	0b2d      	lsrs	r5, r5, #12
 8002f80:	0512      	lsls	r2, r2, #20
 8002f82:	432a      	orrs	r2, r5
 8002f84:	4d0d      	ldr	r5, [pc, #52]	; (8002fbc <__aeabi_i2d+0x70>)
 8002f86:	051b      	lsls	r3, r3, #20
 8002f88:	402a      	ands	r2, r5
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	07e4      	lsls	r4, r4, #31
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	4323      	orrs	r3, r4
 8002f94:	0019      	movs	r1, r3
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	0002      	movs	r2, r0
 8002f9a:	0029      	movs	r1, r5
 8002f9c:	3215      	adds	r2, #21
 8002f9e:	4091      	lsls	r1, r2
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	210b      	movs	r1, #11
 8002fa4:	1a08      	subs	r0, r1, r0
 8002fa6:	40c5      	lsrs	r5, r0
 8002fa8:	032d      	lsls	r5, r5, #12
 8002faa:	0b2d      	lsrs	r5, r5, #12
 8002fac:	e7e3      	b.n	8002f76 <__aeabi_i2d+0x2a>
 8002fae:	2400      	movs	r4, #0
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2500      	movs	r5, #0
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	e7de      	b.n	8002f76 <__aeabi_i2d+0x2a>
 8002fb8:	0000041e 	.word	0x0000041e
 8002fbc:	800fffff 	.word	0x800fffff

08002fc0 <__aeabi_ui2d>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	1e04      	subs	r4, r0, #0
 8002fc4:	d025      	beq.n	8003012 <__aeabi_ui2d+0x52>
 8002fc6:	f000 f87f 	bl	80030c8 <__clzsi2>
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <__aeabi_ui2d+0x5c>)
 8002fcc:	1a1b      	subs	r3, r3, r0
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	0d5b      	lsrs	r3, r3, #21
 8002fd2:	280a      	cmp	r0, #10
 8002fd4:	dd12      	ble.n	8002ffc <__aeabi_ui2d+0x3c>
 8002fd6:	380b      	subs	r0, #11
 8002fd8:	4084      	lsls	r4, r0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	0324      	lsls	r4, r4, #12
 8002fde:	0b24      	lsrs	r4, r4, #12
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	0324      	lsls	r4, r4, #12
 8002fe6:	0d0a      	lsrs	r2, r1, #20
 8002fe8:	0b24      	lsrs	r4, r4, #12
 8002fea:	0512      	lsls	r2, r2, #20
 8002fec:	4322      	orrs	r2, r4
 8002fee:	4c0c      	ldr	r4, [pc, #48]	; (8003020 <__aeabi_ui2d+0x60>)
 8002ff0:	051b      	lsls	r3, r3, #20
 8002ff2:	4022      	ands	r2, r4
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	0859      	lsrs	r1, r3, #1
 8002ffa:	bd10      	pop	{r4, pc}
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	0021      	movs	r1, r4
 8003000:	3215      	adds	r2, #21
 8003002:	4091      	lsls	r1, r2
 8003004:	000a      	movs	r2, r1
 8003006:	210b      	movs	r1, #11
 8003008:	1a08      	subs	r0, r1, r0
 800300a:	40c4      	lsrs	r4, r0
 800300c:	0324      	lsls	r4, r4, #12
 800300e:	0b24      	lsrs	r4, r4, #12
 8003010:	e7e6      	b.n	8002fe0 <__aeabi_ui2d+0x20>
 8003012:	2300      	movs	r3, #0
 8003014:	2400      	movs	r4, #0
 8003016:	2200      	movs	r2, #0
 8003018:	e7e2      	b.n	8002fe0 <__aeabi_ui2d+0x20>
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	0000041e 	.word	0x0000041e
 8003020:	800fffff 	.word	0x800fffff

08003024 <__aeabi_f2d>:
 8003024:	0041      	lsls	r1, r0, #1
 8003026:	0e09      	lsrs	r1, r1, #24
 8003028:	1c4b      	adds	r3, r1, #1
 800302a:	b570      	push	{r4, r5, r6, lr}
 800302c:	b2db      	uxtb	r3, r3
 800302e:	0246      	lsls	r6, r0, #9
 8003030:	0a75      	lsrs	r5, r6, #9
 8003032:	0fc4      	lsrs	r4, r0, #31
 8003034:	2b01      	cmp	r3, #1
 8003036:	dd14      	ble.n	8003062 <__aeabi_f2d+0x3e>
 8003038:	23e0      	movs	r3, #224	; 0xe0
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	076d      	lsls	r5, r5, #29
 800303e:	0b36      	lsrs	r6, r6, #12
 8003040:	18cb      	adds	r3, r1, r3
 8003042:	2100      	movs	r1, #0
 8003044:	0d0a      	lsrs	r2, r1, #20
 8003046:	0028      	movs	r0, r5
 8003048:	0512      	lsls	r2, r2, #20
 800304a:	4d1c      	ldr	r5, [pc, #112]	; (80030bc <__aeabi_f2d+0x98>)
 800304c:	4332      	orrs	r2, r6
 800304e:	055b      	lsls	r3, r3, #21
 8003050:	402a      	ands	r2, r5
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	4313      	orrs	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	4323      	orrs	r3, r4
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2900      	cmp	r1, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x6c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01e      	beq.n	80030a8 <__aeabi_f2d+0x84>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f82c 	bl	80030c8 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x8a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <__aeabi_f2d+0x9c>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b16      	lsrs	r6, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7d8      	b.n	8003042 <__aeabi_f2d+0x1e>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d006      	beq.n	80030a2 <__aeabi_f2d+0x7e>
 8003094:	0b32      	lsrs	r2, r6, #12
 8003096:	2680      	movs	r6, #128	; 0x80
 8003098:	0336      	lsls	r6, r6, #12
 800309a:	076d      	lsls	r5, r5, #29
 800309c:	4316      	orrs	r6, r2
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <__aeabi_f2d+0xa0>)
 80030a0:	e7cf      	b.n	8003042 <__aeabi_f2d+0x1e>
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <__aeabi_f2d+0xa0>)
 80030a4:	2600      	movs	r6, #0
 80030a6:	e7cc      	b.n	8003042 <__aeabi_f2d+0x1e>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2600      	movs	r6, #0
 80030ac:	e7c9      	b.n	8003042 <__aeabi_f2d+0x1e>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x5e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	800fffff 	.word	0x800fffff
 80030c0:	00000389 	.word	0x00000389
 80030c4:	000007ff 	.word	0x000007ff

080030c8 <__clzsi2>:
 80030c8:	211c      	movs	r1, #28
 80030ca:	2301      	movs	r3, #1
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	4298      	cmp	r0, r3
 80030d0:	d301      	bcc.n	80030d6 <__clzsi2+0xe>
 80030d2:	0c00      	lsrs	r0, r0, #16
 80030d4:	3910      	subs	r1, #16
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	4298      	cmp	r0, r3
 80030da:	d301      	bcc.n	80030e0 <__clzsi2+0x18>
 80030dc:	0a00      	lsrs	r0, r0, #8
 80030de:	3908      	subs	r1, #8
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	4298      	cmp	r0, r3
 80030e4:	d301      	bcc.n	80030ea <__clzsi2+0x22>
 80030e6:	0900      	lsrs	r0, r0, #4
 80030e8:	3904      	subs	r1, #4
 80030ea:	a202      	add	r2, pc, #8	; (adr r2, 80030f4 <__clzsi2+0x2c>)
 80030ec:	5c10      	ldrb	r0, [r2, r0]
 80030ee:	1840      	adds	r0, r0, r1
 80030f0:	4770      	bx	lr
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	02020304 	.word	0x02020304
 80030f8:	01010101 	.word	0x01010101
	...

08003104 <__clzdi2>:
 8003104:	b510      	push	{r4, lr}
 8003106:	2900      	cmp	r1, #0
 8003108:	d103      	bne.n	8003112 <__clzdi2+0xe>
 800310a:	f7ff ffdd 	bl	80030c8 <__clzsi2>
 800310e:	3020      	adds	r0, #32
 8003110:	e002      	b.n	8003118 <__clzdi2+0x14>
 8003112:	1c08      	adds	r0, r1, #0
 8003114:	f7ff ffd8 	bl	80030c8 <__clzsi2>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	46c0      	nop			; (mov r8, r8)

0800311c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800311c:	2200      	movs	r2, #0
 800311e:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <GetFskBandwidthRegValue+0x24>)
 8003122:	00d3      	lsls	r3, r2, #3
 8003124:	185b      	adds	r3, r3, r1
 8003126:	681c      	ldr	r4, [r3, #0]
 8003128:	4284      	cmp	r4, r0
 800312a:	d802      	bhi.n	8003132 <GetFskBandwidthRegValue+0x16>
 800312c:	689c      	ldr	r4, [r3, #8]
 800312e:	4284      	cmp	r4, r0
 8003130:	d803      	bhi.n	800313a <GetFskBandwidthRegValue+0x1e>
 8003132:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003134:	2a15      	cmp	r2, #21
 8003136:	d1f4      	bne.n	8003122 <GetFskBandwidthRegValue+0x6>
 8003138:	e7fe      	b.n	8003138 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 800313a:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 800313c:	bd10      	pop	{r4, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	0800cf14 	.word	0x0800cf14

08003144 <SX1272OnDio4Irq>:
    }
}

void SX1272OnDio4Irq( void )
{
    switch( SX1272.Settings.Modem )
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SX1272OnDio4Irq+0x18>)
 8003146:	795a      	ldrb	r2, [r3, #5]
 8003148:	2a00      	cmp	r2, #0
 800314a:	d105      	bne.n	8003158 <SX1272OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 800314c:	3330      	adds	r3, #48	; 0x30
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	2a00      	cmp	r2, #0
 8003152:	d101      	bne.n	8003158 <SX1272OnDio4Irq+0x14>
            {
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8003154:	3201      	adds	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003158:	4770      	bx	lr
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	20000d6c 	.word	0x20000d6c

08003160 <SX1272BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <SX1272BoardInit+0x8>)
 8003162:	6018      	str	r0, [r3, #0]
}
 8003164:	4770      	bx	lr
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	2000017c 	.word	0x2000017c

0800316c <SX1272GetStatus>:
    return SX1272.Settings.State;
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <SX1272GetStatus+0x8>)
 800316e:	7918      	ldrb	r0, [r3, #4]
}
 8003170:	4770      	bx	lr
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	20000d6c 	.word	0x20000d6c

08003178 <SX1272Reset>:
{
 8003178:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800317a:	25a0      	movs	r5, #160	; 0xa0
{
 800317c:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800317e:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8003180:	2214      	movs	r2, #20
 8003182:	2100      	movs	r1, #0
 8003184:	a801      	add	r0, sp, #4
 8003186:	f009 f92c 	bl	800c3e2 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 800318a:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800318c:	05ed      	lsls	r5, r5, #23
 800318e:	aa01      	add	r2, sp, #4
 8003190:	0021      	movs	r1, r4
 8003192:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003194:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003196:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8003198:	f008 f8aa 	bl	800b2f0 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 1 );
 800319c:	0022      	movs	r2, r4
 800319e:	0021      	movs	r1, r4
 80031a0:	0028      	movs	r0, r5
 80031a2:	f008 f917 	bl	800b3d4 <HW_GPIO_Write>
    DelayMs( 1 );
 80031a6:	0020      	movs	r0, r4
 80031a8:	f007 fed6 	bl	800af58 <DelayMs>
    initStruct.Mode = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80031ae:	aa01      	add	r2, sp, #4
 80031b0:	0021      	movs	r1, r4
 80031b2:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 80031b4:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80031b6:	f008 f89b 	bl	800b2f0 <HW_GPIO_Init>
    DelayMs( 6 );
 80031ba:	2006      	movs	r0, #6
 80031bc:	f007 fecc 	bl	800af58 <DelayMs>
}
 80031c0:	b007      	add	sp, #28
 80031c2:	bd30      	pop	{r4, r5, pc}

080031c4 <SX1272WriteBuffer>:
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	0006      	movs	r6, r0
 80031c8:	000c      	movs	r4, r1
 80031ca:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	2200      	movs	r2, #0
 80031d0:	480a      	ldr	r0, [pc, #40]	; (80031fc <SX1272WriteBuffer+0x38>)
 80031d2:	f008 f8ff 	bl	800b3d4 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80031d6:	2080      	movs	r0, #128	; 0x80
 80031d8:	4330      	orrs	r0, r6
 80031da:	f008 fba7 	bl	800b92c <HW_SPI_InOut>
 80031de:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80031e0:	42ac      	cmp	r4, r5
 80031e2:	d105      	bne.n	80031f0 <SX1272WriteBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80031e4:	2201      	movs	r2, #1
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <SX1272WriteBuffer+0x38>)
 80031ea:	f008 f8f3 	bl	800b3d4 <HW_GPIO_Write>
}
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 80031f0:	7820      	ldrb	r0, [r4, #0]
 80031f2:	f008 fb9b 	bl	800b92c <HW_SPI_InOut>
 80031f6:	3401      	adds	r4, #1
 80031f8:	e7f2      	b.n	80031e0 <SX1272WriteBuffer+0x1c>
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	50000400 	.word	0x50000400

08003200 <SX1272Write>:
{
 8003200:	b507      	push	{r0, r1, r2, lr}
 8003202:	466b      	mov	r3, sp
 8003204:	71d9      	strb	r1, [r3, #7]
 8003206:	3307      	adds	r3, #7
    SX1272WriteBuffer( addr, &data, 1 );
 8003208:	2201      	movs	r2, #1
 800320a:	0019      	movs	r1, r3
 800320c:	f7ff ffda 	bl	80031c4 <SX1272WriteBuffer>
}
 8003210:	bd07      	pop	{r0, r1, r2, pc}
	...

08003214 <SX1272SetChannel>:
    SX1272.Settings.Channel = freq;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <SX1272SetChannel+0x48>)
{
 8003216:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8003218:	4911      	ldr	r1, [pc, #68]	; (8003260 <SX1272SetChannel+0x4c>)
    SX1272.Settings.Channel = freq;
 800321a:	6098      	str	r0, [r3, #8]
{
 800321c:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 800321e:	f7fd f80d 	bl	800023c <__aeabi_uidivmod>
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <SX1272SetChannel+0x50>)
 8003224:	0208      	lsls	r0, r1, #8
 8003226:	18c0      	adds	r0, r0, r3
 8003228:	490d      	ldr	r1, [pc, #52]	; (8003260 <SX1272SetChannel+0x4c>)
 800322a:	f7fc ff81 	bl	8000130 <__udivsi3>
 800322e:	490c      	ldr	r1, [pc, #48]	; (8003260 <SX1272SetChannel+0x4c>)
 8003230:	0004      	movs	r4, r0
 8003232:	0028      	movs	r0, r5
 8003234:	f7fc ff7c 	bl	8000130 <__udivsi3>
 8003238:	0200      	lsls	r0, r0, #8
 800323a:	1824      	adds	r4, r4, r0
    SX1272Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800323c:	0c21      	lsrs	r1, r4, #16
 800323e:	b2c9      	uxtb	r1, r1
 8003240:	2006      	movs	r0, #6
 8003242:	f7ff ffdd 	bl	8003200 <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8003246:	0a21      	lsrs	r1, r4, #8
 8003248:	b2c9      	uxtb	r1, r1
 800324a:	2007      	movs	r0, #7
 800324c:	f7ff ffd8 	bl	8003200 <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8003250:	b2e1      	uxtb	r1, r4
 8003252:	2008      	movs	r0, #8
 8003254:	f7ff ffd4 	bl	8003200 <SX1272Write>
}
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	20000d6c 	.word	0x20000d6c
 8003260:	00003d09 	.word	0x00003d09
 8003264:	00001e84 	.word	0x00001e84

08003268 <SX1272ReadBuffer>:
{
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	0006      	movs	r6, r0
 800326c:	000c      	movs	r4, r1
 800326e:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	2200      	movs	r2, #0
 8003274:	480a      	ldr	r0, [pc, #40]	; (80032a0 <SX1272ReadBuffer+0x38>)
 8003276:	f008 f8ad 	bl	800b3d4 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 800327a:	207f      	movs	r0, #127	; 0x7f
 800327c:	4030      	ands	r0, r6
 800327e:	f008 fb55 	bl	800b92c <HW_SPI_InOut>
 8003282:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8003284:	42ac      	cmp	r4, r5
 8003286:	d105      	bne.n	8003294 <SX1272ReadBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003288:	2201      	movs	r2, #1
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <SX1272ReadBuffer+0x38>)
 800328e:	f008 f8a1 	bl	800b3d4 <HW_GPIO_Write>
}
 8003292:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8003294:	2000      	movs	r0, #0
 8003296:	f008 fb49 	bl	800b92c <HW_SPI_InOut>
 800329a:	7020      	strb	r0, [r4, #0]
 800329c:	3401      	adds	r4, #1
 800329e:	e7f1      	b.n	8003284 <SX1272ReadBuffer+0x1c>
 80032a0:	50000400 	.word	0x50000400

080032a4 <SX1272Read>:
{
 80032a4:	b513      	push	{r0, r1, r4, lr}
    SX1272ReadBuffer( addr, &data, 1 );
 80032a6:	466b      	mov	r3, sp
 80032a8:	1ddc      	adds	r4, r3, #7
 80032aa:	2201      	movs	r2, #1
 80032ac:	0021      	movs	r1, r4
 80032ae:	f7ff ffdb 	bl	8003268 <SX1272ReadBuffer>
    return data;
 80032b2:	7820      	ldrb	r0, [r4, #0]
}
 80032b4:	bd16      	pop	{r1, r2, r4, pc}
	...

080032b8 <SX1272GetTimeOnAir>:
{
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	000d      	movs	r5, r1
 80032bc:	b085      	sub	sp, #20
    switch( modem )
 80032be:	2800      	cmp	r0, #0
 80032c0:	d003      	beq.n	80032ca <SX1272GetTimeOnAir+0x12>
 80032c2:	2801      	cmp	r0, #1
 80032c4:	d055      	beq.n	8003372 <SX1272GetTimeOnAir+0xba>
    uint32_t airTime = 0;
 80032c6:	2000      	movs	r0, #0
    return airTime;
 80032c8:	e04c      	b.n	8003364 <SX1272GetTimeOnAir+0xac>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80032ca:	4c6e      	ldr	r4, [pc, #440]	; (8003484 <SX1272GetTimeOnAir+0x1cc>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80032cc:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80032ce:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80032d0:	f7ff ffe8 	bl	80032a4 <SX1272Read>
 80032d4:	23f8      	movs	r3, #248	; 0xf8
 80032d6:	4398      	bics	r0, r3
 80032d8:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80032da:	1980      	adds	r0, r0, r6
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80032dc:	f7ff fe36 	bl	8002f4c <__aeabi_i2d>
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80032e0:	1ce3      	adds	r3, r4, #3
 80032e2:	7fdb      	ldrb	r3, [r3, #31]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d13e      	bne.n	8003368 <SX1272GetTimeOnAir+0xb0>
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <SX1272GetTimeOnAir+0x1d0>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80032ec:	f7fe f918 	bl	8001520 <__aeabi_dadd>
 80032f0:	0006      	movs	r6, r0
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80032f2:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80032f4:	000f      	movs	r7, r1
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80032f6:	f7ff ffd5 	bl	80032a4 <SX1272Read>
 80032fa:	23f9      	movs	r3, #249	; 0xf9
 80032fc:	2200      	movs	r2, #0
 80032fe:	4398      	bics	r0, r3
 8003300:	2300      	movs	r3, #0
 8003302:	2800      	cmp	r0, #0
 8003304:	d000      	beq.n	8003308 <SX1272GetTimeOnAir+0x50>
 8003306:	4b60      	ldr	r3, [pc, #384]	; (8003488 <SX1272GetTimeOnAir+0x1d0>)
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003308:	0030      	movs	r0, r6
 800330a:	0039      	movs	r1, r7
 800330c:	f7fe f908 	bl	8001520 <__aeabi_dadd>
 8003310:	0006      	movs	r6, r0
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003312:	0028      	movs	r0, r5
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003314:	000f      	movs	r7, r1
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003316:	f7ff fe19 	bl	8002f4c <__aeabi_i2d>
 800331a:	0002      	movs	r2, r0
 800331c:	000b      	movs	r3, r1
 800331e:	0030      	movs	r0, r6
 8003320:	0039      	movs	r1, r7
 8003322:	f7fe f8fd 	bl	8001520 <__aeabi_dadd>
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003326:	1d63      	adds	r3, r4, #5
 8003328:	7fdb      	ldrb	r3, [r3, #31]
 800332a:	2200      	movs	r2, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11d      	bne.n	800336c <SX1272GetTimeOnAir+0xb4>
 8003330:	2300      	movs	r3, #0
                                     pktLen +
 8003332:	f7fe f8f5 	bl	8001520 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003336:	2200      	movs	r2, #0
 8003338:	4b54      	ldr	r3, [pc, #336]	; (800348c <SX1272GetTimeOnAir+0x1d4>)
 800333a:	f7ff f817 	bl	800236c <__aeabi_dmul>
 800333e:	0006      	movs	r6, r0
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003340:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003342:	000f      	movs	r7, r1
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003344:	f7ff fe3c 	bl	8002fc0 <__aeabi_ui2d>
 8003348:	0002      	movs	r2, r0
 800334a:	000b      	movs	r3, r1
 800334c:	0030      	movs	r0, r6
 800334e:	0039      	movs	r1, r7
 8003350:	f7fe fc02 	bl	8001b58 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003354:	2200      	movs	r2, #0
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <SX1272GetTimeOnAir+0x1d8>)
 8003358:	f7ff f808 	bl	800236c <__aeabi_dmul>
 800335c:	f009 fd4e 	bl	800cdfc <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8003360:	f7fd f936 	bl	80005d0 <__aeabi_d2uiz>
}
 8003364:	b005      	add	sp, #20
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003368:	2300      	movs	r3, #0
 800336a:	e7bf      	b.n	80032ec <SX1272GetTimeOnAir+0x34>
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	e7df      	b.n	8003332 <SX1272GetTimeOnAir+0x7a>
            switch( SX1272.Settings.LoRa.Bandwidth )
 8003372:	4c44      	ldr	r4, [pc, #272]	; (8003484 <SX1272GetTimeOnAir+0x1cc>)
 8003374:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003376:	2b02      	cmp	r3, #2
 8003378:	d900      	bls.n	800337c <SX1272GetTimeOnAir+0xc4>
 800337a:	e07d      	b.n	8003478 <SX1272GetTimeOnAir+0x1c0>
 800337c:	4a45      	ldr	r2, [pc, #276]	; (8003494 <SX1272GetTimeOnAir+0x1dc>)
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	18d3      	adds	r3, r2, r3
 8003382:	681e      	ldr	r6, [r3, #0]
 8003384:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 8003386:	2001      	movs	r0, #1
 8003388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800338a:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 800338c:	4098      	lsls	r0, r3
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f7ff fddc 	bl	8002f4c <__aeabi_i2d>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	0030      	movs	r0, r6
 800339a:	0039      	movs	r1, r7
 800339c:	f7fe fbdc 	bl	8001b58 <__aeabi_ddiv>
 80033a0:	0002      	movs	r2, r0
 80033a2:	000b      	movs	r3, r1
            double ts = 1 / rs;
 80033a4:	2000      	movs	r0, #0
 80033a6:	4938      	ldr	r1, [pc, #224]	; (8003488 <SX1272GetTimeOnAir+0x1d0>)
 80033a8:	f7fe fbd6 	bl	8001b58 <__aeabi_ddiv>
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80033ac:	0023      	movs	r3, r4
            double ts = 1 / rs;
 80033ae:	0006      	movs	r6, r0
 80033b0:	000f      	movs	r7, r1
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80033b2:	334e      	adds	r3, #78	; 0x4e
 80033b4:	8818      	ldrh	r0, [r3, #0]
 80033b6:	f7ff fdc9 	bl	8002f4c <__aeabi_i2d>
 80033ba:	2200      	movs	r2, #0
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <SX1272GetTimeOnAir+0x1e0>)
 80033be:	f7fe f8af 	bl	8001520 <__aeabi_dadd>
 80033c2:	0032      	movs	r2, r6
 80033c4:	003b      	movs	r3, r7
 80033c6:	f7fe ffd1 	bl	800236c <__aeabi_dmul>
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80033ca:	0023      	movs	r3, r4
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80033cc:	9002      	str	r0, [sp, #8]
 80033ce:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80033d0:	3352      	adds	r3, #82	; 0x52
 80033d2:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80033d4:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80033d6:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80033d8:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80033da:	0100      	lsls	r0, r0, #4
 80033dc:	1ac0      	subs	r0, r0, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80033de:	7823      	ldrb	r3, [r4, #0]
 80033e0:	2214      	movs	r2, #20
 80033e2:	1e59      	subs	r1, r3, #1
 80033e4:	418b      	sbcs	r3, r1
 80033e6:	301c      	adds	r0, #28
 80033e8:	425b      	negs	r3, r3
 80033ea:	401a      	ands	r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80033ec:	1828      	adds	r0, r5, r0
 80033ee:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80033f0:	f7ff fde6 	bl	8002fc0 <__aeabi_ui2d>
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <SX1272GetTimeOnAir+0x1cc>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80033f6:	0004      	movs	r4, r0
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80033f8:	334c      	adds	r3, #76	; 0x4c
 80033fa:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80033fc:	000d      	movs	r5, r1
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80033fe:	1e43      	subs	r3, r0, #1
 8003400:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003402:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003404:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003406:	1a18      	subs	r0, r3, r0
 8003408:	0080      	lsls	r0, r0, #2
 800340a:	f7ff fdd9 	bl	8002fc0 <__aeabi_ui2d>
 800340e:	0002      	movs	r2, r0
 8003410:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003412:	0020      	movs	r0, r4
 8003414:	0029      	movs	r1, r5
 8003416:	f7fe fb9f 	bl	8001b58 <__aeabi_ddiv>
 800341a:	f009 fbeb 	bl	800cbf4 <ceil>
 800341e:	0004      	movs	r4, r0
 8003420:	000d      	movs	r5, r1
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <SX1272GetTimeOnAir+0x1cc>)
 8003424:	334d      	adds	r3, #77	; 0x4d
 8003426:	7818      	ldrb	r0, [r3, #0]
 8003428:	3004      	adds	r0, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800342a:	f7ff fd8f 	bl	8002f4c <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800342e:	0022      	movs	r2, r4
 8003430:	002b      	movs	r3, r5
 8003432:	f7fe ff9b 	bl	800236c <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003436:	2200      	movs	r2, #0
 8003438:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800343a:	0004      	movs	r4, r0
 800343c:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800343e:	f7fd f817 	bl	8000470 <__aeabi_dcmpgt>
 8003442:	2800      	cmp	r0, #0
 8003444:	d01b      	beq.n	800347e <SX1272GetTimeOnAir+0x1c6>
 8003446:	2200      	movs	r2, #0
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <SX1272GetTimeOnAir+0x1d4>)
 800344a:	0020      	movs	r0, r4
 800344c:	0029      	movs	r1, r5
 800344e:	f7fe f867 	bl	8001520 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8003452:	0032      	movs	r2, r6
 8003454:	003b      	movs	r3, r7
 8003456:	f7fe ff89 	bl	800236c <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 800345a:	9a02      	ldr	r2, [sp, #8]
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	f7fe f85f 	bl	8001520 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8003462:	2200      	movs	r2, #0
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <SX1272GetTimeOnAir+0x1d8>)
 8003466:	f7fe ff81 	bl	800236c <__aeabi_dmul>
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <SX1272GetTimeOnAir+0x1e4>)
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <SX1272GetTimeOnAir+0x1e8>)
 800346e:	f7fe f857 	bl	8001520 <__aeabi_dadd>
 8003472:	f009 fc41 	bl	800ccf8 <floor>
 8003476:	e773      	b.n	8003360 <SX1272GetTimeOnAir+0xa8>
            switch( SX1272.Settings.LoRa.Bandwidth )
 8003478:	2600      	movs	r6, #0
 800347a:	2700      	movs	r7, #0
 800347c:	e783      	b.n	8003386 <SX1272GetTimeOnAir+0xce>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800347e:	2000      	movs	r0, #0
 8003480:	4902      	ldr	r1, [pc, #8]	; (800348c <SX1272GetTimeOnAir+0x1d4>)
 8003482:	e7e6      	b.n	8003452 <SX1272GetTimeOnAir+0x19a>
 8003484:	20000d6c 	.word	0x20000d6c
 8003488:	3ff00000 	.word	0x3ff00000
 800348c:	40200000 	.word	0x40200000
 8003490:	408f4000 	.word	0x408f4000
 8003494:	0800cec8 	.word	0x0800cec8
 8003498:	40110000 	.word	0x40110000
 800349c:	d916872b 	.word	0xd916872b
 80034a0:	3feff7ce 	.word	0x3feff7ce

080034a4 <SX1272ReadRssi>:
{
 80034a4:	b510      	push	{r4, lr}
    switch( modem )
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d004      	beq.n	80034b4 <SX1272ReadRssi+0x10>
 80034aa:	2801      	cmp	r0, #1
 80034ac:	d00a      	beq.n	80034c4 <SX1272ReadRssi+0x20>
        rssi = -1;
 80034ae:	2001      	movs	r0, #1
 80034b0:	4240      	negs	r0, r0
 80034b2:	e006      	b.n	80034c2 <SX1272ReadRssi+0x1e>
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 80034b4:	2011      	movs	r0, #17
 80034b6:	f7ff fef5 	bl	80032a4 <SX1272Read>
 80034ba:	0840      	lsrs	r0, r0, #1
 80034bc:	b2c0      	uxtb	r0, r0
 80034be:	4240      	negs	r0, r0
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 80034c0:	b200      	sxth	r0, r0
}
 80034c2:	bd10      	pop	{r4, pc}
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 80034c4:	201b      	movs	r0, #27
 80034c6:	f7ff feed 	bl	80032a4 <SX1272Read>
 80034ca:	388b      	subs	r0, #139	; 0x8b
 80034cc:	e7f8      	b.n	80034c0 <SX1272ReadRssi+0x1c>
	...

080034d0 <SX1272SetOpMode>:
{
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <SX1272SetOpMode+0x34>)
 80034d4:	0004      	movs	r4, r0
 80034d6:	682b      	ldr	r3, [r5, #0]
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( true );
 80034d8:	2001      	movs	r0, #1
 80034da:	691b      	ldr	r3, [r3, #16]
    if( opMode == RF_OPMODE_SLEEP )
 80034dc:	2c00      	cmp	r4, #0
 80034de:	d004      	beq.n	80034ea <SX1272SetOpMode+0x1a>
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( false );
 80034e0:	2000      	movs	r0, #0
 80034e2:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSw( opMode );
 80034e4:	0020      	movs	r0, r4
 80034e6:	682b      	ldr	r3, [r5, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4798      	blx	r3
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7ff fed9 	bl	80032a4 <SX1272Read>
 80034f2:	2307      	movs	r3, #7
 80034f4:	0001      	movs	r1, r0
 80034f6:	4399      	bics	r1, r3
 80034f8:	4321      	orrs	r1, r4
 80034fa:	b2c9      	uxtb	r1, r1
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7ff fe7f 	bl	8003200 <SX1272Write>
}
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	2000017c 	.word	0x2000017c

08003508 <SX1272SetSleep>:
{
 8003508:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <SX1272SetSleep+0x1c>)
 800350c:	f007 fdf6 	bl	800b0fc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <SX1272SetSleep+0x20>)
 8003512:	f007 fdf3 	bl	800b0fc <TimerStop>
    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003516:	2000      	movs	r0, #0
 8003518:	f7ff ffda 	bl	80034d0 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 800351c:	2200      	movs	r2, #0
 800351e:	4b03      	ldr	r3, [pc, #12]	; (800352c <SX1272SetSleep+0x24>)
 8003520:	711a      	strb	r2, [r3, #4]
}
 8003522:	bd10      	pop	{r4, pc}
 8003524:	20000dfc 	.word	0x20000dfc
 8003528:	20000dd4 	.word	0x20000dd4
 800352c:	20000d6c 	.word	0x20000d6c

08003530 <SX1272SetStby>:
{
 8003530:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003532:	4806      	ldr	r0, [pc, #24]	; (800354c <SX1272SetStby+0x1c>)
 8003534:	f007 fde2 	bl	800b0fc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <SX1272SetStby+0x20>)
 800353a:	f007 fddf 	bl	800b0fc <TimerStop>
    SX1272SetOpMode( RF_OPMODE_STANDBY );
 800353e:	2001      	movs	r0, #1
 8003540:	f7ff ffc6 	bl	80034d0 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 8003544:	2200      	movs	r2, #0
 8003546:	4b03      	ldr	r3, [pc, #12]	; (8003554 <SX1272SetStby+0x24>)
 8003548:	711a      	strb	r2, [r3, #4]
}
 800354a:	bd10      	pop	{r4, pc}
 800354c:	20000dfc 	.word	0x20000dfc
 8003550:	20000dd4 	.word	0x20000dd4
 8003554:	20000d6c 	.word	0x20000d6c

08003558 <SX1272SetRx>:
{
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1272.Settings.Modem )
 800355a:	4c4d      	ldr	r4, [pc, #308]	; (8003690 <SX1272SetRx+0x138>)
{
 800355c:	0006      	movs	r6, r0
    switch( SX1272.Settings.Modem )
 800355e:	7965      	ldrb	r5, [r4, #5]
 8003560:	2d00      	cmp	r5, #0
 8003562:	d003      	beq.n	800356c <SX1272SetRx+0x14>
 8003564:	2d01      	cmp	r5, #1
 8003566:	d049      	beq.n	80035fc <SX1272SetRx+0xa4>
    bool rxContinuous = false;
 8003568:	2700      	movs	r7, #0
 800356a:	e024      	b.n	80035b6 <SX1272SetRx+0x5e>
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 800356c:	1de3      	adds	r3, r4, #7
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800356e:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 8003570:	7fdf      	ldrb	r7, [r3, #31]
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003572:	f7ff fe97 	bl	80032a4 <SX1272Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003576:	2103      	movs	r1, #3
 8003578:	4008      	ands	r0, r1
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800357a:	3109      	adds	r1, #9
 800357c:	4301      	orrs	r1, r0
 800357e:	2040      	movs	r0, #64	; 0x40
 8003580:	f7ff fe3e 	bl	8003200 <SX1272Write>
            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003584:	2041      	movs	r0, #65	; 0x41
 8003586:	f7ff fe8d 	bl	80032a4 <SX1272Read>
 800358a:	213f      	movs	r1, #63	; 0x3f
 800358c:	4249      	negs	r1, r1
 800358e:	4301      	orrs	r1, r0
 8003590:	b2c9      	uxtb	r1, r1
 8003592:	2041      	movs	r0, #65	; 0x41
 8003594:	f7ff fe34 	bl	8003200 <SX1272Write>
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 8003598:	2035      	movs	r0, #53	; 0x35
 800359a:	f7ff fe83 	bl	80032a4 <SX1272Read>
 800359e:	233f      	movs	r3, #63	; 0x3f
 80035a0:	4018      	ands	r0, r3
 80035a2:	0023      	movs	r3, r4
 80035a4:	333e      	adds	r3, #62	; 0x3e
 80035a6:	7018      	strb	r0, [r3, #0]
            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80035a8:	211e      	movs	r1, #30
 80035aa:	200d      	movs	r0, #13
 80035ac:	f7ff fe28 	bl	8003200 <SX1272Write>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 80035b0:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80035b2:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 80035b4:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	2100      	movs	r1, #0
 80035ba:	0052      	lsls	r2, r2, #1
 80035bc:	4835      	ldr	r0, [pc, #212]	; (8003694 <SX1272SetRx+0x13c>)
 80035be:	f008 ff10 	bl	800c3e2 <memset>
    SX1272.Settings.State = RF_RX_RUNNING;
 80035c2:	2301      	movs	r3, #1
 80035c4:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	d007      	beq.n	80035da <SX1272SetRx+0x82>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80035ca:	4d33      	ldr	r5, [pc, #204]	; (8003698 <SX1272SetRx+0x140>)
 80035cc:	0031      	movs	r1, r6
 80035ce:	0028      	movs	r0, r5
 80035d0:	f007 fdc0 	bl	800b154 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80035d4:	0028      	movs	r0, r5
 80035d6:	f007 fd1f 	bl	800b018 <TimerStart>
    if( SX1272.Settings.Modem == MODEM_FSK )
 80035da:	7963      	ldrb	r3, [r4, #5]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d150      	bne.n	8003682 <SX1272SetRx+0x12a>
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80035e0:	2005      	movs	r0, #5
 80035e2:	f7ff ff75 	bl	80034d0 <SX1272SetOpMode>
        if( rxContinuous == false )
 80035e6:	2f00      	cmp	r7, #0
 80035e8:	d107      	bne.n	80035fa <SX1272SetRx+0xa2>
            TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 80035ea:	4d2c      	ldr	r5, [pc, #176]	; (800369c <SX1272SetRx+0x144>)
 80035ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035ee:	0028      	movs	r0, r5
 80035f0:	f007 fdb0 	bl	800b154 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80035f4:	0028      	movs	r0, r5
 80035f6:	f007 fd0f 	bl	800b018 <TimerStart>
}
 80035fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1272.Settings.LoRa.IqInverted == true )
 80035fc:	0023      	movs	r3, r4
 80035fe:	3355      	adds	r3, #85	; 0x55
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2741      	movs	r7, #65	; 0x41
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003604:	2033      	movs	r0, #51	; 0x33
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003606:	2b00      	cmp	r3, #0
 8003608:	d027      	beq.n	800365a <SX1272SetRx+0x102>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800360a:	f7ff fe4b 	bl	80032a4 <SX1272Read>
 800360e:	4338      	orrs	r0, r7
 8003610:	b2c1      	uxtb	r1, r0
 8003612:	2033      	movs	r0, #51	; 0x33
 8003614:	f7ff fdf4 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003618:	2119      	movs	r1, #25
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800361a:	203b      	movs	r0, #59	; 0x3b
 800361c:	f7ff fdf0 	bl	8003200 <SX1272Write>
            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 8003620:	0023      	movs	r3, r4
 8003622:	3356      	adds	r3, #86	; 0x56
 8003624:	781f      	ldrb	r7, [r3, #0]
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003626:	0023      	movs	r3, r4
 8003628:	3353      	adds	r3, #83	; 0x53
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01f      	beq.n	8003670 <SX1272SetRx+0x118>
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003630:	211d      	movs	r1, #29
 8003632:	2011      	movs	r0, #17
 8003634:	f7ff fde4 	bl	8003200 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003638:	2040      	movs	r0, #64	; 0x40
 800363a:	f7ff fe33 	bl	80032a4 <SX1272Read>
 800363e:	2133      	movs	r1, #51	; 0x33
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003640:	4001      	ands	r1, r0
 8003642:	2040      	movs	r0, #64	; 0x40
 8003644:	f7ff fddc 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 8003648:	2100      	movs	r1, #0
 800364a:	200f      	movs	r0, #15
 800364c:	f7ff fdd8 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8003650:	2100      	movs	r1, #0
 8003652:	200d      	movs	r0, #13
 8003654:	f7ff fdd4 	bl	8003200 <SX1272Write>
        break;
 8003658:	e7ad      	b.n	80035b6 <SX1272SetRx+0x5e>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800365a:	f7ff fe23 	bl	80032a4 <SX1272Read>
 800365e:	0001      	movs	r1, r0
 8003660:	43b9      	bics	r1, r7
 8003662:	4329      	orrs	r1, r5
 8003664:	b2c9      	uxtb	r1, r1
 8003666:	2033      	movs	r0, #51	; 0x33
 8003668:	f7ff fdca 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800366c:	211d      	movs	r1, #29
 800366e:	e7d4      	b.n	800361a <SX1272SetRx+0xc2>
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003670:	211f      	movs	r1, #31
 8003672:	2011      	movs	r0, #17
 8003674:	f7ff fdc4 	bl	8003200 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003678:	2040      	movs	r0, #64	; 0x40
 800367a:	f7ff fe13 	bl	80032a4 <SX1272Read>
 800367e:	213f      	movs	r1, #63	; 0x3f
 8003680:	e7de      	b.n	8003640 <SX1272SetRx+0xe8>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 8003682:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8003684:	2f00      	cmp	r7, #0
 8003686:	d100      	bne.n	800368a <SX1272SetRx+0x132>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003688:	2006      	movs	r0, #6
 800368a:	f7ff ff21 	bl	80034d0 <SX1272SetOpMode>
}
 800368e:	e7b4      	b.n	80035fa <SX1272SetRx+0xa2>
 8003690:	20000d6c 	.word	0x20000d6c
 8003694:	20000184 	.word	0x20000184
 8003698:	20000dfc 	.word	0x20000dfc
 800369c:	20000de8 	.word	0x20000de8

080036a0 <SX1272SetTx>:
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
    TimerSetValue( &TxTimeoutTimer, timeout );
 80036a2:	4d25      	ldr	r5, [pc, #148]	; (8003738 <SX1272SetTx+0x98>)
{
 80036a4:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 80036a6:	0028      	movs	r0, r5
 80036a8:	f007 fd54 	bl	800b154 <TimerSetValue>
    switch( SX1272.Settings.Modem )
 80036ac:	4c23      	ldr	r4, [pc, #140]	; (800373c <SX1272SetTx+0x9c>)
 80036ae:	7963      	ldrb	r3, [r4, #5]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <SX1272SetTx+0x2a>
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d023      	beq.n	8003700 <SX1272SetTx+0x60>
    SX1272.Settings.State = RF_TX_RUNNING;
 80036b8:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80036ba:	0028      	movs	r0, r5
    SX1272.Settings.State = RF_TX_RUNNING;
 80036bc:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80036be:	f007 fcab 	bl	800b018 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 80036c2:	2003      	movs	r0, #3
 80036c4:	f7ff ff04 	bl	80034d0 <SX1272SetOpMode>
}
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80036ca:	2040      	movs	r0, #64	; 0x40
 80036cc:	f7ff fdea 	bl	80032a4 <SX1272Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80036d0:	2103      	movs	r1, #3
 80036d2:	4008      	ands	r0, r1
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80036d4:	310d      	adds	r1, #13
 80036d6:	4301      	orrs	r1, r0
 80036d8:	2040      	movs	r0, #64	; 0x40
 80036da:	f7ff fd91 	bl	8003200 <SX1272Write>
            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80036de:	2041      	movs	r0, #65	; 0x41
 80036e0:	f7ff fde0 	bl	80032a4 <SX1272Read>
 80036e4:	213e      	movs	r1, #62	; 0x3e
 80036e6:	4001      	ands	r1, r0
 80036e8:	2041      	movs	r0, #65	; 0x41
 80036ea:	f7ff fd89 	bl	8003200 <SX1272Write>
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 80036ee:	2035      	movs	r0, #53	; 0x35
 80036f0:	f7ff fdd8 	bl	80032a4 <SX1272Read>
 80036f4:	233f      	movs	r3, #63	; 0x3f
 80036f6:	4018      	ands	r0, r3
 80036f8:	0023      	movs	r3, r4
 80036fa:	333e      	adds	r3, #62	; 0x3e
 80036fc:	7018      	strb	r0, [r3, #0]
        break;
 80036fe:	e7db      	b.n	80036b8 <SX1272SetTx+0x18>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003700:	0023      	movs	r3, r4
 8003702:	3353      	adds	r3, #83	; 0x53
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <SX1272SetTx+0x86>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800370a:	21f5      	movs	r1, #245	; 0xf5
 800370c:	2011      	movs	r0, #17
 800370e:	f7ff fd77 	bl	8003200 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003712:	2040      	movs	r0, #64	; 0x40
 8003714:	f7ff fdc6 	bl	80032a4 <SX1272Read>
 8003718:	2133      	movs	r1, #51	; 0x33
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800371a:	4001      	ands	r1, r0
 800371c:	2040      	movs	r0, #64	; 0x40
 800371e:	4301      	orrs	r1, r0
 8003720:	f7ff fd6e 	bl	8003200 <SX1272Write>
 8003724:	e7c8      	b.n	80036b8 <SX1272SetTx+0x18>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003726:	21f7      	movs	r1, #247	; 0xf7
 8003728:	2011      	movs	r0, #17
 800372a:	f7ff fd69 	bl	8003200 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800372e:	2040      	movs	r0, #64	; 0x40
 8003730:	f7ff fdb8 	bl	80032a4 <SX1272Read>
 8003734:	213f      	movs	r1, #63	; 0x3f
 8003736:	e7f0      	b.n	800371a <SX1272SetTx+0x7a>
 8003738:	20000dd4 	.word	0x20000dd4
 800373c:	20000d6c 	.word	0x20000d6c

08003740 <SX1272StartCad>:
{
 8003740:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.Modem )
 8003742:	4c0b      	ldr	r4, [pc, #44]	; (8003770 <SX1272StartCad+0x30>)
 8003744:	7963      	ldrb	r3, [r4, #5]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d110      	bne.n	800376c <SX1272StartCad+0x2c>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800374a:	21fa      	movs	r1, #250	; 0xfa
 800374c:	2011      	movs	r0, #17
 800374e:	f7ff fd57 	bl	8003200 <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f7ff fda6 	bl	80032a4 <SX1272Read>
 8003758:	2503      	movs	r5, #3
 800375a:	43a8      	bics	r0, r5
 800375c:	b2c1      	uxtb	r1, r0
 800375e:	2040      	movs	r0, #64	; 0x40
 8003760:	f7ff fd4e 	bl	8003200 <SX1272Write>
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 8003764:	2007      	movs	r0, #7
            SX1272.Settings.State = RF_CAD;
 8003766:	7125      	strb	r5, [r4, #4]
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 8003768:	f7ff feb2 	bl	80034d0 <SX1272SetOpMode>
}
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	20000d6c 	.word	0x20000d6c

08003774 <SX1272SetModem>:
{
 8003774:	b510      	push	{r4, lr}
 8003776:	0004      	movs	r4, r0
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8003778:	2001      	movs	r0, #1
 800377a:	f7ff fd93 	bl	80032a4 <SX1272Read>
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <SX1272SetModem+0x70>)
 8003780:	0602      	lsls	r2, r0, #24
 8003782:	d51a      	bpl.n	80037ba <SX1272SetModem+0x46>
        SX1272.Settings.Modem = MODEM_LORA;
 8003784:	2201      	movs	r2, #1
        SX1272.Settings.Modem = MODEM_FSK;
 8003786:	715a      	strb	r2, [r3, #5]
    if( SX1272.Settings.Modem == modem )
 8003788:	795a      	ldrb	r2, [r3, #5]
 800378a:	42a2      	cmp	r2, r4
 800378c:	d014      	beq.n	80037b8 <SX1272SetModem+0x44>
    SX1272.Settings.Modem = modem;
 800378e:	715c      	strb	r4, [r3, #5]
    switch( SX1272.Settings.Modem )
 8003790:	2c01      	cmp	r4, #1
 8003792:	d014      	beq.n	80037be <SX1272SetModem+0x4a>
        SX1272SetSleep( );
 8003794:	f7ff feb8 	bl	8003508 <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003798:	2001      	movs	r0, #1
 800379a:	f7ff fd83 	bl	80032a4 <SX1272Read>
 800379e:	217f      	movs	r1, #127	; 0x7f
 80037a0:	4001      	ands	r1, r0
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7ff fd2c 	bl	8003200 <SX1272Write>
        SX1272Write( REG_DIOMAPPING1, 0x00 );
 80037a8:	2100      	movs	r1, #0
 80037aa:	2040      	movs	r0, #64	; 0x40
 80037ac:	f7ff fd28 	bl	8003200 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80037b0:	2130      	movs	r1, #48	; 0x30
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 80037b2:	2041      	movs	r0, #65	; 0x41
 80037b4:	f7ff fd24 	bl	8003200 <SX1272Write>
}
 80037b8:	bd10      	pop	{r4, pc}
        SX1272.Settings.Modem = MODEM_FSK;
 80037ba:	2200      	movs	r2, #0
 80037bc:	e7e3      	b.n	8003786 <SX1272SetModem+0x12>
        SX1272SetSleep( );
 80037be:	f7ff fea3 	bl	8003508 <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7ff fd6e 	bl	80032a4 <SX1272Read>
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	4249      	negs	r1, r1
 80037cc:	4301      	orrs	r1, r0
 80037ce:	b2c9      	uxtb	r1, r1
 80037d0:	0020      	movs	r0, r4
 80037d2:	f7ff fd15 	bl	8003200 <SX1272Write>
        SX1272Write( REG_DIOMAPPING1, 0x00 );
 80037d6:	2100      	movs	r1, #0
 80037d8:	2040      	movs	r0, #64	; 0x40
 80037da:	f7ff fd11 	bl	8003200 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 80037de:	2100      	movs	r1, #0
 80037e0:	e7e7      	b.n	80037b2 <SX1272SetModem+0x3e>
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000d6c 	.word	0x20000d6c

080037e8 <SX1272Init>:
{
 80037e8:	b570      	push	{r4, r5, r6, lr}
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80037ea:	4c1a      	ldr	r4, [pc, #104]	; (8003854 <SX1272Init+0x6c>)
    RadioEvents = events;
 80037ec:	4d1a      	ldr	r5, [pc, #104]	; (8003858 <SX1272Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80037ee:	0021      	movs	r1, r4
    RadioEvents = events;
 80037f0:	6068      	str	r0, [r5, #4]
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80037f2:	481a      	ldr	r0, [pc, #104]	; (800385c <SX1272Init+0x74>)
 80037f4:	f007 fc08 	bl	800b008 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 80037f8:	0021      	movs	r1, r4
 80037fa:	4819      	ldr	r0, [pc, #100]	; (8003860 <SX1272Init+0x78>)
 80037fc:	f007 fc04 	bl	800b008 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 8003800:	0021      	movs	r1, r4
 8003802:	4818      	ldr	r0, [pc, #96]	; (8003864 <SX1272Init+0x7c>)
 8003804:	f007 fc00 	bl	800b008 <TimerInit>
    LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	2001      	movs	r0, #1
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4798      	blx	r3
    SX1272Reset( );
 8003810:	f7ff fcb2 	bl	8003178 <SX1272Reset>
    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003814:	2000      	movs	r0, #0
 8003816:	f7ff fe5b 	bl	80034d0 <SX1272SetOpMode>
    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	4812      	ldr	r0, [pc, #72]	; (8003868 <SX1272Init+0x80>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4798      	blx	r3
 8003822:	4e12      	ldr	r6, [pc, #72]	; (800386c <SX1272Init+0x84>)
 8003824:	0034      	movs	r4, r6
 8003826:	364b      	adds	r6, #75	; 0x4b
 8003828:	3418      	adds	r4, #24
        SX1272SetModem( RadioRegsInit[i].Modem );
 800382a:	7820      	ldrb	r0, [r4, #0]
 800382c:	f7ff ffa2 	bl	8003774 <SX1272SetModem>
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003830:	78a1      	ldrb	r1, [r4, #2]
 8003832:	7860      	ldrb	r0, [r4, #1]
 8003834:	3403      	adds	r4, #3
 8003836:	f7ff fce3 	bl	8003200 <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800383a:	42b4      	cmp	r4, r6
 800383c:	d1f5      	bne.n	800382a <SX1272Init+0x42>
    SX1272SetModem( MODEM_FSK );
 800383e:	2000      	movs	r0, #0
 8003840:	f7ff ff98 	bl	8003774 <SX1272SetModem>
    SX1272.Settings.State = RF_IDLE;
 8003844:	2200      	movs	r2, #0
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <SX1272Init+0x88>)
 8003848:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4798      	blx	r3
 8003850:	3002      	adds	r0, #2
}
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	08004441 	.word	0x08004441
 8003858:	2000017c 	.word	0x2000017c
 800385c:	20000dd4 	.word	0x20000dd4
 8003860:	20000dfc 	.word	0x20000dfc
 8003864:	20000de8 	.word	0x20000de8
 8003868:	20000000 	.word	0x20000000
 800386c:	0800cec8 	.word	0x0800cec8
 8003870:	20000d6c 	.word	0x20000d6c

08003874 <SX1272IsChannelFree>:
{
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	000e      	movs	r6, r1
 8003878:	0017      	movs	r7, r2
 800387a:	001d      	movs	r5, r3
 800387c:	0004      	movs	r4, r0
    SX1272SetModem( modem );
 800387e:	f7ff ff79 	bl	8003774 <SX1272SetModem>
    SX1272SetChannel( freq );
 8003882:	0030      	movs	r0, r6
 8003884:	f7ff fcc6 	bl	8003214 <SX1272SetChannel>
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8003888:	2005      	movs	r0, #5
 800388a:	f7ff fe21 	bl	80034d0 <SX1272SetOpMode>
    DelayMs( 1 );
 800388e:	2001      	movs	r0, #1
 8003890:	f007 fb62 	bl	800af58 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8003894:	f007 fc6f 	bl	800b176 <TimerGetCurrentTime>
 8003898:	0006      	movs	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800389a:	0030      	movs	r0, r6
 800389c:	f007 fc71 	bl	800b182 <TimerGetElapsedTime>
 80038a0:	42a8      	cmp	r0, r5
 80038a2:	d304      	bcc.n	80038ae <SX1272IsChannelFree+0x3a>
    bool status = true;
 80038a4:	2401      	movs	r4, #1
    SX1272SetSleep( );
 80038a6:	f7ff fe2f 	bl	8003508 <SX1272SetSleep>
}
 80038aa:	0020      	movs	r0, r4
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1272ReadRssi( modem );
 80038ae:	0020      	movs	r0, r4
 80038b0:	f7ff fdf8 	bl	80034a4 <SX1272ReadRssi>
        if( rssi > rssiThresh )
 80038b4:	42b8      	cmp	r0, r7
 80038b6:	ddf0      	ble.n	800389a <SX1272IsChannelFree+0x26>
            status = false;
 80038b8:	2400      	movs	r4, #0
 80038ba:	e7f4      	b.n	80038a6 <SX1272IsChannelFree+0x32>

080038bc <SX1272Random>:
{
 80038bc:	b570      	push	{r4, r5, r6, lr}
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80038be:	2400      	movs	r4, #0
    SX1272SetModem( MODEM_LORA );
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7ff ff57 	bl	8003774 <SX1272SetModem>
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80038c6:	21ff      	movs	r1, #255	; 0xff
 80038c8:	2011      	movs	r0, #17
 80038ca:	f7ff fc99 	bl	8003200 <SX1272Write>
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80038ce:	2005      	movs	r0, #5
 80038d0:	f7ff fdfe 	bl	80034d0 <SX1272SetOpMode>
    uint32_t rnd = 0;
 80038d4:	0025      	movs	r5, r4
        DelayMs( 1 );
 80038d6:	2601      	movs	r6, #1
 80038d8:	0030      	movs	r0, r6
 80038da:	f007 fb3d 	bl	800af58 <DelayMs>
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80038de:	202c      	movs	r0, #44	; 0x2c
 80038e0:	f7ff fce0 	bl	80032a4 <SX1272Read>
 80038e4:	4030      	ands	r0, r6
 80038e6:	40a0      	lsls	r0, r4
 80038e8:	3401      	adds	r4, #1
 80038ea:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80038ec:	2c20      	cmp	r4, #32
 80038ee:	d1f3      	bne.n	80038d8 <SX1272Random+0x1c>
    SX1272SetSleep( );
 80038f0:	f7ff fe0a 	bl	8003508 <SX1272SetSleep>
}
 80038f4:	0028      	movs	r0, r5
 80038f6:	bd70      	pop	{r4, r5, r6, pc}

080038f8 <SX1272SetRxConfig>:
{
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	b08d      	sub	sp, #52	; 0x34
 80038fc:	9306      	str	r3, [sp, #24]
 80038fe:	ab12      	add	r3, sp, #72	; 0x48
 8003900:	0016      	movs	r6, r2
 8003902:	cb04      	ldmia	r3!, {r2}
 8003904:	0004      	movs	r4, r0
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	9208      	str	r2, [sp, #32]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	ab14      	add	r3, sp, #80	; 0x50
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	aa0c      	add	r2, sp, #48	; 0x30
 8003912:	9305      	str	r3, [sp, #20]
 8003914:	ab15      	add	r3, sp, #84	; 0x54
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	000d      	movs	r5, r1
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	ab16      	add	r3, sp, #88	; 0x58
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	ab17      	add	r3, sp, #92	; 0x5c
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	9304      	str	r3, [sp, #16]
 8003928:	ab18      	add	r3, sp, #96	; 0x60
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	930a      	str	r3, [sp, #40]	; 0x28
 800392e:	ab19      	add	r3, sp, #100	; 0x64
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	930b      	str	r3, [sp, #44]	; 0x2c
 8003934:	2319      	movs	r3, #25
 8003936:	189b      	adds	r3, r3, r2
 8003938:	7fdf      	ldrb	r7, [r3, #31]
 800393a:	231d      	movs	r3, #29
 800393c:	189b      	adds	r3, r3, r2
 800393e:	7fdb      	ldrb	r3, [r3, #31]
 8003940:	9309      	str	r3, [sp, #36]	; 0x24
    SX1272SetModem( modem );
 8003942:	f7ff ff17 	bl	8003774 <SX1272SetModem>
    switch( modem )
 8003946:	2c00      	cmp	r4, #0
 8003948:	d004      	beq.n	8003954 <SX1272SetRxConfig+0x5c>
 800394a:	2c01      	cmp	r4, #1
 800394c:	d100      	bne.n	8003950 <SX1272SetRxConfig+0x58>
 800394e:	e084      	b.n	8003a5a <SX1272SetRxConfig+0x162>
}
 8003950:	b00d      	add	sp, #52	; 0x34
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8003954:	4c96      	ldr	r4, [pc, #600]	; (8003bb0 <SX1272SetRxConfig+0x2b8>)
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003956:	9b08      	ldr	r3, [sp, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8003958:	9a02      	ldr	r2, [sp, #8]
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800395a:	61a3      	str	r3, [r4, #24]
            SX1272.Settings.Fsk.FixLen = fixLen;
 800395c:	1ce3      	adds	r3, r4, #3
 800395e:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 8003960:	9a03      	ldr	r2, [sp, #12]
 8003962:	1d23      	adds	r3, r4, #4
 8003964:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8003966:	9a04      	ldr	r2, [sp, #16]
 8003968:	1d63      	adds	r3, r4, #5
 800396a:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 800396c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 800396e:	1da3      	adds	r3, r4, #6
 8003970:	77df      	strb	r7, [r3, #31]
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 8003972:	1de3      	adds	r3, r4, #7
 8003974:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8003976:	9b01      	ldr	r3, [sp, #4]
            SX1272.Settings.Fsk.Datarate = datarate;
 8003978:	61e6      	str	r6, [r4, #28]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 800397a:	8423      	strh	r3, [r4, #32]
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 800397c:	6165      	str	r5, [r4, #20]
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800397e:	0030      	movs	r0, r6
 8003980:	f7ff fb1e 	bl	8002fc0 <__aeabi_ui2d>
 8003984:	0002      	movs	r2, r0
 8003986:	000b      	movs	r3, r1
 8003988:	0006      	movs	r6, r0
 800398a:	000f      	movs	r7, r1
 800398c:	2000      	movs	r0, #0
 800398e:	4989      	ldr	r1, [pc, #548]	; (8003bb4 <SX1272SetRxConfig+0x2bc>)
 8003990:	f7fe f8e2 	bl	8001b58 <__aeabi_ddiv>
 8003994:	2200      	movs	r2, #0
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <SX1272SetRxConfig+0x2c0>)
 8003998:	f7fe fce8 	bl	800236c <__aeabi_dmul>
 800399c:	9006      	str	r0, [sp, #24]
 800399e:	9107      	str	r1, [sp, #28]
 80039a0:	9805      	ldr	r0, [sp, #20]
 80039a2:	f7ff fad3 	bl	8002f4c <__aeabi_i2d>
 80039a6:	0002      	movs	r2, r0
 80039a8:	000b      	movs	r3, r1
 80039aa:	9806      	ldr	r0, [sp, #24]
 80039ac:	9907      	ldr	r1, [sp, #28]
 80039ae:	f7fe fcdd 	bl	800236c <__aeabi_dmul>
 80039b2:	2200      	movs	r2, #0
 80039b4:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <SX1272SetRxConfig+0x2c4>)
 80039b6:	f7fe fcd9 	bl	800236c <__aeabi_dmul>
 80039ba:	f7fc fe09 	bl	80005d0 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80039be:	0032      	movs	r2, r6
 80039c0:	003b      	movs	r3, r7
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80039c2:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80039c4:	497e      	ldr	r1, [pc, #504]	; (8003bc0 <SX1272SetRxConfig+0x2c8>)
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fe f8c6 	bl	8001b58 <__aeabi_ddiv>
 80039cc:	f7fc fe00 	bl	80005d0 <__aeabi_d2uiz>
 80039d0:	b284      	uxth	r4, r0
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80039d2:	0a21      	lsrs	r1, r4, #8
 80039d4:	2002      	movs	r0, #2
 80039d6:	f7ff fc13 	bl	8003200 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80039da:	b2e1      	uxtb	r1, r4
 80039dc:	2003      	movs	r0, #3
 80039de:	f7ff fc0f 	bl	8003200 <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80039e2:	0028      	movs	r0, r5
 80039e4:	f7ff fb9a 	bl	800311c <GetFskBandwidthRegValue>
 80039e8:	0001      	movs	r1, r0
 80039ea:	2012      	movs	r0, #18
 80039ec:	f7ff fc08 	bl	8003200 <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80039f0:	9808      	ldr	r0, [sp, #32]
 80039f2:	f7ff fb93 	bl	800311c <GetFskBandwidthRegValue>
 80039f6:	0001      	movs	r1, r0
 80039f8:	2013      	movs	r0, #19
 80039fa:	f7ff fc01 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	2025      	movs	r0, #37	; 0x25
 8003a02:	0a19      	lsrs	r1, r3, #8
 8003a04:	f7ff fbfc 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003a08:	466b      	mov	r3, sp
 8003a0a:	2026      	movs	r0, #38	; 0x26
 8003a0c:	7919      	ldrb	r1, [r3, #4]
 8003a0e:	f7ff fbf7 	bl	8003200 <SX1272Write>
            if( fixLen == 1 )
 8003a12:	9b02      	ldr	r3, [sp, #8]
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 8003a14:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <SX1272SetRxConfig+0x124>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003a1a:	21ff      	movs	r1, #255	; 0xff
 8003a1c:	2032      	movs	r0, #50	; 0x32
 8003a1e:	f7ff fbef 	bl	8003200 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8003a22:	2030      	movs	r0, #48	; 0x30
 8003a24:	f7ff fc3e 	bl	80032a4 <SX1272Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003a28:	216f      	movs	r1, #111	; 0x6f
 8003a2a:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	9b02      	ldr	r3, [sp, #8]
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d100      	bne.n	8003a36 <SX1272SetRxConfig+0x13e>
 8003a34:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8003a36:	9b04      	ldr	r3, [sp, #16]
 8003a38:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003a3a:	4318      	orrs	r0, r3
 8003a3c:	4301      	orrs	r1, r0
            SX1272Write( REG_PACKETCONFIG1,
 8003a3e:	b2c9      	uxtb	r1, r1
 8003a40:	2030      	movs	r0, #48	; 0x30
 8003a42:	f7ff fbdd 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003a46:	2031      	movs	r0, #49	; 0x31
 8003a48:	f7ff fc2c 	bl	80032a4 <SX1272Read>
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4301      	orrs	r1, r0
 8003a50:	2031      	movs	r0, #49	; 0x31
 8003a52:	b2c9      	uxtb	r1, r1
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003a54:	f7ff fbd4 	bl	8003200 <SX1272Write>
}
 8003a58:	e77a      	b.n	8003950 <SX1272SetRxConfig+0x58>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003a5a:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <SX1272SetRxConfig+0x2b8>)
            SX1272.Settings.LoRa.Coderate = coderate;
 8003a5c:	9906      	ldr	r1, [sp, #24]
 8003a5e:	001a      	movs	r2, r3
 8003a60:	324d      	adds	r2, #77	; 0x4d
 8003a62:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8003a64:	001a      	movs	r2, r3
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	324e      	adds	r2, #78	; 0x4e
 8003a6a:	8011      	strh	r1, [r2, #0]
            SX1272.Settings.LoRa.FixLen = fixLen;
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	9902      	ldr	r1, [sp, #8]
 8003a70:	3250      	adds	r2, #80	; 0x50
 8003a72:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 8003a74:	001a      	movs	r2, r3
 8003a76:	9903      	ldr	r1, [sp, #12]
 8003a78:	3251      	adds	r2, #81	; 0x51
 8003a7a:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	9904      	ldr	r1, [sp, #16]
 8003a80:	3252      	adds	r2, #82	; 0x52
 8003a82:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8003a84:	001a      	movs	r2, r3
 8003a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a88:	3253      	adds	r2, #83	; 0x53
 8003a8a:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a90:	3254      	adds	r2, #84	; 0x54
 8003a92:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8003a94:	001a      	movs	r2, r3
 8003a96:	3255      	adds	r2, #85	; 0x55
 8003a98:	7017      	strb	r7, [r2, #0]
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a9e:	3256      	adds	r2, #86	; 0x56
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003aa0:	645d      	str	r5, [r3, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8003aa2:	649e      	str	r6, [r3, #72]	; 0x48
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8003aa4:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8003aa6:	2e0c      	cmp	r6, #12
 8003aa8:	d87d      	bhi.n	8003ba6 <SX1272SetRxConfig+0x2ae>
            else if( datarate < 6 )
 8003aaa:	2e05      	cmp	r6, #5
 8003aac:	d96e      	bls.n	8003b8c <SX1272SetRxConfig+0x294>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003aae:	2d00      	cmp	r5, #0
 8003ab0:	d165      	bne.n	8003b7e <SX1272SetRxConfig+0x286>
 8003ab2:	0032      	movs	r2, r6
 8003ab4:	3a0b      	subs	r2, #11
 8003ab6:	2a01      	cmp	r2, #1
 8003ab8:	d865      	bhi.n	8003b86 <SX1272SetRxConfig+0x28e>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003aba:	2201      	movs	r2, #1
 8003abc:	334c      	adds	r3, #76	; 0x4c
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003abe:	201d      	movs	r0, #29
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003ac0:	701a      	strb	r2, [r3, #0]
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003ac2:	f7ff fbef 	bl	80032a4 <SX1272Read>
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ac6:	9b04      	ldr	r3, [sp, #16]
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003ac8:	4c39      	ldr	r4, [pc, #228]	; (8003bb0 <SX1272SetRxConfig+0x2b8>)
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003aca:	0059      	lsls	r1, r3, #1
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003acc:	0023      	movs	r3, r4
 8003ace:	334c      	adds	r3, #76	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ad0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003ad2:	01ad      	lsls	r5, r5, #6
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ad4:	4319      	orrs	r1, r3
 8003ad6:	9b02      	ldr	r3, [sp, #8]
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003ad8:	201d      	movs	r0, #29
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4319      	orrs	r1, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003ade:	9b06      	ldr	r3, [sp, #24]
 8003ae0:	00db      	lsls	r3, r3, #3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ae2:	4319      	orrs	r1, r3
 8003ae4:	4329      	orrs	r1, r5
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003ae6:	b2c9      	uxtb	r1, r1
 8003ae8:	f7ff fb8a 	bl	8003200 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8003aec:	201e      	movs	r0, #30
 8003aee:	f7ff fbd9 	bl	80032a4 <SX1272Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003af2:	9b05      	ldr	r3, [sp, #20]
 8003af4:	0599      	lsls	r1, r3, #22
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003af6:	230c      	movs	r3, #12
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003af8:	0f89      	lsrs	r1, r1, #30
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003afa:	4018      	ands	r0, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003afc:	4301      	orrs	r1, r0
                           ( datarate << 4 ) |
 8003afe:	0130      	lsls	r0, r6, #4
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003b00:	4301      	orrs	r1, r0
 8003b02:	b2c9      	uxtb	r1, r1
 8003b04:	201e      	movs	r0, #30
 8003b06:	f7ff fb7b 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003b0a:	466b      	mov	r3, sp
 8003b0c:	201f      	movs	r0, #31
 8003b0e:	7d19      	ldrb	r1, [r3, #20]
 8003b10:	f7ff fb76 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	2020      	movs	r0, #32
 8003b18:	0a19      	lsrs	r1, r3, #8
 8003b1a:	f7ff fb71 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003b1e:	466b      	mov	r3, sp
 8003b20:	2021      	movs	r0, #33	; 0x21
 8003b22:	7919      	ldrb	r1, [r3, #4]
 8003b24:	f7ff fb6c 	bl	8003200 <SX1272Write>
            if( fixLen == 1 )
 8003b28:	9b02      	ldr	r3, [sp, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <SX1272SetRxConfig+0x23e>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003b2e:	9903      	ldr	r1, [sp, #12]
 8003b30:	2022      	movs	r0, #34	; 0x22
 8003b32:	f7ff fb65 	bl	8003200 <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003b36:	0023      	movs	r3, r4
 8003b38:	3353      	adds	r3, #83	; 0x53
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <SX1272SetRxConfig+0x266>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003b40:	204b      	movs	r0, #75	; 0x4b
 8003b42:	f7ff fbaf 	bl	80032a4 <SX1272Read>
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	4249      	negs	r1, r1
 8003b4a:	4301      	orrs	r1, r0
 8003b4c:	b2c9      	uxtb	r1, r1
 8003b4e:	204b      	movs	r0, #75	; 0x4b
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8003b50:	3454      	adds	r4, #84	; 0x54
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003b52:	f7ff fb55 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8003b56:	7821      	ldrb	r1, [r4, #0]
 8003b58:	2024      	movs	r0, #36	; 0x24
 8003b5a:	f7ff fb51 	bl	8003200 <SX1272Write>
 8003b5e:	2407      	movs	r4, #7
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003b60:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003b62:	2e06      	cmp	r6, #6
 8003b64:	d114      	bne.n	8003b90 <SX1272SetRxConfig+0x298>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003b66:	f7ff fb9d 	bl	80032a4 <SX1272Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003b6a:	2105      	movs	r1, #5
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003b6c:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003b6e:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003b70:	b2c9      	uxtb	r1, r1
 8003b72:	2031      	movs	r0, #49	; 0x31
 8003b74:	f7ff fb44 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003b78:	210c      	movs	r1, #12
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003b7a:	2037      	movs	r0, #55	; 0x37
 8003b7c:	e76a      	b.n	8003a54 <SX1272SetRxConfig+0x15c>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003b7e:	2d01      	cmp	r5, #1
 8003b80:	d101      	bne.n	8003b86 <SX1272SetRxConfig+0x28e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003b82:	2e0c      	cmp	r6, #12
 8003b84:	d099      	beq.n	8003aba <SX1272SetRxConfig+0x1c2>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003b86:	334c      	adds	r3, #76	; 0x4c
 8003b88:	2200      	movs	r2, #0
 8003b8a:	e798      	b.n	8003abe <SX1272SetRxConfig+0x1c6>
                datarate = 6;
 8003b8c:	2606      	movs	r6, #6
 8003b8e:	e7fa      	b.n	8003b86 <SX1272SetRxConfig+0x28e>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003b90:	f7ff fb88 	bl	80032a4 <SX1272Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003b94:	2103      	movs	r1, #3
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003b96:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003b98:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003b9a:	b2c9      	uxtb	r1, r1
 8003b9c:	2031      	movs	r0, #49	; 0x31
 8003b9e:	f7ff fb2f 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003ba2:	210a      	movs	r1, #10
 8003ba4:	e7e9      	b.n	8003b7a <SX1272SetRxConfig+0x282>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003ba6:	260c      	movs	r6, #12
 8003ba8:	2d01      	cmp	r5, #1
 8003baa:	d8ec      	bhi.n	8003b86 <SX1272SetRxConfig+0x28e>
 8003bac:	e785      	b.n	8003aba <SX1272SetRxConfig+0x1c2>
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	20000d6c 	.word	0x20000d6c
 8003bb4:	3ff00000 	.word	0x3ff00000
 8003bb8:	40200000 	.word	0x40200000
 8003bbc:	408f4000 	.word	0x408f4000
 8003bc0:	417e8480 	.word	0x417e8480

08003bc4 <SX1272SetTxConfig>:
{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	000e      	movs	r6, r1
 8003bc8:	b089      	sub	sp, #36	; 0x24
 8003bca:	001f      	movs	r7, r3
 8003bcc:	ab0e      	add	r3, sp, #56	; 0x38
 8003bce:	cb10      	ldmia	r3!, {r4}
 8003bd0:	0005      	movs	r5, r0
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	9203      	str	r2, [sp, #12]
 8003bd6:	9304      	str	r3, [sp, #16]
 8003bd8:	ab10      	add	r3, sp, #64	; 0x40
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	ab11      	add	r3, sp, #68	; 0x44
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	ab12      	add	r3, sp, #72	; 0x48
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	ab13      	add	r3, sp, #76	; 0x4c
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	9305      	str	r3, [sp, #20]
 8003bf0:	ab14      	add	r3, sp, #80	; 0x50
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	9307      	str	r3, [sp, #28]
 8003bf6:	ab15      	add	r3, sp, #84	; 0x54
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	9306      	str	r3, [sp, #24]
    SX1272SetModem( modem );
 8003bfc:	f7ff fdba 	bl	8003774 <SX1272SetModem>
    LoRaBoardCallbacks->SX1272BoardSetRfTxPower( power );
 8003c00:	4b80      	ldr	r3, [pc, #512]	; (8003e04 <SX1272SetTxConfig+0x240>)
 8003c02:	0030      	movs	r0, r6
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4798      	blx	r3
    switch( modem )
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	d003      	beq.n	8003c16 <SX1272SetTxConfig+0x52>
 8003c0e:	2d01      	cmp	r5, #1
 8003c10:	d060      	beq.n	8003cd4 <SX1272SetTxConfig+0x110>
}
 8003c12:	b009      	add	sp, #36	; 0x24
 8003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1272.Settings.Fsk.Power = power;
 8003c16:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <SX1272SetTxConfig+0x244>)
            SX1272.Settings.Fsk.Fdev = fdev;
 8003c18:	9a03      	ldr	r2, [sp, #12]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8003c1a:	9901      	ldr	r1, [sp, #4]
            SX1272.Settings.Fsk.Fdev = fdev;
 8003c1c:	611a      	str	r2, [r3, #16]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8003c1e:	9a00      	ldr	r2, [sp, #0]
            SX1272.Settings.Fsk.Power = power;
 8003c20:	731e      	strb	r6, [r3, #12]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8003c22:	841a      	strh	r2, [r3, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8003c24:	1cda      	adds	r2, r3, #3
 8003c26:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8003c28:	9902      	ldr	r1, [sp, #8]
 8003c2a:	1d5a      	adds	r2, r3, #5
 8003c2c:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8003c2e:	9906      	ldr	r1, [sp, #24]
 8003c30:	1d9a      	adds	r2, r3, #6
 8003c32:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8003c34:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1272.Settings.Fsk.Datarate = datarate;
 8003c36:	61dc      	str	r4, [r3, #28]
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8003c3a:	615f      	str	r7, [r3, #20]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8003c3c:	9803      	ldr	r0, [sp, #12]
 8003c3e:	f7ff f9bf 	bl	8002fc0 <__aeabi_ui2d>
 8003c42:	2200      	movs	r2, #0
 8003c44:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <SX1272SetTxConfig+0x248>)
 8003c46:	f7fd ff87 	bl	8001b58 <__aeabi_ddiv>
 8003c4a:	f7fc fcc1 	bl	80005d0 <__aeabi_d2uiz>
 8003c4e:	b286      	uxth	r6, r0
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8003c50:	0a31      	lsrs	r1, r6, #8
 8003c52:	2004      	movs	r0, #4
 8003c54:	f7ff fad4 	bl	8003200 <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003c58:	b2f1      	uxtb	r1, r6
 8003c5a:	2005      	movs	r0, #5
 8003c5c:	f7ff fad0 	bl	8003200 <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003c60:	0020      	movs	r0, r4
 8003c62:	f7ff f9ad 	bl	8002fc0 <__aeabi_ui2d>
 8003c66:	0002      	movs	r2, r0
 8003c68:	000b      	movs	r3, r1
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	4968      	ldr	r1, [pc, #416]	; (8003e10 <SX1272SetTxConfig+0x24c>)
 8003c6e:	f7fd ff73 	bl	8001b58 <__aeabi_ddiv>
 8003c72:	f7fc fcad 	bl	80005d0 <__aeabi_d2uiz>
 8003c76:	b284      	uxth	r4, r0
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003c78:	0a21      	lsrs	r1, r4, #8
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f7ff fac0 	bl	8003200 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003c80:	b2e1      	uxtb	r1, r4
 8003c82:	2003      	movs	r0, #3
 8003c84:	f7ff fabc 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003c88:	9b00      	ldr	r3, [sp, #0]
 8003c8a:	2025      	movs	r0, #37	; 0x25
 8003c8c:	0a19      	lsrs	r1, r3, #8
 8003c8e:	f7ff fab7 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8003c92:	466b      	mov	r3, sp
 8003c94:	2026      	movs	r0, #38	; 0x26
 8003c96:	7819      	ldrb	r1, [r3, #0]
 8003c98:	f7ff fab2 	bl	8003200 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8003c9c:	2030      	movs	r0, #48	; 0x30
 8003c9e:	f7ff fb01 	bl	80032a4 <SX1272Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003ca2:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003ca4:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 8003ca6:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <SX1272SetTxConfig+0xec>
 8003cac:	2580      	movs	r5, #128	; 0x80
 8003cae:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8003cb0:	9b02      	ldr	r3, [sp, #8]
 8003cb2:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003cb4:	4301      	orrs	r1, r0
 8003cb6:	4329      	orrs	r1, r5
            SX1272Write( REG_PACKETCONFIG1,
 8003cb8:	b2c9      	uxtb	r1, r1
 8003cba:	2030      	movs	r0, #48	; 0x30
 8003cbc:	f7ff faa0 	bl	8003200 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003cc0:	2031      	movs	r0, #49	; 0x31
 8003cc2:	f7ff faef 	bl	80032a4 <SX1272Read>
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	4301      	orrs	r1, r0
 8003cca:	2031      	movs	r0, #49	; 0x31
 8003ccc:	b2c9      	uxtb	r1, r1
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003cce:	f7ff fa97 	bl	8003200 <SX1272Write>
}
 8003cd2:	e79e      	b.n	8003c12 <SX1272SetTxConfig+0x4e>
            SX1272.Settings.LoRa.Power = power;
 8003cd4:	4d4c      	ldr	r5, [pc, #304]	; (8003e08 <SX1272SetTxConfig+0x244>)
            SX1272.Settings.LoRa.Coderate = coderate;
 8003cd6:	9a04      	ldr	r2, [sp, #16]
            SX1272.Settings.LoRa.Power = power;
 8003cd8:	002b      	movs	r3, r5
 8003cda:	3340      	adds	r3, #64	; 0x40
 8003cdc:	701e      	strb	r6, [r3, #0]
            SX1272.Settings.LoRa.Coderate = coderate;
 8003cde:	002b      	movs	r3, r5
 8003ce0:	334d      	adds	r3, #77	; 0x4d
 8003ce2:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8003ce4:	002b      	movs	r3, r5
 8003ce6:	9a00      	ldr	r2, [sp, #0]
 8003ce8:	334e      	adds	r3, #78	; 0x4e
 8003cea:	801a      	strh	r2, [r3, #0]
            SX1272.Settings.LoRa.FixLen = fixLen;
 8003cec:	002b      	movs	r3, r5
 8003cee:	9a01      	ldr	r2, [sp, #4]
 8003cf0:	3350      	adds	r3, #80	; 0x50
 8003cf2:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8003cf4:	002b      	movs	r3, r5
 8003cf6:	9a05      	ldr	r2, [sp, #20]
 8003cf8:	3353      	adds	r3, #83	; 0x53
 8003cfa:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8003cfc:	002b      	movs	r3, r5
 8003cfe:	9a07      	ldr	r2, [sp, #28]
 8003d00:	3354      	adds	r3, #84	; 0x54
 8003d02:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8003d04:	002b      	movs	r3, r5
 8003d06:	9a02      	ldr	r2, [sp, #8]
 8003d08:	3352      	adds	r3, #82	; 0x52
 8003d0a:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8003d0c:	002b      	movs	r3, r5
 8003d0e:	9a06      	ldr	r2, [sp, #24]
 8003d10:	3355      	adds	r3, #85	; 0x55
 8003d12:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8003d14:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003d16:	646f      	str	r7, [r5, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8003d18:	64ac      	str	r4, [r5, #72]	; 0x48
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8003d1a:	65ab      	str	r3, [r5, #88]	; 0x58
            if( datarate > 12 )
 8003d1c:	2c0c      	cmp	r4, #12
 8003d1e:	d86c      	bhi.n	8003dfa <SX1272SetTxConfig+0x236>
            else if( datarate < 6 )
 8003d20:	2c05      	cmp	r4, #5
 8003d22:	d95d      	bls.n	8003de0 <SX1272SetTxConfig+0x21c>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003d24:	2f00      	cmp	r7, #0
 8003d26:	d153      	bne.n	8003dd0 <SX1272SetTxConfig+0x20c>
 8003d28:	0023      	movs	r3, r4
 8003d2a:	3b0b      	subs	r3, #11
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d853      	bhi.n	8003dd8 <SX1272SetTxConfig+0x214>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003d30:	002b      	movs	r3, r5
 8003d32:	2201      	movs	r2, #1
 8003d34:	334c      	adds	r3, #76	; 0x4c
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003d36:	701a      	strb	r2, [r3, #0]
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003d38:	9b05      	ldr	r3, [sp, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00f      	beq.n	8003d5e <SX1272SetTxConfig+0x19a>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003d3e:	204b      	movs	r0, #75	; 0x4b
 8003d40:	f7ff fab0 	bl	80032a4 <SX1272Read>
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	4249      	negs	r1, r1
 8003d48:	4301      	orrs	r1, r0
 8003d4a:	b2c9      	uxtb	r1, r1
 8003d4c:	204b      	movs	r0, #75	; 0x4b
 8003d4e:	f7ff fa57 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8003d52:	002b      	movs	r3, r5
 8003d54:	3354      	adds	r3, #84	; 0x54
 8003d56:	7819      	ldrb	r1, [r3, #0]
 8003d58:	2024      	movs	r0, #36	; 0x24
 8003d5a:	f7ff fa51 	bl	8003200 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003d5e:	201d      	movs	r0, #29
 8003d60:	f7ff faa0 	bl	80032a4 <SX1272Read>
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003d64:	9b02      	ldr	r3, [sp, #8]
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003d66:	354c      	adds	r5, #76	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003d68:	0059      	lsls	r1, r3, #1
 8003d6a:	782b      	ldrb	r3, [r5, #0]
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003d6c:	01bf      	lsls	r7, r7, #6
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003d6e:	4319      	orrs	r1, r3
 8003d70:	9b01      	ldr	r3, [sp, #4]
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003d72:	201d      	movs	r0, #29
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4319      	orrs	r1, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	2507      	movs	r5, #7
 8003d7c:	00db      	lsls	r3, r3, #3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003d7e:	4319      	orrs	r1, r3
 8003d80:	4339      	orrs	r1, r7
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003d82:	b2c9      	uxtb	r1, r1
 8003d84:	f7ff fa3c 	bl	8003200 <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8003d88:	201e      	movs	r0, #30
 8003d8a:	f7ff fa8b 	bl	80032a4 <SX1272Read>
 8003d8e:	210f      	movs	r1, #15
 8003d90:	4001      	ands	r1, r0
                          ( datarate << 4 ) );
 8003d92:	0120      	lsls	r0, r4, #4
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003d94:	4301      	orrs	r1, r0
 8003d96:	b2c9      	uxtb	r1, r1
 8003d98:	201e      	movs	r0, #30
 8003d9a:	f7ff fa31 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003d9e:	9b00      	ldr	r3, [sp, #0]
 8003da0:	2020      	movs	r0, #32
 8003da2:	0a19      	lsrs	r1, r3, #8
 8003da4:	f7ff fa2c 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8003da8:	466b      	mov	r3, sp
 8003daa:	2021      	movs	r0, #33	; 0x21
 8003dac:	7819      	ldrb	r1, [r3, #0]
 8003dae:	f7ff fa27 	bl	8003200 <SX1272Write>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003db2:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003db4:	2c06      	cmp	r4, #6
 8003db6:	d115      	bne.n	8003de4 <SX1272SetTxConfig+0x220>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003db8:	f7ff fa74 	bl	80032a4 <SX1272Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003dbc:	2105      	movs	r1, #5
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003dbe:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003dc0:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003dc2:	b2c9      	uxtb	r1, r1
 8003dc4:	2031      	movs	r0, #49	; 0x31
 8003dc6:	f7ff fa1b 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003dca:	210c      	movs	r1, #12
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003dcc:	2037      	movs	r0, #55	; 0x37
 8003dce:	e77e      	b.n	8003cce <SX1272SetTxConfig+0x10a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003dd0:	2f01      	cmp	r7, #1
 8003dd2:	d101      	bne.n	8003dd8 <SX1272SetTxConfig+0x214>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003dd4:	2c0c      	cmp	r4, #12
 8003dd6:	d0ab      	beq.n	8003d30 <SX1272SetTxConfig+0x16c>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003dd8:	002b      	movs	r3, r5
 8003dda:	2200      	movs	r2, #0
 8003ddc:	334c      	adds	r3, #76	; 0x4c
 8003dde:	e7aa      	b.n	8003d36 <SX1272SetTxConfig+0x172>
                datarate = 6;
 8003de0:	2406      	movs	r4, #6
 8003de2:	e7f9      	b.n	8003dd8 <SX1272SetTxConfig+0x214>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003de4:	f7ff fa5e 	bl	80032a4 <SX1272Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003de8:	2103      	movs	r1, #3
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003dea:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003dec:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003dee:	b2c9      	uxtb	r1, r1
 8003df0:	2031      	movs	r0, #49	; 0x31
 8003df2:	f7ff fa05 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003df6:	210a      	movs	r1, #10
 8003df8:	e7e8      	b.n	8003dcc <SX1272SetTxConfig+0x208>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003dfa:	240c      	movs	r4, #12
 8003dfc:	2f01      	cmp	r7, #1
 8003dfe:	d8eb      	bhi.n	8003dd8 <SX1272SetTxConfig+0x214>
 8003e00:	e796      	b.n	8003d30 <SX1272SetTxConfig+0x16c>
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	2000017c 	.word	0x2000017c
 8003e08:	20000d6c 	.word	0x20000d6c
 8003e0c:	404e8480 	.word	0x404e8480
 8003e10:	417e8480 	.word	0x417e8480

08003e14 <SX1272SetTxContinuousWave>:
{
 8003e14:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8003e16:	24fa      	movs	r4, #250	; 0xfa
{
 8003e18:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8003e1a:	00a4      	lsls	r4, r4, #2
 8003e1c:	4354      	muls	r4, r2
{
 8003e1e:	000d      	movs	r5, r1
    SX1272SetChannel( freq );
 8003e20:	f7ff f9f8 	bl	8003214 <SX1272SetChannel>
    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003e24:	2305      	movs	r3, #5
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	2396      	movs	r3, #150	; 0x96
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	015b      	lsls	r3, r3, #5
 8003e2e:	0002      	movs	r2, r0
 8003e30:	0029      	movs	r1, r5
 8003e32:	9007      	str	r0, [sp, #28]
 8003e34:	9006      	str	r0, [sp, #24]
 8003e36:	9005      	str	r0, [sp, #20]
 8003e38:	9004      	str	r0, [sp, #16]
 8003e3a:	9003      	str	r0, [sp, #12]
 8003e3c:	9001      	str	r0, [sp, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	9408      	str	r4, [sp, #32]
 8003e42:	0003      	movs	r3, r0
 8003e44:	f7ff febe 	bl	8003bc4 <SX1272SetTxConfig>
    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003e48:	2031      	movs	r0, #49	; 0x31
 8003e4a:	f7ff fa2b 	bl	80032a4 <SX1272Read>
 8003e4e:	2540      	movs	r5, #64	; 0x40
 8003e50:	43a8      	bics	r0, r5
 8003e52:	b2c1      	uxtb	r1, r0
 8003e54:	2031      	movs	r0, #49	; 0x31
 8003e56:	f7ff f9d3 	bl	8003200 <SX1272Write>
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	21f0      	movs	r1, #240	; 0xf0
 8003e5e:	f7ff f9cf 	bl	8003200 <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003e62:	21a0      	movs	r1, #160	; 0xa0
 8003e64:	2041      	movs	r0, #65	; 0x41
 8003e66:	f7ff f9cb 	bl	8003200 <SX1272Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003e6a:	4d08      	ldr	r5, [pc, #32]	; (8003e8c <SX1272SetTxContinuousWave+0x78>)
 8003e6c:	0021      	movs	r1, r4
 8003e6e:	0028      	movs	r0, r5
 8003e70:	f007 f970 	bl	800b154 <TimerSetValue>
    SX1272.Settings.State = RF_TX_RUNNING;
 8003e74:	2202      	movs	r2, #2
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SX1272SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8003e78:	0028      	movs	r0, r5
    SX1272.Settings.State = RF_TX_RUNNING;
 8003e7a:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003e7c:	f007 f8cc 	bl	800b018 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8003e80:	2003      	movs	r0, #3
 8003e82:	f7ff fb25 	bl	80034d0 <SX1272SetOpMode>
}
 8003e86:	b00b      	add	sp, #44	; 0x2c
 8003e88:	bd30      	pop	{r4, r5, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	20000dd4 	.word	0x20000dd4
 8003e90:	20000d6c 	.word	0x20000d6c

08003e94 <SX1272OnDio2Irq>:
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 8003e96:	4c2b      	ldr	r4, [pc, #172]	; (8003f44 <SX1272OnDio2Irq+0xb0>)
 8003e98:	7921      	ldrb	r1, [r4, #4]
 8003e9a:	2901      	cmp	r1, #1
 8003e9c:	d002      	beq.n	8003ea4 <SX1272OnDio2Irq+0x10>
 8003e9e:	2902      	cmp	r1, #2
 8003ea0:	d048      	beq.n	8003f34 <SX1272OnDio2Irq+0xa0>
}
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1272.Settings.Modem )
 8003ea4:	7963      	ldrb	r3, [r4, #5]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <SX1272OnDio2Irq+0x46>
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d1f9      	bne.n	8003ea2 <SX1272OnDio2Irq+0xe>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003eae:	3453      	adds	r4, #83	; 0x53
 8003eb0:	7823      	ldrb	r3, [r4, #0]
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003eb2:	2102      	movs	r1, #2
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f4      	beq.n	8003ea2 <SX1272OnDio2Irq+0xe>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003eb8:	2012      	movs	r0, #18
 8003eba:	f7ff f9a1 	bl	8003200 <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <SX1272OnDio2Irq+0xb4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ed      	beq.n	8003ea2 <SX1272OnDio2Irq+0xe>
 8003ec6:	695c      	ldr	r4, [r3, #20]
 8003ec8:	2c00      	cmp	r4, #0
 8003eca:	d0ea      	beq.n	8003ea2 <SX1272OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003ecc:	201c      	movs	r0, #28
 8003ece:	f7ff f9e9 	bl	80032a4 <SX1272Read>
 8003ed2:	233f      	movs	r3, #63	; 0x3f
 8003ed4:	4018      	ands	r0, r3
 8003ed6:	47a0      	blx	r4
}
 8003ed8:	e7e3      	b.n	8003ea2 <SX1272OnDio2Irq+0xe>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8003eda:	0023      	movs	r3, r4
 8003edc:	3330      	adds	r3, #48	; 0x30
 8003ede:	7019      	strb	r1, [r3, #0]
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003ee0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003ee2:	2d01      	cmp	r5, #1
 8003ee4:	d1dd      	bne.n	8003ea2 <SX1272OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003ee6:	4819      	ldr	r0, [pc, #100]	; (8003f4c <SX1272OnDio2Irq+0xb8>)
 8003ee8:	f007 f908 	bl	800b0fc <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8003eec:	0023      	movs	r3, r4
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8003eee:	2011      	movs	r0, #17
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8003ef0:	3331      	adds	r3, #49	; 0x31
 8003ef2:	701d      	strb	r5, [r3, #0]
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8003ef4:	f7ff f9d6 	bl	80032a4 <SX1272Read>
 8003ef8:	0023      	movs	r3, r4
 8003efa:	0840      	lsrs	r0, r0, #1
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4240      	negs	r0, r0
 8003f00:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003f02:	201b      	movs	r0, #27
 8003f04:	f7ff f9ce 	bl	80032a4 <SX1272Read>
 8003f08:	0005      	movs	r5, r0
                                     ( uint16_t )SX1272Read( REG_AFCLSB ) );
 8003f0a:	201c      	movs	r0, #28
 8003f0c:	f7ff f9ca 	bl	80032a4 <SX1272Read>
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003f10:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <SX1272OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003f14:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 8003f16:	b2c3      	uxtb	r3, r0
 8003f18:	4353      	muls	r3, r2
 8003f1a:	0a00      	lsrs	r0, r0, #8
 8003f1c:	4350      	muls	r0, r2
 8003f1e:	3380      	adds	r3, #128	; 0x80
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	1818      	adds	r0, r3, r0
 8003f24:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 8003f26:	200c      	movs	r0, #12
 8003f28:	f7ff f9bc 	bl	80032a4 <SX1272Read>
 8003f2c:	3438      	adds	r4, #56	; 0x38
 8003f2e:	0940      	lsrs	r0, r0, #5
 8003f30:	7020      	strb	r0, [r4, #0]
 8003f32:	e7b6      	b.n	8003ea2 <SX1272OnDio2Irq+0xe>
            switch( SX1272.Settings.Modem )
 8003f34:	7963      	ldrb	r3, [r4, #5]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d1b3      	bne.n	8003ea2 <SX1272OnDio2Irq+0xe>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003f3a:	3453      	adds	r4, #83	; 0x53
 8003f3c:	7823      	ldrb	r3, [r4, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0af      	beq.n	8003ea2 <SX1272OnDio2Irq+0xe>
 8003f42:	e7b9      	b.n	8003eb8 <SX1272OnDio2Irq+0x24>
 8003f44:	20000d6c 	.word	0x20000d6c
 8003f48:	2000017c 	.word	0x2000017c
 8003f4c:	20000de8 	.word	0x20000de8
 8003f50:	00003d09 	.word	0x00003d09

08003f54 <SX1272OnDio3Irq>:
{
 8003f54:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.Modem )
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <SX1272OnDio3Irq+0x4c>)
 8003f58:	795d      	ldrb	r5, [r3, #5]
 8003f5a:	2d01      	cmp	r5, #1
 8003f5c:	d111      	bne.n	8003f82 <SX1272OnDio3Irq+0x2e>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003f5e:	2012      	movs	r0, #18
 8003f60:	f7ff f9a0 	bl	80032a4 <SX1272Read>
 8003f64:	4028      	ands	r0, r5
 8003f66:	1e04      	subs	r4, r0, #0
 8003f68:	4e0e      	ldr	r6, [pc, #56]	; (8003fa4 <SX1272OnDio3Irq+0x50>)
 8003f6a:	d00b      	beq.n	8003f84 <SX1272OnDio3Irq+0x30>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003f6c:	2105      	movs	r1, #5
 8003f6e:	2012      	movs	r0, #18
 8003f70:	f7ff f946 	bl	8003200 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003f74:	6873      	ldr	r3, [r6, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <SX1272OnDio3Irq+0x2e>
 8003f7a:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003f7c:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <SX1272OnDio3Irq+0x46>
}
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003f84:	2104      	movs	r1, #4
 8003f86:	2012      	movs	r0, #18
 8003f88:	f7ff f93a 	bl	8003200 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003f8c:	6873      	ldr	r3, [r6, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f7      	beq.n	8003f82 <SX1272OnDio3Irq+0x2e>
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f4      	beq.n	8003f82 <SX1272OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 8003f98:	0020      	movs	r0, r4
 8003f9a:	4798      	blx	r3
}
 8003f9c:	e7f1      	b.n	8003f82 <SX1272OnDio3Irq+0x2e>
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	20000d6c 	.word	0x20000d6c
 8003fa4:	2000017c 	.word	0x2000017c

08003fa8 <SX1272WriteFifo>:
{
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	000a      	movs	r2, r1
    SX1272WriteBuffer( 0, buffer, size );
 8003fac:	0001      	movs	r1, r0
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f7ff f908 	bl	80031c4 <SX1272WriteBuffer>
}
 8003fb4:	bd10      	pop	{r4, pc}
	...

08003fb8 <SX1272Send>:
{
 8003fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fba:	466b      	mov	r3, sp
    switch( SX1272.Settings.Modem )
 8003fbc:	4c3a      	ldr	r4, [pc, #232]	; (80040a8 <SX1272Send+0xf0>)
{
 8003fbe:	1dde      	adds	r6, r3, #7
 8003fc0:	7031      	strb	r1, [r6, #0]
    switch( SX1272.Settings.Modem )
 8003fc2:	7965      	ldrb	r5, [r4, #5]
{
 8003fc4:	0007      	movs	r7, r0
    switch( SX1272.Settings.Modem )
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	d003      	beq.n	8003fd2 <SX1272Send+0x1a>
 8003fca:	2d01      	cmp	r5, #1
 8003fcc:	d02e      	beq.n	800402c <SX1272Send+0x74>
    uint32_t txTimeout = 0;
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e01c      	b.n	800400c <SX1272Send+0x54>
            SX1272.Settings.FskPacketHandler.Size = size;
 8003fd2:	7831      	ldrb	r1, [r6, #0]
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003fd4:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = size;
 8003fd6:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1272.Settings.Fsk.FixLen == false )
 8003fd8:	1ce3      	adds	r3, r4, #3
 8003fda:	7fdb      	ldrb	r3, [r3, #31]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d118      	bne.n	8004012 <SX1272Send+0x5a>
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	0030      	movs	r0, r6
 8003fe4:	f7ff ffe0 	bl	8003fa8 <SX1272WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8003fe8:	7832      	ldrb	r2, [r6, #0]
 8003fea:	1e53      	subs	r3, r2, #1
 8003fec:	2b3f      	cmp	r3, #63	; 0x3f
 8003fee:	d814      	bhi.n	800401a <SX1272Send+0x62>
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 8003ff0:	0023      	movs	r3, r4
 8003ff2:	333f      	adds	r3, #63	; 0x3f
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 8003ff4:	0025      	movs	r5, r4
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 8003ff6:	701a      	strb	r2, [r3, #0]
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 8003ff8:	353f      	adds	r5, #63	; 0x3f
 8003ffa:	0038      	movs	r0, r7
 8003ffc:	7829      	ldrb	r1, [r5, #0]
 8003ffe:	f7ff ffd3 	bl	8003fa8 <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8004002:	782b      	ldrb	r3, [r5, #0]
 8004004:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 8004006:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8004008:	189b      	adds	r3, r3, r2
 800400a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1272SetTx( txTimeout );
 800400c:	f7ff fb48 	bl	80036a0 <SX1272SetTx>
}
 8004010:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1272Write( REG_PAYLOADLENGTH, size );
 8004012:	2032      	movs	r0, #50	; 0x32
 8004014:	f7ff f8f4 	bl	8003200 <SX1272Write>
 8004018:	e7e6      	b.n	8003fe8 <SX1272Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 800401a:	b292      	uxth	r2, r2
 800401c:	0039      	movs	r1, r7
 800401e:	4823      	ldr	r0, [pc, #140]	; (80040ac <SX1272Send+0xf4>)
 8004020:	f007 f8e3 	bl	800b1ea <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 8004024:	0023      	movs	r3, r4
 8004026:	2220      	movs	r2, #32
 8004028:	333f      	adds	r3, #63	; 0x3f
 800402a:	e7e3      	b.n	8003ff4 <SX1272Send+0x3c>
            if( SX1272.Settings.LoRa.IqInverted == true )
 800402c:	0023      	movs	r3, r4
 800402e:	3355      	adds	r3, #85	; 0x55
 8004030:	781b      	ldrb	r3, [r3, #0]
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004032:	2033      	movs	r0, #51	; 0x33
            if( SX1272.Settings.LoRa.IqInverted == true )
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02b      	beq.n	8004090 <SX1272Send+0xd8>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004038:	f7ff f934 	bl	80032a4 <SX1272Read>
 800403c:	2341      	movs	r3, #65	; 0x41
 800403e:	4398      	bics	r0, r3
 8004040:	b2c1      	uxtb	r1, r0
 8004042:	2033      	movs	r0, #51	; 0x33
 8004044:	f7ff f8dc 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004048:	2119      	movs	r1, #25
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800404a:	203b      	movs	r0, #59	; 0x3b
 800404c:	f7ff f8d8 	bl	8003200 <SX1272Write>
            SX1272.Settings.LoRaPacketHandler.Size = size;
 8004050:	0023      	movs	r3, r4
 8004052:	7831      	ldrb	r1, [r6, #0]
 8004054:	3364      	adds	r3, #100	; 0x64
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 8004056:	2022      	movs	r0, #34	; 0x22
            SX1272.Settings.LoRaPacketHandler.Size = size;
 8004058:	7019      	strb	r1, [r3, #0]
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 800405a:	f7ff f8d1 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 800405e:	2100      	movs	r1, #0
 8004060:	200e      	movs	r0, #14
 8004062:	f7ff f8cd 	bl	8003200 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8004066:	2100      	movs	r1, #0
 8004068:	200d      	movs	r0, #13
 800406a:	f7ff f8c9 	bl	8003200 <SX1272Write>
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800406e:	2001      	movs	r0, #1
 8004070:	f7ff f918 	bl	80032a4 <SX1272Read>
 8004074:	23f8      	movs	r3, #248	; 0xf8
 8004076:	4398      	bics	r0, r3
 8004078:	d104      	bne.n	8004084 <SX1272Send+0xcc>
                SX1272SetStby( );
 800407a:	f7ff fa59 	bl	8003530 <SX1272SetStby>
                DelayMs( 1 );
 800407e:	2001      	movs	r0, #1
 8004080:	f006 ff6a 	bl	800af58 <DelayMs>
            SX1272WriteFifo( buffer, size );
 8004084:	0038      	movs	r0, r7
 8004086:	7831      	ldrb	r1, [r6, #0]
 8004088:	f7ff ff8e 	bl	8003fa8 <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 800408c:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 800408e:	e7bd      	b.n	800400c <SX1272Send+0x54>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004090:	f7ff f908 	bl	80032a4 <SX1272Read>
 8004094:	2341      	movs	r3, #65	; 0x41
 8004096:	0001      	movs	r1, r0
 8004098:	4399      	bics	r1, r3
 800409a:	4329      	orrs	r1, r5
 800409c:	b2c9      	uxtb	r1, r1
 800409e:	2033      	movs	r0, #51	; 0x33
 80040a0:	f7ff f8ae 	bl	8003200 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80040a4:	211d      	movs	r1, #29
 80040a6:	e7d0      	b.n	800404a <SX1272Send+0x92>
 80040a8:	20000d6c 	.word	0x20000d6c
 80040ac:	20000184 	.word	0x20000184

080040b0 <SX1272ReadFifo>:
{
 80040b0:	b510      	push	{r4, lr}
 80040b2:	000a      	movs	r2, r1
    SX1272ReadBuffer( 0, buffer, size );
 80040b4:	0001      	movs	r1, r0
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7ff f8d6 	bl	8003268 <SX1272ReadBuffer>
}
 80040bc:	bd10      	pop	{r4, pc}
	...

080040c0 <SX1272OnDio0Irq>:
{
 80040c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 80040c2:	466b      	mov	r3, sp
 80040c4:	1ddd      	adds	r5, r3, #7
 80040c6:	2300      	movs	r3, #0
    switch( SX1272.Settings.State )
 80040c8:	4c89      	ldr	r4, [pc, #548]	; (80042f0 <SX1272OnDio0Irq+0x230>)
    volatile uint8_t irqFlags = 0;
 80040ca:	702b      	strb	r3, [r5, #0]
    switch( SX1272.Settings.State )
 80040cc:	7923      	ldrb	r3, [r4, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d003      	beq.n	80040da <SX1272OnDio0Irq+0x1a>
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d100      	bne.n	80040d8 <SX1272OnDio0Irq+0x18>
 80040d6:	e0f2      	b.n	80042be <SX1272OnDio0Irq+0x1fe>
}
 80040d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1272.Settings.Modem )
 80040da:	7963      	ldrb	r3, [r4, #5]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d024      	beq.n	800412a <SX1272OnDio0Irq+0x6a>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d1f9      	bne.n	80040d8 <SX1272OnDio0Irq+0x18>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	2012      	movs	r0, #18
 80040e8:	f7ff f88a 	bl	8003200 <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 80040ec:	2012      	movs	r0, #18
 80040ee:	f7ff f8d9 	bl	80032a4 <SX1272Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80040f2:	2120      	movs	r1, #32
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 80040f4:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80040f6:	782b      	ldrb	r3, [r5, #0]
 80040f8:	4f7e      	ldr	r7, [pc, #504]	; (80042f4 <SX1272OnDio0Irq+0x234>)
 80040fa:	4e7f      	ldr	r6, [pc, #508]	; (80042f8 <SX1272OnDio0Irq+0x238>)
 80040fc:	420b      	tst	r3, r1
 80040fe:	d100      	bne.n	8004102 <SX1272OnDio0Irq+0x42>
 8004100:	e08e      	b.n	8004220 <SX1272OnDio0Irq+0x160>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004102:	2012      	movs	r0, #18
 8004104:	f7ff f87c 	bl	8003200 <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 8004108:	0023      	movs	r3, r4
 800410a:	3356      	adds	r3, #86	; 0x56
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d100      	bne.n	8004114 <SX1272OnDio0Irq+0x54>
                            SX1272.Settings.State = RF_IDLE;
 8004112:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8004114:	0038      	movs	r0, r7
 8004116:	f006 fff1 	bl	800b0fc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800411a:	6873      	ldr	r3, [r6, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0db      	beq.n	80040d8 <SX1272OnDio0Irq+0x18>
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0d8      	beq.n	80040d8 <SX1272OnDio0Irq+0x18>
                            RadioEvents->RxError( );
 8004126:	4798      	blx	r3
 8004128:	e7d6      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
                if( SX1272.Settings.Fsk.CrcOn == true )
 800412a:	1d63      	adds	r3, r4, #5
 800412c:	7fdb      	ldrb	r3, [r3, #31]
 800412e:	4e73      	ldr	r6, [pc, #460]	; (80042fc <SX1272OnDio0Irq+0x23c>)
 8004130:	4f71      	ldr	r7, [pc, #452]	; (80042f8 <SX1272OnDio0Irq+0x238>)
 8004132:	2b00      	cmp	r3, #0
 8004134:	d032      	beq.n	800419c <SX1272OnDio0Irq+0xdc>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 8004136:	203f      	movs	r0, #63	; 0x3f
 8004138:	f7ff f8b4 	bl	80032a4 <SX1272Read>
 800413c:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800413e:	782b      	ldrb	r3, [r5, #0]
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	d42b      	bmi.n	800419c <SX1272OnDio0Irq+0xdc>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004144:	210b      	movs	r1, #11
 8004146:	203e      	movs	r0, #62	; 0x3e
 8004148:	f7ff f85a 	bl	8003200 <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800414c:	2110      	movs	r1, #16
 800414e:	203f      	movs	r0, #63	; 0x3f
 8004150:	f7ff f856 	bl	8003200 <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 8004154:	4867      	ldr	r0, [pc, #412]	; (80042f4 <SX1272OnDio0Irq+0x234>)
 8004156:	f006 ffd1 	bl	800b0fc <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 800415a:	1de3      	adds	r3, r4, #7
 800415c:	7fdd      	ldrb	r5, [r3, #31]
 800415e:	2d00      	cmp	r5, #0
 8004160:	d10f      	bne.n	8004182 <SX1272OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8004162:	0030      	movs	r0, r6
 8004164:	f006 ffca 	bl	800b0fc <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8004168:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <SX1272OnDio0Irq+0xb8>
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d000      	beq.n	8004178 <SX1272OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 8004176:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004178:	2300      	movs	r3, #0
 800417a:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 800417c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1272.Settings.FskPacketHandler.Size = 0;
 800417e:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8004180:	e7aa      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004182:	200d      	movs	r0, #13
 8004184:	f7ff f88e 	bl	80032a4 <SX1272Read>
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	4301      	orrs	r1, r0
 800418c:	b2c9      	uxtb	r1, r1
 800418e:	200d      	movs	r0, #13
 8004190:	f7ff f836 	bl	8003200 <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 8004194:	0030      	movs	r0, r6
 8004196:	f006 ff3f 	bl	800b018 <TimerStart>
 800419a:	e7e6      	b.n	800416a <SX1272OnDio0Irq+0xaa>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 800419c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800419e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80041a0:	4d57      	ldr	r5, [pc, #348]	; (8004300 <SX1272OnDio0Irq+0x240>)
 80041a2:	2900      	cmp	r1, #0
 80041a4:	d10b      	bne.n	80041be <SX1272OnDio0Irq+0xfe>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d109      	bne.n	80041be <SX1272OnDio0Irq+0xfe>
                    if( SX1272.Settings.Fsk.FixLen == false )
 80041aa:	1ce3      	adds	r3, r4, #3
 80041ac:	7fdb      	ldrb	r3, [r3, #31]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d124      	bne.n	80041fc <SX1272OnDio0Irq+0x13c>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 80041b2:	3101      	adds	r1, #1
 80041b4:	4853      	ldr	r0, [pc, #332]	; (8004304 <SX1272OnDio0Irq+0x244>)
 80041b6:	f7ff ff7b 	bl	80040b0 <SX1272ReadFifo>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80041ba:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80041bc:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80041be:	1a09      	subs	r1, r1, r0
 80041c0:	b2c9      	uxtb	r1, r1
 80041c2:	1828      	adds	r0, r5, r0
 80041c4:	f7ff ff74 	bl	80040b0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80041c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 80041ca:	484a      	ldr	r0, [pc, #296]	; (80042f4 <SX1272OnDio0Irq+0x234>)
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80041cc:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80041ce:	f006 ff95 	bl	800b0fc <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 80041d2:	1de3      	adds	r3, r4, #7
 80041d4:	7fdb      	ldrb	r3, [r3, #31]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d115      	bne.n	8004206 <SX1272OnDio0Irq+0x146>
                    TimerStop( &RxTimeoutSyncWord );
 80041da:	0030      	movs	r0, r6
                    SX1272.Settings.State = RF_IDLE;
 80041dc:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80041de:	f006 ff8d 	bl	800b0fc <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0c7      	beq.n	8004178 <SX1272OnDio0Irq+0xb8>
 80041e8:	689e      	ldr	r6, [r3, #8]
 80041ea:	2e00      	cmp	r6, #0
 80041ec:	d0c4      	beq.n	8004178 <SX1272OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 80041ee:	2232      	movs	r2, #50	; 0x32
 80041f0:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80041f2:	56a2      	ldrsb	r2, [r4, r2]
 80041f4:	2300      	movs	r3, #0
 80041f6:	0028      	movs	r0, r5
 80041f8:	47b0      	blx	r6
 80041fa:	e7bd      	b.n	8004178 <SX1272OnDio0Irq+0xb8>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 80041fc:	2032      	movs	r0, #50	; 0x32
 80041fe:	f7ff f851 	bl	80032a4 <SX1272Read>
 8004202:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004204:	e7d9      	b.n	80041ba <SX1272OnDio0Irq+0xfa>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004206:	200d      	movs	r0, #13
 8004208:	f7ff f84c 	bl	80032a4 <SX1272Read>
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	4301      	orrs	r1, r0
 8004210:	b2c9      	uxtb	r1, r1
 8004212:	200d      	movs	r0, #13
 8004214:	f7fe fff4 	bl	8003200 <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004218:	0030      	movs	r0, r6
 800421a:	f006 fefd 	bl	800b018 <TimerStart>
 800421e:	e7e0      	b.n	80041e2 <SX1272OnDio0Irq+0x122>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = SX1272Read( REG_LR_PKTSNRVALUE );
 8004220:	2019      	movs	r0, #25
 8004222:	f7ff f83f 	bl	80032a4 <SX1272Read>
 8004226:	0023      	movs	r3, r4
 8004228:	b240      	sxtb	r0, r0
 800422a:	3360      	adds	r3, #96	; 0x60
 800422c:	7018      	strb	r0, [r3, #0]
                        snr = ( SX1272.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800422e:	1085      	asrs	r5, r0, #2
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8004230:	2800      	cmp	r0, #0
 8004232:	da03      	bge.n	800423c <SX1272OnDio0Irq+0x17c>
                        snr = ( ( ~SX1272.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8004234:	4245      	negs	r5, r0
 8004236:	10ad      	asrs	r5, r5, #2
                        snr = -snr;
 8004238:	426d      	negs	r5, r5
 800423a:	b26d      	sxtb	r5, r5
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 800423c:	201a      	movs	r0, #26
 800423e:	f7ff f831 	bl	80032a4 <SX1272Read>
 8004242:	b202      	sxth	r2, r0
 8004244:	1112      	asrs	r2, r2, #4
 8004246:	b293      	uxth	r3, r2
                    if( snr < 0 )
 8004248:	2d00      	cmp	r5, #0
 800424a:	da00      	bge.n	800424e <SX1272OnDio0Irq+0x18e>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 800424c:	1940      	adds	r0, r0, r5
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 800424e:	0022      	movs	r2, r4
 8004250:	388b      	subs	r0, #139	; 0x8b
 8004252:	181b      	adds	r3, r3, r0
 8004254:	3262      	adds	r2, #98	; 0x62
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 8004256:	2013      	movs	r0, #19
 8004258:	0025      	movs	r5, r4
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 800425a:	8013      	strh	r3, [r2, #0]
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 800425c:	f7ff f822 	bl	80032a4 <SX1272Read>
 8004260:	3564      	adds	r5, #100	; 0x64
 8004262:	7028      	strb	r0, [r5, #0]
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 8004264:	2010      	movs	r0, #16
 8004266:	f7ff f81d 	bl	80032a4 <SX1272Read>
 800426a:	0001      	movs	r1, r0
 800426c:	200d      	movs	r0, #13
 800426e:	f7fe ffc7 	bl	8003200 <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 8004272:	7829      	ldrb	r1, [r5, #0]
 8004274:	4d22      	ldr	r5, [pc, #136]	; (8004300 <SX1272OnDio0Irq+0x240>)
 8004276:	0028      	movs	r0, r5
 8004278:	f7ff ff1a 	bl	80040b0 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 800427c:	0023      	movs	r3, r4
 800427e:	3356      	adds	r3, #86	; 0x56
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d100      	bne.n	8004288 <SX1272OnDio0Irq+0x1c8>
                        SX1272.Settings.State = RF_IDLE;
 8004286:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8004288:	0038      	movs	r0, r7
 800428a:	f006 ff37 	bl	800b0fc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800428e:	6873      	ldr	r3, [r6, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d100      	bne.n	8004296 <SX1272OnDio0Irq+0x1d6>
 8004294:	e720      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
 8004296:	689e      	ldr	r6, [r3, #8]
 8004298:	2e00      	cmp	r6, #0
 800429a:	d100      	bne.n	800429e <SX1272OnDio0Irq+0x1de>
 800429c:	e71c      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 800429e:	0023      	movs	r3, r4
 80042a0:	0022      	movs	r2, r4
 80042a2:	3360      	adds	r3, #96	; 0x60
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	3262      	adds	r2, #98	; 0x62
 80042a8:	3464      	adds	r4, #100	; 0x64
 80042aa:	2100      	movs	r1, #0
 80042ac:	5e52      	ldrsh	r2, [r2, r1]
 80042ae:	0028      	movs	r0, r5
 80042b0:	b25b      	sxtb	r3, r3
 80042b2:	7821      	ldrb	r1, [r4, #0]
 80042b4:	47b0      	blx	r6
                        PRINTF( "rxDone\n\r" );
 80042b6:	4814      	ldr	r0, [pc, #80]	; (8004308 <SX1272OnDio0Irq+0x248>)
                    PRINTF( "txDone\n\r" );
 80042b8:	f007 ff5a 	bl	800c170 <vcom_Send>
}
 80042bc:	e70c      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
            TimerStop( &TxTimeoutTimer );
 80042be:	4813      	ldr	r0, [pc, #76]	; (800430c <SX1272OnDio0Irq+0x24c>)
 80042c0:	f006 ff1c 	bl	800b0fc <TimerStop>
            switch( SX1272.Settings.Modem )
 80042c4:	7963      	ldrb	r3, [r4, #5]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d103      	bne.n	80042d2 <SX1272OnDio0Irq+0x212>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80042ca:	2108      	movs	r1, #8
 80042cc:	2012      	movs	r0, #18
 80042ce:	f7fe ff97 	bl	8003200 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <SX1272OnDio0Irq+0x238>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d100      	bne.n	80042e0 <SX1272OnDio0Irq+0x220>
 80042de:	e6fb      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d100      	bne.n	80042e8 <SX1272OnDio0Irq+0x228>
 80042e6:	e6f7      	b.n	80040d8 <SX1272OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 80042e8:	4798      	blx	r3
                    PRINTF( "txDone\n\r" );
 80042ea:	4809      	ldr	r0, [pc, #36]	; (8004310 <SX1272OnDio0Irq+0x250>)
 80042ec:	e7e4      	b.n	80042b8 <SX1272OnDio0Irq+0x1f8>
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000d6c 	.word	0x20000d6c
 80042f4:	20000dfc 	.word	0x20000dfc
 80042f8:	2000017c 	.word	0x2000017c
 80042fc:	20000de8 	.word	0x20000de8
 8004300:	20000184 	.word	0x20000184
 8004304:	20000da6 	.word	0x20000da6
 8004308:	0800d524 	.word	0x0800d524
 800430c:	20000dd4 	.word	0x20000dd4
 8004310:	0800d52d 	.word	0x0800d52d

08004314 <SX1272OnDio1Irq>:
{
 8004314:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 8004316:	4c2e      	ldr	r4, [pc, #184]	; (80043d0 <SX1272OnDio1Irq+0xbc>)
 8004318:	7921      	ldrb	r1, [r4, #4]
 800431a:	2901      	cmp	r1, #1
 800431c:	d002      	beq.n	8004324 <SX1272OnDio1Irq+0x10>
 800431e:	2902      	cmp	r1, #2
 8004320:	d042      	beq.n	80043a8 <SX1272OnDio1Irq+0x94>
}
 8004322:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1272.Settings.Modem )
 8004324:	7963      	ldrb	r3, [r4, #5]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <SX1272OnDio1Irq+0x44>
 800432a:	2b01      	cmp	r3, #1
 800432c:	d1f9      	bne.n	8004322 <SX1272OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800432e:	4829      	ldr	r0, [pc, #164]	; (80043d4 <SX1272OnDio1Irq+0xc0>)
 8004330:	f006 fee4 	bl	800b0fc <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	2012      	movs	r0, #18
 8004338:	f7fe ff62 	bl	8003200 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 800433c:	2300      	movs	r3, #0
 800433e:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <SX1272OnDio1Irq+0xc4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ec      	beq.n	8004322 <SX1272OnDio1Irq+0xe>
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0e9      	beq.n	8004322 <SX1272OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800434e:	4798      	blx	r3
                    PRINTF( "rxTimeOut\n\r" );
 8004350:	4822      	ldr	r0, [pc, #136]	; (80043dc <SX1272OnDio1Irq+0xc8>)
 8004352:	f007 ff0d 	bl	800c170 <vcom_Send>
 8004356:	e7e4      	b.n	8004322 <SX1272OnDio1Irq+0xe>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004358:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <SX1272OnDio1Irq+0x5e>
 800435e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <SX1272OnDio1Irq+0x5e>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8004364:	1ce3      	adds	r3, r4, #3
 8004366:	7fdb      	ldrb	r3, [r3, #31]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <SX1272OnDio1Irq+0x80>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 800436c:	481c      	ldr	r0, [pc, #112]	; (80043e0 <SX1272OnDio1Irq+0xcc>)
 800436e:	f7ff fe9f 	bl	80040b0 <SX1272ReadFifo>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.FifoThresh )
 8004372:	0025      	movs	r5, r4
 8004374:	353e      	adds	r5, #62	; 0x3e
 8004376:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004378:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800437a:	481a      	ldr	r0, [pc, #104]	; (80043e4 <SX1272OnDio1Irq+0xd0>)
 800437c:	7829      	ldrb	r1, [r5, #0]
 800437e:	1810      	adds	r0, r2, r0
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	428b      	cmp	r3, r1
 8004384:	dd0b      	ble.n	800439e <SX1272OnDio1Irq+0x8a>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh );
 8004386:	f7ff fe93 	bl	80040b0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 800438a:	782b      	ldrb	r3, [r5, #0]
 800438c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800438e:	189b      	adds	r3, r3, r2
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 8004390:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8004392:	e7c6      	b.n	8004322 <SX1272OnDio1Irq+0xe>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8004394:	2032      	movs	r0, #50	; 0x32
 8004396:	f7fe ff85 	bl	80032a4 <SX1272Read>
 800439a:	8760      	strh	r0, [r4, #58]	; 0x3a
 800439c:	e7e9      	b.n	8004372 <SX1272OnDio1Irq+0x5e>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 800439e:	b2d9      	uxtb	r1, r3
 80043a0:	f7ff fe86 	bl	80040b0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 80043a4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80043a6:	e7f3      	b.n	8004390 <SX1272OnDio1Irq+0x7c>
            switch( SX1272.Settings.Modem )
 80043a8:	7963      	ldrb	r3, [r4, #5]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1b9      	bne.n	8004322 <SX1272OnDio1Irq+0xe>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 80043ae:	0025      	movs	r5, r4
 80043b0:	353f      	adds	r5, #63	; 0x3f
 80043b2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80043b4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80043b6:	480b      	ldr	r0, [pc, #44]	; (80043e4 <SX1272OnDio1Irq+0xd0>)
 80043b8:	7829      	ldrb	r1, [r5, #0]
 80043ba:	1810      	adds	r0, r2, r0
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	428b      	cmp	r3, r1
 80043c0:	dd02      	ble.n	80043c8 <SX1272OnDio1Irq+0xb4>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 80043c2:	f7ff fdf1 	bl	8003fa8 <SX1272WriteFifo>
 80043c6:	e7e0      	b.n	800438a <SX1272OnDio1Irq+0x76>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80043c8:	b2d9      	uxtb	r1, r3
 80043ca:	f7ff fded 	bl	8003fa8 <SX1272WriteFifo>
 80043ce:	e7e9      	b.n	80043a4 <SX1272OnDio1Irq+0x90>
 80043d0:	20000d6c 	.word	0x20000d6c
 80043d4:	20000dfc 	.word	0x20000dfc
 80043d8:	2000017c 	.word	0x2000017c
 80043dc:	0800d536 	.word	0x0800d536
 80043e0:	20000da6 	.word	0x20000da6
 80043e4:	20000184 	.word	0x20000184

080043e8 <SX1272SetMaxPayloadLength>:
{
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	0004      	movs	r4, r0
 80043ec:	000d      	movs	r5, r1
    SX1272SetModem( modem );
 80043ee:	f7ff f9c1 	bl	8003774 <SX1272SetModem>
    switch( modem )
 80043f2:	2c00      	cmp	r4, #0
 80043f4:	d002      	beq.n	80043fc <SX1272SetMaxPayloadLength+0x14>
 80043f6:	2c01      	cmp	r4, #1
 80043f8:	d00a      	beq.n	8004410 <SX1272SetMaxPayloadLength+0x28>
}
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1272.Settings.Fsk.FixLen == false )
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <SX1272SetMaxPayloadLength+0x30>)
 80043fe:	3303      	adds	r3, #3
 8004400:	7fdb      	ldrb	r3, [r3, #31]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f9      	bne.n	80043fa <SX1272SetMaxPayloadLength+0x12>
            SX1272Write( REG_PAYLOADLENGTH, max );
 8004406:	0029      	movs	r1, r5
 8004408:	2032      	movs	r0, #50	; 0x32
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 800440a:	f7fe fef9 	bl	8003200 <SX1272Write>
}
 800440e:	e7f4      	b.n	80043fa <SX1272SetMaxPayloadLength+0x12>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004410:	0029      	movs	r1, r5
 8004412:	2023      	movs	r0, #35	; 0x23
 8004414:	e7f9      	b.n	800440a <SX1272SetMaxPayloadLength+0x22>
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	20000d6c 	.word	0x20000d6c

0800441c <SX1272SetPublicNetwork>:
{
 800441c:	b510      	push	{r4, lr}
 800441e:	0004      	movs	r4, r0
    SX1272SetModem( MODEM_LORA );
 8004420:	2001      	movs	r0, #1
 8004422:	f7ff f9a7 	bl	8003774 <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <SX1272SetPublicNetwork+0x20>)
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004428:	2134      	movs	r1, #52	; 0x34
    SX1272.Settings.LoRa.PublicNetwork = enable;
 800442a:	335c      	adds	r3, #92	; 0x5c
 800442c:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800442e:	2c00      	cmp	r4, #0
 8004430:	d100      	bne.n	8004434 <SX1272SetPublicNetwork+0x18>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004432:	2112      	movs	r1, #18
 8004434:	2039      	movs	r0, #57	; 0x39
 8004436:	f7fe fee3 	bl	8003200 <SX1272Write>
}
 800443a:	bd10      	pop	{r4, pc}
 800443c:	20000d6c 	.word	0x20000d6c

08004440 <SX1272OnTimeoutIrq>:
{
 8004440:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 8004442:	4c2b      	ldr	r4, [pc, #172]	; (80044f0 <SX1272OnTimeoutIrq+0xb0>)
 8004444:	7923      	ldrb	r3, [r4, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d002      	beq.n	8004450 <SX1272OnTimeoutIrq+0x10>
 800444a:	2b02      	cmp	r3, #2
 800444c:	d02d      	beq.n	80044aa <SX1272OnTimeoutIrq+0x6a>
}
 800444e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1272.Settings.Modem == MODEM_FSK )
 8004450:	7963      	ldrb	r3, [r4, #5]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11b      	bne.n	800448e <SX1272OnTimeoutIrq+0x4e>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004456:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004458:	210b      	movs	r1, #11
 800445a:	203e      	movs	r0, #62	; 0x3e
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 800445c:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 800445e:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004460:	f7fe fece 	bl	8003200 <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004464:	2110      	movs	r1, #16
 8004466:	203f      	movs	r0, #63	; 0x3f
 8004468:	f7fe feca 	bl	8003200 <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 800446c:	1de3      	adds	r3, r4, #7
 800446e:	7fdb      	ldrb	r3, [r3, #31]
 8004470:	4d20      	ldr	r5, [pc, #128]	; (80044f4 <SX1272OnTimeoutIrq+0xb4>)
 8004472:	2b00      	cmp	r3, #0
 8004474:	d014      	beq.n	80044a0 <SX1272OnTimeoutIrq+0x60>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004476:	200d      	movs	r0, #13
 8004478:	f7fe ff14 	bl	80032a4 <SX1272Read>
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	4301      	orrs	r1, r0
 8004480:	b2c9      	uxtb	r1, r1
 8004482:	200d      	movs	r0, #13
 8004484:	f7fe febc 	bl	8003200 <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 8004488:	0028      	movs	r0, r5
 800448a:	f006 fdc5 	bl	800b018 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <SX1272OnTimeoutIrq+0xb8>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0db      	beq.n	800444e <SX1272OnTimeoutIrq+0xe>
 8004496:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0d8      	beq.n	800444e <SX1272OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800449c:	4798      	blx	r3
}
 800449e:	e7d6      	b.n	800444e <SX1272OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80044a0:	0028      	movs	r0, r5
                SX1272.Settings.State = RF_IDLE;
 80044a2:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80044a4:	f006 fe2a 	bl	800b0fc <TimerStop>
 80044a8:	e7f1      	b.n	800448e <SX1272OnTimeoutIrq+0x4e>
        SX1272Reset( );
 80044aa:	f7fe fe65 	bl	8003178 <SX1272Reset>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7ff f80e 	bl	80034d0 <SX1272SetOpMode>
 80044b4:	4e11      	ldr	r6, [pc, #68]	; (80044fc <SX1272OnTimeoutIrq+0xbc>)
 80044b6:	0035      	movs	r5, r6
 80044b8:	364b      	adds	r6, #75	; 0x4b
 80044ba:	3518      	adds	r5, #24
            SX1272SetModem( RadioRegsInit[i].Modem );
 80044bc:	7828      	ldrb	r0, [r5, #0]
 80044be:	f7ff f959 	bl	8003774 <SX1272SetModem>
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80044c2:	78a9      	ldrb	r1, [r5, #2]
 80044c4:	7868      	ldrb	r0, [r5, #1]
 80044c6:	3503      	adds	r5, #3
 80044c8:	f7fe fe9a 	bl	8003200 <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80044cc:	42b5      	cmp	r5, r6
 80044ce:	d1f5      	bne.n	80044bc <SX1272OnTimeoutIrq+0x7c>
        SX1272SetModem( MODEM_FSK );
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7ff f94f 	bl	8003774 <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 80044d6:	0023      	movs	r3, r4
 80044d8:	335c      	adds	r3, #92	; 0x5c
 80044da:	7818      	ldrb	r0, [r3, #0]
 80044dc:	f7ff ff9e 	bl	800441c <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <SX1272OnTimeoutIrq+0xb8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0b0      	beq.n	800444e <SX1272OnTimeoutIrq+0xe>
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	e7d3      	b.n	8004498 <SX1272OnTimeoutIrq+0x58>
 80044f0:	20000d6c 	.word	0x20000d6c
 80044f4:	20000de8 	.word	0x20000de8
 80044f8:	2000017c 	.word	0x2000017c
 80044fc:	0800cec8 	.word	0x0800cec8

08004500 <SX1272GetRadioWakeUpTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <SX1272GetRadioWakeUpTime+0x10>)
{
 8004502:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4798      	blx	r3
 800450a:	3002      	adds	r0, #2
}
 800450c:	bd10      	pop	{r4, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	2000017c 	.word	0x2000017c

08004514 <SX1272GetWakeTime>:
};

uint32_t SX1272GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8004514:	2000      	movs	r0, #0
 8004516:	4770      	bx	lr

08004518 <SX1272SetXO>:

void SX1272SetXO( uint8_t state )
{
}
 8004518:	4770      	bx	lr

0800451a <SX1272SetAntSwLowPower>:
}

void SX1272SetAntSwLowPower( bool status )
{
  //Ant Switch Controlled by SX1272 IC
}
 800451a:	4770      	bx	lr

0800451c <SX1272SetAntSw>:

void SX1272SetAntSw( uint8_t opMode )
{
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <SX1272SetAntSw+0x10>)
    switch( opMode )
    {
    case RFLR_OPMODE_TRANSMITTER:
        SX1272.RxTx = 1;
 800451e:	2201      	movs	r2, #1
    switch( opMode )
 8004520:	2803      	cmp	r0, #3
 8004522:	d000      	beq.n	8004526 <SX1272SetAntSw+0xa>
        break;
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        SX1272.RxTx = 0;
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
        break;
    }
}
 8004528:	4770      	bx	lr
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	20000d6c 	.word	0x20000d6c

08004530 <SX1272CheckRfFrequency>:

bool SX1272CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8004530:	2001      	movs	r0, #1
 8004532:	4770      	bx	lr

08004534 <SX1272SetRfTxPower>:
{
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	0006      	movs	r6, r0
    paConfig = SX1272Read( REG_PACONFIG );
 8004538:	2009      	movs	r0, #9
 800453a:	f7fe feb3 	bl	80032a4 <SX1272Read>
 800453e:	0005      	movs	r5, r0
    paDac = SX1272Read( REG_PADAC );
 8004540:	205a      	movs	r0, #90	; 0x5a
 8004542:	f7fe feaf 	bl	80032a4 <SX1272Read>
 8004546:	1c31      	adds	r1, r6, #0
 8004548:	0004      	movs	r4, r0
 800454a:	2e0e      	cmp	r6, #14
 800454c:	dd00      	ble.n	8004550 <SX1272SetRfTxPower+0x1c>
 800454e:	210e      	movs	r1, #14
        paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8004550:	060b      	lsls	r3, r1, #24
 8004552:	d501      	bpl.n	8004558 <SX1272SetRfTxPower+0x24>
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <SX1272SetRfTxPower+0x40>)
 8004556:	7819      	ldrb	r1, [r3, #0]
 8004558:	2370      	movs	r3, #112	; 0x70
 800455a:	3101      	adds	r1, #1
 800455c:	401d      	ands	r5, r3
 800455e:	4329      	orrs	r1, r5
    SX1272Write( REG_PACONFIG, paConfig );
 8004560:	b2c9      	uxtb	r1, r1
 8004562:	2009      	movs	r0, #9
 8004564:	f7fe fe4c 	bl	8003200 <SX1272Write>
    SX1272Write( REG_PADAC, paDac );
 8004568:	0021      	movs	r1, r4
 800456a:	205a      	movs	r0, #90	; 0x5a
 800456c:	f7fe fe48 	bl	8003200 <SX1272Write>
}
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	0800d542 	.word	0x0800d542

08004578 <SX1272IoInit>:
{
 8004578:	b510      	push	{r4, lr}
 800457a:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 800457c:	2214      	movs	r2, #20
 800457e:	2100      	movs	r1, #0
 8004580:	a801      	add	r0, sp, #4
 8004582:	f007 ff2e 	bl	800c3e2 <memset>
  SX1272BoardInit( &BoardCallbacks );
 8004586:	4811      	ldr	r0, [pc, #68]	; (80045cc <SX1272IoInit+0x54>)
 8004588:	f7fe fdea 	bl	8003160 <SX1272BoardInit>
  initStruct.Mode = GPIO_MODE_IT_RISING;
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <SX1272IoInit+0x58>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800458e:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8004590:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8004592:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8004594:	20a0      	movs	r0, #160	; 0xa0
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8004596:	4c0f      	ldr	r4, [pc, #60]	; (80045d4 <SX1272IoInit+0x5c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8004598:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800459a:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800459c:	4099      	lsls	r1, r3
 800459e:	aa01      	add	r2, sp, #4
 80045a0:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 80045a2:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80045a4:	f006 fea4 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80045a8:	aa01      	add	r2, sp, #4
 80045aa:	0020      	movs	r0, r4
 80045ac:	2108      	movs	r1, #8
 80045ae:	f006 fe9f 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80045b2:	aa01      	add	r2, sp, #4
 80045b4:	0020      	movs	r0, r4
 80045b6:	2120      	movs	r1, #32
 80045b8:	f006 fe9a 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80045bc:	aa01      	add	r2, sp, #4
 80045be:	2110      	movs	r1, #16
 80045c0:	0020      	movs	r0, r4
 80045c2:	f006 fe95 	bl	800b2f0 <HW_GPIO_Init>
}
 80045c6:	b006      	add	sp, #24
 80045c8:	bd10      	pop	{r4, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	20000018 	.word	0x20000018
 80045d0:	10110000 	.word	0x10110000
 80045d4:	50000400 	.word	0x50000400

080045d8 <SX1272IoDeInit>:
{
 80045d8:	b510      	push	{r4, lr}
 80045da:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80045dc:	2214      	movs	r2, #20
 80045de:	2100      	movs	r1, #0
 80045e0:	a801      	add	r0, sp, #4
 80045e2:	f007 fefe 	bl	800c3e2 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <SX1272IoDeInit+0x48>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 80045ec:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 80045ee:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80045f0:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <SX1272IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80045f2:	aa01      	add	r2, sp, #4
 80045f4:	00c9      	lsls	r1, r1, #3
 80045f6:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_PULLDOWN;
 80045f8:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80045fa:	f006 fe79 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80045fe:	aa01      	add	r2, sp, #4
 8004600:	0020      	movs	r0, r4
 8004602:	2108      	movs	r1, #8
 8004604:	f006 fe74 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8004608:	aa01      	add	r2, sp, #4
 800460a:	0020      	movs	r0, r4
 800460c:	2120      	movs	r1, #32
 800460e:	f006 fe6f 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8004612:	aa01      	add	r2, sp, #4
 8004614:	2110      	movs	r1, #16
 8004616:	0020      	movs	r0, r4
 8004618:	f006 fe6a 	bl	800b2f0 <HW_GPIO_Init>
}
 800461c:	b006      	add	sp, #24
 800461e:	bd10      	pop	{r4, pc}
 8004620:	10110000 	.word	0x10110000
 8004624:	50000400 	.word	0x50000400

08004628 <SX1272IoIrqInit>:
{
 8004628:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800462a:	2180      	movs	r1, #128	; 0x80
{
 800462c:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800462e:	20a0      	movs	r0, #160	; 0xa0
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8004630:	4d0c      	ldr	r5, [pc, #48]	; (8004664 <SX1272IoIrqInit+0x3c>)
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	00c9      	lsls	r1, r1, #3
 8004638:	05c0      	lsls	r0, r0, #23
 800463a:	f006 fea5 	bl	800b388 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800463e:	0028      	movs	r0, r5
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	2108      	movs	r1, #8
 8004646:	f006 fe9f 	bl	800b388 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800464a:	0028      	movs	r0, r5
 800464c:	68a3      	ldr	r3, [r4, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	2120      	movs	r1, #32
 8004652:	f006 fe99 	bl	800b388 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8004656:	0028      	movs	r0, r5
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	2110      	movs	r1, #16
 800465e:	f006 fe93 	bl	800b388 <HW_GPIO_SetIrq>
}
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	50000400 	.word	0x50000400

08004668 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <SystemInit+0x44>)
 800466c:	0052      	lsls	r2, r2, #1
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	490e      	ldr	r1, [pc, #56]	; (80046b0 <SystemInit+0x48>)
 8004678:	400a      	ands	r2, r1
 800467a:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	490d      	ldr	r1, [pc, #52]	; (80046b4 <SystemInit+0x4c>)
 8004680:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004682:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004684:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	438a      	bics	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	490a      	ldr	r1, [pc, #40]	; (80046b8 <SystemInit+0x50>)
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	4909      	ldr	r1, [pc, #36]	; (80046bc <SystemInit+0x54>)
 8004698:	400a      	ands	r2, r1
 800469a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800469c:	2200      	movs	r2, #0
 800469e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <SystemInit+0x58>)
 80046a4:	0512      	lsls	r2, r2, #20
 80046a6:	609a      	str	r2, [r3, #8]
#endif
}
 80046a8:	4770      	bx	lr
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40021000 	.word	0x40021000
 80046b0:	88ff400c 	.word	0x88ff400c
 80046b4:	fef6fff6 	.word	0xfef6fff6
 80046b8:	fffbffff 	.word	0xfffbffff
 80046bc:	ff02ffff 	.word	0xff02ffff
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	0004      	movs	r4, r0
 80046c8:	3441      	adds	r4, #65	; 0x41
 80046ca:	7822      	ldrb	r2, [r4, #0]
{
 80046cc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ce:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	2a20      	cmp	r2, #32
 80046d4:	d118      	bne.n	8004708 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80046d6:	001d      	movs	r5, r3
 80046d8:	3540      	adds	r5, #64	; 0x40
 80046da:	782e      	ldrb	r6, [r5, #0]
 80046dc:	2e01      	cmp	r6, #1
 80046de:	d013      	beq.n	8004708 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80046e0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e2:	3022      	adds	r0, #34	; 0x22
 80046e4:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80046e6:	681e      	ldr	r6, [r3, #0]
 80046e8:	3823      	subs	r0, #35	; 0x23
 80046ea:	4386      	bics	r6, r0
 80046ec:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ee:	681e      	ldr	r6, [r3, #0]
 80046f0:	4f06      	ldr	r7, [pc, #24]	; (800470c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80046f2:	403e      	ands	r6, r7
 80046f4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	4331      	orrs	r1, r6
 80046fa:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	4308      	orrs	r0, r1
 8004700:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004702:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004704:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004706:	7028      	strb	r0, [r5, #0]
  }
}
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	ffffefff 	.word	0xffffefff

08004710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004712:	0005      	movs	r5, r0
 8004714:	3541      	adds	r5, #65	; 0x41
 8004716:	782a      	ldrb	r2, [r5, #0]
{
 8004718:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800471a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800471c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800471e:	2a20      	cmp	r2, #32
 8004720:	d117      	bne.n	8004752 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8004722:	001c      	movs	r4, r3
 8004724:	3440      	adds	r4, #64	; 0x40
 8004726:	7826      	ldrb	r6, [r4, #0]
 8004728:	2e01      	cmp	r6, #1
 800472a:	d012      	beq.n	8004752 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 800472c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800472e:	3022      	adds	r0, #34	; 0x22
 8004730:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004732:	681e      	ldr	r6, [r3, #0]
 8004734:	3823      	subs	r0, #35	; 0x23
 8004736:	4386      	bics	r6, r0
 8004738:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800473a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800473c:	4f05      	ldr	r7, [pc, #20]	; (8004754 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800473e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004740:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8004742:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004744:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	4308      	orrs	r0, r1
 800474a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800474c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004750:	7020      	strb	r0, [r4, #0]
  }
}
 8004752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004754:	fffff0ff 	.word	0xfffff0ff

08004758 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004758:	2302      	movs	r3, #2
 800475a:	4a06      	ldr	r2, [pc, #24]	; (8004774 <HAL_Init+0x1c>)
{
 800475c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800475e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004760:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004762:	430b      	orrs	r3, r1
 8004764:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004766:	f007 fa67 	bl	800bc38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800476a:	f007 fa67 	bl	800bc3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800476e:	2000      	movs	r0, #0
 8004770:	bd10      	pop	{r4, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	40022000 	.word	0x40022000

08004778 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004778:	4a02      	ldr	r2, [pc, #8]	; (8004784 <HAL_IncTick+0xc>)
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	4770      	bx	lr
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000e10 	.word	0x20000e10

08004788 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <HAL_GetTick+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
}
 800478c:	4770      	bx	lr
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000e10 	.word	0x20000e10

08004794 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004794:	2101      	movs	r1, #1
 8004796:	4a02      	ldr	r2, [pc, #8]	; (80047a0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004798:	6853      	ldr	r3, [r2, #4]
 800479a:	438b      	bics	r3, r1
 800479c:	6053      	str	r3, [r2, #4]
}
 800479e:	4770      	bx	lr
 80047a0:	40015800 	.word	0x40015800

080047a4 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80047a4:	2102      	movs	r1, #2
 80047a6:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80047a8:	6853      	ldr	r3, [r2, #4]
 80047aa:	438b      	bics	r3, r1
 80047ac:	6053      	str	r3, [r2, #4]
}
 80047ae:	4770      	bx	lr
 80047b0:	40015800 	.word	0x40015800

080047b4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80047b4:	2104      	movs	r1, #4
 80047b6:	4a02      	ldr	r2, [pc, #8]	; (80047c0 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80047b8:	6853      	ldr	r3, [r2, #4]
 80047ba:	438b      	bics	r3, r1
 80047bc:	6053      	str	r3, [r2, #4]
}
 80047be:	4770      	bx	lr
 80047c0:	40015800 	.word	0x40015800

080047c4 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <ADC_DelayMicroSecond+0x24>)
{
 80047c6:	b513      	push	{r0, r1, r4, lr}
 80047c8:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80047ca:	4908      	ldr	r1, [pc, #32]	; (80047ec <ADC_DelayMicroSecond+0x28>)
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f7fb fcaf 	bl	8000130 <__udivsi3>
 80047d2:	4344      	muls	r4, r0
 80047d4:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80047d6:	9b01      	ldr	r3, [sp, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d100      	bne.n	80047de <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80047dc:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	e7f7      	b.n	80047d6 <ADC_DelayMicroSecond+0x12>
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20000030 	.word	0x20000030
 80047ec:	000f4240 	.word	0x000f4240

080047f0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047f0:	2103      	movs	r1, #3
 80047f2:	6803      	ldr	r3, [r0, #0]
{
 80047f4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047f6:	689a      	ldr	r2, [r3, #8]
{
 80047f8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047fa:	400a      	ands	r2, r1
 80047fc:	2a01      	cmp	r2, #1
 80047fe:	d104      	bne.n	800480a <ADC_Enable+0x1a>
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	4211      	tst	r1, r2
 8004804:	d001      	beq.n	800480a <ADC_Enable+0x1a>
  return HAL_OK;
 8004806:	2000      	movs	r0, #0
}
 8004808:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800480a:	6899      	ldr	r1, [r3, #8]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <ADC_Enable+0x6c>)
 800480e:	4211      	tst	r1, r2
 8004810:	d008      	beq.n	8004824 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004812:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004814:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004816:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004818:	4313      	orrs	r3, r2
 800481a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800481e:	4303      	orrs	r3, r0
 8004820:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8004822:	e7f1      	b.n	8004808 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004824:	2501      	movs	r5, #1
 8004826:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004828:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800482a:	432a      	orrs	r2, r5
 800482c:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800482e:	f7ff ffc9 	bl	80047c4 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004832:	f7ff ffa9 	bl	8004788 <HAL_GetTick>
 8004836:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	422b      	tst	r3, r5
 800483e:	d1e2      	bne.n	8004806 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004840:	f7ff ffa2 	bl	8004788 <HAL_GetTick>
 8004844:	1b80      	subs	r0, r0, r6
 8004846:	280a      	cmp	r0, #10
 8004848:	d9f6      	bls.n	8004838 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484a:	2310      	movs	r3, #16
 800484c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 800484e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004850:	4313      	orrs	r3, r2
 8004852:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004856:	431d      	orrs	r5, r3
 8004858:	65e5      	str	r5, [r4, #92]	; 0x5c
        return HAL_ERROR;
 800485a:	e7d5      	b.n	8004808 <ADC_Enable+0x18>
 800485c:	80000017 	.word	0x80000017

08004860 <HAL_ADC_MspInit>:
}
 8004860:	4770      	bx	lr
	...

08004864 <HAL_ADC_Init>:
{
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
  if(hadc == NULL)
 800486a:	2c00      	cmp	r4, #0
 800486c:	d019      	beq.n	80048a2 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800486e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8004874:	0022      	movs	r2, r4
 8004876:	3254      	adds	r2, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004878:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_MspInit(hadc);
 800487a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800487c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800487e:	f7ff ffef 	bl	8004860 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004884:	06db      	lsls	r3, r3, #27
 8004886:	d404      	bmi.n	8004892 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004888:	2204      	movs	r2, #4
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6898      	ldr	r0, [r3, #8]
 800488e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004890:	d008      	beq.n	80048a4 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	2310      	movs	r3, #16
 8004894:	6da2      	ldr	r2, [r4, #88]	; 0x58
    return HAL_ERROR;
 8004896:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004898:	4313      	orrs	r3, r2
 800489a:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 800489c:	2300      	movs	r3, #0
 800489e:	3454      	adds	r4, #84	; 0x54
 80048a0:	7023      	strb	r3, [r4, #0]
}
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80048a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80048a6:	4953      	ldr	r1, [pc, #332]	; (80049f4 <HAL_ADC_Init+0x190>)
 80048a8:	4011      	ands	r1, r2
 80048aa:	2202      	movs	r2, #2
 80048ac:	430a      	orrs	r2, r1
 80048ae:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048b0:	2203      	movs	r2, #3
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	4011      	ands	r1, r2
 80048b6:	4a50      	ldr	r2, [pc, #320]	; (80049f8 <HAL_ADC_Init+0x194>)
 80048b8:	2901      	cmp	r1, #1
 80048ba:	d102      	bne.n	80048c2 <HAL_ADC_Init+0x5e>
 80048bc:	681d      	ldr	r5, [r3, #0]
 80048be:	420d      	tst	r5, r1
 80048c0:	d119      	bne.n	80048f6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80048c2:	2680      	movs	r6, #128	; 0x80
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	05f6      	lsls	r6, r6, #23
 80048c8:	004d      	lsls	r5, r1, #1
 80048ca:	086d      	lsrs	r5, r5, #1
 80048cc:	42b5      	cmp	r5, r6
 80048ce:	d003      	beq.n	80048d8 <HAL_ADC_Init+0x74>
 80048d0:	2580      	movs	r5, #128	; 0x80
 80048d2:	062d      	lsls	r5, r5, #24
 80048d4:	42a9      	cmp	r1, r5
 80048d6:	d172      	bne.n	80049be <HAL_ADC_Init+0x15a>
 80048d8:	691d      	ldr	r5, [r3, #16]
 80048da:	00ad      	lsls	r5, r5, #2
 80048dc:	08ad      	lsrs	r5, r5, #2
 80048de:	611d      	str	r5, [r3, #16]
 80048e0:	691d      	ldr	r5, [r3, #16]
 80048e2:	4329      	orrs	r1, r5
 80048e4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80048e6:	2518      	movs	r5, #24
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	43a9      	bics	r1, r5
 80048ec:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80048ee:	68d9      	ldr	r1, [r3, #12]
 80048f0:	68a5      	ldr	r5, [r4, #8]
 80048f2:	4329      	orrs	r1, r5
 80048f4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	4d40      	ldr	r5, [pc, #256]	; (80049fc <HAL_ADC_Init+0x198>)
 80048fa:	4029      	ands	r1, r5
 80048fc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80048fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004900:	6815      	ldr	r5, [r2, #0]
 8004902:	0649      	lsls	r1, r1, #25
 8004904:	4329      	orrs	r1, r5
 8004906:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	6899      	ldr	r1, [r3, #8]
 800490c:	0552      	lsls	r2, r2, #21
 800490e:	4211      	tst	r1, r2
 8004910:	d102      	bne.n	8004918 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4939      	ldr	r1, [pc, #228]	; (8004a00 <HAL_ADC_Init+0x19c>)
 800491c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800491e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004920:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004922:	68dd      	ldr	r5, [r3, #12]
 8004924:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004926:	2902      	cmp	r1, #2
 8004928:	d100      	bne.n	800492c <HAL_ADC_Init+0xc8>
 800492a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800492c:	6b66      	ldr	r6, [r4, #52]	; 0x34
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800492e:	6a21      	ldr	r1, [r4, #32]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004930:	4332      	orrs	r2, r6
 8004932:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004934:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004936:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004938:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800493a:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800493c:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800493e:	69a5      	ldr	r5, [r4, #24]
 8004940:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004942:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004944:	69e5      	ldr	r5, [r4, #28]
 8004946:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004948:	432a      	orrs	r2, r5
 800494a:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800494c:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800494e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004950:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004952:	30ff      	adds	r0, #255	; 0xff
 8004954:	4282      	cmp	r2, r0
 8004956:	d004      	beq.n	8004962 <HAL_ADC_Init+0xfe>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004958:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800495a:	68d8      	ldr	r0, [r3, #12]
 800495c:	432a      	orrs	r2, r5
 800495e:	4302      	orrs	r2, r0
 8004960:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004962:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004964:	2a01      	cmp	r2, #1
 8004966:	d106      	bne.n	8004976 <HAL_ADC_Init+0x112>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004968:	2900      	cmp	r1, #0
 800496a:	d134      	bne.n	80049d6 <HAL_ADC_Init+0x172>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	0252      	lsls	r2, r2, #9
 8004972:	430a      	orrs	r2, r1
 8004974:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004976:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004978:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800497a:	2901      	cmp	r1, #1
 800497c:	d133      	bne.n	80049e6 <HAL_ADC_Init+0x182>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800497e:	4821      	ldr	r0, [pc, #132]	; (8004a04 <HAL_ADC_Init+0x1a0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004980:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004982:	4002      	ands	r2, r0
 8004984:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004986:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004988:	6918      	ldr	r0, [r3, #16]
 800498a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800498c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800498e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004990:	4302      	orrs	r2, r0
 8004992:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	4311      	orrs	r1, r2
 8004998:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800499a:	2107      	movs	r1, #7
 800499c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800499e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80049a0:	438a      	bics	r2, r1
 80049a2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80049a8:	430a      	orrs	r2, r1
 80049aa:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80049ac:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80049ae:	65e0      	str	r0, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 80049b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b2:	4393      	bics	r3, r2
 80049b4:	001a      	movs	r2, r3
 80049b6:	2301      	movs	r3, #1
 80049b8:	4313      	orrs	r3, r2
 80049ba:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80049bc:	e771      	b.n	80048a2 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80049be:	691d      	ldr	r5, [r3, #16]
 80049c0:	4e11      	ldr	r6, [pc, #68]	; (8004a08 <HAL_ADC_Init+0x1a4>)
 80049c2:	00ad      	lsls	r5, r5, #2
 80049c4:	08ad      	lsrs	r5, r5, #2
 80049c6:	611d      	str	r5, [r3, #16]
 80049c8:	6815      	ldr	r5, [r2, #0]
 80049ca:	4035      	ands	r5, r6
 80049cc:	6015      	str	r5, [r2, #0]
 80049ce:	6815      	ldr	r5, [r2, #0]
 80049d0:	4329      	orrs	r1, r5
 80049d2:	6011      	str	r1, [r2, #0]
 80049d4:	e787      	b.n	80048e6 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d6:	2120      	movs	r1, #32
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	4301      	orrs	r1, r0
 80049dc:	65a1      	str	r1, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049e0:	430a      	orrs	r2, r1
 80049e2:	65e2      	str	r2, [r4, #92]	; 0x5c
 80049e4:	e7c7      	b.n	8004976 <HAL_ADC_Init+0x112>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80049e6:	2101      	movs	r1, #1
 80049e8:	420a      	tst	r2, r1
 80049ea:	d0d6      	beq.n	800499a <HAL_ADC_Init+0x136>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	438a      	bics	r2, r1
 80049f0:	611a      	str	r2, [r3, #16]
 80049f2:	e7d2      	b.n	800499a <HAL_ADC_Init+0x136>
 80049f4:	fffffefd 	.word	0xfffffefd
 80049f8:	40012708 	.word	0x40012708
 80049fc:	fdffffff 	.word	0xfdffffff
 8004a00:	fffe0219 	.word	0xfffe0219
 8004a04:	fffffc03 	.word	0xfffffc03
 8004a08:	ffc3ffff 	.word	0xffc3ffff

08004a0c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a0c:	6803      	ldr	r3, [r0, #0]
{
 8004a0e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a10:	689b      	ldr	r3, [r3, #8]
{
 8004a12:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004a14:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a16:	075b      	lsls	r3, r3, #29
 8004a18:	d41a      	bmi.n	8004a50 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004a1a:	0025      	movs	r5, r4
 8004a1c:	3554      	adds	r5, #84	; 0x54
 8004a1e:	782b      	ldrb	r3, [r5, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d015      	beq.n	8004a50 <HAL_ADC_Start+0x44>
 8004a24:	2301      	movs	r3, #1
 8004a26:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a28:	69e3      	ldr	r3, [r4, #28]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d111      	bne.n	8004a52 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8004a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004a32:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004a34:	401a      	ands	r2, r3
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a3c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a40:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8004a42:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_UNLOCK(hadc);
 8004a44:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a46:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004a48:	6899      	ldr	r1, [r3, #8]
 8004a4a:	3a18      	subs	r2, #24
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004a52:	0020      	movs	r0, r4
 8004a54:	f7ff fecc 	bl	80047f0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0e8      	beq.n	8004a2e <HAL_ADC_Start+0x22>
 8004a5c:	e7f8      	b.n	8004a50 <HAL_ADC_Start+0x44>
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	fffff0fe 	.word	0xfffff0fe

08004a64 <HAL_ADC_PollForConversion>:
{
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a66:	6945      	ldr	r5, [r0, #20]
{
 8004a68:	0004      	movs	r4, r0
 8004a6a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a6c:	2d08      	cmp	r5, #8
 8004a6e:	d00d      	beq.n	8004a8c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004a70:	6803      	ldr	r3, [r0, #0]
 8004a72:	2001      	movs	r0, #1
 8004a74:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004a76:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004a78:	4203      	tst	r3, r0
 8004a7a:	d007      	beq.n	8004a8c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004a80:	3454      	adds	r4, #84	; 0x54
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a82:	4313      	orrs	r3, r2
 8004a84:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8004a86:	2300      	movs	r3, #0
 8004a88:	7023      	strb	r3, [r4, #0]
}
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004a8c:	f7ff fe7c 	bl	8004788 <HAL_GetTick>
 8004a90:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4215      	tst	r5, r2
 8004a98:	d023      	beq.n	8004ae2 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a9e:	0092      	lsls	r2, r2, #2
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	65a2      	str	r2, [r4, #88]	; 0x58
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004aa4:	22c0      	movs	r2, #192	; 0xc0
 8004aa6:	68d9      	ldr	r1, [r3, #12]
 8004aa8:	0112      	lsls	r2, r2, #4
 8004aaa:	4211      	tst	r1, r2
 8004aac:	d112      	bne.n	8004ad4 <HAL_ADC_PollForConversion+0x70>
 8004aae:	6a22      	ldr	r2, [r4, #32]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d10f      	bne.n	8004ad4 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	0712      	lsls	r2, r2, #28
 8004ab8:	d50c      	bpl.n	8004ad4 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	0752      	lsls	r2, r2, #29
 8004abe:	d423      	bmi.n	8004b08 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ac0:	210c      	movs	r1, #12
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004ac8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004aca:	4914      	ldr	r1, [pc, #80]	; (8004b1c <HAL_ADC_PollForConversion+0xb8>)
 8004acc:	4011      	ands	r1, r2
 8004ace:	2201      	movs	r2, #1
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8004ad4:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004ad6:	69a2      	ldr	r2, [r4, #24]
 8004ad8:	4282      	cmp	r2, r0
 8004ada:	d1d6      	bne.n	8004a8a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004adc:	220c      	movs	r2, #12
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e7d3      	b.n	8004a8a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8004ae2:	1c72      	adds	r2, r6, #1
 8004ae4:	d0d6      	beq.n	8004a94 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d108      	bne.n	8004afc <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004aea:	2304      	movs	r3, #4
 8004aec:	6da2      	ldr	r2, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8004aee:	3454      	adds	r4, #84	; 0x54
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004af0:	4313      	orrs	r3, r2
 8004af2:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8004af4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004af6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8004af8:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004afa:	e7c6      	b.n	8004a8a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004afc:	f7ff fe44 	bl	8004788 <HAL_GetTick>
 8004b00:	1bc0      	subs	r0, r0, r7
 8004b02:	42b0      	cmp	r0, r6
 8004b04:	d9c5      	bls.n	8004a92 <HAL_ADC_PollForConversion+0x2e>
 8004b06:	e7f0      	b.n	8004aea <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b08:	2220      	movs	r2, #32
 8004b0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	65a2      	str	r2, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b10:	2201      	movs	r2, #1
 8004b12:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b14:	430a      	orrs	r2, r1
 8004b16:	65e2      	str	r2, [r4, #92]	; 0x5c
 8004b18:	e7dc      	b.n	8004ad4 <HAL_ADC_PollForConversion+0x70>
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	fffffefe 	.word	0xfffffefe

08004b20 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004b20:	6803      	ldr	r3, [r0, #0]
 8004b22:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_ADC_ConfigChannel>:
{
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	3454      	adds	r4, #84	; 0x54
 8004b2e:	7823      	ldrb	r3, [r4, #0]
{
 8004b30:	0006      	movs	r6, r0
 8004b32:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8004b34:	2002      	movs	r0, #2
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d00b      	beq.n	8004b52 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004b3a:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8004b3c:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004b3e:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8004b40:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004b42:	074b      	lsls	r3, r1, #29
 8004b44:	d506      	bpl.n	8004b54 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b46:	2220      	movs	r2, #32
 8004b48:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	65b2      	str	r2, [r6, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	7022      	strb	r2, [r4, #0]
}
 8004b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	682b      	ldr	r3, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8004b58:	4e20      	ldr	r6, [pc, #128]	; (8004bdc <HAL_ADC_ConfigChannel+0xb4>)
 8004b5a:	686f      	ldr	r7, [r5, #4]
 8004b5c:	0358      	lsls	r0, r3, #13
 8004b5e:	02c9      	lsls	r1, r1, #11
 8004b60:	0b40      	lsrs	r0, r0, #13
 8004b62:	4019      	ands	r1, r3
 8004b64:	42b7      	cmp	r7, r6
 8004b66:	d021      	beq.n	8004bac <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004b68:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004b6a:	4318      	orrs	r0, r3
 8004b6c:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004b7a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004b80:	f7ff fe20 	bl	80047c4 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004b84:	682a      	ldr	r2, [r5, #0]
 8004b86:	0393      	lsls	r3, r2, #14
 8004b88:	d505      	bpl.n	8004b96 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	4914      	ldr	r1, [pc, #80]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004b8e:	03db      	lsls	r3, r3, #15
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	4303      	orrs	r3, r0
 8004b94:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004b96:	03d3      	lsls	r3, r2, #15
 8004b98:	d505      	bpl.n	8004ba6 <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004b9e:	045b      	lsls	r3, r3, #17
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004ba4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004baa:	e7d2      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004bac:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004bae:	4385      	bics	r5, r0
 8004bb0:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d004      	beq.n	8004bc0 <HAL_ADC_ConfigChannel+0x98>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004bb6:	490a      	ldr	r1, [pc, #40]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004bb8:	480a      	ldr	r0, [pc, #40]	; (8004be4 <HAL_ADC_ConfigChannel+0xbc>)
 8004bba:	680a      	ldr	r2, [r1, #0]
 8004bbc:	4002      	ands	r2, r0
 8004bbe:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004bc0:	039a      	lsls	r2, r3, #14
 8004bc2:	d504      	bpl.n	8004bce <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004bc4:	4906      	ldr	r1, [pc, #24]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004bc6:	4808      	ldr	r0, [pc, #32]	; (8004be8 <HAL_ADC_ConfigChannel+0xc0>)
 8004bc8:	680a      	ldr	r2, [r1, #0]
 8004bca:	4002      	ands	r2, r0
 8004bcc:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004bce:	03db      	lsls	r3, r3, #15
 8004bd0:	d5e9      	bpl.n	8004ba6 <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004bd2:	4a03      	ldr	r2, [pc, #12]	; (8004be0 <HAL_ADC_ConfigChannel+0xb8>)
 8004bd4:	4905      	ldr	r1, [pc, #20]	; (8004bec <HAL_ADC_ConfigChannel+0xc4>)
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	400b      	ands	r3, r1
 8004bda:	e7e3      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x7c>
 8004bdc:	00001001 	.word	0x00001001
 8004be0:	40012708 	.word	0x40012708
 8004be4:	ff7fffff 	.word	0xff7fffff
 8004be8:	ffbfffff 	.word	0xffbfffff
 8004bec:	feffffff 	.word	0xfeffffff

08004bf0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf2:	0005      	movs	r5, r0
 8004bf4:	3554      	adds	r5, #84	; 0x54
 8004bf6:	782b      	ldrb	r3, [r5, #0]
{
 8004bf8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004bfa:	2002      	movs	r0, #2
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d044      	beq.n	8004c8a <HAL_ADCEx_Calibration_Start+0x9a>
 8004c00:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c02:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8004c04:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	6898      	ldr	r0, [r3, #8]
 8004c0a:	4010      	ands	r0, r2
 8004c0c:	2801      	cmp	r0, #1
 8004c0e:	d109      	bne.n	8004c24 <HAL_ADCEx_Calibration_Start+0x34>
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4202      	tst	r2, r0
 8004c14:	d006      	beq.n	8004c24 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c16:	2320      	movs	r3, #32
 8004c18:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	65a3      	str	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8004c22:	e032      	b.n	8004c8a <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8004c24:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004c26:	4919      	ldr	r1, [pc, #100]	; (8004c8c <HAL_ADCEx_Calibration_Start+0x9c>)
 8004c28:	4011      	ands	r1, r2
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c2e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004c30:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c32:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	438a      	bics	r2, r1
 8004c38:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	6899      	ldr	r1, [r3, #8]
 8004c3e:	0612      	lsls	r2, r2, #24
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004c44:	f7ff fda0 	bl	8004788 <HAL_GetTick>
 8004c48:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	db0c      	blt.n	8004c6c <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c52:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004c54:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c56:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004c58:	430e      	orrs	r6, r1
 8004c5a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004c60:	4393      	bics	r3, r2
 8004c62:	001a      	movs	r2, r3
 8004c64:	2301      	movs	r3, #1
 8004c66:	4313      	orrs	r3, r2
 8004c68:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c6a:	e7d8      	b.n	8004c1e <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004c6c:	f7ff fd8c 	bl	8004788 <HAL_GetTick>
 8004c70:	1bc0      	subs	r0, r0, r7
 8004c72:	280a      	cmp	r0, #10
 8004c74:	d9e9      	bls.n	8004c4a <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8004c76:	2212      	movs	r2, #18
 8004c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004c7a:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004c7c:	4393      	bics	r3, r2
 8004c7e:	001a      	movs	r2, r3
 8004c80:	2310      	movs	r3, #16
 8004c82:	4313      	orrs	r3, r2
 8004c84:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8004c86:	2300      	movs	r3, #0
 8004c88:	702b      	strb	r3, [r5, #0]
}
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	fffffefd 	.word	0xfffffefd

08004c90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c90:	b530      	push	{r4, r5, lr}
 8004c92:	25ff      	movs	r5, #255	; 0xff
 8004c94:	2403      	movs	r4, #3
 8004c96:	002a      	movs	r2, r5
 8004c98:	b2c3      	uxtb	r3, r0
 8004c9a:	401c      	ands	r4, r3
 8004c9c:	00e4      	lsls	r4, r4, #3
 8004c9e:	40a2      	lsls	r2, r4
 8004ca0:	0189      	lsls	r1, r1, #6
 8004ca2:	4029      	ands	r1, r5
 8004ca4:	43d2      	mvns	r2, r2
 8004ca6:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	da0b      	bge.n	8004cc4 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cac:	200f      	movs	r0, #15
 8004cae:	4003      	ands	r3, r0
 8004cb0:	3b08      	subs	r3, #8
 8004cb2:	480a      	ldr	r0, [pc, #40]	; (8004cdc <HAL_NVIC_SetPriority+0x4c>)
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	181b      	adds	r3, r3, r0
 8004cba:	69d8      	ldr	r0, [r3, #28]
 8004cbc:	4002      	ands	r2, r0
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004cc2:	bd30      	pop	{r4, r5, pc}
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc6:	0880      	lsrs	r0, r0, #2
 8004cc8:	0080      	lsls	r0, r0, #2
 8004cca:	18c0      	adds	r0, r0, r3
 8004ccc:	23c0      	movs	r3, #192	; 0xc0
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	58c4      	ldr	r4, [r0, r3]
 8004cd2:	4022      	ands	r2, r4
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	50c1      	str	r1, [r0, r3]
 8004cd8:	e7f3      	b.n	8004cc2 <HAL_NVIC_SetPriority+0x32>
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	e000ed00 	.word	0xe000ed00
 8004ce0:	e000e100 	.word	0xe000e100

08004ce4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004ce4:	231f      	movs	r3, #31
 8004ce6:	4018      	ands	r0, r3
 8004ce8:	3b1e      	subs	r3, #30
 8004cea:	4083      	lsls	r3, r0
 8004cec:	4a01      	ldr	r2, [pc, #4]	; (8004cf4 <HAL_NVIC_EnableIRQ+0x10>)
 8004cee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004cf0:	4770      	bx	lr
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004cf8:	231f      	movs	r3, #31
 8004cfa:	4018      	ands	r0, r3
 8004cfc:	3b1e      	subs	r3, #30
 8004cfe:	4083      	lsls	r3, r0
 8004d00:	4a01      	ldr	r2, [pc, #4]	; (8004d08 <HAL_NVIC_SetPendingIRQ+0x10>)
 8004d02:	6053      	str	r3, [r2, #4]
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8004d04:	4770      	bx	lr
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	e000e1fc 	.word	0xe000e1fc

08004d0c <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <HAL_NVIC_GetPendingIRQ+0x14>)
  *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8004d0e:	0003      	movs	r3, r0
 8004d10:	6850      	ldr	r0, [r2, #4]
 8004d12:	221f      	movs	r2, #31
 8004d14:	4013      	ands	r3, r2
 8004d16:	40d8      	lsrs	r0, r3
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4018      	ands	r0, r3
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8004d1c:	4770      	bx	lr
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	e000e1fc 	.word	0xe000e1fc

08004d24 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004d24:	231f      	movs	r3, #31
 8004d26:	22c0      	movs	r2, #192	; 0xc0
 8004d28:	4018      	ands	r0, r3
 8004d2a:	3b1e      	subs	r3, #30
 8004d2c:	4083      	lsls	r3, r0
 8004d2e:	4902      	ldr	r1, [pc, #8]	; (8004d38 <HAL_NVIC_ClearPendingIRQ+0x14>)
 8004d30:	0052      	lsls	r2, r2, #1
 8004d32:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8004d34:	4770      	bx	lr
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	e000e100 	.word	0xe000e100

08004d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004d3e:	4a54      	ldr	r2, [pc, #336]	; (8004e90 <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d40:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004d42:	1882      	adds	r2, r0, r2
 8004d44:	1e54      	subs	r4, r2, #1
 8004d46:	41a2      	sbcs	r2, r4
{
 8004d48:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d4a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8004d4c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004d4e:	3205      	adds	r2, #5
 8004d50:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d52:	9a03      	ldr	r2, [sp, #12]
 8004d54:	40da      	lsrs	r2, r3
 8004d56:	d101      	bne.n	8004d5c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004d58:	b007      	add	sp, #28
 8004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004d5c:	2501      	movs	r5, #1
 8004d5e:	409d      	lsls	r5, r3
 8004d60:	9a03      	ldr	r2, [sp, #12]
 8004d62:	402a      	ands	r2, r5
 8004d64:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8004d66:	d100      	bne.n	8004d6a <HAL_GPIO_Init+0x2e>
 8004d68:	e08f      	b.n	8004e8a <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004d6a:	684a      	ldr	r2, [r1, #4]
 8004d6c:	9201      	str	r2, [sp, #4]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	9e01      	ldr	r6, [sp, #4]
 8004d72:	4396      	bics	r6, r2
 8004d74:	2e02      	cmp	r6, #2
 8004d76:	d10f      	bne.n	8004d98 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004d7c:	2407      	movs	r4, #7
 8004d7e:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8004d80:	6a17      	ldr	r7, [r2, #32]
 8004d82:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004d84:	220f      	movs	r2, #15
 8004d86:	401c      	ands	r4, r3
 8004d88:	00a4      	lsls	r4, r4, #2
 8004d8a:	40a2      	lsls	r2, r4
 8004d8c:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004d8e:	690a      	ldr	r2, [r1, #16]
 8004d90:	40a2      	lsls	r2, r4
 8004d92:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8004d94:	9a04      	ldr	r2, [sp, #16]
 8004d96:	6217      	str	r7, [r2, #32]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	005c      	lsls	r4, r3, #1
 8004d9c:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d9e:	3e01      	subs	r6, #1
 8004da0:	43d2      	mvns	r2, r2
 8004da2:	2e01      	cmp	r6, #1
 8004da4:	d80d      	bhi.n	8004dc2 <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da6:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8004da8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004daa:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004dac:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dae:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8004db0:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 8004db2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db4:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004db6:	9d01      	ldr	r5, [sp, #4]
 8004db8:	06ed      	lsls	r5, r5, #27
 8004dba:	0fed      	lsrs	r5, r5, #31
 8004dbc:	409d      	lsls	r5, r3
 8004dbe:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8004dc0:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc2:	2603      	movs	r6, #3
 8004dc4:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8004dc6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc8:	4035      	ands	r5, r6
 8004dca:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dcc:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dce:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8004dd0:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 8004dd2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dd4:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004dd6:	688d      	ldr	r5, [r1, #8]
 8004dd8:	40a5      	lsls	r5, r4
 8004dda:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8004ddc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004dde:	9a01      	ldr	r2, [sp, #4]
 8004de0:	00d2      	lsls	r2, r2, #3
 8004de2:	d552      	bpl.n	8004e8a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de4:	2501      	movs	r5, #1
 8004de6:	4c2b      	ldr	r4, [pc, #172]	; (8004e94 <HAL_GPIO_Init+0x158>)
 8004de8:	46ac      	mov	ip, r5
 8004dea:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004dec:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dee:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004df0:	001d      	movs	r5, r3
 8004df2:	4035      	ands	r5, r6
 8004df4:	00ad      	lsls	r5, r5, #2
 8004df6:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df8:	6362      	str	r2, [r4, #52]	; 0x34
 8004dfa:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfc:	089c      	lsrs	r4, r3, #2
 8004dfe:	00a4      	lsls	r4, r4, #2
 8004e00:	18a4      	adds	r4, r4, r2
 8004e02:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004e04:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e06:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004e08:	9204      	str	r2, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e0a:	05ff      	lsls	r7, r7, #23
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	42b8      	cmp	r0, r7
 8004e10:	d010      	beq.n	8004e34 <HAL_GPIO_Init+0xf8>
 8004e12:	4f22      	ldr	r7, [pc, #136]	; (8004e9c <HAL_GPIO_Init+0x160>)
 8004e14:	4662      	mov	r2, ip
 8004e16:	42b8      	cmp	r0, r7
 8004e18:	d00c      	beq.n	8004e34 <HAL_GPIO_Init+0xf8>
 8004e1a:	4f21      	ldr	r7, [pc, #132]	; (8004ea0 <HAL_GPIO_Init+0x164>)
 8004e1c:	1892      	adds	r2, r2, r2
 8004e1e:	42b8      	cmp	r0, r7
 8004e20:	d008      	beq.n	8004e34 <HAL_GPIO_Init+0xf8>
 8004e22:	4f20      	ldr	r7, [pc, #128]	; (8004ea4 <HAL_GPIO_Init+0x168>)
 8004e24:	0032      	movs	r2, r6
 8004e26:	42b8      	cmp	r0, r7
 8004e28:	d004      	beq.n	8004e34 <HAL_GPIO_Init+0xf8>
 8004e2a:	4e1f      	ldr	r6, [pc, #124]	; (8004ea8 <HAL_GPIO_Init+0x16c>)
 8004e2c:	4462      	add	r2, ip
 8004e2e:	42b0      	cmp	r0, r6
 8004e30:	d000      	beq.n	8004e34 <HAL_GPIO_Init+0xf8>
 8004e32:	9a05      	ldr	r2, [sp, #20]
 8004e34:	40aa      	lsls	r2, r5
 8004e36:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e38:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e3a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e3c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 8004e40:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8004e42:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8004e44:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e46:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004e48:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e4a:	03ff      	lsls	r7, r7, #15
 8004e4c:	d401      	bmi.n	8004e52 <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 8004e4e:	0035      	movs	r5, r6
 8004e50:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8004e52:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004e54:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004e56:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e58:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004e5a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e5c:	03bf      	lsls	r7, r7, #14
 8004e5e:	d401      	bmi.n	8004e64 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8004e60:	0035      	movs	r5, r6
 8004e62:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8004e64:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004e66:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004e68:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e6a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004e6c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e6e:	02ff      	lsls	r7, r7, #11
 8004e70:	d401      	bmi.n	8004e76 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8004e72:	0035      	movs	r5, r6
 8004e74:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8004e76:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004e78:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8004e7a:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e7c:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004e7e:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e80:	02bf      	lsls	r7, r7, #10
 8004e82:	d401      	bmi.n	8004e88 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8004e84:	4025      	ands	r5, r4
 8004e86:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004e88:	60d6      	str	r6, [r2, #12]
    position++;
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	e761      	b.n	8004d52 <HAL_GPIO_Init+0x16>
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	afffe400 	.word	0xafffe400
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	50000400 	.word	0x50000400
 8004ea0:	50000800 	.word	0x50000800
 8004ea4:	50000c00 	.word	0x50000c00
 8004ea8:	50001000 	.word	0x50001000
 8004eac:	40010400 	.word	0x40010400

08004eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004eb6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004eb8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004eba:	e7fc      	b.n	8004eb6 <HAL_GPIO_WritePin+0x6>

08004ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004ebe:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	4210      	tst	r0, r2
 8004ec4:	d002      	beq.n	8004ecc <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ec6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ec8:	f006 ff38 	bl	800bd3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed4:	6803      	ldr	r3, [r0, #0]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	0792      	lsls	r2, r2, #30
 8004eda:	d501      	bpl.n	8004ee0 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 8004edc:	2200      	movs	r2, #0
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	6999      	ldr	r1, [r3, #24]
 8004ee4:	4211      	tst	r1, r2
 8004ee6:	d102      	bne.n	8004eee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	619a      	str	r2, [r3, #24]
  }
}
 8004eee:	4770      	bx	lr

08004ef0 <I2C_TransferConfig>:
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004ef0:	6800      	ldr	r0, [r0, #0]
{
 8004ef2:	b530      	push	{r4, r5, lr}
  tmpreg = hi2c->Instance->CR2;
 8004ef4:	6845      	ldr	r5, [r0, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004ef6:	4c06      	ldr	r4, [pc, #24]	; (8004f10 <I2C_TransferConfig+0x20>)

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004ef8:	0412      	lsls	r2, r2, #16
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004efa:	402c      	ands	r4, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004efc:	9d03      	ldr	r5, [sp, #12]
 8004efe:	0589      	lsls	r1, r1, #22
 8004f00:	432b      	orrs	r3, r5
 8004f02:	431a      	orrs	r2, r3
 8004f04:	0d89      	lsrs	r1, r1, #22
 8004f06:	430a      	orrs	r2, r1
 8004f08:	4322      	orrs	r2, r4
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8004f0a:	6042      	str	r2, [r0, #4]
}
 8004f0c:	bd30      	pop	{r4, r5, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	fc009800 	.word	0xfc009800

08004f14 <I2C_WaitOnFlagUntilTimeout>:
{
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	0004      	movs	r4, r0
 8004f18:	000e      	movs	r6, r1
 8004f1a:	0017      	movs	r7, r2
 8004f1c:	001d      	movs	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	6993      	ldr	r3, [r2, #24]
 8004f22:	4033      	ands	r3, r6
 8004f24:	1b9b      	subs	r3, r3, r6
 8004f26:	4259      	negs	r1, r3
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e00e      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8004f32:	1c6b      	adds	r3, r5, #1
 8004f34:	d0f4      	beq.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	d10b      	bne.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State= HAL_I2C_STATE_READY;
 8004f3a:	0023      	movs	r3, r4
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	3341      	adds	r3, #65	; 0x41
 8004f40:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	0022      	movs	r2, r4
 8004f44:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004f46:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8004f4a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8004f4e:	7023      	strb	r3, [r4, #0]
}
 8004f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f52:	f7ff fc19 	bl	8004788 <HAL_GetTick>
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	1ac0      	subs	r0, r0, r3
 8004f5a:	42a8      	cmp	r0, r5
 8004f5c:	d9df      	bls.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0xa>
 8004f5e:	e7ec      	b.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x26>

08004f60 <I2C_IsAcknowledgeFailed>:
{
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f62:	6803      	ldr	r3, [r0, #0]
{
 8004f64:	0004      	movs	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f66:	6998      	ldr	r0, [r3, #24]
 8004f68:	2310      	movs	r3, #16
{
 8004f6a:	000e      	movs	r6, r1
 8004f6c:	0017      	movs	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6e:	4018      	ands	r0, r3
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f70:	2520      	movs	r5, #32
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d115      	bne.n	8004fa2 <I2C_IsAcknowledgeFailed+0x42>
}
 8004f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8004f78:	1c72      	adds	r2, r6, #1
 8004f7a:	d013      	beq.n	8004fa4 <I2C_IsAcknowledgeFailed+0x44>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8004f7c:	2e00      	cmp	r6, #0
 8004f7e:	d004      	beq.n	8004f8a <I2C_IsAcknowledgeFailed+0x2a>
 8004f80:	f7ff fc02 	bl	8004788 <HAL_GetTick>
 8004f84:	1bc0      	subs	r0, r0, r7
 8004f86:	4286      	cmp	r6, r0
 8004f88:	d20b      	bcs.n	8004fa2 <I2C_IsAcknowledgeFailed+0x42>
          hi2c->State= HAL_I2C_STATE_READY;
 8004f8a:	0023      	movs	r3, r4
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	3341      	adds	r3, #65	; 0x41
 8004f90:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	0022      	movs	r2, r4
 8004f94:	2300      	movs	r3, #0
 8004f96:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8004f98:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 8004f9c:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8004f9e:	7023      	strb	r3, [r4, #0]
 8004fa0:	e7e9      	b.n	8004f76 <I2C_IsAcknowledgeFailed+0x16>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	422a      	tst	r2, r5
 8004fa8:	d0e6      	beq.n	8004f78 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004faa:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8004fac:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fae:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004fb2:	f7ff ff8f 	bl	8004ed4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	4908      	ldr	r1, [pc, #32]	; (8004fdc <I2C_IsAcknowledgeFailed+0x7c>)
 8004fba:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 8004fbc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004fbe:	400b      	ands	r3, r1
 8004fc0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8004fc6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	0022      	movs	r2, r4
    hi2c->State= HAL_I2C_STATE_READY;
 8004fca:	3341      	adds	r3, #65	; 0x41
 8004fcc:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8004fd2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8004fd6:	7023      	strb	r3, [r4, #0]
 8004fd8:	e7cd      	b.n	8004f76 <I2C_IsAcknowledgeFailed+0x16>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	fe00e800 	.word	0xfe00e800

08004fe0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	0004      	movs	r4, r0
 8004fe4:	000d      	movs	r5, r1
 8004fe6:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fe8:	2702      	movs	r7, #2
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	423b      	tst	r3, r7
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e018      	b.n	8005028 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff6:	0032      	movs	r2, r6
 8004ff8:	0029      	movs	r1, r5
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f7ff ffb0 	bl	8004f60 <I2C_IsAcknowledgeFailed>
 8005000:	2800      	cmp	r0, #0
 8005002:	d118      	bne.n	8005036 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 8005004:	1c6b      	adds	r3, r5, #1
 8005006:	d0f0      	beq.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8005008:	2d00      	cmp	r5, #0
 800500a:	d10e      	bne.n	800502a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800500c:	2220      	movs	r2, #32
 800500e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005010:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005012:	4313      	orrs	r3, r2
 8005014:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8005016:	0023      	movs	r3, r4
 8005018:	3341      	adds	r3, #65	; 0x41
 800501a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	0022      	movs	r2, r4
 800501e:	2300      	movs	r3, #0
 8005020:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8005022:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8005026:	7023      	strb	r3, [r4, #0]
}
 8005028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800502a:	f7ff fbad 	bl	8004788 <HAL_GetTick>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	42a8      	cmp	r0, r5
 8005032:	d9da      	bls.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8005034:	e7ea      	b.n	800500c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
 8005038:	e7f6      	b.n	8005028 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
	...

0800503c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	0004      	movs	r4, r0
 8005040:	000d      	movs	r5, r1
 8005042:	0017      	movs	r7, r2
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005044:	2620      	movs	r6, #32
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005046:	2204      	movs	r2, #4
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4213      	tst	r3, r2
 800504e:	d001      	beq.n	8005054 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
  return HAL_OK;
 8005050:	2000      	movs	r0, #0
 8005052:	e025      	b.n	80050a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005054:	003a      	movs	r2, r7
 8005056:	0029      	movs	r1, r5
 8005058:	0020      	movs	r0, r4
 800505a:	f7ff ff81 	bl	8004f60 <I2C_IsAcknowledgeFailed>
 800505e:	2800      	cmp	r0, #0
 8005060:	d10f      	bne.n	8005082 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	4232      	tst	r2, r6
 8005068:	d00d      	beq.n	8005086 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506a:	61de      	str	r6, [r3, #28]
      I2C_RESET_CR2(hi2c);
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	4910      	ldr	r1, [pc, #64]	; (80050b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>)
 8005070:	400a      	ands	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
      hi2c->State= HAL_I2C_STATE_READY;
 8005074:	0023      	movs	r3, r4
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005076:	6460      	str	r0, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8005078:	3341      	adds	r3, #65	; 0x41
      __HAL_UNLOCK(hi2c);
 800507a:	3440      	adds	r4, #64	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800507c:	701e      	strb	r6, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	7058      	strb	r0, [r3, #1]
      __HAL_UNLOCK(hi2c);
 8005080:	7020      	strb	r0, [r4, #0]
      return HAL_ERROR;
 8005082:	2001      	movs	r0, #1
 8005084:	e00c      	b.n	80050a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8005086:	2d00      	cmp	r5, #0
 8005088:	d10b      	bne.n	80050a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	2220      	movs	r2, #32
 800508c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800508e:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	4313      	orrs	r3, r2
 8005092:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8005094:	0023      	movs	r3, r4
 8005096:	3341      	adds	r3, #65	; 0x41
 8005098:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	3440      	adds	r4, #64	; 0x40
 800509e:	7023      	strb	r3, [r4, #0]
}
 80050a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80050a2:	f7ff fb71 	bl	8004788 <HAL_GetTick>
 80050a6:	1bc0      	subs	r0, r0, r7
 80050a8:	42a8      	cmp	r0, r5
 80050aa:	d9cc      	bls.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 80050ac:	e7ed      	b.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	fe00e800 	.word	0xfe00e800

080050b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	0004      	movs	r4, r0
 80050b8:	000d      	movs	r5, r1
 80050ba:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050bc:	2720      	movs	r7, #32
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	423b      	tst	r3, r7
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80050c6:	2000      	movs	r0, #0
 80050c8:	e016      	b.n	80050f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	0032      	movs	r2, r6
 80050cc:	0029      	movs	r1, r5
 80050ce:	0020      	movs	r0, r4
 80050d0:	f7ff ff46 	bl	8004f60 <I2C_IsAcknowledgeFailed>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d116      	bne.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80050d8:	2d00      	cmp	r5, #0
 80050da:	d10e      	bne.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050dc:	2220      	movs	r2, #32
 80050de:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80050e0:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e2:	4313      	orrs	r3, r2
 80050e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80050e6:	0023      	movs	r3, r4
 80050e8:	3341      	adds	r3, #65	; 0x41
 80050ea:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	0022      	movs	r2, r4
 80050ee:	2300      	movs	r3, #0
 80050f0:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80050f2:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80050f6:	7023      	strb	r3, [r4, #0]
}
 80050f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80050fa:	f7ff fb45 	bl	8004788 <HAL_GetTick>
 80050fe:	1b80      	subs	r0, r0, r6
 8005100:	42a8      	cmp	r0, r5
 8005102:	d9dc      	bls.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8005104:	e7ea      	b.n	80050dc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8005106:	2001      	movs	r0, #1
 8005108:	e7f6      	b.n	80050f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

0800510c <HAL_I2C_Init>:
{
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005110:	2001      	movs	r0, #1
  if(hi2c == NULL)
 8005112:	2c00      	cmp	r4, #0
 8005114:	d03f      	beq.n	8005196 <HAL_I2C_Init+0x8a>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	0025      	movs	r5, r4
 8005118:	3541      	adds	r5, #65	; 0x41
 800511a:	782b      	ldrb	r3, [r5, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	0022      	movs	r2, r4
 8005124:	3240      	adds	r2, #64	; 0x40
 8005126:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8005128:	0020      	movs	r0, r4
 800512a:	f006 fda3 	bl	800bc74 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800512e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005130:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005132:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8005134:	6823      	ldr	r3, [r4, #0]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005136:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68a6      	ldr	r6, [r4, #8]
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_I2C_Init+0xa0>)
 8005144:	400a      	ands	r2, r1
 8005146:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_I2C_Init+0xa4>)
 800514c:	4011      	ands	r1, r2
 800514e:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005150:	2801      	cmp	r0, #1
 8005152:	d121      	bne.n	8005198 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	0209      	lsls	r1, r1, #8
 8005158:	4331      	orrs	r1, r6
 800515a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800515c:	6858      	ldr	r0, [r3, #4]
 800515e:	4915      	ldr	r1, [pc, #84]	; (80051b4 <HAL_I2C_Init+0xa8>)
 8005160:	4301      	orrs	r1, r0
 8005162:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005164:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005166:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005168:	400a      	ands	r2, r1
 800516a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800516c:	6961      	ldr	r1, [r4, #20]
 800516e:	6922      	ldr	r2, [r4, #16]
 8005170:	430a      	orrs	r2, r1
 8005172:	69a1      	ldr	r1, [r4, #24]
 8005174:	0209      	lsls	r1, r1, #8
 8005176:	430a      	orrs	r2, r1
 8005178:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	69e2      	ldr	r2, [r4, #28]
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005182:	2201      	movs	r2, #1
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800518a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800518e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005190:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	3442      	adds	r4, #66	; 0x42
 8005194:	7020      	strb	r0, [r4, #0]
}
 8005196:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005198:	2184      	movs	r1, #132	; 0x84
 800519a:	0209      	lsls	r1, r1, #8
 800519c:	4331      	orrs	r1, r6
 800519e:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051a0:	2802      	cmp	r0, #2
 80051a2:	d1db      	bne.n	800515c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	0109      	lsls	r1, r1, #4
 80051a8:	6059      	str	r1, [r3, #4]
 80051aa:	e7d7      	b.n	800515c <HAL_I2C_Init+0x50>
 80051ac:	f0ffffff 	.word	0xf0ffffff
 80051b0:	ffff7fff 	.word	0xffff7fff
 80051b4:	02008000 	.word	0x02008000

080051b8 <HAL_I2C_Master_Transmit>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051ba:	0005      	movs	r5, r0
{
 80051bc:	b087      	sub	sp, #28
 80051be:	9103      	str	r1, [sp, #12]
 80051c0:	9204      	str	r2, [sp, #16]
 80051c2:	9305      	str	r3, [sp, #20]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051c4:	3541      	adds	r5, #65	; 0x41
 80051c6:	782b      	ldrb	r3, [r5, #0]
{
 80051c8:	0004      	movs	r4, r0
    return HAL_BUSY;
 80051ca:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d156      	bne.n	800527e <HAL_I2C_Master_Transmit+0xc6>
    __HAL_LOCK(hi2c);
 80051d0:	0023      	movs	r3, r4
 80051d2:	3340      	adds	r3, #64	; 0x40
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	2a01      	cmp	r2, #1
 80051d8:	d051      	beq.n	800527e <HAL_I2C_Master_Transmit+0xc6>
 80051da:	2601      	movs	r6, #1
 80051dc:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80051de:	f7ff fad3 	bl	8004788 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051e2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80051e4:	0007      	movs	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051e6:	9000      	str	r0, [sp, #0]
 80051e8:	2319      	movs	r3, #25
 80051ea:	0032      	movs	r2, r6
 80051ec:	0209      	lsls	r1, r1, #8
 80051ee:	0020      	movs	r0, r4
 80051f0:	f7ff fe90 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d141      	bne.n	800527c <HAL_I2C_Master_Transmit+0xc4>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051f8:	2321      	movs	r3, #33	; 0x21
 80051fa:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051fc:	3b11      	subs	r3, #17
 80051fe:	19ad      	adds	r5, r5, r6
 8005200:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8005202:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005204:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005206:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005208:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800520a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800520c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800520e:	2380      	movs	r3, #128	; 0x80
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005210:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	2aff      	cmp	r2, #255	; 0xff
 8005216:	d921      	bls.n	800525c <HAL_I2C_Master_Transmit+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005222:	9903      	ldr	r1, [sp, #12]
 8005224:	0020      	movs	r0, r4
 8005226:	f7ff fe63 	bl	8004ef0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800522a:	26ff      	movs	r6, #255	; 0xff
    while(hi2c->XferCount > 0U)
 800522c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522e:	003a      	movs	r2, r7
 8005230:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005232:	0020      	movs	r0, r4
    while(hi2c->XferCount > 0U)
 8005234:	2b00      	cmp	r3, #0
 8005236:	d119      	bne.n	800526c <HAL_I2C_Master_Transmit+0xb4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005238:	f7ff ff3c 	bl	80050b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800523c:	2800      	cmp	r0, #0
 800523e:	d119      	bne.n	8005274 <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005240:	2120      	movs	r1, #32
 8005242:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005244:	4e27      	ldr	r6, [pc, #156]	; (80052e4 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005246:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4032      	ands	r2, r6
 800524c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800524e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8005250:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	3341      	adds	r3, #65	; 0x41
 8005254:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005256:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8005258:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800525a:	e010      	b.n	800527e <HAL_I2C_Master_Transmit+0xc6>
      hi2c->XferSize = hi2c->XferCount;
 800525c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800525e:	b292      	uxth	r2, r2
 8005260:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	049b      	lsls	r3, r3, #18
 800526a:	e7da      	b.n	8005222 <HAL_I2C_Master_Transmit+0x6a>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526c:	f7ff feb8 	bl	8004fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005270:	2800      	cmp	r0, #0
 8005272:	d006      	beq.n	8005282 <HAL_I2C_Master_Transmit+0xca>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005274:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8005276:	2001      	movs	r0, #1
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005278:	2b04      	cmp	r3, #4
 800527a:	d000      	beq.n	800527e <HAL_I2C_Master_Transmit+0xc6>
          return HAL_TIMEOUT;
 800527c:	2003      	movs	r0, #3
}
 800527e:	b007      	add	sp, #28
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8005282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	6262      	str	r2, [r4, #36]	; 0x24
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800528e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005290:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005292:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005294:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005296:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005298:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800529a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800529c:	8522      	strh	r2, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800529e:	2a00      	cmp	r2, #0
 80052a0:	d1c4      	bne.n	800522c <HAL_I2C_Master_Transmit+0x74>
 80052a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0c1      	beq.n	800522c <HAL_I2C_Master_Transmit+0x74>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052a8:	9700      	str	r7, [sp, #0]
 80052aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0020      	movs	r0, r4
 80052b0:	f7ff fe30 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d1e1      	bne.n	800527c <HAL_I2C_Master_Transmit+0xc4>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052ba:	2bff      	cmp	r3, #255	; 0xff
 80052bc:	d909      	bls.n	80052d2 <HAL_I2C_Master_Transmit+0x11a>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052be:	2380      	movs	r3, #128	; 0x80
 80052c0:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c2:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052c4:	045b      	lsls	r3, r3, #17
 80052c6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	0020      	movs	r0, r4
 80052cc:	f7ff fe10 	bl	8004ef0 <I2C_TransferConfig>
 80052d0:	e7ac      	b.n	800522c <HAL_I2C_Master_Transmit+0x74>
 80052d2:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80052d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052d6:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80052d8:	b292      	uxth	r2, r2
 80052da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	9000      	str	r0, [sp, #0]
 80052e0:	e7f2      	b.n	80052c8 <HAL_I2C_Master_Transmit+0x110>
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	fe00e800 	.word	0xfe00e800

080052e8 <HAL_I2C_Master_Receive>:
{
 80052e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 80052ea:	0005      	movs	r5, r0
{
 80052ec:	b087      	sub	sp, #28
 80052ee:	9103      	str	r1, [sp, #12]
 80052f0:	9204      	str	r2, [sp, #16]
 80052f2:	9305      	str	r3, [sp, #20]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80052f4:	3541      	adds	r5, #65	; 0x41
 80052f6:	782b      	ldrb	r3, [r5, #0]
{
 80052f8:	0004      	movs	r4, r0
    return HAL_BUSY;
 80052fa:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d156      	bne.n	80053ae <HAL_I2C_Master_Receive+0xc6>
    __HAL_LOCK(hi2c);
 8005300:	0023      	movs	r3, r4
 8005302:	3340      	adds	r3, #64	; 0x40
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	2a01      	cmp	r2, #1
 8005308:	d051      	beq.n	80053ae <HAL_I2C_Master_Receive+0xc6>
 800530a:	2601      	movs	r6, #1
 800530c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800530e:	f7ff fa3b 	bl	8004788 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005312:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005314:	0007      	movs	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005316:	9000      	str	r0, [sp, #0]
 8005318:	2319      	movs	r3, #25
 800531a:	0032      	movs	r2, r6
 800531c:	0209      	lsls	r1, r1, #8
 800531e:	0020      	movs	r0, r4
 8005320:	f7ff fdf8 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8005324:	2800      	cmp	r0, #0
 8005326:	d141      	bne.n	80053ac <HAL_I2C_Master_Receive+0xc4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005328:	2322      	movs	r3, #34	; 0x22
 800532a:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800532c:	3b12      	subs	r3, #18
 800532e:	19ad      	adds	r5, r5, r6
 8005330:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8005332:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005334:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005336:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005338:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800533a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800533c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800533e:	2390      	movs	r3, #144	; 0x90
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005340:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005342:	019b      	lsls	r3, r3, #6
 8005344:	2aff      	cmp	r2, #255	; 0xff
 8005346:	d921      	bls.n	800538c <HAL_I2C_Master_Receive+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005348:	22ff      	movs	r2, #255	; 0xff
 800534a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005352:	9903      	ldr	r1, [sp, #12]
 8005354:	0020      	movs	r0, r4
 8005356:	f7ff fdcb 	bl	8004ef0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800535a:	26ff      	movs	r6, #255	; 0xff
    while(hi2c->XferCount > 0U)
 800535c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800535e:	003a      	movs	r2, r7
 8005360:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005362:	0020      	movs	r0, r4
    while(hi2c->XferCount > 0U)
 8005364:	2b00      	cmp	r3, #0
 8005366:	d119      	bne.n	800539c <HAL_I2C_Master_Receive+0xb4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	f7ff fea4 	bl	80050b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800536c:	2800      	cmp	r0, #0
 800536e:	d119      	bne.n	80053a4 <HAL_I2C_Master_Receive+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	2120      	movs	r1, #32
 8005372:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005374:	4e27      	ldr	r6, [pc, #156]	; (8005414 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005376:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4032      	ands	r2, r6
 800537c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800537e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8005380:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005382:	3341      	adds	r3, #65	; 0x41
 8005384:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005386:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8005388:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800538a:	e010      	b.n	80053ae <HAL_I2C_Master_Receive+0xc6>
      hi2c->XferSize = hi2c->XferCount;
 800538c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800538e:	b292      	uxth	r2, r2
 8005390:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	049b      	lsls	r3, r3, #18
 800539a:	e7da      	b.n	8005352 <HAL_I2C_Master_Receive+0x6a>
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539c:	f7ff fe4e 	bl	800503c <I2C_WaitOnRXNEFlagUntilTimeout>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d006      	beq.n	80053b2 <HAL_I2C_Master_Receive+0xca>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80053a6:	2001      	movs	r0, #1
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d000      	beq.n	80053ae <HAL_I2C_Master_Receive+0xc6>
          return HAL_TIMEOUT;
 80053ac:	2003      	movs	r0, #3
}
 80053ae:	b007      	add	sp, #28
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	6261      	str	r1, [r4, #36]	; 0x24
 80053bc:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80053be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80053c2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80053c4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80053c6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80053c8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80053ca:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053cc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d1c4      	bne.n	800535c <HAL_I2C_Master_Receive+0x74>
 80053d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0c1      	beq.n	800535c <HAL_I2C_Master_Receive+0x74>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053d8:	9700      	str	r7, [sp, #0]
 80053da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0020      	movs	r0, r4
 80053e0:	f7ff fd98 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1e1      	bne.n	80053ac <HAL_I2C_Master_Receive+0xc4>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d909      	bls.n	8005402 <HAL_I2C_Master_Receive+0x11a>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f2:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053f4:	045b      	lsls	r3, r3, #17
 80053f6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053f8:	9903      	ldr	r1, [sp, #12]
 80053fa:	0020      	movs	r0, r4
 80053fc:	f7ff fd78 	bl	8004ef0 <I2C_TransferConfig>
 8005400:	e7ac      	b.n	800535c <HAL_I2C_Master_Receive+0x74>
 8005402:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8005404:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005406:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8005408:	b292      	uxth	r2, r2
 800540a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	9000      	str	r0, [sp, #0]
 8005410:	e7f2      	b.n	80053f8 <HAL_I2C_Master_Receive+0x110>
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	fe00e800 	.word	0xfe00e800

08005418 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005418:	2110      	movs	r1, #16
 800541a:	4a02      	ldr	r2, [pc, #8]	; (8005424 <HAL_PWR_DisablePVD+0xc>)
 800541c:	6813      	ldr	r3, [r2, #0]
 800541e:	438b      	bics	r3, r1
 8005420:	6013      	str	r3, [r2, #0]
}
 8005422:	4770      	bx	lr
 8005424:	40007000 	.word	0x40007000

08005428 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005428:	b510      	push	{r4, lr}

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800542a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_PWR_EnterSLEEPMode+0x28>)
 800542e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005430:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005432:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8005434:	6010      	str	r0, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005436:	2004      	movs	r0, #4
 8005438:	4a06      	ldr	r2, [pc, #24]	; (8005454 <HAL_PWR_EnterSLEEPMode+0x2c>)
 800543a:	6913      	ldr	r3, [r2, #16]
 800543c:	4383      	bics	r3, r0
 800543e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005440:	2901      	cmp	r1, #1
 8005442:	d101      	bne.n	8005448 <HAL_PWR_EnterSLEEPMode+0x20>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005444:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005446:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8005448:	bf40      	sev
  __ASM volatile ("wfe");
 800544a:	bf20      	wfe
 800544c:	bf20      	wfe
 800544e:	e7fa      	b.n	8005446 <HAL_PWR_EnterSLEEPMode+0x1e>
 8005450:	40007000 	.word	0x40007000
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005458:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800545a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <HAL_PWR_EnterSTOPMode+0x30>)
 800545e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005460:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005462:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8005464:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005466:	2204      	movs	r2, #4
 8005468:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_PWR_EnterSTOPMode+0x34>)
 800546a:	6918      	ldr	r0, [r3, #16]
 800546c:	4302      	orrs	r2, r0
 800546e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005470:	2901      	cmp	r1, #1
 8005472:	d105      	bne.n	8005480 <HAL_PWR_EnterSTOPMode+0x28>
  __ASM volatile ("wfi");
 8005474:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005476:	2104      	movs	r1, #4
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	438a      	bics	r2, r1
 800547c:	611a      	str	r2, [r3, #16]

}
 800547e:	bd10      	pop	{r4, pc}
  __ASM volatile ("sev");
 8005480:	bf40      	sev
  __ASM volatile ("wfe");
 8005482:	bf20      	wfe
 8005484:	bf20      	wfe
 8005486:	e7f6      	b.n	8005476 <HAL_PWR_EnterSTOPMode+0x1e>
 8005488:	40007000 	.word	0x40007000
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	6811      	ldr	r1, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	4770      	bx	lr
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	40007000 	.word	0x40007000

080054a4 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <HAL_PWREx_EnableUltraLowPower+0x10>)
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	6811      	ldr	r1, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6013      	str	r3, [r2, #0]
}
 80054b0:	4770      	bx	lr
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40007000 	.word	0x40007000

080054b8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054b8:	22f0      	movs	r2, #240	; 0xf0
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
{
 80054bc:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054be:	68d9      	ldr	r1, [r3, #12]
 80054c0:	4211      	tst	r1, r2
 80054c2:	d00a      	beq.n	80054da <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054c4:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80054c6:	2401      	movs	r4, #1
 80054c8:	4913      	ldr	r1, [pc, #76]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80054ca:	680a      	ldr	r2, [r1, #0]
 80054cc:	43a2      	bics	r2, r4
 80054ce:	4302      	orrs	r2, r0
 80054d0:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80054d2:	680b      	ldr	r3, [r1, #0]
 80054d4:	4023      	ands	r3, r4
 80054d6:	4058      	eors	r0, r3
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80054d8:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	22c0      	movs	r2, #192	; 0xc0
 80054de:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80054e0:	0549      	lsls	r1, r1, #21
 80054e2:	4c0e      	ldr	r4, [pc, #56]	; (800551c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054e4:	0152      	lsls	r2, r2, #5
 80054e6:	420d      	tst	r5, r1
 80054e8:	d00a      	beq.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x48>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80054ee:	23c0      	movs	r3, #192	; 0xc0
 80054f0:	015b      	lsls	r3, r3, #5
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1e6      	bne.n	80054c4 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80054f8:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054fa:	4243      	negs	r3, r0
 80054fc:	4158      	adcs	r0, r3
 80054fe:	e7e2      	b.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005500:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005502:	4329      	orrs	r1, r5
 8005504:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005506:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005508:	4c06      	ldr	r4, [pc, #24]	; (8005524 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800550a:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800550c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800550e:	4021      	ands	r1, r4
 8005510:	6399      	str	r1, [r3, #56]	; 0x38
 8005512:	e7ec      	b.n	80054ee <RCC_SetFlashLatencyFromMSIRange+0x36>
 8005514:	40021000 	.word	0x40021000
 8005518:	40022000 	.word	0x40022000
 800551c:	40007000 	.word	0x40007000
 8005520:	ffff4000 	.word	0xffff4000
 8005524:	efffffff 	.word	0xefffffff

08005528 <HAL_RCC_OscConfig>:
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	6803      	ldr	r3, [r0, #0]
{
 800552c:	b085      	sub	sp, #20
 800552e:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005530:	07db      	lsls	r3, r3, #31
 8005532:	d44e      	bmi.n	80055d2 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d500      	bpl.n	800553c <HAL_RCC_OscConfig+0x14>
 800553a:	e0a1      	b.n	8005680 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	06db      	lsls	r3, r3, #27
 8005540:	d535      	bpl.n	80055ae <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005542:	230c      	movs	r3, #12
 8005544:	4dbd      	ldr	r5, [pc, #756]	; (800583c <HAL_RCC_OscConfig+0x314>)
 8005546:	68ea      	ldr	r2, [r5, #12]
 8005548:	421a      	tst	r2, r3
 800554a:	d000      	beq.n	800554e <HAL_RCC_OscConfig+0x26>
 800554c:	e0eb      	b.n	8005726 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	059b      	lsls	r3, r3, #22
 8005552:	d502      	bpl.n	800555a <HAL_RCC_OscConfig+0x32>
 8005554:	69e3      	ldr	r3, [r4, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d050      	beq.n	80055fc <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800555a:	22e0      	movs	r2, #224	; 0xe0
 800555c:	686b      	ldr	r3, [r5, #4]
 800555e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005560:	0212      	lsls	r2, r2, #8
 8005562:	4013      	ands	r3, r2
 8005564:	4298      	cmp	r0, r3
 8005566:	d800      	bhi.n	800556a <HAL_RCC_OscConfig+0x42>
 8005568:	e0cb      	b.n	8005702 <HAL_RCC_OscConfig+0x1da>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800556a:	f7ff ffa5 	bl	80054b8 <RCC_SetFlashLatencyFromMSIRange>
 800556e:	2800      	cmp	r0, #0
 8005570:	d144      	bne.n	80055fc <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005572:	686b      	ldr	r3, [r5, #4]
 8005574:	4ab2      	ldr	r2, [pc, #712]	; (8005840 <HAL_RCC_OscConfig+0x318>)
 8005576:	4013      	ands	r3, r2
 8005578:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800557a:	4313      	orrs	r3, r2
 800557c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557e:	686a      	ldr	r2, [r5, #4]
 8005580:	6a23      	ldr	r3, [r4, #32]
 8005582:	0212      	lsls	r2, r2, #8
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	0a12      	lsrs	r2, r2, #8
 8005588:	4313      	orrs	r3, r2
 800558a:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800558c:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800558e:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8005590:	0b59      	lsrs	r1, r3, #13
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	3101      	adds	r1, #1
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800559a:	0612      	lsls	r2, r2, #24
 800559c:	49a9      	ldr	r1, [pc, #676]	; (8005844 <HAL_RCC_OscConfig+0x31c>)
 800559e:	0f12      	lsrs	r2, r2, #28
 80055a0:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80055a2:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80055a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80055a6:	4aa8      	ldr	r2, [pc, #672]	; (8005848 <HAL_RCC_OscConfig+0x320>)
 80055a8:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80055aa:	f006 fb45 	bl	800bc38 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	071b      	lsls	r3, r3, #28
 80055b2:	d500      	bpl.n	80055b6 <HAL_RCC_OscConfig+0x8e>
 80055b4:	e0ee      	b.n	8005794 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	075b      	lsls	r3, r3, #29
 80055ba:	d500      	bpl.n	80055be <HAL_RCC_OscConfig+0x96>
 80055bc:	e111      	b.n	80057e2 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	069b      	lsls	r3, r3, #26
 80055c2:	d500      	bpl.n	80055c6 <HAL_RCC_OscConfig+0x9e>
 80055c4:	e194      	b.n	80058f0 <HAL_RCC_OscConfig+0x3c8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80055c8:	2900      	cmp	r1, #0
 80055ca:	d000      	beq.n	80055ce <HAL_RCC_OscConfig+0xa6>
 80055cc:	e1c4      	b.n	8005958 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80055ce:	2000      	movs	r0, #0
 80055d0:	e015      	b.n	80055fe <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055d2:	210c      	movs	r1, #12
 80055d4:	4d99      	ldr	r5, [pc, #612]	; (800583c <HAL_RCC_OscConfig+0x314>)
 80055d6:	68eb      	ldr	r3, [r5, #12]
 80055d8:	400b      	ands	r3, r1
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d008      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc8>
 80055de:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055e0:	68ea      	ldr	r2, [r5, #12]
 80055e2:	025b      	lsls	r3, r3, #9
 80055e4:	400a      	ands	r2, r1
 80055e6:	428a      	cmp	r2, r1
 80055e8:	d10b      	bne.n	8005602 <HAL_RCC_OscConfig+0xda>
 80055ea:	68ea      	ldr	r2, [r5, #12]
 80055ec:	421a      	tst	r2, r3
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	039b      	lsls	r3, r3, #14
 80055f4:	d59e      	bpl.n	8005534 <HAL_RCC_OscConfig+0xc>
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d19b      	bne.n	8005534 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80055fc:	2001      	movs	r0, #1
}
 80055fe:	b005      	add	sp, #20
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d113      	bne.n	8005630 <HAL_RCC_OscConfig+0x108>
 8005608:	682a      	ldr	r2, [r5, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800560e:	f7ff f8bb 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8005614:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	02b6      	lsls	r6, r6, #10
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	4233      	tst	r3, r6
 800561c:	d000      	beq.n	8005620 <HAL_RCC_OscConfig+0xf8>
 800561e:	e789      	b.n	8005534 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005620:	f7ff f8b2 	bl	8004788 <HAL_GetTick>
 8005624:	4b89      	ldr	r3, [pc, #548]	; (800584c <HAL_RCC_OscConfig+0x324>)
 8005626:	1bc0      	subs	r0, r0, r7
 8005628:	4298      	cmp	r0, r3
 800562a:	d9f5      	bls.n	8005618 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 800562c:	2003      	movs	r0, #3
 800562e:	e7e6      	b.n	80055fe <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005630:	21a0      	movs	r1, #160	; 0xa0
 8005632:	02c9      	lsls	r1, r1, #11
 8005634:	428a      	cmp	r2, r1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x11c>
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	6829      	ldr	r1, [r5, #0]
 800563c:	02d2      	lsls	r2, r2, #11
 800563e:	430a      	orrs	r2, r1
 8005640:	602a      	str	r2, [r5, #0]
 8005642:	e7e1      	b.n	8005608 <HAL_RCC_OscConfig+0xe0>
 8005644:	6829      	ldr	r1, [r5, #0]
 8005646:	4882      	ldr	r0, [pc, #520]	; (8005850 <HAL_RCC_OscConfig+0x328>)
 8005648:	4001      	ands	r1, r0
 800564a:	6029      	str	r1, [r5, #0]
 800564c:	6829      	ldr	r1, [r5, #0]
 800564e:	400b      	ands	r3, r1
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	497f      	ldr	r1, [pc, #508]	; (8005854 <HAL_RCC_OscConfig+0x32c>)
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	400b      	ands	r3, r1
 800565a:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800565c:	2a00      	cmp	r2, #0
 800565e:	d1d6      	bne.n	800560e <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 8005660:	f7ff f892 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005664:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8005666:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005668:	02b6      	lsls	r6, r6, #10
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	4233      	tst	r3, r6
 800566e:	d100      	bne.n	8005672 <HAL_RCC_OscConfig+0x14a>
 8005670:	e760      	b.n	8005534 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005672:	f7ff f889 	bl	8004788 <HAL_GetTick>
 8005676:	4b75      	ldr	r3, [pc, #468]	; (800584c <HAL_RCC_OscConfig+0x324>)
 8005678:	1bc0      	subs	r0, r0, r7
 800567a:	4298      	cmp	r0, r3
 800567c:	d9f5      	bls.n	800566a <HAL_RCC_OscConfig+0x142>
 800567e:	e7d5      	b.n	800562c <HAL_RCC_OscConfig+0x104>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005680:	210c      	movs	r1, #12
 8005682:	4d6e      	ldr	r5, [pc, #440]	; (800583c <HAL_RCC_OscConfig+0x314>)
 8005684:	68ea      	ldr	r2, [r5, #12]
 8005686:	400a      	ands	r2, r1
 8005688:	2a04      	cmp	r2, #4
 800568a:	d006      	beq.n	800569a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800568c:	68eb      	ldr	r3, [r5, #12]
 800568e:	400b      	ands	r3, r1
 8005690:	428b      	cmp	r3, r1
 8005692:	d110      	bne.n	80056b6 <HAL_RCC_OscConfig+0x18e>
 8005694:	68eb      	ldr	r3, [r5, #12]
 8005696:	03db      	lsls	r3, r3, #15
 8005698:	d40d      	bmi.n	80056b6 <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	075b      	lsls	r3, r3, #29
 800569e:	d502      	bpl.n	80056a6 <HAL_RCC_OscConfig+0x17e>
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d1aa      	bne.n	80055fc <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a6:	686a      	ldr	r2, [r5, #4]
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	496b      	ldr	r1, [pc, #428]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	400a      	ands	r2, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	606b      	str	r3, [r5, #4]
 80056b4:	e742      	b.n	800553c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056b6:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056b8:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	d010      	beq.n	80056e0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056be:	2109      	movs	r1, #9
 80056c0:	438b      	bics	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056c6:	f7ff f85f 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ca:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80056cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	4233      	tst	r3, r6
 80056d2:	d1e8      	bne.n	80056a6 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d4:	f7ff f858 	bl	8004788 <HAL_GetTick>
 80056d8:	1bc0      	subs	r0, r0, r7
 80056da:	2802      	cmp	r0, #2
 80056dc:	d9f7      	bls.n	80056ce <HAL_RCC_OscConfig+0x1a6>
 80056de:	e7a5      	b.n	800562c <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI_DISABLE();
 80056e0:	2201      	movs	r2, #1
 80056e2:	4393      	bics	r3, r2
 80056e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056e6:	f7ff f84f 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80056ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	4233      	tst	r3, r6
 80056f2:	d100      	bne.n	80056f6 <HAL_RCC_OscConfig+0x1ce>
 80056f4:	e722      	b.n	800553c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f6:	f7ff f847 	bl	8004788 <HAL_GetTick>
 80056fa:	1bc0      	subs	r0, r0, r7
 80056fc:	2802      	cmp	r0, #2
 80056fe:	d9f6      	bls.n	80056ee <HAL_RCC_OscConfig+0x1c6>
 8005700:	e794      	b.n	800562c <HAL_RCC_OscConfig+0x104>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005702:	686b      	ldr	r3, [r5, #4]
 8005704:	4a4e      	ldr	r2, [pc, #312]	; (8005840 <HAL_RCC_OscConfig+0x318>)
 8005706:	4013      	ands	r3, r2
 8005708:	4303      	orrs	r3, r0
 800570a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800570c:	686a      	ldr	r2, [r5, #4]
 800570e:	6a23      	ldr	r3, [r4, #32]
 8005710:	0212      	lsls	r2, r2, #8
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	0a12      	lsrs	r2, r2, #8
 8005716:	4313      	orrs	r3, r2
 8005718:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800571a:	f7ff fecd 	bl	80054b8 <RCC_SetFlashLatencyFromMSIRange>
 800571e:	2800      	cmp	r0, #0
 8005720:	d100      	bne.n	8005724 <HAL_RCC_OscConfig+0x1fc>
 8005722:	e733      	b.n	800558c <HAL_RCC_OscConfig+0x64>
 8005724:	e76a      	b.n	80055fc <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005726:	69e3      	ldr	r3, [r4, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	682a      	ldr	r2, [r5, #0]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4313      	orrs	r3, r2
 8005734:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005736:	f7ff f827 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800573a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800573c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800573e:	00b6      	lsls	r6, r6, #2
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	4233      	tst	r3, r6
 8005744:	d00d      	beq.n	8005762 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005746:	686b      	ldr	r3, [r5, #4]
 8005748:	4a3d      	ldr	r2, [pc, #244]	; (8005840 <HAL_RCC_OscConfig+0x318>)
 800574a:	4013      	ands	r3, r2
 800574c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800574e:	4313      	orrs	r3, r2
 8005750:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005752:	686a      	ldr	r2, [r5, #4]
 8005754:	6a23      	ldr	r3, [r4, #32]
 8005756:	0212      	lsls	r2, r2, #8
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	0a12      	lsrs	r2, r2, #8
 800575c:	4313      	orrs	r3, r2
 800575e:	606b      	str	r3, [r5, #4]
 8005760:	e725      	b.n	80055ae <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005762:	f7ff f811 	bl	8004788 <HAL_GetTick>
 8005766:	1bc0      	subs	r0, r0, r7
 8005768:	2802      	cmp	r0, #2
 800576a:	d9e9      	bls.n	8005740 <HAL_RCC_OscConfig+0x218>
 800576c:	e75e      	b.n	800562c <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_MSI_DISABLE();
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	4a3a      	ldr	r2, [pc, #232]	; (800585c <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8005772:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8005774:	4013      	ands	r3, r2
 8005776:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005778:	f7ff f806 	bl	8004788 <HAL_GetTick>
 800577c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800577e:	00b6      	lsls	r6, r6, #2
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	4233      	tst	r3, r6
 8005784:	d100      	bne.n	8005788 <HAL_RCC_OscConfig+0x260>
 8005786:	e712      	b.n	80055ae <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005788:	f7fe fffe 	bl	8004788 <HAL_GetTick>
 800578c:	1bc0      	subs	r0, r0, r7
 800578e:	2802      	cmp	r0, #2
 8005790:	d9f6      	bls.n	8005780 <HAL_RCC_OscConfig+0x258>
 8005792:	e74b      	b.n	800562c <HAL_RCC_OscConfig+0x104>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005794:	6962      	ldr	r2, [r4, #20]
 8005796:	2301      	movs	r3, #1
 8005798:	4d28      	ldr	r5, [pc, #160]	; (800583c <HAL_RCC_OscConfig+0x314>)
 800579a:	2a00      	cmp	r2, #0
 800579c:	d010      	beq.n	80057c0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800579e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80057a2:	4313      	orrs	r3, r2
 80057a4:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80057a6:	f7fe ffef 	bl	8004788 <HAL_GetTick>
 80057aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80057ae:	4233      	tst	r3, r6
 80057b0:	d000      	beq.n	80057b4 <HAL_RCC_OscConfig+0x28c>
 80057b2:	e700      	b.n	80055b6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fe ffe8 	bl	8004788 <HAL_GetTick>
 80057b8:	1bc0      	subs	r0, r0, r7
 80057ba:	2802      	cmp	r0, #2
 80057bc:	d9f6      	bls.n	80057ac <HAL_RCC_OscConfig+0x284>
 80057be:	e735      	b.n	800562c <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_DISABLE();
 80057c0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80057c4:	439a      	bics	r2, r3
 80057c6:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80057c8:	f7fe ffde 	bl	8004788 <HAL_GetTick>
 80057cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80057d0:	4233      	tst	r3, r6
 80057d2:	d100      	bne.n	80057d6 <HAL_RCC_OscConfig+0x2ae>
 80057d4:	e6ef      	b.n	80055b6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d6:	f7fe ffd7 	bl	8004788 <HAL_GetTick>
 80057da:	1bc0      	subs	r0, r0, r7
 80057dc:	2802      	cmp	r0, #2
 80057de:	d9f6      	bls.n	80057ce <HAL_RCC_OscConfig+0x2a6>
 80057e0:	e724      	b.n	800562c <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80057e4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4d15      	ldr	r5, [pc, #84]	; (800583c <HAL_RCC_OscConfig+0x314>)
 80057e8:	055b      	lsls	r3, r3, #21
 80057ea:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80057ec:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ee:	421a      	tst	r2, r3
 80057f0:	d104      	bne.n	80057fc <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80057f4:	4313      	orrs	r3, r2
 80057f6:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 80057f8:	2301      	movs	r3, #1
 80057fa:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	2780      	movs	r7, #128	; 0x80
 80057fe:	4e18      	ldr	r6, [pc, #96]	; (8005860 <HAL_RCC_OscConfig+0x338>)
 8005800:	007f      	lsls	r7, r7, #1
 8005802:	6833      	ldr	r3, [r6, #0]
 8005804:	423b      	tst	r3, r7
 8005806:	d008      	beq.n	800581a <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	0052      	lsls	r2, r2, #1
 800580e:	4293      	cmp	r3, r2
 8005810:	d128      	bne.n	8005864 <HAL_RCC_OscConfig+0x33c>
 8005812:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005814:	4313      	orrs	r3, r2
 8005816:	652b      	str	r3, [r5, #80]	; 0x50
 8005818:	e049      	b.n	80058ae <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581a:	6833      	ldr	r3, [r6, #0]
 800581c:	433b      	orrs	r3, r7
 800581e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005820:	f7fe ffb2 	bl	8004788 <HAL_GetTick>
 8005824:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	6833      	ldr	r3, [r6, #0]
 8005828:	423b      	tst	r3, r7
 800582a:	d1ed      	bne.n	8005808 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582c:	f7fe ffac 	bl	8004788 <HAL_GetTick>
 8005830:	9b01      	ldr	r3, [sp, #4]
 8005832:	1ac0      	subs	r0, r0, r3
 8005834:	2864      	cmp	r0, #100	; 0x64
 8005836:	d9f6      	bls.n	8005826 <HAL_RCC_OscConfig+0x2fe>
 8005838:	e6f8      	b.n	800562c <HAL_RCC_OscConfig+0x104>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	40021000 	.word	0x40021000
 8005840:	ffff1fff 	.word	0xffff1fff
 8005844:	0800d035 	.word	0x0800d035
 8005848:	20000030 	.word	0x20000030
 800584c:	00001388 	.word	0x00001388
 8005850:	fffeffff 	.word	0xfffeffff
 8005854:	fffbffff 	.word	0xfffbffff
 8005858:	ffffe0ff 	.word	0xffffe0ff
 800585c:	fffffeff 	.word	0xfffffeff
 8005860:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005864:	2b00      	cmp	r3, #0
 8005866:	d116      	bne.n	8005896 <HAL_RCC_OscConfig+0x36e>
 8005868:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800586a:	4a60      	ldr	r2, [pc, #384]	; (80059ec <HAL_RCC_OscConfig+0x4c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586c:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800586e:	4013      	ands	r3, r2
 8005870:	652b      	str	r3, [r5, #80]	; 0x50
 8005872:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005874:	4a5e      	ldr	r2, [pc, #376]	; (80059f0 <HAL_RCC_OscConfig+0x4c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005876:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005878:	4013      	ands	r3, r2
 800587a:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800587c:	f7fe ff84 	bl	8004788 <HAL_GetTick>
 8005880:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005882:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005884:	423b      	tst	r3, r7
 8005886:	d02a      	beq.n	80058de <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005888:	f7fe ff7e 	bl	8004788 <HAL_GetTick>
 800588c:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <HAL_RCC_OscConfig+0x4cc>)
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	4298      	cmp	r0, r3
 8005892:	d9f6      	bls.n	8005882 <HAL_RCC_OscConfig+0x35a>
 8005894:	e6ca      	b.n	800562c <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005896:	21a0      	movs	r1, #160	; 0xa0
 8005898:	00c9      	lsls	r1, r1, #3
 800589a:	428b      	cmp	r3, r1
 800589c:	d10d      	bne.n	80058ba <HAL_RCC_OscConfig+0x392>
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	430b      	orrs	r3, r1
 80058a6:	652b      	str	r3, [r5, #80]	; 0x50
 80058a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80058aa:	431a      	orrs	r2, r3
 80058ac:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80058ae:	f7fe ff6b 	bl	8004788 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b2:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 80058b4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	00bf      	lsls	r7, r7, #2
 80058b8:	e00e      	b.n	80058d8 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80058bc:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <HAL_RCC_OscConfig+0x4c4>)
 80058be:	4013      	ands	r3, r2
 80058c0:	652b      	str	r3, [r5, #80]	; 0x50
 80058c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80058c4:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_RCC_OscConfig+0x4c8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	e7a5      	b.n	8005816 <HAL_RCC_OscConfig+0x2ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fe ff5d 	bl	8004788 <HAL_GetTick>
 80058ce:	4b49      	ldr	r3, [pc, #292]	; (80059f4 <HAL_RCC_OscConfig+0x4cc>)
 80058d0:	1b80      	subs	r0, r0, r6
 80058d2:	4298      	cmp	r0, r3
 80058d4:	d900      	bls.n	80058d8 <HAL_RCC_OscConfig+0x3b0>
 80058d6:	e6a9      	b.n	800562c <HAL_RCC_OscConfig+0x104>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80058da:	423b      	tst	r3, r7
 80058dc:	d0f5      	beq.n	80058ca <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80058de:	9b00      	ldr	r3, [sp, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d000      	beq.n	80058e6 <HAL_RCC_OscConfig+0x3be>
 80058e4:	e66b      	b.n	80055be <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058e8:	4a43      	ldr	r2, [pc, #268]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	63ab      	str	r3, [r5, #56]	; 0x38
 80058ee:	e666      	b.n	80055be <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058f0:	69a1      	ldr	r1, [r4, #24]
 80058f2:	2301      	movs	r3, #1
 80058f4:	4d41      	ldr	r5, [pc, #260]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 80058f6:	4a42      	ldr	r2, [pc, #264]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d018      	beq.n	800592e <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80058fc:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80058fe:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8005900:	4319      	orrs	r1, r3
 8005902:	60a9      	str	r1, [r5, #8]
 8005904:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8005906:	430b      	orrs	r3, r1
 8005908:	636b      	str	r3, [r5, #52]	; 0x34
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	6a11      	ldr	r1, [r2, #32]
 800590e:	019b      	lsls	r3, r3, #6
 8005910:	430b      	orrs	r3, r1
 8005912:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005914:	f7fe ff38 	bl	8004788 <HAL_GetTick>
 8005918:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800591a:	68ab      	ldr	r3, [r5, #8]
 800591c:	4233      	tst	r3, r6
 800591e:	d000      	beq.n	8005922 <HAL_RCC_OscConfig+0x3fa>
 8005920:	e651      	b.n	80055c6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005922:	f7fe ff31 	bl	8004788 <HAL_GetTick>
 8005926:	1bc0      	subs	r0, r0, r7
 8005928:	2802      	cmp	r0, #2
 800592a:	d9f6      	bls.n	800591a <HAL_RCC_OscConfig+0x3f2>
 800592c:	e67e      	b.n	800562c <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI48_DISABLE();
 800592e:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005930:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8005932:	4399      	bics	r1, r3
 8005934:	60a9      	str	r1, [r5, #8]
 8005936:	6a13      	ldr	r3, [r2, #32]
 8005938:	4932      	ldr	r1, [pc, #200]	; (8005a04 <HAL_RCC_OscConfig+0x4dc>)
 800593a:	400b      	ands	r3, r1
 800593c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800593e:	f7fe ff23 	bl	8004788 <HAL_GetTick>
 8005942:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005944:	68ab      	ldr	r3, [r5, #8]
 8005946:	4233      	tst	r3, r6
 8005948:	d100      	bne.n	800594c <HAL_RCC_OscConfig+0x424>
 800594a:	e63c      	b.n	80055c6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594c:	f7fe ff1c 	bl	8004788 <HAL_GetTick>
 8005950:	1bc0      	subs	r0, r0, r7
 8005952:	2802      	cmp	r0, #2
 8005954:	d9f6      	bls.n	8005944 <HAL_RCC_OscConfig+0x41c>
 8005956:	e669      	b.n	800562c <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005958:	220c      	movs	r2, #12
 800595a:	4d28      	ldr	r5, [pc, #160]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
      return HAL_ERROR;
 800595c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800595e:	68eb      	ldr	r3, [r5, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	4293      	cmp	r3, r2
 8005964:	d100      	bne.n	8005968 <HAL_RCC_OscConfig+0x440>
 8005966:	e64a      	b.n	80055fe <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	4a27      	ldr	r2, [pc, #156]	; (8005a08 <HAL_RCC_OscConfig+0x4e0>)
 800596c:	4013      	ands	r3, r2
 800596e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005970:	2902      	cmp	r1, #2
 8005972:	d12b      	bne.n	80059cc <HAL_RCC_OscConfig+0x4a4>
        tickstart = HAL_GetTick();
 8005974:	f7fe ff08 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005978:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800597a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800597c:	04b6      	lsls	r6, r6, #18
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	4233      	tst	r3, r6
 8005982:	d11d      	bne.n	80059c0 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005984:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005988:	68ea      	ldr	r2, [r5, #12]
 800598a:	430b      	orrs	r3, r1
 800598c:	491f      	ldr	r1, [pc, #124]	; (8005a0c <HAL_RCC_OscConfig+0x4e4>)
 800598e:	400a      	ands	r2, r1
 8005990:	4313      	orrs	r3, r2
 8005992:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005994:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005996:	4313      	orrs	r3, r2
 8005998:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	682a      	ldr	r2, [r5, #0]
 800599e:	045b      	lsls	r3, r3, #17
 80059a0:	4313      	orrs	r3, r2
 80059a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80059a4:	f7fe fef0 	bl	8004788 <HAL_GetTick>
 80059a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059aa:	04a4      	lsls	r4, r4, #18
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	4223      	tst	r3, r4
 80059b0:	d000      	beq.n	80059b4 <HAL_RCC_OscConfig+0x48c>
 80059b2:	e60c      	b.n	80055ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe fee8 	bl	8004788 <HAL_GetTick>
 80059b8:	1b80      	subs	r0, r0, r6
 80059ba:	2802      	cmp	r0, #2
 80059bc:	d9f6      	bls.n	80059ac <HAL_RCC_OscConfig+0x484>
 80059be:	e635      	b.n	800562c <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c0:	f7fe fee2 	bl	8004788 <HAL_GetTick>
 80059c4:	1bc0      	subs	r0, r0, r7
 80059c6:	2802      	cmp	r0, #2
 80059c8:	d9d9      	bls.n	800597e <HAL_RCC_OscConfig+0x456>
 80059ca:	e62f      	b.n	800562c <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 80059cc:	f7fe fedc 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d0:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 80059d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d4:	04a4      	lsls	r4, r4, #18
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	4223      	tst	r3, r4
 80059da:	d100      	bne.n	80059de <HAL_RCC_OscConfig+0x4b6>
 80059dc:	e5f7      	b.n	80055ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fe fed3 	bl	8004788 <HAL_GetTick>
 80059e2:	1b80      	subs	r0, r0, r6
 80059e4:	2802      	cmp	r0, #2
 80059e6:	d9f6      	bls.n	80059d6 <HAL_RCC_OscConfig+0x4ae>
 80059e8:	e620      	b.n	800562c <HAL_RCC_OscConfig+0x104>
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	fffffeff 	.word	0xfffffeff
 80059f0:	fffffbff 	.word	0xfffffbff
 80059f4:	00001388 	.word	0x00001388
 80059f8:	efffffff 	.word	0xefffffff
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40010000 	.word	0x40010000
 8005a04:	ffffdfff 	.word	0xffffdfff
 8005a08:	feffffff 	.word	0xfeffffff
 8005a0c:	ff02ffff 	.word	0xff02ffff

08005a10 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8005a10:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005a12:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8005a14:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8005a16:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	2a08      	cmp	r2, #8
 8005a1c:	d029      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x62>
 8005a1e:	2a0c      	cmp	r2, #12
 8005a20:	d009      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x26>
 8005a22:	2a04      	cmp	r2, #4
 8005a24:	d11d      	bne.n	8005a62 <HAL_RCC_GetSysClockFreq+0x52>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005a26:	6818      	ldr	r0, [r3, #0]
        sysclockfreq =  HSI_VALUE;
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005a2a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005a2c:	17c0      	asrs	r0, r0, #31
 8005a2e:	4018      	ands	r0, r3
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x70>)
 8005a32:	18c0      	adds	r0, r0, r3
}
 8005a34:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005a36:	028a      	lsls	r2, r1, #10
 8005a38:	4812      	ldr	r0, [pc, #72]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x74>)
 8005a3a:	0f12      	lsrs	r2, r2, #28
 8005a3c:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8005a3e:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a40:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8005a42:	0f89      	lsrs	r1, r1, #30
 8005a44:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a46:	03c0      	lsls	r0, r0, #15
 8005a48:	d504      	bpl.n	8005a54 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8005a4a:	480f      	ldr	r0, [pc, #60]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8005a4c:	4350      	muls	r0, r2
 8005a4e:	f7fa fb6f 	bl	8000130 <__udivsi3>
 8005a52:	e7ef      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	06db      	lsls	r3, r3, #27
 8005a58:	d501      	bpl.n	8005a5e <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005a5a:	480c      	ldr	r0, [pc, #48]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x7c>)
 8005a5c:	e7f6      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8005a5e:	4808      	ldr	r0, [pc, #32]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x70>)
 8005a60:	e7f4      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005a62:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8005a64:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005a66:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	4098      	lsls	r0, r3
 8005a70:	e7e0      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8005a72:	4805      	ldr	r0, [pc, #20]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x78>)
 8005a74:	e7de      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x24>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	ff48e500 	.word	0xff48e500
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	0800d02c 	.word	0x0800d02c
 8005a88:	007a1200 	.word	0x007a1200
 8005a8c:	003d0900 	.word	0x003d0900

08005a90 <HAL_RCC_ClockConfig>:
{
 8005a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a92:	2201      	movs	r2, #1
 8005a94:	4c53      	ldr	r4, [pc, #332]	; (8005be4 <HAL_RCC_ClockConfig+0x154>)
{
 8005a96:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a98:	6823      	ldr	r3, [r4, #0]
{
 8005a9a:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	428b      	cmp	r3, r1
 8005aa0:	d328      	bcc.n	8005af4 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa2:	6832      	ldr	r2, [r6, #0]
 8005aa4:	0793      	lsls	r3, r2, #30
 8005aa6:	d431      	bmi.n	8005b0c <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa8:	07d3      	lsls	r3, r2, #31
 8005aaa:	d437      	bmi.n	8005b1c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005aac:	2301      	movs	r3, #1
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	9901      	ldr	r1, [sp, #4]
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	428a      	cmp	r2, r1
 8005ab6:	d900      	bls.n	8005aba <HAL_RCC_ClockConfig+0x2a>
 8005ab8:	e085      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aba:	6832      	ldr	r2, [r6, #0]
 8005abc:	4c4a      	ldr	r4, [pc, #296]	; (8005be8 <HAL_RCC_ClockConfig+0x158>)
 8005abe:	0753      	lsls	r3, r2, #29
 8005ac0:	d500      	bpl.n	8005ac4 <HAL_RCC_ClockConfig+0x34>
 8005ac2:	e088      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac4:	0713      	lsls	r3, r2, #28
 8005ac6:	d506      	bpl.n	8005ad6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ac8:	68e2      	ldr	r2, [r4, #12]
 8005aca:	6933      	ldr	r3, [r6, #16]
 8005acc:	4947      	ldr	r1, [pc, #284]	; (8005bec <HAL_RCC_ClockConfig+0x15c>)
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ad6:	f7ff ff9b 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	4a44      	ldr	r2, [pc, #272]	; (8005bf0 <HAL_RCC_ClockConfig+0x160>)
 8005ade:	061b      	lsls	r3, r3, #24
 8005ae0:	0f1b      	lsrs	r3, r3, #28
 8005ae2:	5cd3      	ldrb	r3, [r2, r3]
 8005ae4:	40d8      	lsrs	r0, r3
 8005ae6:	4b43      	ldr	r3, [pc, #268]	; (8005bf4 <HAL_RCC_ClockConfig+0x164>)
 8005ae8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005aea:	2003      	movs	r0, #3
 8005aec:	f006 f8a4 	bl	800bc38 <HAL_InitTick>
  return HAL_OK;
 8005af0:	2000      	movs	r0, #0
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	9901      	ldr	r1, [sp, #4]
 8005af8:	4393      	bics	r3, r2
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	4013      	ands	r3, r2
 8005b02:	9a01      	ldr	r2, [sp, #4]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d0cc      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8005b08:	2001      	movs	r0, #1
}
 8005b0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b0c:	20f0      	movs	r0, #240	; 0xf0
 8005b0e:	4936      	ldr	r1, [pc, #216]	; (8005be8 <HAL_RCC_ClockConfig+0x158>)
 8005b10:	68cb      	ldr	r3, [r1, #12]
 8005b12:	4383      	bics	r3, r0
 8005b14:	68b0      	ldr	r0, [r6, #8]
 8005b16:	4303      	orrs	r3, r0
 8005b18:	60cb      	str	r3, [r1, #12]
 8005b1a:	e7c5      	b.n	8005aa8 <HAL_RCC_ClockConfig+0x18>
 8005b1c:	4d32      	ldr	r5, [pc, #200]	; (8005be8 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b20:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b22:	2a02      	cmp	r2, #2
 8005b24:	d119      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	039b      	lsls	r3, r3, #14
 8005b28:	d5ee      	bpl.n	8005b08 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b2a:	2103      	movs	r1, #3
 8005b2c:	68eb      	ldr	r3, [r5, #12]
 8005b2e:	438b      	bics	r3, r1
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8005b34:	f7fe fe28 	bl	8004788 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b38:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005b3a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d119      	bne.n	8005b74 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b40:	220c      	movs	r2, #12
 8005b42:	68eb      	ldr	r3, [r5, #12]
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d0b0      	beq.n	8005aac <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4a:	f7fe fe1d 	bl	8004788 <HAL_GetTick>
 8005b4e:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <HAL_RCC_ClockConfig+0x168>)
 8005b50:	1bc0      	subs	r0, r0, r7
 8005b52:	4298      	cmp	r0, r3
 8005b54:	d9f4      	bls.n	8005b40 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8005b56:	2003      	movs	r0, #3
 8005b58:	e7d7      	b.n	8005b0a <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b5a:	2a03      	cmp	r2, #3
 8005b5c:	d102      	bne.n	8005b64 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5e:	019b      	lsls	r3, r3, #6
 8005b60:	d4e3      	bmi.n	8005b2a <HAL_RCC_ClockConfig+0x9a>
 8005b62:	e7d1      	b.n	8005b08 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	d102      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b68:	075b      	lsls	r3, r3, #29
 8005b6a:	d4de      	bmi.n	8005b2a <HAL_RCC_ClockConfig+0x9a>
 8005b6c:	e7cc      	b.n	8005b08 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005b6e:	059b      	lsls	r3, r3, #22
 8005b70:	d4db      	bmi.n	8005b2a <HAL_RCC_ClockConfig+0x9a>
 8005b72:	e7c9      	b.n	8005b08 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b78:	220c      	movs	r2, #12
 8005b7a:	68eb      	ldr	r3, [r5, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d100      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xf4>
 8005b82:	e793      	b.n	8005aac <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fe fe00 	bl	8004788 <HAL_GetTick>
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCC_ClockConfig+0x168>)
 8005b8a:	1bc0      	subs	r0, r0, r7
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	d9f3      	bls.n	8005b78 <HAL_RCC_ClockConfig+0xe8>
 8005b90:	e7e1      	b.n	8005b56 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d011      	beq.n	8005bba <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b96:	220c      	movs	r2, #12
 8005b98:	68eb      	ldr	r3, [r5, #12]
 8005b9a:	4213      	tst	r3, r2
 8005b9c:	d100      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x110>
 8005b9e:	e785      	b.n	8005aac <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fe fdf2 	bl	8004788 <HAL_GetTick>
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <HAL_RCC_ClockConfig+0x168>)
 8005ba6:	1bc0      	subs	r0, r0, r7
 8005ba8:	4298      	cmp	r0, r3
 8005baa:	d9f4      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x106>
 8005bac:	e7d3      	b.n	8005b56 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bae:	f7fe fdeb 	bl	8004788 <HAL_GetTick>
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <HAL_RCC_ClockConfig+0x168>)
 8005bb4:	1bc0      	subs	r0, r0, r7
 8005bb6:	4298      	cmp	r0, r3
 8005bb8:	d8cd      	bhi.n	8005b56 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bba:	220c      	movs	r2, #12
 8005bbc:	68eb      	ldr	r3, [r5, #12]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d1f4      	bne.n	8005bae <HAL_RCC_ClockConfig+0x11e>
 8005bc4:	e772      	b.n	8005aac <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	439a      	bics	r2, r3
 8005bca:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	421a      	tst	r2, r3
 8005bd0:	d100      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x144>
 8005bd2:	e772      	b.n	8005aba <HAL_RCC_ClockConfig+0x2a>
 8005bd4:	e798      	b.n	8005b08 <HAL_RCC_ClockConfig+0x78>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	4908      	ldr	r1, [pc, #32]	; (8005bfc <HAL_RCC_ClockConfig+0x16c>)
 8005bda:	400b      	ands	r3, r1
 8005bdc:	68f1      	ldr	r1, [r6, #12]
 8005bde:	430b      	orrs	r3, r1
 8005be0:	60e3      	str	r3, [r4, #12]
 8005be2:	e76f      	b.n	8005ac4 <HAL_RCC_ClockConfig+0x34>
 8005be4:	40022000 	.word	0x40022000
 8005be8:	40021000 	.word	0x40021000
 8005bec:	ffffc7ff 	.word	0xffffc7ff
 8005bf0:	0800d035 	.word	0x0800d035
 8005bf4:	20000030 	.word	0x20000030
 8005bf8:	00001388 	.word	0x00001388
 8005bfc:	fffff8ff 	.word	0xfffff8ff

08005c00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	055b      	lsls	r3, r3, #21
 8005c08:	0f5b      	lsrs	r3, r3, #29
 8005c0a:	5cd3      	ldrb	r3, [r2, r3]
 8005c0c:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c0e:	6810      	ldr	r0, [r2, #0]
 8005c10:	40d8      	lsrs	r0, r3
}    
 8005c12:	4770      	bx	lr
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800d045 	.word	0x0800d045
 8005c1c:	20000030 	.word	0x20000030

08005c20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	049b      	lsls	r3, r3, #18
 8005c28:	0f5b      	lsrs	r3, r3, #29
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	4a03      	ldr	r2, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c2e:	6810      	ldr	r0, [r2, #0]
 8005c30:	40d8      	lsrs	r0, r3
} 
 8005c32:	4770      	bx	lr
 8005c34:	40021000 	.word	0x40021000
 8005c38:	0800d045 	.word	0x0800d045
 8005c3c:	20000030 	.word	0x20000030

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005c40:	2382      	movs	r3, #130	; 0x82
{
 8005c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8005c44:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005c46:	011b      	lsls	r3, r3, #4
{
 8005c48:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8005c4a:	421a      	tst	r2, r3
 8005c4c:	d048      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005c50:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c52:	4c65      	ldr	r4, [pc, #404]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c54:	055b      	lsls	r3, r3, #21
 8005c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8005c58:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c5a:	421a      	tst	r2, r3
 8005c5c:	d104      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c60:	4313      	orrs	r3, r2
 8005c62:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005c64:	2301      	movs	r3, #1
 8005c66:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c68:	2780      	movs	r7, #128	; 0x80
 8005c6a:	4e60      	ldr	r6, [pc, #384]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c6c:	007f      	lsls	r7, r7, #1
 8005c6e:	6833      	ldr	r3, [r6, #0]
 8005c70:	423b      	tst	r3, r7
 8005c72:	d077      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c74:	6869      	ldr	r1, [r5, #4]
 8005c76:	23c0      	movs	r3, #192	; 0xc0
 8005c78:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c7a:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c7c:	039b      	lsls	r3, r3, #14
 8005c7e:	4018      	ands	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c80:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c82:	4290      	cmp	r0, r2
 8005c84:	d103      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005c86:	68aa      	ldr	r2, [r5, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	4298      	cmp	r0, r3
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c8e:	23c0      	movs	r3, #192	; 0xc0
 8005c90:	000a      	movs	r2, r1
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	401a      	ands	r2, r3
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d103      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c9a:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8005c9c:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c9e:	039b      	lsls	r3, r3, #14
 8005ca0:	d471      	bmi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ca2:	22c0      	movs	r2, #192	; 0xc0
 8005ca4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ca6:	0292      	lsls	r2, r2, #10
 8005ca8:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005caa:	d000      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005cac:	e06c      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cae:	6869      	ldr	r1, [r5, #4]
 8005cb0:	23c0      	movs	r3, #192	; 0xc0
 8005cb2:	000a      	movs	r2, r1
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d107      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	484c      	ldr	r0, [pc, #304]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005cc0:	4003      	ands	r3, r0
 8005cc2:	20c0      	movs	r0, #192	; 0xc0
 8005cc4:	0380      	lsls	r0, r0, #14
 8005cc6:	4001      	ands	r1, r0
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005cce:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cd0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd2:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d103      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cda:	4a46      	ldr	r2, [pc, #280]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	07da      	lsls	r2, r3, #31
 8005ce4:	d506      	bpl.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	493f      	ldr	r1, [pc, #252]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005cea:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005cec:	4382      	bics	r2, r0
 8005cee:	68e8      	ldr	r0, [r5, #12]
 8005cf0:	4302      	orrs	r2, r0
 8005cf2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cf4:	079a      	lsls	r2, r3, #30
 8005cf6:	d506      	bpl.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cf8:	200c      	movs	r0, #12
 8005cfa:	493b      	ldr	r1, [pc, #236]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005cfc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005cfe:	4382      	bics	r2, r0
 8005d00:	6928      	ldr	r0, [r5, #16]
 8005d02:	4302      	orrs	r2, r0
 8005d04:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d06:	075a      	lsls	r2, r3, #29
 8005d08:	d506      	bpl.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d0a:	4937      	ldr	r1, [pc, #220]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005d0c:	483a      	ldr	r0, [pc, #232]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005d10:	4002      	ands	r2, r0
 8005d12:	6968      	ldr	r0, [r5, #20]
 8005d14:	4302      	orrs	r2, r0
 8005d16:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d18:	071a      	lsls	r2, r3, #28
 8005d1a:	d506      	bpl.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d1c:	4932      	ldr	r1, [pc, #200]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005d1e:	4837      	ldr	r0, [pc, #220]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d20:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005d22:	4002      	ands	r2, r0
 8005d24:	69a8      	ldr	r0, [r5, #24]
 8005d26:	4302      	orrs	r2, r0
 8005d28:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d2a:	05da      	lsls	r2, r3, #23
 8005d2c:	d506      	bpl.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d2e:	492e      	ldr	r1, [pc, #184]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005d30:	4833      	ldr	r0, [pc, #204]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d32:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005d34:	4002      	ands	r2, r0
 8005d36:	69e8      	ldr	r0, [r5, #28]
 8005d38:	4302      	orrs	r2, r0
 8005d3a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d3c:	065a      	lsls	r2, r3, #25
 8005d3e:	d506      	bpl.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d40:	4929      	ldr	r1, [pc, #164]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005d42:	4830      	ldr	r0, [pc, #192]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d44:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005d46:	4002      	ands	r2, r0
 8005d48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d4a:	4302      	orrs	r2, r0
 8005d4c:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8005d4e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	d518      	bpl.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005d54:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005d56:	492c      	ldr	r1, [pc, #176]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005d58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	6a29      	ldr	r1, [r5, #32]
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d62:	e010      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d64:	6833      	ldr	r3, [r6, #0]
 8005d66:	433b      	orrs	r3, r7
 8005d68:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005d6a:	f7fe fd0d 	bl	8004788 <HAL_GetTick>
 8005d6e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	423b      	tst	r3, r7
 8005d74:	d000      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005d76:	e77d      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fe fd06 	bl	8004788 <HAL_GetTick>
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	1ac0      	subs	r0, r0, r3
 8005d80:	2864      	cmp	r0, #100	; 0x64
 8005d82:	d9f5      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8005d84:	2003      	movs	r0, #3
}
 8005d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005d88:	4011      	ands	r1, r2
 8005d8a:	428b      	cmp	r3, r1
 8005d8c:	d002      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d8e:	6829      	ldr	r1, [r5, #0]
 8005d90:	0689      	lsls	r1, r1, #26
 8005d92:	d408      	bmi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005d94:	68a9      	ldr	r1, [r5, #8]
 8005d96:	400a      	ands	r2, r1
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d100      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d9c:	e787      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	051b      	lsls	r3, r3, #20
 8005da2:	d400      	bmi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005da4:	e783      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005da6:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005da8:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005daa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005dac:	0312      	lsls	r2, r2, #12
 8005dae:	4302      	orrs	r2, r0
 8005db0:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005db2:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005db4:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005db6:	4815      	ldr	r0, [pc, #84]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005db8:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dba:	4002      	ands	r2, r0
 8005dbc:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005dbe:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005dc0:	05cb      	lsls	r3, r1, #23
 8005dc2:	d400      	bmi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005dc4:	e773      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8005dc6:	f7fe fcdf 	bl	8004788 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dca:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005dcc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dce:	00bf      	lsls	r7, r7, #2
 8005dd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005dd2:	423b      	tst	r3, r7
 8005dd4:	d000      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005dd6:	e76a      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd8:	f7fe fcd6 	bl	8004788 <HAL_GetTick>
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dde:	1b80      	subs	r0, r0, r6
 8005de0:	4298      	cmp	r0, r3
 8005de2:	d9f5      	bls.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005de4:	e7ce      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40007000 	.word	0x40007000
 8005df0:	ffcfffff 	.word	0xffcfffff
 8005df4:	efffffff 	.word	0xefffffff
 8005df8:	fffff3ff 	.word	0xfffff3ff
 8005dfc:	ffffcfff 	.word	0xffffcfff
 8005e00:	fffcffff 	.word	0xfffcffff
 8005e04:	fbffffff 	.word	0xfbffffff
 8005e08:	fff3ffff 	.word	0xfff3ffff
 8005e0c:	fff7ffff 	.word	0xfff7ffff
 8005e10:	00001388 	.word	0x00001388

08005e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e14:	b510      	push	{r4, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8005e16:	2810      	cmp	r0, #16
 8005e18:	d100      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8005e1a:	e0d4      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8005e1c:	d81e      	bhi.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 8005e1e:	2802      	cmp	r0, #2
 8005e20:	d100      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8005e22:	e0a5      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8005e24:	d804      	bhi.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8005e26:	2801      	cmp	r0, #1
 8005e28:	d100      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8005e2a:	e08a      	b.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e05b      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  switch (PeriphClk)
 8005e30:	2804      	cmp	r0, #4
 8005e32:	d100      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8005e34:	e0ac      	b.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005e36:	2808      	cmp	r0, #8
 8005e38:	d1f8      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e3a:	21c0      	movs	r1, #192	; 0xc0
 8005e3c:	4a6d      	ldr	r2, [pc, #436]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005e3e:	0189      	lsls	r1, r1, #6
 8005e40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e42:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e44:	d100      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8005e46:	e098      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	0189      	lsls	r1, r1, #6
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	d100      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005e50:	e081      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d1e8      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8005e5a:	e081      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
  switch (PeriphClk)
 8005e5c:	2840      	cmp	r0, #64	; 0x40
 8005e5e:	d044      	beq.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005e60:	d80f      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005e62:	2820      	cmp	r0, #32
 8005e64:	d1e2      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e66:	24c0      	movs	r4, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005e68:	2180      	movs	r1, #128	; 0x80
      temp_reg = RCC->CSR;
 8005e6a:	4a62      	ldr	r2, [pc, #392]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e6c:	02a4      	lsls	r4, r4, #10
      temp_reg = RCC->CSR;
 8005e6e:	6d10      	ldr	r0, [r2, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e70:	6d13      	ldr	r3, [r2, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005e72:	0249      	lsls	r1, r1, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e74:	4023      	ands	r3, r4
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005e76:	428b      	cmp	r3, r1
 8005e78:	d10d      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005e7a:	0580      	lsls	r0, r0, #22
        frequency = LSE_VALUE;
 8005e7c:	0fc0      	lsrs	r0, r0, #31
 8005e7e:	03c0      	lsls	r0, r0, #15
 8005e80:	e032      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  switch (PeriphClk)
 8005e82:	2380      	movs	r3, #128	; 0x80
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4298      	cmp	r0, r3
 8005e88:	d100      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8005e8a:	e0a4      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	4298      	cmp	r0, r3
 8005e92:	d0e8      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005e94:	e7ca      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8005e96:	2180      	movs	r1, #128	; 0x80
 8005e98:	0289      	lsls	r1, r1, #10
 8005e9a:	428b      	cmp	r3, r1
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	4018      	ands	r0, r3
        frequency = LSI_VALUE;
 8005ea2:	4243      	negs	r3, r0
 8005ea4:	4158      	adcs	r0, r3
 8005ea6:	4b54      	ldr	r3, [pc, #336]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8005ea8:	4240      	negs	r0, r0
 8005eaa:	4018      	ands	r0, r3
 8005eac:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            frequency = HSI48_VALUE;
 8005eae:	18c0      	adds	r0, r0, r3
 8005eb0:	e01a      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
            frequency = 0U;
 8005eb2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d117      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	420b      	tst	r3, r1
 8005ebc:	d014      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8005ebe:	23c0      	movs	r3, #192	; 0xc0
 8005ec0:	6810      	ldr	r0, [r2, #0]
        switch (clkprediv)
 8005ec2:	2280      	movs	r2, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8005ec4:	039b      	lsls	r3, r3, #14
 8005ec6:	4018      	ands	r0, r3
        switch (clkprediv)
 8005ec8:	0392      	lsls	r2, r2, #14
 8005eca:	4290      	cmp	r0, r2
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d100      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005ed2:	e08d      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = HSE_VALUE / 2U;
 8005ed4:	4b4a      	ldr	r3, [pc, #296]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 8005ed6:	18c0      	adds	r0, r0, r3
 8005ed8:	4243      	negs	r3, r0
 8005eda:	4158      	adcs	r0, r3
 8005edc:	4b49      	ldr	r3, [pc, #292]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8005ede:	4240      	negs	r0, r0
 8005ee0:	4018      	ands	r0, r3
 8005ee2:	4b49      	ldr	r3, [pc, #292]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8005ee4:	e7e3      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = HSE_VALUE / 8U;
 8005ee6:	4849      	ldr	r0, [pc, #292]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
    {
      break;
    }
  }
  return(frequency);
}
 8005ee8:	bd10      	pop	{r4, pc}
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005eea:	2080      	movs	r0, #128	; 0x80
 8005eec:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005eee:	04c0      	lsls	r0, r0, #19
 8005ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef2:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8005ef4:	d11b      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	0192      	lsls	r2, r2, #6
 8005efa:	d5f5      	bpl.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005efc:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8005efe:	4844      	ldr	r0, [pc, #272]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8005f00:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8005f02:	0292      	lsls	r2, r2, #10
 8005f04:	0f12      	lsrs	r2, r2, #28
 8005f06:	5c82      	ldrb	r2, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8005f08:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8005f0a:	68d8      	ldr	r0, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8005f0c:	0f89      	lsrs	r1, r1, #30
 8005f0e:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8005f10:	03c0      	lsls	r0, r0, #15
 8005f12:	d40a      	bmi.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005f14:	6818      	ldr	r0, [r3, #0]
                    pllvco =  HSI_VALUE;
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005f18:	06c0      	lsls	r0, r0, #27
                    pllvco =  HSI_VALUE;
 8005f1a:	17c0      	asrs	r0, r0, #31
 8005f1c:	4018      	ands	r0, r3
 8005f1e:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005f20:	18c0      	adds	r0, r0, r3
            pllvco = (pllvco * pllmul);
 8005f22:	4350      	muls	r0, r2
            frequency = (pllvco/ plldiv);
 8005f24:	f7fa f904 	bl	8000130 <__udivsi3>
 8005f28:	e7de      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
                pllvco = HSE_VALUE;
 8005f2a:	483c      	ldr	r0, [pc, #240]	; (800601c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8005f2c:	e7f9      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8005f2e:	6898      	ldr	r0, [r3, #8]
 8005f30:	2302      	movs	r3, #2
 8005f32:	4018      	ands	r0, r3
            frequency = HSI48_VALUE;
 8005f34:	4243      	negs	r3, r0
 8005f36:	4158      	adcs	r0, r3
 8005f38:	4b39      	ldr	r3, [pc, #228]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8005f3a:	4240      	negs	r0, r0
 8005f3c:	4018      	ands	r0, r3
 8005f3e:	4b39      	ldr	r3, [pc, #228]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8005f40:	e7b5      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f42:	2103      	movs	r1, #3
 8005f44:	4a2b      	ldr	r2, [pc, #172]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005f46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f48:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7ff fe68 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8005f50:	e7ca      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d102      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005f56:	6810      	ldr	r0, [r2, #0]
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e024      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d102      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        frequency = HAL_RCC_GetSysClockFreq();
 8005f60:	f7ff fd56 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8005f64:	e7c0      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
            frequency = 0U;
 8005f66:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d1bd      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005f6c:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005f6e:	e784      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f70:	210c      	movs	r1, #12
 8005f72:	4a20      	ldr	r2, [pc, #128]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005f74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f76:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005f78:	d102      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f7a:	f7ff fe41 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8005f7e:	e7b3      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d0e8      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d0eb      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = 0U;
 8005f88:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d0ee      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005f8e:	e7ab      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005f90:	21c0      	movs	r1, #192	; 0xc0
 8005f92:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005f94:	0109      	lsls	r1, r1, #4
 8005f96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f98:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005f9a:	d0ee      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005f9c:	2480      	movs	r4, #128	; 0x80
 8005f9e:	0124      	lsls	r4, r4, #4
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d108      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005fa4:	6813      	ldr	r3, [r2, #0]
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005fa6:	4018      	ands	r0, r3
        frequency = HSI_VALUE;
 8005fa8:	4243      	negs	r3, r0
 8005faa:	4158      	adcs	r0, r3
 8005fac:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8005fae:	4240      	negs	r0, r0
 8005fb0:	4018      	ands	r0, r3
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005fb4:	e77b      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005fb6:	2080      	movs	r0, #128	; 0x80
 8005fb8:	00c0      	lsls	r0, r0, #3
 8005fba:	4283      	cmp	r3, r0
 8005fbc:	d0d0      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = 0U;
 8005fbe:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	d0d3      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005fc4:	e790      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005fc8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	03db      	lsls	r3, r3, #15
 8005fce:	4018      	ands	r0, r3
 8005fd0:	d100      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005fd2:	e789      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8005fd4:	e7d1      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005fd6:	21c0      	movs	r1, #192	; 0xc0
 8005fd8:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005fda:	0289      	lsls	r1, r1, #10
 8005fdc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005fde:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8005fe0:	d0cb      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	0289      	lsls	r1, r1, #10
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	d0b5      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	0252      	lsls	r2, r2, #9
 8005fee:	e732      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 8005ff0:	480e      	ldr	r0, [pc, #56]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8005ff2:	e779      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	ffff6f78 	.word	0xffff6f78
 8005ffc:	00009088 	.word	0x00009088
 8006000:	fff00000 	.word	0xfff00000
 8006004:	ffe17b80 	.word	0xffe17b80
 8006008:	003d0900 	.word	0x003d0900
 800600c:	000f4240 	.word	0x000f4240
 8006010:	0800d02c 	.word	0x0800d02c
 8006014:	ff48e500 	.word	0xff48e500
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200
 8006020:	fd239400 	.word	0xfd239400
 8006024:	02dc6c00 	.word	0x02dc6c00
 8006028:	ff0bdc00 	.word	0xff0bdc00
 800602c:	0007a120 	.word	0x0007a120

08006030 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006032:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006034:	1c45      	adds	r5, r0, #1
 8006036:	7feb      	ldrb	r3, [r5, #31]
{
 8006038:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800603a:	0038      	movs	r0, r7
 800603c:	2b01      	cmp	r3, #1
 800603e:	d024      	beq.n	800608a <HAL_RTC_DeactivateAlarm+0x5a>
 8006040:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006042:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8006044:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006046:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006048:	19e6      	adds	r6, r4, r7
 800604a:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800604c:	625a      	str	r2, [r3, #36]	; 0x24
 800604e:	3a77      	subs	r2, #119	; 0x77
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8006052:	32ad      	adds	r2, #173	; 0xad
 8006054:	4291      	cmp	r1, r2
 8006056:	d128      	bne.n	80060aa <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	4921      	ldr	r1, [pc, #132]	; (80060e0 <HAL_RTC_DeactivateAlarm+0xb0>)
 800605c:	400a      	ands	r2, r1
 800605e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	4920      	ldr	r1, [pc, #128]	; (80060e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006064:	400a      	ands	r2, r1
 8006066:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006068:	f7fe fb8e 	bl	8004788 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800606c:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 800606e:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	68df      	ldr	r7, [r3, #12]
 8006076:	9b01      	ldr	r3, [sp, #4]
 8006078:	401f      	ands	r7, r3
 800607a:	d007      	beq.n	800608c <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006080:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006082:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006084:	2301      	movs	r3, #1
 8006086:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8006088:	77e8      	strb	r0, [r5, #31]

  return HAL_OK; 
}
 800608a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800608c:	f7fe fb7c 	bl	8004788 <HAL_GetTick>
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	1ac0      	subs	r0, r0, r3
 8006094:	23fa      	movs	r3, #250	; 0xfa
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4298      	cmp	r0, r3
 800609a:	d9ea      	bls.n	8006072 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800609e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a4:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80060a6:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 80060a8:	e7ef      	b.n	800608a <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	490e      	ldr	r1, [pc, #56]	; (80060e8 <HAL_RTC_DeactivateAlarm+0xb8>)
 80060ae:	400a      	ands	r2, r1
 80060b0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	490d      	ldr	r1, [pc, #52]	; (80060ec <HAL_RTC_DeactivateAlarm+0xbc>)
 80060b6:	400a      	ands	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80060ba:	f7fe fb65 	bl	8004788 <HAL_GetTick>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80060be:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 80060c0:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	68df      	ldr	r7, [r3, #12]
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	401f      	ands	r7, r3
 80060ca:	d1d7      	bne.n	800607c <HAL_RTC_DeactivateAlarm+0x4c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060cc:	f7fe fb5c 	bl	8004788 <HAL_GetTick>
 80060d0:	9b00      	ldr	r3, [sp, #0]
 80060d2:	1ac0      	subs	r0, r0, r3
 80060d4:	23fa      	movs	r3, #250	; 0xfa
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4298      	cmp	r0, r3
 80060da:	d9f2      	bls.n	80060c2 <HAL_RTC_DeactivateAlarm+0x92>
 80060dc:	e7de      	b.n	800609c <HAL_RTC_DeactivateAlarm+0x6c>
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	fffffeff 	.word	0xfffffeff
 80060e4:	ffffefff 	.word	0xffffefff
 80060e8:	fffffdff 	.word	0xfffffdff
 80060ec:	ffffdfff 	.word	0xffffdfff

080060f0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060f0:	21a0      	movs	r1, #160	; 0xa0
 80060f2:	6802      	ldr	r2, [r0, #0]
{
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060f6:	68d3      	ldr	r3, [r2, #12]
{
 80060f8:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060fa:	438b      	bics	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80060fe:	f7fe fb43 	bl	8004788 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006102:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006104:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006106:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006108:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	422b      	tst	r3, r5
 8006110:	d001      	beq.n	8006116 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006112:	2000      	movs	r0, #0
}
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006116:	f7fe fb37 	bl	8004788 <HAL_GetTick>
 800611a:	1b80      	subs	r0, r0, r6
 800611c:	42b8      	cmp	r0, r7
 800611e:	d9f4      	bls.n	800610a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8006120:	2003      	movs	r0, #3
 8006122:	e7f7      	b.n	8006114 <HAL_RTC_WaitForSynchro+0x24>

08006124 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006126:	2440      	movs	r4, #64	; 0x40
 8006128:	6803      	ldr	r3, [r0, #0]
{
 800612a:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	4222      	tst	r2, r4
 8006130:	d001      	beq.n	8006136 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006132:	2000      	movs	r0, #0
}
 8006134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006136:	2201      	movs	r2, #1
 8006138:	4252      	negs	r2, r2
 800613a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800613c:	f7fe fb24 	bl	8004788 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006140:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006142:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006144:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	4223      	tst	r3, r4
 800614c:	d1f1      	bne.n	8006132 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800614e:	f7fe fb1b 	bl	8004788 <HAL_GetTick>
 8006152:	1b80      	subs	r0, r0, r6
 8006154:	42b8      	cmp	r0, r7
 8006156:	d9f6      	bls.n	8006146 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8006158:	2003      	movs	r0, #3
 800615a:	e7eb      	b.n	8006134 <RTC_EnterInitMode+0x10>

0800615c <HAL_RTC_Init>:
{
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	0004      	movs	r4, r0
     return HAL_ERROR;
 8006160:	2001      	movs	r0, #1
  if(hrtc == NULL)
 8006162:	2c00      	cmp	r4, #0
 8006164:	d01b      	beq.n	800619e <HAL_RTC_Init+0x42>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006166:	1ca5      	adds	r5, r4, #2
 8006168:	7feb      	ldrb	r3, [r5, #31]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8006170:	1822      	adds	r2, r4, r0
 8006172:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8006174:	0020      	movs	r0, r4
 8006176:	f005 fdaf 	bl	800bcd8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800617a:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800617c:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800617e:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006180:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006182:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
 8006186:	3a77      	subs	r2, #119	; 0x77
 8006188:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800618a:	f7ff ffcb 	bl	8006124 <RTC_EnterInitMode>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	2800      	cmp	r0, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006198:	2304      	movs	r3, #4
    return HAL_ERROR;
 800619a:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800619c:	77eb      	strb	r3, [r5, #31]
}
 800619e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	4912      	ldr	r1, [pc, #72]	; (80061ec <HAL_RTC_Init+0x90>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061a4:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061a6:	400a      	ands	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061aa:	6862      	ldr	r2, [r4, #4]
 80061ac:	6899      	ldr	r1, [r3, #8]
 80061ae:	4332      	orrs	r2, r6
 80061b0:	69a6      	ldr	r6, [r4, #24]
 80061b2:	4332      	orrs	r2, r6
 80061b4:	430a      	orrs	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061b8:	68e2      	ldr	r2, [r4, #12]
 80061ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80061bc:	68a2      	ldr	r2, [r4, #8]
 80061be:	6919      	ldr	r1, [r3, #16]
 80061c0:	0412      	lsls	r2, r2, #16
 80061c2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80061c4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80061c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	438a      	bics	r2, r1
 80061cc:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80061ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d0:	397d      	subs	r1, #125	; 0x7d
 80061d2:	438a      	bics	r2, r1
 80061d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80061d6:	69e2      	ldr	r2, [r4, #28]
 80061d8:	6964      	ldr	r4, [r4, #20]
 80061da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80061dc:	4322      	orrs	r2, r4
 80061de:	430a      	orrs	r2, r1
 80061e0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e2:	22ff      	movs	r2, #255	; 0xff
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77eb      	strb	r3, [r5, #31]
    return HAL_OK;
 80061ea:	e7d8      	b.n	800619e <HAL_RTC_Init+0x42>
 80061ec:	ff8fffbf 	.word	0xff8fffbf

080061f0 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80061f0:	2300      	movs	r3, #0

  while(Value >= 10U)
 80061f2:	2809      	cmp	r0, #9
 80061f4:	d803      	bhi.n	80061fe <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4318      	orrs	r0, r3
 80061fa:	b2c0      	uxtb	r0, r0
}
 80061fc:	4770      	bx	lr
    Value -= 10U;
 80061fe:	380a      	subs	r0, #10
    bcdhigh++;
 8006200:	3301      	adds	r3, #1
    Value -= 10U;
 8006202:	b2c0      	uxtb	r0, r0
 8006204:	e7f5      	b.n	80061f2 <RTC_ByteToBcd2+0x2>
	...

08006208 <HAL_RTC_SetTime>:
{
 8006208:	2302      	movs	r3, #2
 800620a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800620c:	1c47      	adds	r7, r0, #1
{
 800620e:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8006210:	7ff9      	ldrb	r1, [r7, #31]
{
 8006212:	b085      	sub	sp, #20
 8006214:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8006216:	001e      	movs	r6, r3
 8006218:	2901      	cmp	r1, #1
 800621a:	d037      	beq.n	800628c <HAL_RTC_SetTime+0x84>
 800621c:	2101      	movs	r1, #1
 800621e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006220:	18c1      	adds	r1, r0, r3
 8006222:	77cb      	strb	r3, [r1, #31]
 8006224:	9101      	str	r1, [sp, #4]
 8006226:	2140      	movs	r1, #64	; 0x40
 8006228:	6806      	ldr	r6, [r0, #0]
 800622a:	7863      	ldrb	r3, [r4, #1]
 800622c:	7820      	ldrb	r0, [r4, #0]
 800622e:	9302      	str	r3, [sp, #8]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006230:	68b3      	ldr	r3, [r6, #8]
 8006232:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8006234:	2a00      	cmp	r2, #0
 8006236:	d12c      	bne.n	8006292 <HAL_RTC_SetTime+0x8a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006238:	2b00      	cmp	r3, #0
 800623a:	d100      	bne.n	800623e <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 800623c:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800623e:	f7ff ffd7 	bl	80061f0 <RTC_ByteToBcd2>
 8006242:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006244:	9802      	ldr	r0, [sp, #8]
 8006246:	f7ff ffd3 	bl	80061f0 <RTC_ByteToBcd2>
 800624a:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800624c:	78a0      	ldrb	r0, [r4, #2]
 800624e:	f7ff ffcf 	bl	80061f0 <RTC_ByteToBcd2>
 8006252:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006254:	78e0      	ldrb	r0, [r4, #3]
 8006256:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006258:	4318      	orrs	r0, r3
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006264:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006266:	23ca      	movs	r3, #202	; 0xca
 8006268:	6273      	str	r3, [r6, #36]	; 0x24
 800626a:	3b77      	subs	r3, #119	; 0x77
 800626c:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800626e:	9002      	str	r0, [sp, #8]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006270:	0028      	movs	r0, r5
 8006272:	f7ff ff57 	bl	8006124 <RTC_EnterInitMode>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	1e06      	subs	r6, r0, #0
 800627a:	d016      	beq.n	80062aa <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627c:	22ff      	movs	r2, #255	; 0xff
 800627e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006280:	2304      	movs	r3, #4
 8006282:	9a01      	ldr	r2, [sp, #4]
 8006284:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006286:	2300      	movs	r3, #0
 8006288:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800628a:	2601      	movs	r6, #1
}
 800628c:	0030      	movs	r0, r6
 800628e:	b005      	add	sp, #20
 8006290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006292:	2b00      	cmp	r3, #0
 8006294:	d100      	bne.n	8006298 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8006296:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006298:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800629a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800629c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800629e:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 80062a0:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80062a2:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80062a4:	78e3      	ldrb	r3, [r4, #3]
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	e7dc      	b.n	8006264 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062aa:	4815      	ldr	r0, [pc, #84]	; (8006300 <HAL_RTC_SetTime+0xf8>)
 80062ac:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80062ae:	4915      	ldr	r1, [pc, #84]	; (8006304 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062b0:	4002      	ands	r2, r0
 80062b2:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80062b4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062b6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80062b8:	400a      	ands	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062bc:	68e2      	ldr	r2, [r4, #12]
 80062be:	6899      	ldr	r1, [r3, #8]
 80062c0:	4302      	orrs	r2, r0
 80062c2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062c4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062c6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	438a      	bics	r2, r1
 80062cc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	069b      	lsls	r3, r3, #26
 80062d2:	d40c      	bmi.n	80062ee <HAL_RTC_SetTime+0xe6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d4:	0028      	movs	r0, r5
 80062d6:	f7ff ff0b 	bl	80060f0 <HAL_RTC_WaitForSynchro>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d007      	beq.n	80062ee <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e4:	2304      	movs	r3, #4
 80062e6:	9a01      	ldr	r2, [sp, #4]
 80062e8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80062ea:	77fe      	strb	r6, [r7, #31]
 80062ec:	e7cd      	b.n	800628a <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ee:	22ff      	movs	r2, #255	; 0xff
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	9a01      	ldr	r2, [sp, #4]
 80062f8:	77d3      	strb	r3, [r2, #31]
   __HAL_UNLOCK(hrtc); 
 80062fa:	2300      	movs	r3, #0
 80062fc:	77fb      	strb	r3, [r7, #31]
   return HAL_OK;
 80062fe:	e7c5      	b.n	800628c <HAL_RTC_SetTime+0x84>
 8006300:	007f7f7f 	.word	0x007f7f7f
 8006304:	fffbffff 	.word	0xfffbffff

08006308 <HAL_RTC_SetDate>:
{
 8006308:	2302      	movs	r3, #2
 800630a:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800630c:	1c47      	adds	r7, r0, #1
{
 800630e:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8006310:	7ff9      	ldrb	r1, [r7, #31]
{
 8006312:	b085      	sub	sp, #20
 8006314:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8006316:	001d      	movs	r5, r3
 8006318:	2901      	cmp	r1, #1
 800631a:	d036      	beq.n	800638a <HAL_RTC_SetDate+0x82>
 800631c:	2101      	movs	r1, #1
 800631e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006320:	18c1      	adds	r1, r0, r3
 8006322:	9101      	str	r1, [sp, #4]
 8006324:	77cb      	strb	r3, [r1, #31]
 8006326:	7831      	ldrb	r1, [r6, #0]
 8006328:	7873      	ldrb	r3, [r6, #1]
 800632a:	0349      	lsls	r1, r1, #13
 800632c:	78b5      	ldrb	r5, [r6, #2]
 800632e:	78f0      	ldrb	r0, [r6, #3]
 8006330:	9102      	str	r1, [sp, #8]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006332:	2a00      	cmp	r2, #0
 8006334:	d14c      	bne.n	80063d0 <HAL_RTC_SetDate+0xc8>
 8006336:	3210      	adds	r2, #16
 8006338:	4213      	tst	r3, r2
 800633a:	d002      	beq.n	8006342 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800633c:	4393      	bics	r3, r2
 800633e:	330a      	adds	r3, #10
 8006340:	7073      	strb	r3, [r6, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006342:	f7ff ff55 	bl	80061f0 <RTC_ByteToBcd2>
 8006346:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006348:	7870      	ldrb	r0, [r6, #1]
 800634a:	f7ff ff51 	bl	80061f0 <RTC_ByteToBcd2>
 800634e:	0006      	movs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006350:	0028      	movs	r0, r5
 8006352:	f7ff ff4d 	bl	80061f0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006356:	9b03      	ldr	r3, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006358:	0236      	lsls	r6, r6, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800635a:	041d      	lsls	r5, r3, #16
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	4318      	orrs	r0, r3
 8006360:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006362:	22ca      	movs	r2, #202	; 0xca
 8006364:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006366:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006368:	625a      	str	r2, [r3, #36]	; 0x24
 800636a:	3a77      	subs	r2, #119	; 0x77
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800636e:	f7ff fed9 	bl	8006124 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006372:	432e      	orrs	r6, r5
 8006374:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006376:	1e05      	subs	r5, r0, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800637e:	2304      	movs	r3, #4
 8006380:	9a01      	ldr	r2, [sp, #4]
 8006382:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006384:	2300      	movs	r3, #0
 8006386:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8006388:	2501      	movs	r5, #1
}
 800638a:	0028      	movs	r0, r5
 800638c:	b005      	add	sp, #20
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006390:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006392:	4812      	ldr	r0, [pc, #72]	; (80063dc <HAL_RTC_SetDate+0xd4>)
 8006394:	4006      	ands	r6, r0
 8006396:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	438a      	bics	r2, r1
 800639c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	069b      	lsls	r3, r3, #26
 80063a2:	d40c      	bmi.n	80063be <HAL_RTC_SetDate+0xb6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063a4:	0020      	movs	r0, r4
 80063a6:	f7ff fea3 	bl	80060f0 <HAL_RTC_WaitForSynchro>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d007      	beq.n	80063be <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063b4:	2304      	movs	r3, #4
 80063b6:	9a01      	ldr	r2, [sp, #4]
 80063b8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80063ba:	77fd      	strb	r5, [r7, #31]
 80063bc:	e7e4      	b.n	8006388 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80063c4:	2301      	movs	r3, #1
 80063c6:	9a01      	ldr	r2, [sp, #4]
 80063c8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80063ca:	2300      	movs	r3, #0
 80063cc:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80063ce:	e7dc      	b.n	800638a <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063d0:	9a02      	ldr	r2, [sp, #8]
 80063d2:	0400      	lsls	r0, r0, #16
 80063d4:	4310      	orrs	r0, r2
 80063d6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80063d8:	021e      	lsls	r6, r3, #8
 80063da:	e7c2      	b.n	8006362 <HAL_RTC_SetDate+0x5a>
 80063dc:	00ffff3f 	.word	0x00ffff3f

080063e0 <HAL_RTC_SetAlarm_IT>:
{
 80063e0:	2302      	movs	r3, #2
 80063e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80063e6:	1c41      	adds	r1, r0, #1
 80063e8:	7fce      	ldrb	r6, [r1, #31]
{
 80063ea:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80063ec:	0018      	movs	r0, r3
 80063ee:	2e01      	cmp	r6, #1
 80063f0:	d100      	bne.n	80063f4 <HAL_RTC_SetAlarm_IT+0x14>
 80063f2:	e08c      	b.n	800650e <HAL_RTC_SetAlarm_IT+0x12e>
 80063f4:	3801      	subs	r0, #1
 80063f6:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f8:	18e1      	adds	r1, r4, r3
 80063fa:	77cb      	strb	r3, [r1, #31]
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	786b      	ldrb	r3, [r5, #1]
 8006400:	6826      	ldr	r6, [r4, #0]
 8006402:	9300      	str	r3, [sp, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006404:	68b3      	ldr	r3, [r6, #8]
 8006406:	7828      	ldrb	r0, [r5, #0]
 8006408:	78af      	ldrb	r7, [r5, #2]
 800640a:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800640c:	2a00      	cmp	r2, #0
 800640e:	d15d      	bne.n	80064cc <HAL_RTC_SetAlarm_IT+0xec>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006410:	2b00      	cmp	r3, #0
 8006412:	d100      	bne.n	8006416 <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006414:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006416:	f7ff feeb 	bl	80061f0 <RTC_ByteToBcd2>
 800641a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800641c:	9800      	ldr	r0, [sp, #0]
 800641e:	f7ff fee7 	bl	80061f0 <RTC_ByteToBcd2>
 8006422:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006424:	0038      	movs	r0, r7
 8006426:	f7ff fee3 	bl	80061f0 <RTC_ByteToBcd2>
 800642a:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800642c:	1c6b      	adds	r3, r5, #1
 800642e:	7fd8      	ldrb	r0, [r3, #31]
 8006430:	f7ff fede 	bl	80061f0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006434:	696a      	ldr	r2, [r5, #20]
 8006436:	69eb      	ldr	r3, [r5, #28]
 8006438:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800643a:	78ea      	ldrb	r2, [r5, #3]
 800643c:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800643e:	4313      	orrs	r3, r2
 8006440:	431f      	orrs	r7, r3
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006448:	9b00      	ldr	r3, [sp, #0]
 800644a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800644c:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800644e:	69aa      	ldr	r2, [r5, #24]
 8006450:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006452:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006454:	4313      	orrs	r3, r2
 8006456:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006458:	23ca      	movs	r3, #202	; 0xca
  if(sAlarm->Alarm == RTC_ALARM_A)
 800645a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800645c:	6273      	str	r3, [r6, #36]	; 0x24
 800645e:	3b77      	subs	r3, #119	; 0x77
 8006460:	6273      	str	r3, [r6, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006462:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006464:	4307      	orrs	r7, r0
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006466:	429a      	cmp	r2, r3
 8006468:	d152      	bne.n	8006510 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800646a:	68b3      	ldr	r3, [r6, #8]
 800646c:	4a3b      	ldr	r2, [pc, #236]	; (800655c <HAL_RTC_SetAlarm_IT+0x17c>)
 800646e:	4013      	ands	r3, r2
 8006470:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006472:	68f2      	ldr	r2, [r6, #12]
 8006474:	4b3a      	ldr	r3, [pc, #232]	; (8006560 <HAL_RTC_SetAlarm_IT+0x180>)
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	4313      	orrs	r3, r2
 800647a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800647c:	f7fe f984 	bl	8004788 <HAL_GetTick>
 8006480:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006482:	2201      	movs	r2, #1
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	68dd      	ldr	r5, [r3, #12]
 8006488:	4015      	ands	r5, r2
 800648a:	d031      	beq.n	80064f0 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800648c:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800648e:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006490:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	6899      	ldr	r1, [r3, #8]
 80064a0:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <HAL_RTC_SetAlarm_IT+0x184>)
 80064aa:	0292      	lsls	r2, r2, #10
 80064ac:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80064ae:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064b0:	4311      	orrs	r1, r2
 80064b2:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80064b4:	6899      	ldr	r1, [r3, #8]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80064c0:	3afe      	subs	r2, #254	; 0xfe
 80064c2:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80064c4:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY; 
 80064c6:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80064c8:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80064ca:	e020      	b.n	800650e <HAL_RTC_SetAlarm_IT+0x12e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d100      	bne.n	80064d2 <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064d0:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064d2:	69eb      	ldr	r3, [r5, #28]
 80064d4:	696a      	ldr	r2, [r5, #20]
 80064d6:	0400      	lsls	r0, r0, #16
 80064d8:	4313      	orrs	r3, r2
 80064da:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064dc:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064de:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064e0:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064e2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064e4:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064e6:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064e8:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064ea:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064ec:	7fd8      	ldrb	r0, [r3, #31]
 80064ee:	e7ae      	b.n	800644e <HAL_RTC_SetAlarm_IT+0x6e>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064f0:	f7fe f94a 	bl	8004788 <HAL_GetTick>
 80064f4:	23fa      	movs	r3, #250	; 0xfa
 80064f6:	1b80      	subs	r0, r0, r6
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4298      	cmp	r0, r3
 80064fc:	d9c1      	bls.n	8006482 <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064fe:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006500:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006506:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8006508:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800650a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800650c:	77e5      	strb	r5, [r4, #31]
}
 800650e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006510:	68b3      	ldr	r3, [r6, #8]
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <HAL_RTC_SetAlarm_IT+0x188>)
 8006514:	4013      	ands	r3, r2
 8006516:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006518:	68f2      	ldr	r2, [r6, #12]
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <HAL_RTC_SetAlarm_IT+0x18c>)
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	4313      	orrs	r3, r2
 8006520:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006522:	f7fe f931 	bl	8004788 <HAL_GetTick>
 8006526:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006528:	2202      	movs	r2, #2
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	68dd      	ldr	r5, [r3, #12]
 800652e:	4015      	ands	r5, r2
 8006530:	d00b      	beq.n	800654a <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006532:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006534:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006536:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006538:	2280      	movs	r2, #128	; 0x80
 800653a:	6899      	ldr	r1, [r3, #8]
 800653c:	0092      	lsls	r2, r2, #2
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	0192      	lsls	r2, r2, #6
 8006548:	e7ab      	b.n	80064a2 <HAL_RTC_SetAlarm_IT+0xc2>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800654a:	f7fe f91d 	bl	8004788 <HAL_GetTick>
 800654e:	23fa      	movs	r3, #250	; 0xfa
 8006550:	1b80      	subs	r0, r0, r6
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4298      	cmp	r0, r3
 8006556:	d9e7      	bls.n	8006528 <HAL_RTC_SetAlarm_IT+0x148>
 8006558:	e7d1      	b.n	80064fe <HAL_RTC_SetAlarm_IT+0x11e>
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	fffffeff 	.word	0xfffffeff
 8006560:	fffffe7f 	.word	0xfffffe7f
 8006564:	40010400 	.word	0x40010400
 8006568:	fffffdff 	.word	0xfffffdff
 800656c:	fffffd7f 	.word	0xfffffd7f

08006570 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8006570:	230a      	movs	r3, #10
 8006572:	0902      	lsrs	r2, r0, #4
 8006574:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 8006576:	220f      	movs	r2, #15
 8006578:	4010      	ands	r0, r2
 800657a:	1818      	adds	r0, r3, r0
 800657c:	b2c0      	uxtb	r0, r0
}
 800657e:	4770      	bx	lr

08006580 <HAL_RTC_GetTime>:
{
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006584:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006586:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006588:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800658a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800658c:	690b      	ldr	r3, [r1, #16]
 800658e:	045b      	lsls	r3, r3, #17
 8006590:	0c5b      	lsrs	r3, r3, #17
 8006592:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006594:	680b      	ldr	r3, [r1, #0]
 8006596:	490e      	ldr	r1, [pc, #56]	; (80065d0 <HAL_RTC_GetTime+0x50>)
 8006598:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800659a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800659c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800659e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80065a0:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80065a2:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80065a4:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80065a6:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80065a8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80065aa:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80065ac:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80065ae:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80065b4:	f7ff ffdc 	bl	8006570 <RTC_Bcd2ToByte>
 80065b8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80065ba:	0030      	movs	r0, r6
 80065bc:	f7ff ffd8 	bl	8006570 <RTC_Bcd2ToByte>
 80065c0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80065c2:	0028      	movs	r0, r5
 80065c4:	f7ff ffd4 	bl	8006570 <RTC_Bcd2ToByte>
 80065c8:	70a0      	strb	r0, [r4, #2]
}
 80065ca:	2000      	movs	r0, #0
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	007f7f7f 	.word	0x007f7f7f

080065d4 <HAL_RTC_GetDate>:
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80065d8:	6803      	ldr	r3, [r0, #0]
 80065da:	490e      	ldr	r1, [pc, #56]	; (8006614 <HAL_RTC_GetDate+0x40>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80065e0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80065e2:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80065e4:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80065e6:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80065e8:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80065ea:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80065ec:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80065ee:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80065f0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80065f2:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d10a      	bne.n	800660e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065f8:	f7ff ffba 	bl	8006570 <RTC_Bcd2ToByte>
 80065fc:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065fe:	0028      	movs	r0, r5
 8006600:	f7ff ffb6 	bl	8006570 <RTC_Bcd2ToByte>
 8006604:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006606:	0030      	movs	r0, r6
 8006608:	f7ff ffb2 	bl	8006570 <RTC_Bcd2ToByte>
 800660c:	70a0      	strb	r0, [r4, #2]
}
 800660e:	2000      	movs	r0, #0
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	00ffff3f 	.word	0x00ffff3f

08006618 <HAL_RTC_GetAlarm>:
{
 8006618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661a:	000c      	movs	r4, r1
 800661c:	9301      	str	r3, [sp, #4]
  if(Alarm == RTC_ALARM_A)
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	6801      	ldr	r1, [r0, #0]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	1c65      	adds	r5, r4, #1
 8006626:	4e2c      	ldr	r6, [pc, #176]	; (80066d8 <HAL_RTC_GetAlarm+0xc0>)
 8006628:	429a      	cmp	r2, r3
 800662a:	d133      	bne.n	8006694 <HAL_RTC_GetAlarm+0x7c>
    sAlarm->Alarm = RTC_ALARM_A;
 800662c:	6262      	str	r2, [r4, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800662e:	69ca      	ldr	r2, [r1, #28]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006630:	6c48      	ldr	r0, [r1, #68]	; 0x44
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8006632:	0c11      	lsrs	r1, r2, #16
 8006634:	b2c9      	uxtb	r1, r1
 8006636:	3bc1      	subs	r3, #193	; 0xc1
 8006638:	469c      	mov	ip, r3
 800663a:	400b      	ands	r3, r1
 800663c:	7023      	strb	r3, [r4, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800663e:	237f      	movs	r3, #127	; 0x7f
 8006640:	0a17      	lsrs	r7, r2, #8
 8006642:	401f      	ands	r7, r3
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8006644:	4013      	ands	r3, r2
 8006646:	70a3      	strb	r3, [r4, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	4019      	ands	r1, r3
 800664c:	70e1      	strb	r1, [r4, #3]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800664e:	4661      	mov	r1, ip
 8006650:	0e13      	lsrs	r3, r2, #24
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006652:	0440      	lsls	r0, r0, #17
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8006654:	400b      	ands	r3, r1
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006656:	0c40      	lsrs	r0, r0, #17
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8006658:	7067      	strb	r7, [r4, #1]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800665a:	6060      	str	r0, [r4, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800665c:	77eb      	strb	r3, [r5, #31]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800665e:	2380      	movs	r3, #128	; 0x80
 8006660:	05db      	lsls	r3, r3, #23
 8006662:	4013      	ands	r3, r2
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006664:	4032      	ands	r2, r6
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006666:	61e3      	str	r3, [r4, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006668:	6162      	str	r2, [r4, #20]
  if(Format == RTC_FORMAT_BIN)
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10f      	bne.n	8006690 <HAL_RTC_GetAlarm+0x78>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006670:	7820      	ldrb	r0, [r4, #0]
 8006672:	f7ff ff7d 	bl	8006570 <RTC_Bcd2ToByte>
 8006676:	7020      	strb	r0, [r4, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006678:	7860      	ldrb	r0, [r4, #1]
 800667a:	f7ff ff79 	bl	8006570 <RTC_Bcd2ToByte>
 800667e:	7060      	strb	r0, [r4, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006680:	78a0      	ldrb	r0, [r4, #2]
 8006682:	f7ff ff75 	bl	8006570 <RTC_Bcd2ToByte>
 8006686:	70a0      	strb	r0, [r4, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006688:	7fe8      	ldrb	r0, [r5, #31]
 800668a:	f7ff ff71 	bl	8006570 <RTC_Bcd2ToByte>
 800668e:	77e8      	strb	r0, [r5, #31]
}
 8006690:	2000      	movs	r0, #0
 8006692:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    sAlarm->Alarm = RTC_ALARM_B;
 8006694:	2380      	movs	r3, #128	; 0x80
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 8006696:	223f      	movs	r2, #63	; 0x3f
    sAlarm->Alarm = RTC_ALARM_B;
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	6263      	str	r3, [r4, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800669c:	6a0b      	ldr	r3, [r1, #32]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800669e:	6c88      	ldr	r0, [r1, #72]	; 0x48
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 80066a0:	0c19      	lsrs	r1, r3, #16
 80066a2:	b2c9      	uxtb	r1, r1
 80066a4:	4694      	mov	ip, r2
 80066a6:	400a      	ands	r2, r1
 80066a8:	7022      	strb	r2, [r4, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 80066aa:	227f      	movs	r2, #127	; 0x7f
 80066ac:	0a1f      	lsrs	r7, r3, #8
 80066ae:	4017      	ands	r7, r2
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 80066b0:	401a      	ands	r2, r3
 80066b2:	70a2      	strb	r2, [r4, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 80066b4:	2240      	movs	r2, #64	; 0x40
 80066b6:	4011      	ands	r1, r2
 80066b8:	70e1      	strb	r1, [r4, #3]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80066ba:	4661      	mov	r1, ip
 80066bc:	0e1a      	lsrs	r2, r3, #24
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80066be:	0440      	lsls	r0, r0, #17
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80066c0:	400a      	ands	r2, r1
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80066c2:	0c40      	lsrs	r0, r0, #17
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 80066c4:	7067      	strb	r7, [r4, #1]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80066c6:	6060      	str	r0, [r4, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80066c8:	77ea      	strb	r2, [r5, #31]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	05d2      	lsls	r2, r2, #23
 80066ce:	401a      	ands	r2, r3
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80066d0:	4033      	ands	r3, r6
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80066d2:	61e2      	str	r2, [r4, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80066d4:	6163      	str	r3, [r4, #20]
 80066d6:	e7c8      	b.n	800666a <HAL_RTC_GetAlarm+0x52>
 80066d8:	80808080 	.word	0x80808080

080066dc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066dc:	2202      	movs	r2, #2
 80066de:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066e0:	1c41      	adds	r1, r0, #1
 80066e2:	7fcc      	ldrb	r4, [r1, #31]
{
 80066e4:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80066e6:	0010      	movs	r0, r2
 80066e8:	2c01      	cmp	r4, #1
 80066ea:	d010      	beq.n	800670e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ec:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ee:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f0:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066f2:	32c8      	adds	r2, #200	; 0xc8
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
 80066f6:	3a77      	subs	r2, #119	; 0x77
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80066fa:	689c      	ldr	r4, [r3, #8]
 80066fc:	3a33      	subs	r2, #51	; 0x33
 80066fe:	4322      	orrs	r2, r4
 8006700:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006702:	22ff      	movs	r2, #255	; 0xff
 8006704:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006706:	2301      	movs	r3, #1
 8006708:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800670a:	2000      	movs	r0, #0
 800670c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800670e:	bd10      	pop	{r4, pc}

08006710 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8006710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006712:	001d      	movs	r5, r3
 8006714:	0004      	movs	r4, r0
 8006716:	000e      	movs	r6, r1
 8006718:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800671a:	f7fe f835 	bl	8004788 <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 800671e:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8006720:	0007      	movs	r7, r0
  if(Status == RESET)
 8006722:	2b00      	cmp	r3, #0
 8006724:	d035      	beq.n	8006792 <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	6893      	ldr	r3, [r2, #8]
 800672a:	4033      	ands	r3, r6
 800672c:	42b3      	cmp	r3, r6
 800672e:	d135      	bne.n	800679c <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 8006730:	1c6b      	adds	r3, r5, #1
 8006732:	d0f9      	beq.n	8006728 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006734:	2d00      	cmp	r5, #0
 8006736:	d00e      	beq.n	8006756 <SPI_WaitOnFlagUntilTimeout+0x46>
 8006738:	f7fe f826 	bl	8004788 <HAL_GetTick>
 800673c:	1bc0      	subs	r0, r0, r7
 800673e:	42a8      	cmp	r0, r5
 8006740:	d9f1      	bls.n	8006726 <SPI_WaitOnFlagUntilTimeout+0x16>
 8006742:	e008      	b.n	8006756 <SPI_WaitOnFlagUntilTimeout+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8006744:	1c6b      	adds	r3, r5, #1
 8006746:	d025      	beq.n	8006794 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006748:	2d00      	cmp	r5, #0
 800674a:	d004      	beq.n	8006756 <SPI_WaitOnFlagUntilTimeout+0x46>
 800674c:	f7fe f81c 	bl	8004788 <HAL_GetTick>
 8006750:	1bc0      	subs	r0, r0, r7
 8006752:	42a8      	cmp	r0, r5
 8006754:	d91d      	bls.n	8006792 <SPI_WaitOnFlagUntilTimeout+0x82>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006756:	21e0      	movs	r1, #224	; 0xe0
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	438a      	bics	r2, r1
 800675e:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	39a0      	subs	r1, #160	; 0xa0
 8006764:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006766:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 8006768:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800676a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800676c:	0189      	lsls	r1, r1, #6
 800676e:	428a      	cmp	r2, r1
 8006770:	d106      	bne.n	8006780 <SPI_WaitOnFlagUntilTimeout+0x70>
          {
            SPI_RESET_CRC(hspi);
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	480a      	ldr	r0, [pc, #40]	; (80067a0 <SPI_WaitOnFlagUntilTimeout+0x90>)
 8006776:	4001      	ands	r1, r0
 8006778:	6019      	str	r1, [r3, #0]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8006780:	0023      	movs	r3, r4
 8006782:	2201      	movs	r2, #1
 8006784:	3351      	adds	r3, #81	; 0x51
 8006786:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006788:	2300      	movs	r3, #0
 800678a:	3450      	adds	r4, #80	; 0x50
 800678c:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 800678e:	2003      	movs	r0, #3
 8006790:	e005      	b.n	800679e <SPI_WaitOnFlagUntilTimeout+0x8e>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	6893      	ldr	r3, [r2, #8]
 8006796:	4033      	ands	r3, r6
 8006798:	42b3      	cmp	r3, r6
 800679a:	d1d3      	bne.n	8006744 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800679c:	2000      	movs	r0, #0
}
 800679e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067a0:	ffffdfff 	.word	0xffffdfff

080067a4 <HAL_SPI_MspInit>:
}
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_SPI_Init>:
{
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80067ac:	2001      	movs	r0, #1
  if(hspi == NULL)
 80067ae:	2c00      	cmp	r4, #0
 80067b0:	d037      	beq.n	8006822 <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 80067b2:	0025      	movs	r5, r4
 80067b4:	3551      	adds	r5, #81	; 0x51
 80067b6:	782b      	ldrb	r3, [r5, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 80067be:	0022      	movs	r2, r4
 80067c0:	3250      	adds	r2, #80	; 0x50
 80067c2:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80067c4:	0020      	movs	r0, r4
 80067c6:	f7ff ffed 	bl	80067a4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80067ca:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80067d0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80067d2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80067d4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80067d6:	4393      	bics	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	69a2      	ldr	r2, [r4, #24]
 80067de:	4303      	orrs	r3, r0
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	4303      	orrs	r3, r0
 80067e4:	6920      	ldr	r0, [r4, #16]
 80067e6:	4303      	orrs	r3, r0
 80067e8:	6960      	ldr	r0, [r4, #20]
 80067ea:	4303      	orrs	r3, r0
 80067ec:	69e0      	ldr	r0, [r4, #28]
 80067ee:	4303      	orrs	r3, r0
 80067f0:	6a20      	ldr	r0, [r4, #32]
 80067f2:	4303      	orrs	r3, r0
 80067f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80067f6:	4303      	orrs	r3, r0
 80067f8:	2080      	movs	r0, #128	; 0x80
 80067fa:	0080      	lsls	r0, r0, #2
 80067fc:	4010      	ands	r0, r2
 80067fe:	4303      	orrs	r3, r0
 8006800:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006802:	2304      	movs	r3, #4
 8006804:	0c12      	lsrs	r2, r2, #16
 8006806:	401a      	ands	r2, r3
 8006808:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800680a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800680c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800680e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006810:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8006812:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006814:	69cb      	ldr	r3, [r1, #28]
 8006816:	4a03      	ldr	r2, [pc, #12]	; (8006824 <HAL_SPI_Init+0x7c>)
 8006818:	4013      	ands	r3, r2
 800681a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800681c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800681e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006820:	702b      	strb	r3, [r5, #0]
}
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	fffff7ff 	.word	0xfffff7ff

08006828 <HAL_SPI_TransmitReceive>:
{
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b085      	sub	sp, #20
 800682c:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 800682e:	a802      	add	r0, sp, #8
 8006830:	3006      	adds	r0, #6
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2000      	movs	r0, #0
 8006836:	9d01      	ldr	r5, [sp, #4]
 8006838:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 800683a:	0025      	movs	r5, r4
 800683c:	3551      	adds	r5, #81	; 0x51
 800683e:	7828      	ldrb	r0, [r5, #0]
 8006840:	2801      	cmp	r0, #1
 8006842:	d004      	beq.n	800684e <HAL_SPI_TransmitReceive+0x26>
 8006844:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8006846:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8006848:	2e22      	cmp	r6, #34	; 0x22
 800684a:	d000      	beq.n	800684e <HAL_SPI_TransmitReceive+0x26>
 800684c:	e07d      	b.n	800694a <HAL_SPI_TransmitReceive+0x122>
      return  HAL_ERROR;
 800684e:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8006850:	2900      	cmp	r1, #0
 8006852:	d07a      	beq.n	800694a <HAL_SPI_TransmitReceive+0x122>
 8006854:	2a00      	cmp	r2, #0
 8006856:	d078      	beq.n	800694a <HAL_SPI_TransmitReceive+0x122>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d076      	beq.n	800694a <HAL_SPI_TransmitReceive+0x122>
    __HAL_LOCK(hspi);
 800685c:	0026      	movs	r6, r4
 800685e:	3650      	adds	r6, #80	; 0x50
 8006860:	7837      	ldrb	r7, [r6, #0]
 8006862:	4287      	cmp	r7, r0
 8006864:	d100      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x40>
 8006866:	e14e      	b.n	8006b06 <HAL_SPI_TransmitReceive+0x2de>
 8006868:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 800686a:	7828      	ldrb	r0, [r5, #0]
 800686c:	2801      	cmp	r0, #1
 800686e:	d101      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x4c>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006870:	3031      	adds	r0, #49	; 0x31
 8006872:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006874:	2000      	movs	r0, #0
    hspi->pRxBuffPtr  = pRxData;
 8006876:	63a2      	str	r2, [r4, #56]	; 0x38
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006878:	2280      	movs	r2, #128	; 0x80
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800687a:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->RxISR = 0U;
 800687c:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800687e:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006880:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->RxXferCount = Size;  
 8006882:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferSize  = Size;
 8006884:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->TxXferSize  = Size; 
 8006886:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8006888:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->pTxBuffPtr  = pTxData;
 800688a:	6321      	str	r1, [r4, #48]	; 0x30
 800688c:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800688e:	0192      	lsls	r2, r2, #6
 8006890:	4290      	cmp	r0, r2
 8006892:	d106      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x7a>
      SPI_RESET_CRC(hspi);
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4f9d      	ldr	r7, [pc, #628]	; (8006b0c <HAL_SPI_TransmitReceive+0x2e4>)
 8006898:	403a      	ands	r2, r7
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4302      	orrs	r2, r0
 80068a0:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4694      	mov	ip, r2
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	4667      	mov	r7, ip
 80068aa:	4217      	tst	r7, r2
 80068ac:	d102      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x8c>
      __HAL_SPI_ENABLE(hspi);
 80068ae:	681f      	ldr	r7, [r3, #0]
 80068b0:	433a      	orrs	r2, r7
 80068b2:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068b4:	2780      	movs	r7, #128	; 0x80
 80068b6:	013f      	lsls	r7, r7, #4
 80068b8:	46bc      	mov	ip, r7
 80068ba:	68e7      	ldr	r7, [r4, #12]
 80068bc:	6862      	ldr	r2, [r4, #4]
 80068be:	4567      	cmp	r7, ip
 80068c0:	d000      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x9c>
 80068c2:	e07e      	b.n	80069c2 <HAL_SPI_TransmitReceive+0x19a>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0xae>
 80068c8:	2782      	movs	r7, #130	; 0x82
 80068ca:	007f      	lsls	r7, r7, #1
 80068cc:	42ba      	cmp	r2, r7
 80068ce:	d10a      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0xbe>
 80068d0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80068d2:	2a01      	cmp	r2, #1
 80068d4:	d107      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0xbe>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80068d6:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 80068d8:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80068da:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80068dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 80068de:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80068e0:	3a01      	subs	r2, #1
 80068e2:	b292      	uxth	r2, r2
 80068e4:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80068e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d162      	bne.n	80069b2 <HAL_SPI_TransmitReceive+0x18a>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	2280      	movs	r2, #128	; 0x80
 80068ee:	0192      	lsls	r2, r2, #6
 80068f0:	4290      	cmp	r0, r2
 80068f2:	d104      	bne.n	80068fe <HAL_SPI_TransmitReceive+0xd6>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80068f4:	2280      	movs	r2, #128	; 0x80
 80068f6:	6819      	ldr	r1, [r3, #0]
 80068f8:	0152      	lsls	r2, r2, #5
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80068fe:	2200      	movs	r2, #0
 8006900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006902:	2101      	movs	r1, #1
 8006904:	0020      	movs	r0, r4
 8006906:	f7ff ff03 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 800690a:	2800      	cmp	r0, #0
 800690c:	d11c      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006914:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 8006916:	3302      	adds	r3, #2
 8006918:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800691a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006926:	019b      	lsls	r3, r3, #6
 8006928:	429a      	cmp	r2, r3
 800692a:	d000      	beq.n	800692e <HAL_SPI_TransmitReceive+0x106>
 800692c:	e0c4      	b.n	8006ab8 <HAL_SPI_TransmitReceive+0x290>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800692e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006930:	2200      	movs	r2, #0
 8006932:	2101      	movs	r1, #1
 8006934:	0020      	movs	r0, r4
 8006936:	f7ff feeb 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 800693a:	2800      	cmp	r0, #0
 800693c:	d100      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x118>
 800693e:	e0b4      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x282>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006940:	2302      	movs	r3, #2
 8006942:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006944:	4313      	orrs	r3, r2
 8006946:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006948:	2003      	movs	r0, #3
}
 800694a:	b005      	add	sp, #20
 800694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	2200      	movs	r2, #0
 8006952:	2102      	movs	r1, #2
 8006954:	0020      	movs	r0, r4
 8006956:	f7ff fedb 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 800695a:	2800      	cmp	r0, #0
 800695c:	d1f4      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800695e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 8006964:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8006966:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 8006968:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 800696a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800696c:	3b01      	subs	r3, #1
 800696e:	b29b      	uxth	r3, r3
 8006970:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006972:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <HAL_SPI_TransmitReceive+0x166>
 8006978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800697a:	0019      	movs	r1, r3
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	019b      	lsls	r3, r3, #6
 8006980:	4299      	cmp	r1, r3
 8006982:	d104      	bne.n	800698e <HAL_SPI_TransmitReceive+0x166>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	0149      	lsls	r1, r1, #5
 800698a:	430b      	orrs	r3, r1
 800698c:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	2200      	movs	r2, #0
 8006992:	2101      	movs	r1, #1
 8006994:	0020      	movs	r0, r4
 8006996:	f7ff febb 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 800699a:	2800      	cmp	r0, #0
 800699c:	d1d4      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80069a6:	3302      	adds	r3, #2
 80069a8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80069aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80069b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1ca      	bne.n	800694e <HAL_SPI_TransmitReceive+0x126>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80069b8:	6862      	ldr	r2, [r4, #4]
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d1b1      	bne.n	8006922 <HAL_SPI_TransmitReceive+0xfa>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	e79f      	b.n	8006902 <HAL_SPI_TransmitReceive+0xda>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d006      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x1ac>
 80069c6:	2782      	movs	r7, #130	; 0x82
 80069c8:	007f      	lsls	r7, r7, #1
 80069ca:	42ba      	cmp	r2, r7
 80069cc:	d10a      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1bc>
 80069ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80069d0:	2a01      	cmp	r2, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1bc>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80069d4:	1c4a      	adds	r2, r1, #1
 80069d6:	6322      	str	r2, [r4, #48]	; 0x30
 80069d8:	780a      	ldrb	r2, [r1, #0]
 80069da:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80069dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80069de:	3a01      	subs	r2, #1
 80069e0:	b292      	uxth	r2, r2
 80069e2:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80069e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d149      	bne.n	8006a7e <HAL_SPI_TransmitReceive+0x256>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	0192      	lsls	r2, r2, #6
 80069ee:	4290      	cmp	r0, r2
 80069f0:	d104      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x1d4>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069f2:	2280      	movs	r2, #128	; 0x80
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	0152      	lsls	r2, r2, #5
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	2200      	movs	r2, #0
 8006a00:	2101      	movs	r1, #1
 8006a02:	0020      	movs	r0, r4
 8006a04:	f7ff fe84 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d19d      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x120>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	7013      	strb	r3, [r2, #0]
 8006a14:	e781      	b.n	800691a <HAL_SPI_TransmitReceive+0xf2>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8006a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	0020      	movs	r0, r4
 8006a1e:	f7ff fe77 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d000      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x200>
 8006a26:	e78f      	b.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8006a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	6322      	str	r2, [r4, #48]	; 0x30
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8006a34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x230>
 8006a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a44:	0019      	movs	r1, r3
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	d104      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x230>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	6813      	ldr	r3, [r2, #0]
 8006a52:	0149      	lsls	r1, r1, #5
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f7ff fe56 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d000      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0x242>
 8006a68:	e76e      	b.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a70:	1c59      	adds	r1, r3, #1
 8006a72:	63a1      	str	r1, [r4, #56]	; 0x38
 8006a74:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8006a76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8006a7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1c8      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x1ee>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a84:	6862      	ldr	r2, [r4, #4]
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	d000      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x264>
 8006a8a:	e74a      	b.n	8006922 <HAL_SPI_TransmitReceive+0xfa>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8e:	2101      	movs	r1, #1
 8006a90:	0020      	movs	r0, r4
 8006a92:	f7ff fe3d 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d000      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x274>
 8006a9a:	e755      	b.n	8006948 <HAL_SPI_TransmitReceive+0x120>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aa2:	1c59      	adds	r1, r3, #1
 8006aa4:	63a1      	str	r1, [r4, #56]	; 0x38
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e737      	b.n	800691a <HAL_SPI_TransmitReceive+0xf2>
      tmpreg = hspi->Instance->DR;
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	9a01      	ldr	r2, [sp, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8006ab4:	0013      	movs	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8006ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aba:	2201      	movs	r2, #1
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	0020      	movs	r0, r4
 8006ac0:	f7ff fe26 	bl	8006710 <SPI_WaitOnFlagUntilTimeout>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x2a6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006aca:	2320      	movs	r3, #32
 8006acc:	e73a      	b.n	8006944 <HAL_SPI_TransmitReceive+0x11c>
    hspi->State = HAL_SPI_STATE_READY;
 8006ace:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 8006ad4:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8006ad6:	019b      	lsls	r3, r3, #6
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d111      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x2d8>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	6899      	ldr	r1, [r3, #8]
 8006ae0:	06c9      	lsls	r1, r1, #27
 8006ae2:	d50d      	bpl.n	8006b00 <HAL_SPI_TransmitReceive+0x2d8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8006ae8:	4329      	orrs	r1, r5
 8006aea:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8006aec:	6819      	ldr	r1, [r3, #0]
 8006aee:	4c07      	ldr	r4, [pc, #28]	; (8006b0c <HAL_SPI_TransmitReceive+0x2e4>)
 8006af0:	4021      	ands	r1, r4
 8006af2:	6019      	str	r1, [r3, #0]
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8006afa:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 8006afc:	0038      	movs	r0, r7
 8006afe:	e724      	b.n	800694a <HAL_SPI_TransmitReceive+0x122>
    __HAL_UNLOCK(hspi);
 8006b00:	2300      	movs	r3, #0
 8006b02:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 8006b04:	e721      	b.n	800694a <HAL_SPI_TransmitReceive+0x122>
    return HAL_BUSY;
 8006b06:	2002      	movs	r0, #2
 8006b08:	e71f      	b.n	800694a <HAL_SPI_TransmitReceive+0x122>
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	ffffdfff 	.word	0xffffdfff

08006b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8006b14:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b16:	6882      	ldr	r2, [r0, #8]
 8006b18:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006b1a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b1c:	4302      	orrs	r2, r0
 8006b1e:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b20:	4e87      	ldr	r6, [pc, #540]	; (8006d40 <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b22:	4302      	orrs	r2, r0
 8006b24:	69e8      	ldr	r0, [r5, #28]
 8006b26:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006b28:	4886      	ldr	r0, [pc, #536]	; (8006d44 <UART_SetConfig+0x234>)
 8006b2a:	4001      	ands	r1, r0
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	4985      	ldr	r1, [pc, #532]	; (8006d48 <UART_SetConfig+0x238>)
 8006b34:	400a      	ands	r2, r1
 8006b36:	68e9      	ldr	r1, [r5, #12]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3c:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b3e:	42b3      	cmp	r3, r6
 8006b40:	d001      	beq.n	8006b46 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b42:	6a2a      	ldr	r2, [r5, #32]
 8006b44:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	4880      	ldr	r0, [pc, #512]	; (8006d4c <UART_SetConfig+0x23c>)
 8006b4a:	4002      	ands	r2, r0
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b50:	4a7f      	ldr	r2, [pc, #508]	; (8006d50 <UART_SetConfig+0x240>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d118      	bne.n	8006b88 <UART_SetConfig+0x78>
 8006b56:	2203      	movs	r2, #3
 8006b58:	4b7e      	ldr	r3, [pc, #504]	; (8006d54 <UART_SetConfig+0x244>)
 8006b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	4a7e      	ldr	r2, [pc, #504]	; (8006d58 <UART_SetConfig+0x248>)
 8006b60:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8006b62:	2002      	movs	r0, #2
 8006b64:	f7ff f956 	bl	8005e14 <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8006b68:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8006b6a:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8006b6c:	42b7      	cmp	r7, r6
 8006b6e:	d000      	beq.n	8006b72 <UART_SetConfig+0x62>
 8006b70:	e069      	b.n	8006c46 <UART_SetConfig+0x136>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 8006b72:	2c08      	cmp	r4, #8
 8006b74:	d900      	bls.n	8006b78 <UART_SetConfig+0x68>
 8006b76:	e0e0      	b.n	8006d3a <UART_SetConfig+0x22a>
 8006b78:	0020      	movs	r0, r4
 8006b7a:	f7f9 fac5 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006b7e:	de33      	.short	0xde33
 8006b80:	de5ede3b 	.word	0xde5ede3b
 8006b84:	dede      	.short	0xdede
 8006b86:	61          	.byte	0x61
 8006b87:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b88:	4a74      	ldr	r2, [pc, #464]	; (8006d5c <UART_SetConfig+0x24c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d107      	bne.n	8006b9e <UART_SetConfig+0x8e>
 8006b8e:	220c      	movs	r2, #12
 8006b90:	4b70      	ldr	r3, [pc, #448]	; (8006d54 <UART_SetConfig+0x244>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	401a      	ands	r2, r3
 8006b96:	4b70      	ldr	r3, [pc, #448]	; (8006d58 <UART_SetConfig+0x248>)
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	791c      	ldrb	r4, [r3, #4]
 8006b9c:	e7e1      	b.n	8006b62 <UART_SetConfig+0x52>
 8006b9e:	4a70      	ldr	r2, [pc, #448]	; (8006d60 <UART_SetConfig+0x250>)
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d0dd      	beq.n	8006b62 <UART_SetConfig+0x52>
 8006ba6:	4a6f      	ldr	r2, [pc, #444]	; (8006d64 <UART_SetConfig+0x254>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d0da      	beq.n	8006b62 <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006bac:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bae:	42b3      	cmp	r3, r6
 8006bb0:	d1d7      	bne.n	8006b62 <UART_SetConfig+0x52>
 8006bb2:	22c0      	movs	r2, #192	; 0xc0
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <UART_SetConfig+0x244>)
 8006bb8:	0112      	lsls	r2, r2, #4
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	00c9      	lsls	r1, r1, #3
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	3c0c      	subs	r4, #12
 8006bc2:	428b      	cmp	r3, r1
 8006bc4:	d0cd      	beq.n	8006b62 <UART_SetConfig+0x52>
 8006bc6:	d804      	bhi.n	8006bd2 <UART_SetConfig+0xc2>
 8006bc8:	2400      	movs	r4, #0
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	d0c9      	beq.n	8006b62 <UART_SetConfig+0x52>
 8006bce:	2410      	movs	r4, #16
 8006bd0:	e7c7      	b.n	8006b62 <UART_SetConfig+0x52>
 8006bd2:	2180      	movs	r1, #128	; 0x80
 8006bd4:	2402      	movs	r4, #2
 8006bd6:	0109      	lsls	r1, r1, #4
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	d0c2      	beq.n	8006b62 <UART_SetConfig+0x52>
 8006bdc:	3406      	adds	r4, #6
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d0bf      	beq.n	8006b62 <UART_SetConfig+0x52>
 8006be2:	e7f4      	b.n	8006bce <UART_SetConfig+0xbe>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006be4:	f7ff f80c 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8006be8:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006bea:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d109      	bne.n	8006c04 <UART_SetConfig+0xf4>
    }
  }

  return ret;

}
 8006bf0:	0020      	movs	r0, r4
 8006bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf4:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <UART_SetConfig+0x244>)
        tmpreg = (uint32_t) HSI_VALUE;
 8006bf6:	485c      	ldr	r0, [pc, #368]	; (8006d68 <UART_SetConfig+0x258>)
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf8:	681b      	ldr	r3, [r3, #0]
        tmpreg = (uint32_t) HSI_VALUE;
 8006bfa:	4a5c      	ldr	r2, [pc, #368]	; (8006d6c <UART_SetConfig+0x25c>)
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bfc:	06db      	lsls	r3, r3, #27
        tmpreg = (uint32_t) HSI_VALUE;
 8006bfe:	17db      	asrs	r3, r3, #31
 8006c00:	4003      	ands	r3, r0
 8006c02:	189b      	adds	r3, r3, r2
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006c04:	2103      	movs	r1, #3
 8006c06:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8006c08:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006c0a:	4351      	muls	r1, r2
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	d8ef      	bhi.n	8006bf0 <UART_SetConfig+0xe0>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8006c10:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006c12:	4299      	cmp	r1, r3
 8006c14:	d3ec      	bcc.n	8006bf0 <UART_SetConfig+0xe0>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8006c16:	2700      	movs	r7, #0
 8006c18:	0856      	lsrs	r6, r2, #1
 8006c1a:	0e19      	lsrs	r1, r3, #24
 8006c1c:	0218      	lsls	r0, r3, #8
 8006c1e:	1980      	adds	r0, r0, r6
 8006c20:	4179      	adcs	r1, r7
 8006c22:	003b      	movs	r3, r7
 8006c24:	f7f9 fc72 	bl	800050c <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006c28:	4b51      	ldr	r3, [pc, #324]	; (8006d70 <UART_SetConfig+0x260>)
 8006c2a:	18c2      	adds	r2, r0, r3
 8006c2c:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <UART_SetConfig+0x264>)
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d8de      	bhi.n	8006bf0 <UART_SetConfig+0xe0>
           huart->Instance->BRR = tmpreg;
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c36:	2400      	movs	r4, #0
      break;
 8006c38:	e7da      	b.n	8006bf0 <UART_SetConfig+0xe0>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe fee9 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006c3e:	e7d3      	b.n	8006be8 <UART_SetConfig+0xd8>
      tmpreg = (uint32_t) LSE_VALUE;
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	e7de      	b.n	8006c04 <UART_SetConfig+0xf4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	2280      	movs	r2, #128	; 0x80
 8006c48:	69e9      	ldr	r1, [r5, #28]
 8006c4a:	0212      	lsls	r2, r2, #8
 8006c4c:	4291      	cmp	r1, r2
 8006c4e:	d13f      	bne.n	8006cd0 <UART_SetConfig+0x1c0>
    switch (clocksource)
 8006c50:	2c08      	cmp	r4, #8
 8006c52:	d83a      	bhi.n	8006cca <UART_SetConfig+0x1ba>
 8006c54:	0020      	movs	r0, r4
 8006c56:	f7f9 fa57 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006c5a:	0f05      	.short	0x0f05
 8006c5c:	38303817 	.word	0x38303817
 8006c60:	3838      	.short	0x3838
 8006c62:	33          	.byte	0x33
 8006c63:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8006c64:	686a      	ldr	r2, [r5, #4]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0850      	lsrs	r0, r2, #1
 8006c6c:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c6e:	f7f9 fa5f 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c72:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c74:	b280      	uxth	r0, r0
      break;
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x196>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c78:	f7fe ffd2 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c7c:	686b      	ldr	r3, [r5, #4]
 8006c7e:	0040      	lsls	r0, r0, #1
 8006c80:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c82:	18c0      	adds	r0, r0, r3
 8006c84:	6869      	ldr	r1, [r5, #4]
 8006c86:	e7f2      	b.n	8006c6e <UART_SetConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c88:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <UART_SetConfig+0x244>)
 8006c8a:	6869      	ldr	r1, [r5, #4]
 8006c8c:	681c      	ldr	r4, [r3, #0]
 8006c8e:	2310      	movs	r3, #16
 8006c90:	0848      	lsrs	r0, r1, #1
 8006c92:	401c      	ands	r4, r3
 8006c94:	d002      	beq.n	8006c9c <UART_SetConfig+0x18c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006c96:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <UART_SetConfig+0x268>)
 8006c98:	18c0      	adds	r0, r0, r3
 8006c9a:	e7e8      	b.n	8006c6e <UART_SetConfig+0x15e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8006c9c:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <UART_SetConfig+0x26c>)
 8006c9e:	18c0      	adds	r0, r0, r3
 8006ca0:	f7f9 fa46 	bl	8000130 <__udivsi3>
 8006ca4:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8006ca6:	230f      	movs	r3, #15
 8006ca8:	0002      	movs	r2, r0
 8006caa:	439a      	bics	r2, r3
 8006cac:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8006cae:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8006cb0:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8006cb2:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8006cb4:	4318      	orrs	r0, r3
 8006cb6:	60d0      	str	r0, [r2, #12]
 8006cb8:	e79a      	b.n	8006bf0 <UART_SetConfig+0xe0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006cba:	f7fe fea9 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006cbe:	e7dd      	b.n	8006c7c <UART_SetConfig+0x16c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006cc0:	686b      	ldr	r3, [r5, #4]
 8006cc2:	0858      	lsrs	r0, r3, #1
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	025b      	lsls	r3, r3, #9
 8006cc8:	e7db      	b.n	8006c82 <UART_SetConfig+0x172>
        ret = HAL_ERROR;
 8006cca:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e7ea      	b.n	8006ca6 <UART_SetConfig+0x196>
    switch (clocksource)
 8006cd0:	2c08      	cmp	r4, #8
 8006cd2:	d832      	bhi.n	8006d3a <UART_SetConfig+0x22a>
 8006cd4:	0020      	movs	r0, r4
 8006cd6:	f7f9 fa17 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006cda:	1005      	.short	0x1005
 8006cdc:	30283013 	.word	0x30283013
 8006ce0:	3030      	.short	0x3030
 8006ce2:	2b          	.byte	0x2b
 8006ce3:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ce4:	f7fe ff8c 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	6869      	ldr	r1, [r5, #4]
 8006cea:	682c      	ldr	r4, [r5, #0]
 8006cec:	084b      	lsrs	r3, r1, #1
 8006cee:	1818      	adds	r0, r3, r0
 8006cf0:	f7f9 fa1e 	bl	8000130 <__udivsi3>
 8006cf4:	b280      	uxth	r0, r0
 8006cf6:	60e0      	str	r0, [r4, #12]
 8006cf8:	e79d      	b.n	8006c36 <UART_SetConfig+0x126>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006cfa:	f7fe ff91 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8006cfe:	e7f3      	b.n	8006ce8 <UART_SetConfig+0x1d8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <UART_SetConfig+0x244>)
 8006d02:	6869      	ldr	r1, [r5, #4]
 8006d04:	681c      	ldr	r4, [r3, #0]
 8006d06:	2310      	movs	r3, #16
 8006d08:	0848      	lsrs	r0, r1, #1
 8006d0a:	401c      	ands	r4, r3
 8006d0c:	d006      	beq.n	8006d1c <UART_SetConfig+0x20c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <UART_SetConfig+0x270>)
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d10:	18c0      	adds	r0, r0, r3
 8006d12:	f7f9 fa0d 	bl	8000130 <__udivsi3>
 8006d16:	b280      	uxth	r0, r0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	e78c      	b.n	8006c36 <UART_SetConfig+0x126>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <UART_SetConfig+0x25c>)
 8006d1e:	18c0      	adds	r0, r0, r3
 8006d20:	f7f9 fa06 	bl	8000130 <__udivsi3>
 8006d24:	b280      	uxth	r0, r0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	e762      	b.n	8006bf0 <UART_SetConfig+0xe0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d2a:	f7fe fe71 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006d2e:	e7db      	b.n	8006ce8 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	0848      	lsrs	r0, r1, #1
 8006d38:	e7ea      	b.n	8006d10 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8006d3a:	2401      	movs	r4, #1
 8006d3c:	e758      	b.n	8006bf0 <UART_SetConfig+0xe0>
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	40004800 	.word	0x40004800
 8006d44:	efff69f3 	.word	0xefff69f3
 8006d48:	ffffcfff 	.word	0xffffcfff
 8006d4c:	fffff4ff 	.word	0xfffff4ff
 8006d50:	40013800 	.word	0x40013800
 8006d54:	40021000 	.word	0x40021000
 8006d58:	0800d04d 	.word	0x0800d04d
 8006d5c:	40004400 	.word	0x40004400
 8006d60:	40004c00 	.word	0x40004c00
 8006d64:	40005000 	.word	0x40005000
 8006d68:	ff48e500 	.word	0xff48e500
 8006d6c:	00f42400 	.word	0x00f42400
 8006d70:	fffffd00 	.word	0xfffffd00
 8006d74:	000ffcff 	.word	0x000ffcff
 8006d78:	007a1200 	.word	0x007a1200
 8006d7c:	01e84800 	.word	0x01e84800
 8006d80:	003d0900 	.word	0x003d0900

08006d84 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006d86:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	d506      	bpl.n	8006d9a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d8c:	6801      	ldr	r1, [r0, #0]
 8006d8e:	4c28      	ldr	r4, [pc, #160]	; (8006e30 <UART_AdvFeatureConfig+0xac>)
 8006d90:	684a      	ldr	r2, [r1, #4]
 8006d92:	4022      	ands	r2, r4
 8006d94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006d96:	4322      	orrs	r2, r4
 8006d98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d9a:	079a      	lsls	r2, r3, #30
 8006d9c:	d506      	bpl.n	8006dac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d9e:	6801      	ldr	r1, [r0, #0]
 8006da0:	4c24      	ldr	r4, [pc, #144]	; (8006e34 <UART_AdvFeatureConfig+0xb0>)
 8006da2:	684a      	ldr	r2, [r1, #4]
 8006da4:	4022      	ands	r2, r4
 8006da6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006da8:	4322      	orrs	r2, r4
 8006daa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dac:	075a      	lsls	r2, r3, #29
 8006dae:	d506      	bpl.n	8006dbe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db0:	6801      	ldr	r1, [r0, #0]
 8006db2:	4c21      	ldr	r4, [pc, #132]	; (8006e38 <UART_AdvFeatureConfig+0xb4>)
 8006db4:	684a      	ldr	r2, [r1, #4]
 8006db6:	4022      	ands	r2, r4
 8006db8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006dba:	4322      	orrs	r2, r4
 8006dbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dbe:	071a      	lsls	r2, r3, #28
 8006dc0:	d506      	bpl.n	8006dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc2:	6801      	ldr	r1, [r0, #0]
 8006dc4:	4c1d      	ldr	r4, [pc, #116]	; (8006e3c <UART_AdvFeatureConfig+0xb8>)
 8006dc6:	684a      	ldr	r2, [r1, #4]
 8006dc8:	4022      	ands	r2, r4
 8006dca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006dcc:	4322      	orrs	r2, r4
 8006dce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd0:	06da      	lsls	r2, r3, #27
 8006dd2:	d506      	bpl.n	8006de2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd4:	6801      	ldr	r1, [r0, #0]
 8006dd6:	4c1a      	ldr	r4, [pc, #104]	; (8006e40 <UART_AdvFeatureConfig+0xbc>)
 8006dd8:	688a      	ldr	r2, [r1, #8]
 8006dda:	4022      	ands	r2, r4
 8006ddc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006dde:	4322      	orrs	r2, r4
 8006de0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de2:	069a      	lsls	r2, r3, #26
 8006de4:	d506      	bpl.n	8006df4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006de6:	6801      	ldr	r1, [r0, #0]
 8006de8:	4c16      	ldr	r4, [pc, #88]	; (8006e44 <UART_AdvFeatureConfig+0xc0>)
 8006dea:	688a      	ldr	r2, [r1, #8]
 8006dec:	4022      	ands	r2, r4
 8006dee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006df0:	4322      	orrs	r2, r4
 8006df2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df4:	065a      	lsls	r2, r3, #25
 8006df6:	d510      	bpl.n	8006e1a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006df8:	6801      	ldr	r1, [r0, #0]
 8006dfa:	4d13      	ldr	r5, [pc, #76]	; (8006e48 <UART_AdvFeatureConfig+0xc4>)
 8006dfc:	684a      	ldr	r2, [r1, #4]
 8006dfe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006e00:	402a      	ands	r2, r5
 8006e02:	4322      	orrs	r2, r4
 8006e04:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	0352      	lsls	r2, r2, #13
 8006e0a:	4294      	cmp	r4, r2
 8006e0c:	d105      	bne.n	8006e1a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e0e:	684a      	ldr	r2, [r1, #4]
 8006e10:	4c0e      	ldr	r4, [pc, #56]	; (8006e4c <UART_AdvFeatureConfig+0xc8>)
 8006e12:	4022      	ands	r2, r4
 8006e14:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006e16:	4322      	orrs	r2, r4
 8006e18:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1a:	061b      	lsls	r3, r3, #24
 8006e1c:	d506      	bpl.n	8006e2c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e1e:	6802      	ldr	r2, [r0, #0]
 8006e20:	490b      	ldr	r1, [pc, #44]	; (8006e50 <UART_AdvFeatureConfig+0xcc>)
 8006e22:	6853      	ldr	r3, [r2, #4]
 8006e24:	400b      	ands	r3, r1
 8006e26:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6053      	str	r3, [r2, #4]
  }
}
 8006e2c:	bd30      	pop	{r4, r5, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	fffdffff 	.word	0xfffdffff
 8006e34:	fffeffff 	.word	0xfffeffff
 8006e38:	fffbffff 	.word	0xfffbffff
 8006e3c:	ffff7fff 	.word	0xffff7fff
 8006e40:	ffffefff 	.word	0xffffefff
 8006e44:	ffffdfff 	.word	0xffffdfff
 8006e48:	ffefffff 	.word	0xffefffff
 8006e4c:	ff9fffff 	.word	0xff9fffff
 8006e50:	fff7ffff 	.word	0xfff7ffff

08006e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	0004      	movs	r4, r0
 8006e58:	000e      	movs	r6, r1
 8006e5a:	0015      	movs	r5, r2
 8006e5c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	69d3      	ldr	r3, [r2, #28]
 8006e62:	4033      	ands	r3, r6
 8006e64:	1b9b      	subs	r3, r3, r6
 8006e66:	4259      	negs	r1, r3
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	42ab      	cmp	r3, r5
 8006e6c:	d001      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e018      	b.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8006e72:	9b06      	ldr	r3, [sp, #24]
 8006e74:	3301      	adds	r3, #1
 8006e76:	d0f3      	beq.n	8006e60 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d113      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	490c      	ldr	r1, [pc, #48]	; (8006eb4 <UART_WaitOnFlagUntilTimeout+0x60>)
 8006e82:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8006e84:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e86:	400a      	ands	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	31a3      	adds	r1, #163	; 0xa3
 8006e8e:	31ff      	adds	r1, #255	; 0xff
 8006e90:	438a      	bics	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8006e94:	0022      	movs	r2, r4
 8006e96:	2320      	movs	r3, #32
 8006e98:	3269      	adds	r2, #105	; 0x69
 8006e9a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	3468      	adds	r4, #104	; 0x68
 8006ea2:	7023      	strb	r3, [r4, #0]
}
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006ea6:	f7fd fc6f 	bl	8004788 <HAL_GetTick>
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	1bc0      	subs	r0, r0, r7
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	d9d5      	bls.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xa>
 8006eb2:	e7e4      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x2a>
 8006eb4:	fffffe5f 	.word	0xfffffe5f

08006eb8 <HAL_UART_Transmit>:
{
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8006eba:	0007      	movs	r7, r0
{
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8006ec0:	3769      	adds	r7, #105	; 0x69
 8006ec2:	783b      	ldrb	r3, [r7, #0]
{
 8006ec4:	0004      	movs	r4, r0
 8006ec6:	000d      	movs	r5, r1
 8006ec8:	0016      	movs	r6, r2
    return HAL_BUSY;
 8006eca:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d146      	bne.n	8006f5e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8006ed0:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8006ed2:	2900      	cmp	r1, #0
 8006ed4:	d043      	beq.n	8006f5e <HAL_UART_Transmit+0xa6>
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	d041      	beq.n	8006f5e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	68a2      	ldr	r2, [r4, #8]
 8006ede:	015b      	lsls	r3, r3, #5
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d104      	bne.n	8006eee <HAL_UART_Transmit+0x36>
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1) != 0)
 8006eea:	4201      	tst	r1, r0
 8006eec:	d137      	bne.n	8006f5e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8006eee:	0023      	movs	r3, r4
 8006ef0:	3368      	adds	r3, #104	; 0x68
 8006ef2:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8006ef4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006ef6:	2a01      	cmp	r2, #1
 8006ef8:	d031      	beq.n	8006f5e <HAL_UART_Transmit+0xa6>
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f02:	3321      	adds	r3, #33	; 0x21
 8006f04:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8006f06:	f7fd fc3f 	bl	8004788 <HAL_GetTick>
    huart->TxXferSize = Size;
 8006f0a:	0023      	movs	r3, r4
 8006f0c:	3350      	adds	r3, #80	; 0x50
 8006f0e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8006f10:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f12:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8006f14:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f16:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0U)
 8006f18:	0021      	movs	r1, r4
 8006f1a:	3152      	adds	r1, #82	; 0x52
 8006f1c:	880a      	ldrh	r2, [r1, #0]
 8006f1e:	b292      	uxth	r2, r2
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	d10d      	bne.n	8006f40 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	2140      	movs	r1, #64	; 0x40
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	f7ff ff91 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d112      	bne.n	8006f5c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8006f36:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006f38:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8006f3a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8006f3c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8006f3e:	e00e      	b.n	8006f5e <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8006f40:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f42:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	0020      	movs	r0, r4
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	f7ff ff7e 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8006f5c:	2003      	movs	r0, #3
}
 8006f5e:	b005      	add	sp, #20
 8006f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	42b3      	cmp	r3, r6
 8006f68:	d108      	bne.n	8006f7c <HAL_UART_Transmit+0xc4>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006f70:	882b      	ldrh	r3, [r5, #0]
        pData += 2U;
 8006f72:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006f74:	05db      	lsls	r3, r3, #23
 8006f76:	0ddb      	lsrs	r3, r3, #23
 8006f78:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006f7a:	e7cd      	b.n	8006f18 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006f7c:	782b      	ldrb	r3, [r5, #0]
 8006f7e:	3501      	adds	r5, #1
 8006f80:	6293      	str	r3, [r2, #40]	; 0x28
 8006f82:	e7c9      	b.n	8006f18 <HAL_UART_Transmit+0x60>

08006f84 <UART_CheckIdleState>:
{
 8006f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f86:	2600      	movs	r6, #0
{
 8006f88:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006f8c:	f7fd fbfc 	bl	8004788 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f90:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006f92:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	071b      	lsls	r3, r3, #28
 8006f98:	d417      	bmi.n	8006fca <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	075b      	lsls	r3, r3, #29
 8006fa0:	d50a      	bpl.n	8006fb8 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <UART_CheckIdleState+0x60>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	03c9      	lsls	r1, r1, #15
 8006fac:	002b      	movs	r3, r5
 8006fae:	0020      	movs	r0, r4
 8006fb0:	f7ff ff50 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d113      	bne.n	8006fe0 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8006fb8:	0022      	movs	r2, r4
 8006fba:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006fbc:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8006fbe:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8006fc0:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8006fc2:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8006fc6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006fc8:	e00b      	b.n	8006fe2 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <UART_CheckIdleState+0x60>)
 8006fce:	0032      	movs	r2, r6
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	0389      	lsls	r1, r1, #14
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f7ff ff3c 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d0dc      	beq.n	8006f9a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006fe0:	2003      	movs	r0, #3
}
 8006fe2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006fe4:	01ffffff 	.word	0x01ffffff

08006fe8 <HAL_UART_Init>:
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006fee:	2001      	movs	r0, #1
}
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8006ff2:	0005      	movs	r5, r0
 8006ff4:	3569      	adds	r5, #105	; 0x69
 8006ff6:	782b      	ldrb	r3, [r5, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8006ffe:	0002      	movs	r2, r0
 8007000:	3268      	adds	r2, #104	; 0x68
 8007002:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8007004:	f005 f95e 	bl	800c2c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007008:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800700a:	2101      	movs	r1, #1
 800700c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800700e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	438b      	bics	r3, r1
 8007014:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 800701c:	0020      	movs	r0, r4
 800701e:	f7ff feb1 	bl	8006d84 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007022:	0020      	movs	r0, r4
 8007024:	f7ff fd74 	bl	8006b10 <UART_SetConfig>
 8007028:	2801      	cmp	r0, #1
 800702a:	d0e0      	beq.n	8006fee <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	4908      	ldr	r1, [pc, #32]	; (8007050 <HAL_UART_Init+0x68>)
 8007030:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8007032:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007034:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007036:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	438a      	bics	r2, r1
 800703e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007040:	2201      	movs	r2, #1
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007048:	f7ff ff9c 	bl	8006f84 <UART_CheckIdleState>
 800704c:	e7d0      	b.n	8006ff0 <HAL_UART_Init+0x8>
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	ffffb7ff 	.word	0xffffb7ff

08007054 <McpsConfirm>:
            }
            default:
                break;
        }
    }
    NextTx = true;
 8007054:	2201      	movs	r2, #1
 8007056:	4b01      	ldr	r3, [pc, #4]	; (800705c <McpsConfirm+0x8>)
 8007058:	701a      	strb	r2, [r3, #0]
}
 800705a:	4770      	bx	lr
 800705c:	20000034 	.word	0x20000034

08007060 <MlmeConfirm>:
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    switch( mlmeConfirm->MlmeRequest )
 8007060:	7802      	ldrb	r2, [r0, #0]
 8007062:	2a00      	cmp	r2, #0
 8007064:	d005      	beq.n	8007072 <MlmeConfirm+0x12>
 8007066:	2a01      	cmp	r2, #1
 8007068:	d00c      	beq.n	8007084 <MlmeConfirm+0x24>
            break;
        }
        default:
            break;
    }
    NextTx = true;
 800706a:	2201      	movs	r2, #1
 800706c:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <MlmeConfirm+0x40>)
 800706e:	701a      	strb	r2, [r3, #0]
}
 8007070:	4770      	bx	lr
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007072:	7842      	ldrb	r2, [r0, #1]
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <MlmeConfirm+0x44>)
 8007076:	2a00      	cmp	r2, #0
 8007078:	d102      	bne.n	8007080 <MlmeConfirm+0x20>
                DeviceState = DEVICE_STATE_JOINED;
 800707a:	3202      	adds	r2, #2
                DeviceState = DEVICE_STATE_JOIN;
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	e7f4      	b.n	800706a <MlmeConfirm+0xa>
 8007080:	2201      	movs	r2, #1
 8007082:	e7fb      	b.n	800707c <MlmeConfirm+0x1c>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007084:	7843      	ldrb	r3, [r0, #1]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1ef      	bne.n	800706a <MlmeConfirm+0xa>
                if( ComplianceTest.Running == true )
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <MlmeConfirm+0x48>)
 800708c:	7819      	ldrb	r1, [r3, #0]
 800708e:	2900      	cmp	r1, #0
 8007090:	d0eb      	beq.n	800706a <MlmeConfirm+0xa>
                    ComplianceTest.LinkCheck = true;
 8007092:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
 8007094:	7a02      	ldrb	r2, [r0, #8]
 8007096:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
 8007098:	7a42      	ldrb	r2, [r0, #9]
 800709a:	741a      	strb	r2, [r3, #16]
 800709c:	e7e5      	b.n	800706a <MlmeConfirm+0xa>
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	20000034 	.word	0x20000034
 80070a4:	20000284 	.word	0x20000284
 80070a8:	20000e14 	.word	0x20000e14

080070ac <McpsIndication>:
{
 80070ac:	b530      	push	{r4, r5, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80070ae:	7842      	ldrb	r2, [r0, #1]
{
 80070b0:	b089      	sub	sp, #36	; 0x24
 80070b2:	0003      	movs	r3, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d133      	bne.n	8007120 <McpsIndication+0x74>
    if( ComplianceTest.Running == true )
 80070b8:	4c63      	ldr	r4, [pc, #396]	; (8007248 <McpsIndication+0x19c>)
 80070ba:	7825      	ldrb	r5, [r4, #0]
 80070bc:	2d00      	cmp	r5, #0
 80070be:	d002      	beq.n	80070c6 <McpsIndication+0x1a>
        ComplianceTest.DownLinkCounter++;
 80070c0:	89a2      	ldrh	r2, [r4, #12]
 80070c2:	3201      	adds	r2, #1
 80070c4:	81a2      	strh	r2, [r4, #12]
    if( mcpsIndication->RxData == true )
 80070c6:	7b5a      	ldrb	r2, [r3, #13]
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d029      	beq.n	8007120 <McpsIndication+0x74>
        switch( mcpsIndication->Port )
 80070cc:	78da      	ldrb	r2, [r3, #3]
 80070ce:	2ae0      	cmp	r2, #224	; 0xe0
 80070d0:	d000      	beq.n	80070d4 <McpsIndication+0x28>
 80070d2:	e0aa      	b.n	800722a <McpsIndication+0x17e>
            if( ComplianceTest.Running == false )
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	d125      	bne.n	8007124 <McpsIndication+0x78>
                if( ( mcpsIndication->BufferSize == 4 ) &&
 80070d8:	7b1a      	ldrb	r2, [r3, #12]
 80070da:	2a04      	cmp	r2, #4
 80070dc:	d120      	bne.n	8007120 <McpsIndication+0x74>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80070de:	689b      	ldr	r3, [r3, #8]
                if( ( mcpsIndication->BufferSize == 4 ) &&
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	2a01      	cmp	r2, #1
 80070e4:	d11c      	bne.n	8007120 <McpsIndication+0x74>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80070e6:	785a      	ldrb	r2, [r3, #1]
 80070e8:	2a01      	cmp	r2, #1
 80070ea:	d119      	bne.n	8007120 <McpsIndication+0x74>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80070ec:	789a      	ldrb	r2, [r3, #2]
 80070ee:	2a01      	cmp	r2, #1
 80070f0:	d116      	bne.n	8007120 <McpsIndication+0x74>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80070f2:	78db      	ldrb	r3, [r3, #3]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d113      	bne.n	8007120 <McpsIndication+0x74>
                    IsTxConfirmed = DISABLE;
 80070f8:	4a54      	ldr	r2, [pc, #336]	; (800724c <McpsIndication+0x1a0>)
                    AppData.BuffSize = 2;
 80070fa:	4955      	ldr	r1, [pc, #340]	; (8007250 <McpsIndication+0x1a4>)
                    IsTxConfirmed = DISABLE;
 80070fc:	7055      	strb	r5, [r2, #1]
                    AppData.BuffSize = 2;
 80070fe:	4a55      	ldr	r2, [pc, #340]	; (8007254 <McpsIndication+0x1a8>)
                    mibReq.Type = MIB_ADR;
 8007100:	a803      	add	r0, sp, #12
                    AppData.BuffSize = 2;
 8007102:	8111      	strh	r1, [r2, #8]
                    mibReq.Type = MIB_ADR;
 8007104:	2202      	movs	r2, #2
                    ComplianceTest.DownLinkCounter = 0;
 8007106:	81a5      	strh	r5, [r4, #12]
                    ComplianceTest.LinkCheck = false;
 8007108:	73a5      	strb	r5, [r4, #14]
                    ComplianceTest.DemodMargin = 0;
 800710a:	73e5      	strb	r5, [r4, #15]
                    ComplianceTest.NbGateways = 0;
 800710c:	7425      	strb	r5, [r4, #16]
                    ComplianceTest.Running = true;
 800710e:	7023      	strb	r3, [r4, #0]
                    ComplianceTest.State = 1;
 8007110:	7063      	strb	r3, [r4, #1]
                    mibReq.Type = MIB_ADR;
 8007112:	7002      	strb	r2, [r0, #0]
                    mibReq.Param.AdrEnable = true;
 8007114:	7103      	strb	r3, [r0, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007116:	f002 facd 	bl	80096b4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( false );
 800711a:	0028      	movs	r0, r5
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800711c:	f002 fd7a 	bl	8009c14 <LoRaMacTestSetDutyCycleOn>
}
 8007120:	b009      	add	sp, #36	; 0x24
 8007122:	bd30      	pop	{r4, r5, pc}
                ComplianceTest.State = mcpsIndication->Buffer[0];
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	7810      	ldrb	r0, [r2, #0]
 8007128:	7060      	strb	r0, [r4, #1]
                switch( ComplianceTest.State )
 800712a:	2807      	cmp	r0, #7
 800712c:	d8f8      	bhi.n	8007120 <McpsIndication+0x74>
 800712e:	f7f8 ffeb 	bl	8000108 <__gnu_thumb1_case_uqi>
 8007132:	1204      	.short	0x1204
 8007134:	32201b16 	.word	0x32201b16
 8007138:	5738      	.short	0x5738
                    ComplianceTest.DownLinkCounter = 0;
 800713a:	2300      	movs	r3, #0
                    mibReq.Type = MIB_ADR;
 800713c:	a803      	add	r0, sp, #12
                    ComplianceTest.DownLinkCounter = 0;
 800713e:	81a3      	strh	r3, [r4, #12]
                    ComplianceTest.Running = false;
 8007140:	7023      	strb	r3, [r4, #0]
                    mibReq.Type = MIB_ADR;
 8007142:	3302      	adds	r3, #2
 8007144:	7003      	strb	r3, [r0, #0]
                    mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 8007146:	4b41      	ldr	r3, [pc, #260]	; (800724c <McpsIndication+0x1a0>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	7a5b      	ldrb	r3, [r3, #9]
 800714c:	7103      	strb	r3, [r0, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800714e:	f002 fab1 	bl	80096b4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 8007152:	2001      	movs	r0, #1
 8007154:	e7e2      	b.n	800711c <McpsIndication+0x70>
                    AppData.BuffSize = 2;
 8007156:	2202      	movs	r2, #2
 8007158:	4b3e      	ldr	r3, [pc, #248]	; (8007254 <McpsIndication+0x1a8>)
 800715a:	721a      	strb	r2, [r3, #8]
 800715c:	e7e0      	b.n	8007120 <McpsIndication+0x74>
                    IsTxConfirmed = ENABLE;
 800715e:	2301      	movs	r3, #1
 8007160:	4a3a      	ldr	r2, [pc, #232]	; (800724c <McpsIndication+0x1a0>)
 8007162:	7053      	strb	r3, [r2, #1]
                        ComplianceTest.State = 1;
 8007164:	7063      	strb	r3, [r4, #1]
 8007166:	e7db      	b.n	8007120 <McpsIndication+0x74>
                    IsTxConfirmed = DISABLE;
 8007168:	2200      	movs	r2, #0
 800716a:	4b38      	ldr	r3, [pc, #224]	; (800724c <McpsIndication+0x1a0>)
 800716c:	705a      	strb	r2, [r3, #1]
                        ComplianceTest.State = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	e7f8      	b.n	8007164 <McpsIndication+0xb8>
                    AppData.BuffSize = mcpsIndication->BufferSize;
 8007172:	7b1a      	ldrb	r2, [r3, #12]
 8007174:	4937      	ldr	r1, [pc, #220]	; (8007254 <McpsIndication+0x1a8>)
 8007176:	720a      	strb	r2, [r1, #8]
                    AppData.Buff[0] = 4;
 8007178:	2204      	movs	r2, #4
 800717a:	6848      	ldr	r0, [r1, #4]
 800717c:	7002      	strb	r2, [r0, #0]
                    for( uint8_t i = 1; i < AppData.BuffSize; i++ )
 800717e:	3a03      	subs	r2, #3
 8007180:	7a08      	ldrb	r0, [r1, #8]
 8007182:	4290      	cmp	r0, r2
 8007184:	d9cc      	bls.n	8007120 <McpsIndication+0x74>
                        AppData.Buff[i] = mcpsIndication->Buffer[i] + 1;
 8007186:	6898      	ldr	r0, [r3, #8]
 8007188:	684c      	ldr	r4, [r1, #4]
 800718a:	5c80      	ldrb	r0, [r0, r2]
 800718c:	3001      	adds	r0, #1
 800718e:	54a0      	strb	r0, [r4, r2]
                    for( uint8_t i = 1; i < AppData.BuffSize; i++ )
 8007190:	3201      	adds	r2, #1
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	e7f4      	b.n	8007180 <McpsIndication+0xd4>
                        mlmeReq.Type = MLME_LINK_CHECK;
 8007196:	2301      	movs	r3, #1
 8007198:	a803      	add	r0, sp, #12
 800719a:	7003      	strb	r3, [r0, #0]
                        LoRaMacMlmeRequest( &mlmeReq );
 800719c:	f002 fbe6 	bl	800996c <LoRaMacMlmeRequest>
 80071a0:	e7be      	b.n	8007120 <McpsIndication+0x74>
                        ComplianceTest.DownLinkCounter = 0;
 80071a2:	2500      	movs	r5, #0
                        mibReq.Type = MIB_ADR;
 80071a4:	466a      	mov	r2, sp
 80071a6:	2302      	movs	r3, #2
                        ComplianceTest.DownLinkCounter = 0;
 80071a8:	81a5      	strh	r5, [r4, #12]
                        ComplianceTest.Running = false;
 80071aa:	7025      	strb	r5, [r4, #0]
                        mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 80071ac:	4c27      	ldr	r4, [pc, #156]	; (800724c <McpsIndication+0x1a0>)
                        mibReq.Type = MIB_ADR;
 80071ae:	7013      	strb	r3, [r2, #0]
                        mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 80071b0:	6863      	ldr	r3, [r4, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 80071b2:	4668      	mov	r0, sp
                        mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 80071b4:	7a5b      	ldrb	r3, [r3, #9]
 80071b6:	7113      	strb	r3, [r2, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 80071b8:	f002 fa7c 	bl	80096b4 <LoRaMacMibSetRequestConfirm>
                        mlmeReq.Req.Join.DevEui = DevEui;
 80071bc:	4b25      	ldr	r3, [pc, #148]	; (8007254 <McpsIndication+0x1a8>)
                        mlmeReq.Type = MLME_JOIN;
 80071be:	a803      	add	r0, sp, #12
                        mlmeReq.Req.Join.DevEui = DevEui;
 80071c0:	001a      	movs	r2, r3
 80071c2:	320c      	adds	r2, #12
 80071c4:	6042      	str	r2, [r0, #4]
                        mlmeReq.Req.Join.AppEui = AppEui;
 80071c6:	001a      	movs	r2, r3
                        mlmeReq.Req.Join.AppKey = AppKey;
 80071c8:	331c      	adds	r3, #28
 80071ca:	60c3      	str	r3, [r0, #12]
                        mlmeReq.Req.Join.NbTrials = 3;
 80071cc:	2303      	movs	r3, #3
                        mlmeReq.Req.Join.AppEui = AppEui;
 80071ce:	3214      	adds	r2, #20
                        mlmeReq.Req.Join.NbTrials = 3;
 80071d0:	7403      	strb	r3, [r0, #16]
                        mlmeReq.Type = MLME_JOIN;
 80071d2:	7005      	strb	r5, [r0, #0]
                        mlmeReq.Req.Join.AppEui = AppEui;
 80071d4:	6082      	str	r2, [r0, #8]
                        LoRaMacMlmeRequest( &mlmeReq );
 80071d6:	f002 fbc9 	bl	800996c <LoRaMacMlmeRequest>
                        DeviceState = DEVICE_STATE_SLEEP;
 80071da:	2305      	movs	r3, #5
 80071dc:	7023      	strb	r3, [r4, #0]
 80071de:	e79f      	b.n	8007120 <McpsIndication+0x74>
                        if( mcpsIndication->BufferSize == 3 )
 80071e0:	7b1b      	ldrb	r3, [r3, #12]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d10a      	bne.n	80071fc <McpsIndication+0x150>
                            mlmeReq.Type = MLME_TXCW;
 80071e6:	a803      	add	r0, sp, #12
 80071e8:	3b01      	subs	r3, #1
 80071ea:	7003      	strb	r3, [r0, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80071ec:	7851      	ldrb	r1, [r2, #1]
 80071ee:	7893      	ldrb	r3, [r2, #2]
 80071f0:	0209      	lsls	r1, r1, #8
 80071f2:	430b      	orrs	r3, r1
 80071f4:	8083      	strh	r3, [r0, #4]
                            LoRaMacMlmeRequest( &mlmeReq );
 80071f6:	f002 fbb9 	bl	800996c <LoRaMacMlmeRequest>
 80071fa:	e7b8      	b.n	800716e <McpsIndication+0xc2>
                        else if( mcpsIndication->BufferSize == 7 )
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	d1b6      	bne.n	800716e <McpsIndication+0xc2>
                            mlmeReq.Type = MLME_TXCW_1;
 8007200:	a803      	add	r0, sp, #12
 8007202:	3b04      	subs	r3, #4
 8007204:	7003      	strb	r3, [r0, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007206:	7851      	ldrb	r1, [r2, #1]
 8007208:	7893      	ldrb	r3, [r2, #2]
 800720a:	0209      	lsls	r1, r1, #8
 800720c:	430b      	orrs	r3, r1
 800720e:	8083      	strh	r3, [r0, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007210:	78d3      	ldrb	r3, [r2, #3]
 8007212:	7911      	ldrb	r1, [r2, #4]
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	0209      	lsls	r1, r1, #8
 8007218:	430b      	orrs	r3, r1
 800721a:	7951      	ldrb	r1, [r2, #5]
 800721c:	430b      	orrs	r3, r1
 800721e:	2164      	movs	r1, #100	; 0x64
 8007220:	434b      	muls	r3, r1
 8007222:	6083      	str	r3, [r0, #8]
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007224:	7993      	ldrb	r3, [r2, #6]
 8007226:	7303      	strb	r3, [r0, #12]
 8007228:	e7e5      	b.n	80071f6 <McpsIndication+0x14a>
            AppData.Port = mcpsIndication->Port;
 800722a:	4c0a      	ldr	r4, [pc, #40]	; (8007254 <McpsIndication+0x1a8>)
            memcpy1( AppData.Buff, mcpsIndication->Buffer, AppData.BuffSize );
 800722c:	6899      	ldr	r1, [r3, #8]
            AppData.Port = mcpsIndication->Port;
 800722e:	7262      	strb	r2, [r4, #9]
            AppData.BuffSize = mcpsIndication->BufferSize;
 8007230:	7b1a      	ldrb	r2, [r3, #12]
            memcpy1( AppData.Buff, mcpsIndication->Buffer, AppData.BuffSize );
 8007232:	6860      	ldr	r0, [r4, #4]
            AppData.BuffSize = mcpsIndication->BufferSize;
 8007234:	7222      	strb	r2, [r4, #8]
            memcpy1( AppData.Buff, mcpsIndication->Buffer, AppData.BuffSize );
 8007236:	b292      	uxth	r2, r2
 8007238:	f003 ffd7 	bl	800b1ea <memcpy1>
            LoRaMainCallbacks->LoraRxData( &AppData );
 800723c:	4b03      	ldr	r3, [pc, #12]	; (800724c <McpsIndication+0x1a0>)
 800723e:	1d20      	adds	r0, r4, #4
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4798      	blx	r3
 8007246:	e76b      	b.n	8007120 <McpsIndication+0x74>
 8007248:	20000e14 	.word	0x20000e14
 800724c:	20000284 	.word	0x20000284
 8007250:	ffffe002 	.word	0xffffe002
 8007254:	20000034 	.word	0x20000034

08007258 <OnSendEvent>:
{
 8007258:	b530      	push	{r4, r5, lr}
    mibReq.Type = MIB_NETWORK_JOINED;
 800725a:	2401      	movs	r4, #1
{
 800725c:	b085      	sub	sp, #20
    mibReq.Type = MIB_NETWORK_JOINED;
 800725e:	ad01      	add	r5, sp, #4
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007260:	0028      	movs	r0, r5
    mibReq.Type = MIB_NETWORK_JOINED;
 8007262:	702c      	strb	r4, [r5, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007264:	f002 f99c 	bl	80095a0 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007268:	2800      	cmp	r0, #0
 800726a:	d107      	bne.n	800727c <OnSendEvent+0x24>
        if( mibReq.Param.IsNetworkJoined == true )
 800726c:	792a      	ldrb	r2, [r5, #4]
 800726e:	4b04      	ldr	r3, [pc, #16]	; (8007280 <OnSendEvent+0x28>)
 8007270:	2a00      	cmp	r2, #0
 8007272:	d002      	beq.n	800727a <OnSendEvent+0x22>
            DeviceState = DEVICE_STATE_SEND;
 8007274:	2203      	movs	r2, #3
 8007276:	701a      	strb	r2, [r3, #0]
            NextTx = true;
 8007278:	4b02      	ldr	r3, [pc, #8]	; (8007284 <OnSendEvent+0x2c>)
            DeviceState = DEVICE_STATE_JOIN;
 800727a:	701c      	strb	r4, [r3, #0]
}
 800727c:	b005      	add	sp, #20
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	20000284 	.word	0x20000284
 8007284:	20000034 	.word	0x20000034

08007288 <OnTxNextPacketTimerEvent>:
{
 8007288:	b510      	push	{r4, lr}
    TimerStop( &TxNextPacketTimer );
 800728a:	4803      	ldr	r0, [pc, #12]	; (8007298 <OnTxNextPacketTimerEvent+0x10>)
 800728c:	300c      	adds	r0, #12
 800728e:	f003 ff35 	bl	800b0fc <TimerStop>
    OnSendEvent();
 8007292:	f7ff ffe1 	bl	8007258 <OnSendEvent>
}
 8007296:	bd10      	pop	{r4, pc}
 8007298:	20000284 	.word	0x20000284

0800729c <lora_Init>:
 *  lora Init
 */
void lora_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
  /* init the DeviceState*/
  DeviceState= DEVICE_STATE_INIT;
 800729c:	2200      	movs	r2, #0
{
 800729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  DeviceState= DEVICE_STATE_INIT;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <lora_Init+0x80>)
#endif
  
#if( OVER_THE_AIR_ACTIVATION != 0 )

  PRINTF("OTAA\n\r"); 
  PRINTF("DevEui= %02X", DevEui[0]) ;for(int i=1; i<8 ; i++) {PRINTF("-%02X", DevEui[i]); }; PRINTF("\n\r");
 80072a2:	2501      	movs	r5, #1
  LoRaMainCallbacks = callbacks;
 80072a4:	6098      	str	r0, [r3, #8]
  PRINTF("OTAA\n\r"); 
 80072a6:	481e      	ldr	r0, [pc, #120]	; (8007320 <lora_Init+0x84>)
  LoRaParamInit = LoRaParam;
 80072a8:	6059      	str	r1, [r3, #4]
  DeviceState= DEVICE_STATE_INIT;
 80072aa:	701a      	strb	r2, [r3, #0]
  PRINTF("OTAA\n\r"); 
 80072ac:	f004 ff60 	bl	800c170 <vcom_Send>
  PRINTF("DevEui= %02X", DevEui[0]) ;for(int i=1; i<8 ; i++) {PRINTF("-%02X", DevEui[i]); }; PRINTF("\n\r");
 80072b0:	4c1c      	ldr	r4, [pc, #112]	; (8007324 <lora_Init+0x88>)
 80072b2:	481d      	ldr	r0, [pc, #116]	; (8007328 <lora_Init+0x8c>)
 80072b4:	7b21      	ldrb	r1, [r4, #12]
 80072b6:	f004 ff5b 	bl	800c170 <vcom_Send>
 80072ba:	0023      	movs	r3, r4
 80072bc:	4e1b      	ldr	r6, [pc, #108]	; (800732c <lora_Init+0x90>)
 80072be:	330c      	adds	r3, #12
 80072c0:	5ce9      	ldrb	r1, [r5, r3]
 80072c2:	0030      	movs	r0, r6
 80072c4:	3501      	adds	r5, #1
 80072c6:	f004 ff53 	bl	800c170 <vcom_Send>
 80072ca:	2d08      	cmp	r5, #8
 80072cc:	d1f5      	bne.n	80072ba <lora_Init+0x1e>
 80072ce:	4f18      	ldr	r7, [pc, #96]	; (8007330 <lora_Init+0x94>)
  PRINTF("AppEui= %02X", AppEui[0]) ;for(int i=1; i<8 ; i++) {PRINTF("-%02X", AppEui[i]); }; PRINTF("\n\r");
 80072d0:	3d07      	subs	r5, #7
  PRINTF("DevEui= %02X", DevEui[0]) ;for(int i=1; i<8 ; i++) {PRINTF("-%02X", DevEui[i]); }; PRINTF("\n\r");
 80072d2:	0038      	movs	r0, r7
 80072d4:	f004 ff4c 	bl	800c170 <vcom_Send>
  PRINTF("AppEui= %02X", AppEui[0]) ;for(int i=1; i<8 ; i++) {PRINTF("-%02X", AppEui[i]); }; PRINTF("\n\r");
 80072d8:	7d21      	ldrb	r1, [r4, #20]
 80072da:	4816      	ldr	r0, [pc, #88]	; (8007334 <lora_Init+0x98>)
 80072dc:	f004 ff48 	bl	800c170 <vcom_Send>
 80072e0:	0023      	movs	r3, r4
 80072e2:	3314      	adds	r3, #20
 80072e4:	5ce9      	ldrb	r1, [r5, r3]
 80072e6:	0030      	movs	r0, r6
 80072e8:	3501      	adds	r5, #1
 80072ea:	f004 ff41 	bl	800c170 <vcom_Send>
 80072ee:	2d08      	cmp	r5, #8
 80072f0:	d1f6      	bne.n	80072e0 <lora_Init+0x44>
 80072f2:	0038      	movs	r0, r7
 80072f4:	f004 ff3c 	bl	800c170 <vcom_Send>
  PRINTF("AppKey= %02X", AppKey[0]) ;for(int i=1; i<16; i++) {PRINTF(" %02X", AppKey[i]); }; PRINTF("\n\n\r");
 80072f8:	7f21      	ldrb	r1, [r4, #28]
 80072fa:	480f      	ldr	r0, [pc, #60]	; (8007338 <lora_Init+0x9c>)
 80072fc:	f004 ff38 	bl	800c170 <vcom_Send>
 8007300:	3d07      	subs	r5, #7
 8007302:	0023      	movs	r3, r4
 8007304:	331c      	adds	r3, #28
 8007306:	5ce9      	ldrb	r1, [r5, r3]
 8007308:	480c      	ldr	r0, [pc, #48]	; (800733c <lora_Init+0xa0>)
 800730a:	3501      	adds	r5, #1
 800730c:	f004 ff30 	bl	800c170 <vcom_Send>
 8007310:	2d10      	cmp	r5, #16
 8007312:	d1f6      	bne.n	8007302 <lora_Init+0x66>
 8007314:	480a      	ldr	r0, [pc, #40]	; (8007340 <lora_Init+0xa4>)
 8007316:	f004 ff2b 	bl	800c170 <vcom_Send>
  PRINTF("DevAdd=  %08X\n\r", DevAddr) ;
  PRINTF("NwkSKey= %02X", NwkSKey[0]) ;for(int i=1; i<16 ; i++) {PRINTF(" %02X", NwkSKey[i]); }; PRINTF("\n\r");
  PRINTF("AppSKey= %02X", AppSKey[0]) ;for(int i=1; i<16 ; i++) {PRINTF(" %02X", AppSKey[i]); }; PRINTF("\n\r");
#endif

}
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	20000284 	.word	0x20000284
 8007320:	0800d543 	.word	0x0800d543
 8007324:	20000034 	.word	0x20000034
 8007328:	0800d54a 	.word	0x0800d54a
 800732c:	0800d557 	.word	0x0800d557
 8007330:	0800d578 	.word	0x0800d578
 8007334:	0800d55d 	.word	0x0800d55d
 8007338:	0800d56a 	.word	0x0800d56a
 800733c:	0800d564 	.word	0x0800d564
 8007340:	0800d577 	.word	0x0800d577

08007344 <lora_fsm>:
/**
 *  lora class A state machine
 */

void lora_fsm( void)
{
 8007344:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch( DeviceState )
 8007346:	4c68      	ldr	r4, [pc, #416]	; (80074e8 <lora_fsm+0x1a4>)
{
 8007348:	b089      	sub	sp, #36	; 0x24
  switch( DeviceState )
 800734a:	7820      	ldrb	r0, [r4, #0]
 800734c:	2805      	cmp	r0, #5
 800734e:	d900      	bls.n	8007352 <lora_fsm+0xe>
 8007350:	e0c7      	b.n	80074e2 <lora_fsm+0x19e>
 8007352:	f7f8 fed9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8007356:	3903      	.short	0x3903
 8007358:	37c65550 	.word	0x37c65550
#elif defined( REGION_EU433 )
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
 #elif defined( REGION_IN865 )
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
#elif defined( REGION_EU868 )
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800735c:	0021      	movs	r1, r4
 800735e:	0020      	movs	r0, r4
        LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007360:	4b62      	ldr	r3, [pc, #392]	; (80074ec <lora_fsm+0x1a8>)
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8007362:	2205      	movs	r2, #5
        LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007364:	6223      	str	r3, [r4, #32]
        LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007366:	4b62      	ldr	r3, [pc, #392]	; (80074f0 <lora_fsm+0x1ac>)
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8007368:	312c      	adds	r1, #44	; 0x2c
        LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800736a:	6263      	str	r3, [r4, #36]	; 0x24
        LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800736c:	4b61      	ldr	r3, [pc, #388]	; (80074f4 <lora_fsm+0x1b0>)
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800736e:	3020      	adds	r0, #32
        LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007370:	62a3      	str	r3, [r4, #40]	; 0x28
        LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 8007372:	68a3      	ldr	r3, [r4, #8]
    #error "Please define a region in the compiler options."
#endif

        TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
        
        mibReq.Type = MIB_ADR;
 8007374:	0025      	movs	r5, r4
        LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 8007376:	681b      	ldr	r3, [r3, #0]
        mibReq.Type = MIB_ADR;
 8007378:	3530      	adds	r5, #48	; 0x30
        LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800737a:	62e3      	str	r3, [r4, #44]	; 0x2c
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800737c:	f001 ff70 	bl	8009260 <LoRaMacInitialization>
        TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 8007380:	0020      	movs	r0, r4
 8007382:	495d      	ldr	r1, [pc, #372]	; (80074f8 <lora_fsm+0x1b4>)
 8007384:	300c      	adds	r0, #12
 8007386:	f003 fe3f 	bl	800b008 <TimerInit>
        mibReq.Type = MIB_ADR;
 800738a:	2302      	movs	r3, #2
 800738c:	702b      	strb	r3, [r5, #0]
        mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800738e:	6863      	ldr	r3, [r4, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007390:	0028      	movs	r0, r5
        mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 8007392:	7a5b      	ldrb	r3, [r3, #9]
 8007394:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007396:	f002 f98d 	bl	80096b4 <LoRaMacMibSetRequestConfirm>

        mibReq.Type = MIB_PUBLIC_NETWORK;
 800739a:	2307      	movs	r3, #7
 800739c:	702b      	strb	r3, [r5, #0]
        mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800739e:	6863      	ldr	r3, [r4, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80073a0:	0028      	movs	r0, r5
        mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 80073a2:	7adb      	ldrb	r3, [r3, #11]
 80073a4:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80073a6:	f002 f985 	bl	80096b4 <LoRaMacMibSetRequestConfirm>
                        
        mibReq.Type = MIB_DEVICE_CLASS;
 80073aa:	2300      	movs	r3, #0
 80073ac:	702b      	strb	r3, [r5, #0]
        mibReq.Param.Class= LoRaParamInit->Class;
 80073ae:	6863      	ldr	r3, [r4, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80073b0:	0028      	movs	r0, r5
        mibReq.Param.Class= LoRaParamInit->Class;
 80073b2:	7a1b      	ldrb	r3, [r3, #8]
 80073b4:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80073b6:	f002 f97d 	bl	80096b4 <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 )
                LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 80073ba:	2001      	movs	r0, #1
 80073bc:	f002 fc2a 	bl	8009c14 <LoRaMacTestSetDutyCycleOn>
                mibReq.Param.Rx2Channel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
                LoRaMacMibSetRequestConfirm( &mibReq );
#endif

#endif
      DeviceState = DEVICE_STATE_JOIN;
 80073c0:	2301      	movs	r3, #1
        // Wake up through events
      break;
    }
    default:
    {
      DeviceState = DEVICE_STATE_INIT;
 80073c2:	7023      	strb	r3, [r4, #0]
      break;
    }
  }
}
 80073c4:	b009      	add	sp, #36	; 0x24
 80073c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mlmeReq.Type = MLME_JOIN;
 80073c8:	2300      	movs	r3, #0
 80073ca:	a803      	add	r0, sp, #12
 80073cc:	7003      	strb	r3, [r0, #0]
      mlmeReq.Req.Join.DevEui = DevEui;
 80073ce:	4b4b      	ldr	r3, [pc, #300]	; (80074fc <lora_fsm+0x1b8>)
 80073d0:	001a      	movs	r2, r3
 80073d2:	320c      	adds	r2, #12
 80073d4:	6042      	str	r2, [r0, #4]
      mlmeReq.Req.Join.AppEui = AppEui;
 80073d6:	001a      	movs	r2, r3
 80073d8:	3214      	adds	r2, #20
 80073da:	6082      	str	r2, [r0, #8]
      mlmeReq.Req.Join.AppKey = AppKey;
 80073dc:	001a      	movs	r2, r3
 80073de:	321c      	adds	r2, #28
 80073e0:	60c2      	str	r2, [r0, #12]
      mlmeReq.Req.Join.NbTrials = LoRaParamInit->NbTrials;
 80073e2:	6862      	ldr	r2, [r4, #4]
      if( NextTx == true )
 80073e4:	781b      	ldrb	r3, [r3, #0]
      mlmeReq.Req.Join.NbTrials = LoRaParamInit->NbTrials;
 80073e6:	7b12      	ldrb	r2, [r2, #12]
 80073e8:	7402      	strb	r2, [r0, #16]
      if( NextTx == true )
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <lora_fsm+0xae>
          LoRaMacMlmeRequest( &mlmeReq );
 80073ee:	f002 fabd 	bl	800996c <LoRaMacMlmeRequest>
      DeviceState = DEVICE_STATE_SLEEP;
 80073f2:	2305      	movs	r3, #5
 80073f4:	e7e5      	b.n	80073c2 <lora_fsm+0x7e>
      PRINTF("JOINED\n\r");
 80073f6:	4842      	ldr	r0, [pc, #264]	; (8007500 <lora_fsm+0x1bc>)
 80073f8:	f004 feba 	bl	800c170 <vcom_Send>
      DeviceState = DEVICE_STATE_SEND;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e7e0      	b.n	80073c2 <lora_fsm+0x7e>
      if( NextTx == true )
 8007400:	4d3e      	ldr	r5, [pc, #248]	; (80074fc <lora_fsm+0x1b8>)
 8007402:	4e40      	ldr	r6, [pc, #256]	; (8007504 <lora_fsm+0x1c0>)
 8007404:	782b      	ldrb	r3, [r5, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d028      	beq.n	800745c <lora_fsm+0x118>
    if( ComplianceTest.Running == true )
 800740a:	7833      	ldrb	r3, [r6, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d042      	beq.n	8007496 <lora_fsm+0x152>
        if( ComplianceTest.LinkCheck == true )
 8007410:	7bb3      	ldrb	r3, [r6, #14]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02f      	beq.n	8007476 <lora_fsm+0x132>
            ComplianceTest.LinkCheck = false;
 8007416:	2300      	movs	r3, #0
            AppData.Buff[0] = 5;
 8007418:	686a      	ldr	r2, [r5, #4]
            ComplianceTest.LinkCheck = false;
 800741a:	73b3      	strb	r3, [r6, #14]
            AppData.BuffSize = 3;
 800741c:	3303      	adds	r3, #3
 800741e:	722b      	strb	r3, [r5, #8]
            AppData.Buff[0] = 5;
 8007420:	3302      	adds	r3, #2
 8007422:	7013      	strb	r3, [r2, #0]
            AppData.Buff[1] = ComplianceTest.DemodMargin;
 8007424:	7bf3      	ldrb	r3, [r6, #15]
 8007426:	686a      	ldr	r2, [r5, #4]
 8007428:	7053      	strb	r3, [r2, #1]
            AppData.Buff[2] = ComplianceTest.NbGateways;
 800742a:	7c33      	ldrb	r3, [r6, #16]
 800742c:	686a      	ldr	r2, [r5, #4]
 800742e:	7093      	strb	r3, [r2, #2]
            ComplianceTest.State = 1;
 8007430:	2301      	movs	r3, #1
 8007432:	7073      	strb	r3, [r6, #1]
    if( LoRaMacQueryTxPossible( AppData.BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007434:	7a28      	ldrb	r0, [r5, #8]
 8007436:	a902      	add	r1, sp, #8
 8007438:	f002 f84a 	bl	80094d0 <LoRaMacQueryTxPossible>
 800743c:	ab03      	add	r3, sp, #12
 800743e:	2800      	cmp	r0, #0
 8007440:	d02f      	beq.n	80074a2 <lora_fsm+0x15e>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007446:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007448:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800744a:	6862      	ldr	r2, [r4, #4]
 800744c:	7a92      	ldrb	r2, [r2, #10]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 800744e:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8007450:	0018      	movs	r0, r3
 8007452:	f002 fb3d 	bl	8009ad0 <LoRaMacMcpsRequest>
 8007456:	1e43      	subs	r3, r0, #1
 8007458:	4198      	sbcs	r0, r3
 800745a:	7028      	strb	r0, [r5, #0]
      if( ComplianceTest.Running == true )
 800745c:	7833      	ldrb	r3, [r6, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d037      	beq.n	80074d2 <lora_fsm+0x18e>
          TimerSetValue( &TxNextPacketTimer,  5000); /* 5s */
 8007462:	0025      	movs	r5, r4
 8007464:	4928      	ldr	r1, [pc, #160]	; (8007508 <lora_fsm+0x1c4>)
 8007466:	350c      	adds	r5, #12
          TimerSetValue( &TxNextPacketTimer, LoRaParamInit->TxDutyCycleTime );
 8007468:	0028      	movs	r0, r5
 800746a:	f003 fe73 	bl	800b154 <TimerSetValue>
          TimerStart( &TxNextPacketTimer );
 800746e:	0028      	movs	r0, r5
 8007470:	f003 fdd2 	bl	800b018 <TimerStart>
 8007474:	e7bd      	b.n	80073f2 <lora_fsm+0xae>
            switch( ComplianceTest.State )
 8007476:	7873      	ldrb	r3, [r6, #1]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d002      	beq.n	8007482 <lora_fsm+0x13e>
 800747c:	2b04      	cmp	r3, #4
 800747e:	d1d9      	bne.n	8007434 <lora_fsm+0xf0>
 8007480:	e7d6      	b.n	8007430 <lora_fsm+0xec>
                AppData.BuffSize = 2;
 8007482:	2302      	movs	r3, #2
 8007484:	722b      	strb	r3, [r5, #8]
                AppData.Buff[0] = ComplianceTest.DownLinkCounter >> 8;
 8007486:	89b3      	ldrh	r3, [r6, #12]
 8007488:	686a      	ldr	r2, [r5, #4]
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	7013      	strb	r3, [r2, #0]
                AppData.Buff[1] = ComplianceTest.DownLinkCounter;
 800748e:	89b3      	ldrh	r3, [r6, #12]
 8007490:	686a      	ldr	r2, [r5, #4]
 8007492:	7053      	strb	r3, [r2, #1]
 8007494:	e7ce      	b.n	8007434 <lora_fsm+0xf0>
        LoRaMainCallbacks->LoraTxData(&AppData, &IsTxConfirmed);
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	1c61      	adds	r1, r4, #1
 800749a:	1d28      	adds	r0, r5, #4
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	4798      	blx	r3
 80074a0:	e7c8      	b.n	8007434 <lora_fsm+0xf0>
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	7a6f      	ldrb	r7, [r5, #9]
 80074a6:	7a92      	ldrb	r2, [r2, #10]
 80074a8:	7a29      	ldrb	r1, [r5, #8]
 80074aa:	b252      	sxtb	r2, r2
 80074ac:	9201      	str	r2, [sp, #4]
        if( IsTxConfirmed == DISABLE )
 80074ae:	7862      	ldrb	r2, [r4, #1]
 80074b0:	6868      	ldr	r0, [r5, #4]
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	d105      	bne.n	80074c2 <lora_fsm+0x17e>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80074b6:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData.Port;
 80074b8:	711f      	strb	r7, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData.Buff;
 80074ba:	6098      	str	r0, [r3, #8]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData.BuffSize;
 80074bc:	8199      	strh	r1, [r3, #12]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 80074be:	9a01      	ldr	r2, [sp, #4]
 80074c0:	e7c5      	b.n	800744e <lora_fsm+0x10a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80074c2:	2201      	movs	r2, #1
            mcpsReq.Req.Confirmed.fBufferSize = AppData.BuffSize;
 80074c4:	8199      	strh	r1, [r3, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80074c6:	2108      	movs	r1, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 80074c8:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData.Port;
 80074ca:	711f      	strb	r7, [r3, #4]
            mcpsReq.Req.Confirmed.fBuffer = AppData.Buff;
 80074cc:	6098      	str	r0, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80074ce:	73d9      	strb	r1, [r3, #15]
 80074d0:	e7f5      	b.n	80074be <lora_fsm+0x17a>
      else if (LoRaParamInit->TxEvent == TX_ON_TIMER )
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d18b      	bne.n	80073f2 <lora_fsm+0xae>
          TimerSetValue( &TxNextPacketTimer, LoRaParamInit->TxDutyCycleTime );
 80074da:	0025      	movs	r5, r4
 80074dc:	6859      	ldr	r1, [r3, #4]
 80074de:	350c      	adds	r5, #12
 80074e0:	e7c2      	b.n	8007468 <lora_fsm+0x124>
      DeviceState = DEVICE_STATE_INIT;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e76d      	b.n	80073c2 <lora_fsm+0x7e>
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	20000284 	.word	0x20000284
 80074ec:	08007055 	.word	0x08007055
 80074f0:	080070ad 	.word	0x080070ad
 80074f4:	08007061 	.word	0x08007061
 80074f8:	08007289 	.word	0x08007289
 80074fc:	20000034 	.word	0x20000034
 8007500:	0800d57b 	.word	0x0800d57b
 8007504:	20000e14 	.word	0x20000e14
 8007508:	00001388 	.word	0x00001388

0800750c <lora_getDeviceState>:


DeviceState_t lora_getDeviceState( void )
{
  return DeviceState;
 800750c:	4b01      	ldr	r3, [pc, #4]	; (8007514 <lora_getDeviceState+0x8>)
 800750e:	7818      	ldrb	r0, [r3, #0]
}
 8007510:	4770      	bx	lr
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	20000284 	.word	0x20000284

08007518 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007518:	780a      	ldrb	r2, [r1, #0]
 800751a:	7803      	ldrb	r3, [r0, #0]
 800751c:	4053      	eors	r3, r2
 800751e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007520:	784a      	ldrb	r2, [r1, #1]
 8007522:	7843      	ldrb	r3, [r0, #1]
 8007524:	4053      	eors	r3, r2
 8007526:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007528:	788a      	ldrb	r2, [r1, #2]
 800752a:	7883      	ldrb	r3, [r0, #2]
 800752c:	4053      	eors	r3, r2
 800752e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007530:	78ca      	ldrb	r2, [r1, #3]
 8007532:	78c3      	ldrb	r3, [r0, #3]
 8007534:	4053      	eors	r3, r2
 8007536:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007538:	790a      	ldrb	r2, [r1, #4]
 800753a:	7903      	ldrb	r3, [r0, #4]
 800753c:	4053      	eors	r3, r2
 800753e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007540:	794a      	ldrb	r2, [r1, #5]
 8007542:	7943      	ldrb	r3, [r0, #5]
 8007544:	4053      	eors	r3, r2
 8007546:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007548:	798a      	ldrb	r2, [r1, #6]
 800754a:	7983      	ldrb	r3, [r0, #6]
 800754c:	4053      	eors	r3, r2
 800754e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007550:	79ca      	ldrb	r2, [r1, #7]
 8007552:	79c3      	ldrb	r3, [r0, #7]
 8007554:	4053      	eors	r3, r2
 8007556:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007558:	7a0a      	ldrb	r2, [r1, #8]
 800755a:	7a03      	ldrb	r3, [r0, #8]
 800755c:	4053      	eors	r3, r2
 800755e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007560:	7a4a      	ldrb	r2, [r1, #9]
 8007562:	7a43      	ldrb	r3, [r0, #9]
 8007564:	4053      	eors	r3, r2
 8007566:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007568:	7a8a      	ldrb	r2, [r1, #10]
 800756a:	7a83      	ldrb	r3, [r0, #10]
 800756c:	4053      	eors	r3, r2
 800756e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007570:	7aca      	ldrb	r2, [r1, #11]
 8007572:	7ac3      	ldrb	r3, [r0, #11]
 8007574:	4053      	eors	r3, r2
 8007576:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007578:	7b0a      	ldrb	r2, [r1, #12]
 800757a:	7b03      	ldrb	r3, [r0, #12]
 800757c:	4053      	eors	r3, r2
 800757e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007580:	7b4a      	ldrb	r2, [r1, #13]
 8007582:	7b43      	ldrb	r3, [r0, #13]
 8007584:	4053      	eors	r3, r2
 8007586:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007588:	7b8a      	ldrb	r2, [r1, #14]
 800758a:	7b83      	ldrb	r3, [r0, #14]
 800758c:	4053      	eors	r3, r2
 800758e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007590:	7bca      	ldrb	r2, [r1, #15]
 8007592:	7bc3      	ldrb	r3, [r0, #15]
 8007594:	4053      	eors	r3, r2
 8007596:	73c3      	strb	r3, [r0, #15]
#endif
}
 8007598:	4770      	bx	lr

0800759a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800759a:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800759c:	780b      	ldrb	r3, [r1, #0]
 800759e:	7814      	ldrb	r4, [r2, #0]
 80075a0:	4063      	eors	r3, r4
 80075a2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80075a4:	7854      	ldrb	r4, [r2, #1]
 80075a6:	784b      	ldrb	r3, [r1, #1]
 80075a8:	4063      	eors	r3, r4
 80075aa:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80075ac:	7894      	ldrb	r4, [r2, #2]
 80075ae:	788b      	ldrb	r3, [r1, #2]
 80075b0:	4063      	eors	r3, r4
 80075b2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80075b4:	78d4      	ldrb	r4, [r2, #3]
 80075b6:	78cb      	ldrb	r3, [r1, #3]
 80075b8:	4063      	eors	r3, r4
 80075ba:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80075bc:	7914      	ldrb	r4, [r2, #4]
 80075be:	790b      	ldrb	r3, [r1, #4]
 80075c0:	4063      	eors	r3, r4
 80075c2:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80075c4:	7954      	ldrb	r4, [r2, #5]
 80075c6:	794b      	ldrb	r3, [r1, #5]
 80075c8:	4063      	eors	r3, r4
 80075ca:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80075cc:	7994      	ldrb	r4, [r2, #6]
 80075ce:	798b      	ldrb	r3, [r1, #6]
 80075d0:	4063      	eors	r3, r4
 80075d2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80075d4:	79d4      	ldrb	r4, [r2, #7]
 80075d6:	79cb      	ldrb	r3, [r1, #7]
 80075d8:	4063      	eors	r3, r4
 80075da:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80075dc:	7a14      	ldrb	r4, [r2, #8]
 80075de:	7a0b      	ldrb	r3, [r1, #8]
 80075e0:	4063      	eors	r3, r4
 80075e2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80075e4:	7a4b      	ldrb	r3, [r1, #9]
 80075e6:	7a54      	ldrb	r4, [r2, #9]
 80075e8:	4063      	eors	r3, r4
 80075ea:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80075ec:	7a8b      	ldrb	r3, [r1, #10]
 80075ee:	7a94      	ldrb	r4, [r2, #10]
 80075f0:	4063      	eors	r3, r4
 80075f2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80075f4:	7ad4      	ldrb	r4, [r2, #11]
 80075f6:	7acb      	ldrb	r3, [r1, #11]
 80075f8:	4063      	eors	r3, r4
 80075fa:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80075fc:	7b14      	ldrb	r4, [r2, #12]
 80075fe:	7b0b      	ldrb	r3, [r1, #12]
 8007600:	4063      	eors	r3, r4
 8007602:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007604:	7b54      	ldrb	r4, [r2, #13]
 8007606:	7b4b      	ldrb	r3, [r1, #13]
 8007608:	4063      	eors	r3, r4
 800760a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800760c:	7b94      	ldrb	r4, [r2, #14]
 800760e:	7b8b      	ldrb	r3, [r1, #14]
 8007610:	4063      	eors	r3, r4
 8007612:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007614:	7bcb      	ldrb	r3, [r1, #15]
 8007616:	7bd2      	ldrb	r2, [r2, #15]
 8007618:	4053      	eors	r3, r2
 800761a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800761c:	bd10      	pop	{r4, pc}
	...

08007620 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8007620:	000b      	movs	r3, r1
 8007622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007624:	3b10      	subs	r3, #16
 8007626:	b2db      	uxtb	r3, r3
 8007628:	b087      	sub	sp, #28
 800762a:	000f      	movs	r7, r1
 800762c:	0015      	movs	r5, r2
 800762e:	2b10      	cmp	r3, #16
 8007630:	d805      	bhi.n	800763e <aes_set_key+0x1e>
 8007632:	2201      	movs	r2, #1
 8007634:	409a      	lsls	r2, r3
 8007636:	493a      	ldr	r1, [pc, #232]	; (8007720 <aes_set_key+0x100>)
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8007638:	2300      	movs	r3, #0
 800763a:	420a      	tst	r2, r1
 800763c:	d105      	bne.n	800764a <aes_set_key+0x2a>
        ctx->rnd = 0;
 800763e:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007640:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007642:	35f0      	adds	r5, #240	; 0xf0
 8007644:	702b      	strb	r3, [r5, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007646:	b007      	add	sp, #28
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *d++ = *s++;
 800764a:	5cc2      	ldrb	r2, [r0, r3]
 800764c:	54ea      	strb	r2, [r5, r3]
 800764e:	3301      	adds	r3, #1
    while( nn-- )
 8007650:	429f      	cmp	r7, r3
 8007652:	d1fa      	bne.n	800764a <aes_set_key+0x2a>
    hi = (keylen + 28) << 2;
 8007654:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8007656:	002a      	movs	r2, r5
    hi = (keylen + 28) << 2;
 8007658:	331c      	adds	r3, #28
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	b2db      	uxtb	r3, r3
 800765e:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007660:	091b      	lsrs	r3, r3, #4
 8007662:	3b01      	subs	r3, #1
 8007664:	32f0      	adds	r2, #240	; 0xf0
 8007666:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007668:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800766a:	003c      	movs	r4, r7
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800766c:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800766e:	192b      	adds	r3, r5, r4
 8007670:	1f1a      	subs	r2, r3, #4
 8007672:	7816      	ldrb	r6, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8007674:	1eda      	subs	r2, r3, #3
 8007676:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007678:	0039      	movs	r1, r7
        t1 = ctx->ksch[cc - 3];
 800767a:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 800767c:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800767e:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8007680:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8007682:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8007684:	0020      	movs	r0, r4
        t2 = ctx->ksch[cc - 2];
 8007686:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007688:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 800768a:	f7f8 fdd7 	bl	800023c <__aeabi_uidivmod>
 800768e:	b2c9      	uxtb	r1, r1
 8007690:	2900      	cmp	r1, #0
 8007692:	d133      	bne.n	80076fc <aes_set_key+0xdc>
            t0 = s_box(t1) ^ rc;
 8007694:	4b23      	ldr	r3, [pc, #140]	; (8007724 <aes_set_key+0x104>)
 8007696:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8007698:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 800769a:	5c9a      	ldrb	r2, [r3, r2]
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	405a      	eors	r2, r3
            t1 = s_box(t2);
 80076a0:	4b20      	ldr	r3, [pc, #128]	; (8007724 <aes_set_key+0x104>)
 80076a2:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 80076a4:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 80076a6:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 80076a8:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <aes_set_key+0x104>)
 80076aa:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 80076ac:	211b      	movs	r1, #27
            t2 = s_box(t3);
 80076ae:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <aes_set_key+0x104>)
 80076b2:	5d9b      	ldrb	r3, [r3, r6]
            t0 = s_box(t1) ^ rc;
 80076b4:	0016      	movs	r6, r2
            t3 = s_box(tt);
 80076b6:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 80076b8:	9b04      	ldr	r3, [sp, #16]
 80076ba:	09db      	lsrs	r3, r3, #7
 80076bc:	434b      	muls	r3, r1
 80076be:	9904      	ldr	r1, [sp, #16]
 80076c0:	0049      	lsls	r1, r1, #1
 80076c2:	404b      	eors	r3, r1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80076c8:	1be3      	subs	r3, r4, r7
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	5cea      	ldrb	r2, [r5, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80076ce:	18eb      	adds	r3, r5, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80076d0:	4056      	eors	r6, r2
 80076d2:	552e      	strb	r6, [r5, r4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80076d4:	785a      	ldrb	r2, [r3, #1]
 80076d6:	9801      	ldr	r0, [sp, #4]
 80076d8:	1929      	adds	r1, r5, r4
 80076da:	4050      	eors	r0, r2
 80076dc:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80076de:	789a      	ldrb	r2, [r3, #2]
 80076e0:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076e2:	3404      	adds	r4, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80076e4:	4050      	eors	r0, r2
 80076e6:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076e8:	78db      	ldrb	r3, [r3, #3]
 80076ea:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076ec:	b2e4      	uxtb	r4, r4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076ee:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076f0:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076f2:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d8ba      	bhi.n	800766e <aes_set_key+0x4e>
    return 0;
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7a4      	b.n	8007646 <aes_set_key+0x26>
        else if( keylen > 24 && cc % keylen == 16 )
 80076fc:	2f18      	cmp	r7, #24
 80076fe:	d9e3      	bls.n	80076c8 <aes_set_key+0xa8>
 8007700:	2910      	cmp	r1, #16
 8007702:	d1e1      	bne.n	80076c8 <aes_set_key+0xa8>
            t1 = s_box(t1);
 8007704:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <aes_set_key+0x104>)
 8007708:	5d9e      	ldrb	r6, [r3, r6]
            t1 = s_box(t1);
 800770a:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 800770c:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 800770e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8007710:	4b04      	ldr	r3, [pc, #16]	; (8007724 <aes_set_key+0x104>)
 8007712:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 8007714:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 8007716:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <aes_set_key+0x104>)
 800771a:	5c9b      	ldrb	r3, [r3, r2]
 800771c:	9303      	str	r3, [sp, #12]
 800771e:	e7d3      	b.n	80076c8 <aes_set_key+0xa8>
 8007720:	00010101 	.word	0x00010101
 8007724:	0800d25e 	.word	0x0800d25e

08007728 <aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
    if( ctx->rnd )
 8007728:	0013      	movs	r3, r2
{
 800772a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772c:	b0a5      	sub	sp, #148	; 0x94
    if( ctx->rnd )
 800772e:	33f0      	adds	r3, #240	; 0xf0
{
 8007730:	911f      	str	r1, [sp, #124]	; 0x7c
 8007732:	0016      	movs	r6, r2
    if( ctx->rnd )
 8007734:	781a      	ldrb	r2, [r3, #0]
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8007736:	23ff      	movs	r3, #255	; 0xff
    if( ctx->rnd )
 8007738:	2a00      	cmp	r2, #0
 800773a:	d100      	bne.n	800773e <aes_encrypt+0x16>
 800773c:	e08a      	b.n	8007854 <aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 800773e:	0001      	movs	r1, r0
 8007740:	0032      	movs	r2, r6
 8007742:	a820      	add	r0, sp, #128	; 0x80
 8007744:	f7ff ff29 	bl	800759a <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007748:	2501      	movs	r5, #1
 800774a:	012a      	lsls	r2, r5, #4
 800774c:	18b3      	adds	r3, r6, r2
 800774e:	931e      	str	r3, [sp, #120]	; 0x78
 8007750:	ab20      	add	r3, sp, #128	; 0x80
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	ab20      	add	r3, sp, #128	; 0x80
 8007758:	795b      	ldrb	r3, [r3, #5]
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	ab20      	add	r3, sp, #128	; 0x80
 800775e:	7a9f      	ldrb	r7, [r3, #10]
 8007760:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <aes_encrypt+0x280>)
 8007762:	5dda      	ldrb	r2, [r3, r7]
 8007764:	9203      	str	r2, [sp, #12]
 8007766:	aa20      	add	r2, sp, #128	; 0x80
 8007768:	7bd2      	ldrb	r2, [r2, #15]
 800776a:	9204      	str	r2, [sp, #16]
 800776c:	5c9a      	ldrb	r2, [r3, r2]
 800776e:	9205      	str	r2, [sp, #20]
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	5c98      	ldrb	r0, [r3, r2]
 8007774:	9a02      	ldr	r2, [sp, #8]
 8007776:	5c9a      	ldrb	r2, [r3, r2]
 8007778:	9206      	str	r2, [sp, #24]
 800777a:	aa20      	add	r2, sp, #128	; 0x80
 800777c:	7912      	ldrb	r2, [r2, #4]
 800777e:	9207      	str	r2, [sp, #28]
 8007780:	aa20      	add	r2, sp, #128	; 0x80
 8007782:	7a52      	ldrb	r2, [r2, #9]
 8007784:	9208      	str	r2, [sp, #32]
 8007786:	aa20      	add	r2, sp, #128	; 0x80
 8007788:	7b92      	ldrb	r2, [r2, #14]
 800778a:	9209      	str	r2, [sp, #36]	; 0x24
 800778c:	5c9a      	ldrb	r2, [r3, r2]
 800778e:	920a      	str	r2, [sp, #40]	; 0x28
 8007790:	aa20      	add	r2, sp, #128	; 0x80
 8007792:	78d2      	ldrb	r2, [r2, #3]
 8007794:	920b      	str	r2, [sp, #44]	; 0x2c
 8007796:	5c9a      	ldrb	r2, [r3, r2]
 8007798:	4694      	mov	ip, r2
 800779a:	9a07      	ldr	r2, [sp, #28]
 800779c:	5c9a      	ldrb	r2, [r3, r2]
 800779e:	920c      	str	r2, [sp, #48]	; 0x30
 80077a0:	9a08      	ldr	r2, [sp, #32]
 80077a2:	5c9a      	ldrb	r2, [r3, r2]
 80077a4:	920d      	str	r2, [sp, #52]	; 0x34
 80077a6:	aa20      	add	r2, sp, #128	; 0x80
 80077a8:	7a12      	ldrb	r2, [r2, #8]
 80077aa:	920e      	str	r2, [sp, #56]	; 0x38
 80077ac:	aa20      	add	r2, sp, #128	; 0x80
 80077ae:	7b52      	ldrb	r2, [r2, #13]
 80077b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80077b2:	aa20      	add	r2, sp, #128	; 0x80
 80077b4:	7892      	ldrb	r2, [r2, #2]
 80077b6:	9210      	str	r2, [sp, #64]	; 0x40
 80077b8:	5c9a      	ldrb	r2, [r3, r2]
 80077ba:	9211      	str	r2, [sp, #68]	; 0x44
 80077bc:	aa20      	add	r2, sp, #128	; 0x80
 80077be:	79d2      	ldrb	r2, [r2, #7]
 80077c0:	9212      	str	r2, [sp, #72]	; 0x48
 80077c2:	5c9a      	ldrb	r2, [r3, r2]
 80077c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80077c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077c8:	5c9a      	ldrb	r2, [r3, r2]
 80077ca:	9214      	str	r2, [sp, #80]	; 0x50
 80077cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077ce:	5c9a      	ldrb	r2, [r3, r2]
 80077d0:	9215      	str	r2, [sp, #84]	; 0x54
 80077d2:	aa20      	add	r2, sp, #128	; 0x80
 80077d4:	7b12      	ldrb	r2, [r2, #12]
 80077d6:	9216      	str	r2, [sp, #88]	; 0x58
 80077d8:	aa20      	add	r2, sp, #128	; 0x80
 80077da:	7852      	ldrb	r2, [r2, #1]
 80077dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80077de:	aa20      	add	r2, sp, #128	; 0x80
 80077e0:	7992      	ldrb	r2, [r2, #6]
 80077e2:	9218      	str	r2, [sp, #96]	; 0x60
 80077e4:	5c9a      	ldrb	r2, [r3, r2]
 80077e6:	9219      	str	r2, [sp, #100]	; 0x64
 80077e8:	aa20      	add	r2, sp, #128	; 0x80
 80077ea:	7ad2      	ldrb	r2, [r2, #11]
 80077ec:	921a      	str	r2, [sp, #104]	; 0x68
 80077ee:	5c9a      	ldrb	r2, [r3, r2]
 80077f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80077f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077f4:	5c9a      	ldrb	r2, [r3, r2]
 80077f6:	921c      	str	r2, [sp, #112]	; 0x70
 80077f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077fa:	5c9b      	ldrb	r3, [r3, r2]
 80077fc:	931d      	str	r3, [sp, #116]	; 0x74
 80077fe:	0033      	movs	r3, r6
 8007800:	33f0      	adds	r3, #240	; 0xf0
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	42ab      	cmp	r3, r5
 8007806:	d828      	bhi.n	800785a <aes_encrypt+0x132>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800780a:	ab20      	add	r3, sp, #128	; 0x80
 800780c:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800780e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007810:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007812:	721a      	strb	r2, [r3, #8]
 8007814:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007816:	0019      	movs	r1, r3
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007818:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800781a:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800781c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800781e:	705a      	strb	r2, [r3, #1]
 8007820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007822:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007824:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007826:	725a      	strb	r2, [r3, #9]
 8007828:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800782a:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800782c:	9a03      	ldr	r2, [sp, #12]
 800782e:	709a      	strb	r2, [r3, #2]
 8007830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007832:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007836:	719a      	strb	r2, [r3, #6]
 8007838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800783a:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800783c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800783e:	73da      	strb	r2, [r3, #15]
 8007840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007842:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007844:	4662      	mov	r2, ip
 8007846:	71da      	strb	r2, [r3, #7]
 8007848:	9a05      	ldr	r2, [sp, #20]
 800784a:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800784c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800784e:	f7ff fea4 	bl	800759a <copy_and_key>
 8007852:	2300      	movs	r3, #0
    return 0;
}
 8007854:	0018      	movs	r0, r3
 8007856:	b025      	add	sp, #148	; 0x94
 8007858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800785a:	4b54      	ldr	r3, [pc, #336]	; (80079ac <aes_encrypt+0x284>)
 800785c:	9c01      	ldr	r4, [sp, #4]
 800785e:	9905      	ldr	r1, [sp, #20]
 8007860:	9a03      	ldr	r2, [sp, #12]
 8007862:	5d1c      	ldrb	r4, [r3, r4]
 8007864:	404a      	eors	r2, r1
 8007866:	4054      	eors	r4, r2
 8007868:	9902      	ldr	r1, [sp, #8]
 800786a:	4a51      	ldr	r2, [pc, #324]	; (80079b0 <aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 800786c:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800786e:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007870:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007872:	404c      	eors	r4, r1
 8007874:	a920      	add	r1, sp, #128	; 0x80
 8007876:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007878:	9c02      	ldr	r4, [sp, #8]
 800787a:	9905      	ldr	r1, [sp, #20]
 800787c:	5d1c      	ldrb	r4, [r3, r4]
 800787e:	4041      	eors	r1, r0
 8007880:	4061      	eors	r1, r4
 8007882:	5dd4      	ldrb	r4, [r2, r7]
 8007884:	4061      	eors	r1, r4
 8007886:	ac20      	add	r4, sp, #128	; 0x80
 8007888:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800788a:	9906      	ldr	r1, [sp, #24]
 800788c:	4048      	eors	r0, r1
 800788e:	5dd9      	ldrb	r1, [r3, r7]
 8007890:	4048      	eors	r0, r1
 8007892:	9904      	ldr	r1, [sp, #16]
 8007894:	5c51      	ldrb	r1, [r2, r1]
 8007896:	4048      	eors	r0, r1
 8007898:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800789a:	9903      	ldr	r1, [sp, #12]
 800789c:	9806      	ldr	r0, [sp, #24]
 800789e:	4041      	eors	r1, r0
 80078a0:	9801      	ldr	r0, [sp, #4]
 80078a2:	5c10      	ldrb	r0, [r2, r0]
 80078a4:	4041      	eors	r1, r0
 80078a6:	9804      	ldr	r0, [sp, #16]
 80078a8:	5c18      	ldrb	r0, [r3, r0]
 80078aa:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80078ac:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80078ae:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80078b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078b2:	4041      	eors	r1, r0
 80078b4:	9807      	ldr	r0, [sp, #28]
 80078b6:	5c18      	ldrb	r0, [r3, r0]
 80078b8:	4041      	eors	r1, r0
 80078ba:	9808      	ldr	r0, [sp, #32]
 80078bc:	5c10      	ldrb	r0, [r2, r0]
 80078be:	4041      	eors	r1, r0
 80078c0:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80078c2:	4661      	mov	r1, ip
 80078c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80078c6:	4041      	eors	r1, r0
 80078c8:	9808      	ldr	r0, [sp, #32]
 80078ca:	5c18      	ldrb	r0, [r3, r0]
 80078cc:	4041      	eors	r1, r0
 80078ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078d0:	5c10      	ldrb	r0, [r2, r0]
 80078d2:	4041      	eors	r1, r0
 80078d4:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80078d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80078d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078da:	4041      	eors	r1, r0
 80078dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078de:	5c18      	ldrb	r0, [r3, r0]
 80078e0:	4041      	eors	r1, r0
 80078e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078e4:	5c10      	ldrb	r0, [r2, r0]
 80078e6:	4041      	eors	r1, r0
 80078e8:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80078ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80078ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078ee:	4041      	eors	r1, r0
 80078f0:	9807      	ldr	r0, [sp, #28]
 80078f2:	5c10      	ldrb	r0, [r2, r0]
 80078f4:	4041      	eors	r1, r0
 80078f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078f8:	5c18      	ldrb	r0, [r3, r0]
 80078fa:	4041      	eors	r1, r0
 80078fc:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80078fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007900:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007902:	4041      	eors	r1, r0
 8007904:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007906:	5c18      	ldrb	r0, [r3, r0]
 8007908:	4041      	eors	r1, r0
 800790a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800790c:	5c10      	ldrb	r0, [r2, r0]
 800790e:	4041      	eors	r1, r0
 8007910:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007912:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007914:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007916:	4041      	eors	r1, r0
 8007918:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800791a:	5c18      	ldrb	r0, [r3, r0]
 800791c:	4041      	eors	r1, r0
 800791e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007920:	5c10      	ldrb	r0, [r2, r0]
 8007922:	4041      	eors	r1, r0
 8007924:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007926:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007928:	9914      	ldr	r1, [sp, #80]	; 0x50
 800792a:	4041      	eors	r1, r0
 800792c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800792e:	5c18      	ldrb	r0, [r3, r0]
 8007930:	4041      	eors	r1, r0
 8007932:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007934:	5c10      	ldrb	r0, [r2, r0]
 8007936:	4041      	eors	r1, r0
 8007938:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800793a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800793c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800793e:	4041      	eors	r1, r0
 8007940:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007942:	5c10      	ldrb	r0, [r2, r0]
 8007944:	4041      	eors	r1, r0
 8007946:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007948:	5c18      	ldrb	r0, [r3, r0]
 800794a:	4041      	eors	r1, r0
 800794c:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800794e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007950:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007952:	4041      	eors	r1, r0
 8007954:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007956:	5c18      	ldrb	r0, [r3, r0]
 8007958:	4041      	eors	r1, r0
 800795a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800795c:	5c10      	ldrb	r0, [r2, r0]
 800795e:	4041      	eors	r1, r0
 8007960:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007962:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007964:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007966:	4041      	eors	r1, r0
 8007968:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800796a:	5c18      	ldrb	r0, [r3, r0]
 800796c:	4041      	eors	r1, r0
 800796e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007970:	5c10      	ldrb	r0, [r2, r0]
 8007972:	4041      	eors	r1, r0
 8007974:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007976:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007978:	991c      	ldr	r1, [sp, #112]	; 0x70
 800797a:	4041      	eors	r1, r0
 800797c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800797e:	5c18      	ldrb	r0, [r3, r0]
 8007980:	4041      	eors	r1, r0
 8007982:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007984:	5c10      	ldrb	r0, [r2, r0]
 8007986:	4041      	eors	r1, r0
 8007988:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800798a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800798c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800798e:	4041      	eors	r1, r0
 8007990:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007992:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8007994:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007996:	404a      	eors	r2, r1
 8007998:	991a      	ldr	r1, [sp, #104]	; 0x68
 800799a:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 800799c:	991e      	ldr	r1, [sp, #120]	; 0x78
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800799e:	4053      	eors	r3, r2
 80079a0:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 80079a2:	f7ff fdb9 	bl	8007518 <xor_block>
 80079a6:	e6d0      	b.n	800774a <aes_encrypt+0x22>
 80079a8:	0800d25e 	.word	0x0800d25e
 80079ac:	0800d15e 	.word	0x0800d15e
 80079b0:	0800d05e 	.word	0x0800d05e

080079b4 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 80079b4:	b510      	push	{r4, lr}
 80079b6:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 80079b8:	2210      	movs	r2, #16
 80079ba:	30f1      	adds	r0, #241	; 0xf1
 80079bc:	2100      	movs	r1, #0
 80079be:	f003 fc29 	bl	800b214 <memset1>
            ctx->M_n = 0;
 80079c2:	0023      	movs	r3, r4
 80079c4:	2100      	movs	r1, #0
 80079c6:	33fc      	adds	r3, #252	; 0xfc
 80079c8:	6199      	str	r1, [r3, #24]
        memset1(ctx->rijndael.ksch, '\0', 240);
 80079ca:	22f0      	movs	r2, #240	; 0xf0
 80079cc:	0020      	movs	r0, r4
 80079ce:	f003 fc21 	bl	800b214 <memset1>
}
 80079d2:	bd10      	pop	{r4, pc}

080079d4 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 80079d4:	b510      	push	{r4, lr}
 80079d6:	0002      	movs	r2, r0
 80079d8:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 80079da:	2110      	movs	r1, #16
 80079dc:	f7ff fe20 	bl	8007620 <aes_set_key>
}
 80079e0:	bd10      	pop	{r4, pc}

080079e2 <AES_CMAC_Update>:
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80079e2:	0003      	movs	r3, r0
{
 80079e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e6:	0004      	movs	r4, r0
            if (ctx->M_n > 0) {
 80079e8:	33fc      	adds	r3, #252	; 0xfc
 80079ea:	6998      	ldr	r0, [r3, #24]
 80079ec:	1ca3      	adds	r3, r4, #2
{
 80079ee:	b087      	sub	sp, #28
 80079f0:	33ff      	adds	r3, #255	; 0xff
 80079f2:	000e      	movs	r6, r1
 80079f4:	0015      	movs	r5, r2
 80079f6:	9301      	str	r3, [sp, #4]
            if (ctx->M_n > 0) {
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d02a      	beq.n	8007a52 <AES_CMAC_Update+0x70>
                  mlen = MIN(16 - ctx->M_n, len);
 80079fc:	2710      	movs	r7, #16
 80079fe:	1a3f      	subs	r7, r7, r0
 8007a00:	9700      	str	r7, [sp, #0]
 8007a02:	4297      	cmp	r7, r2
 8007a04:	d900      	bls.n	8007a08 <AES_CMAC_Update+0x26>
 8007a06:	9200      	str	r2, [sp, #0]
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8007a08:	466b      	mov	r3, sp
 8007a0a:	881a      	ldrh	r2, [r3, #0]
 8007a0c:	1ca3      	adds	r3, r4, #2
 8007a0e:	33ff      	adds	r3, #255	; 0xff
 8007a10:	1818      	adds	r0, r3, r0
 8007a12:	0031      	movs	r1, r6
 8007a14:	f003 fbe9 	bl	800b1ea <memcpy1>
                    ctx->M_n += mlen;
 8007a18:	0022      	movs	r2, r4
 8007a1a:	32fc      	adds	r2, #252	; 0xfc
 8007a1c:	6991      	ldr	r1, [r2, #24]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	185b      	adds	r3, r3, r1
 8007a22:	6193      	str	r3, [r2, #24]
                    if (ctx->M_n < 16 || len == mlen)
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d91d      	bls.n	8007a64 <AES_CMAC_Update+0x82>
 8007a28:	42af      	cmp	r7, r5
 8007a2a:	d21b      	bcs.n	8007a64 <AES_CMAC_Update+0x82>
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	33f1      	adds	r3, #241	; 0xf1
 8007a30:	0018      	movs	r0, r3
 8007a32:	1ca1      	adds	r1, r4, #2
 8007a34:	31ff      	adds	r1, #255	; 0xff
                            return;
                   XOR(ctx->M_last, ctx->X);
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	7c1f      	ldrb	r7, [r3, #16]
 8007a3a:	407a      	eors	r2, r7
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	428b      	cmp	r3, r1
 8007a42:	d1f8      	bne.n	8007a36 <AES_CMAC_Update+0x54>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8007a44:	0022      	movs	r2, r4
 8007a46:	0001      	movs	r1, r0
 8007a48:	f7ff fe6e 	bl	8007728 <aes_encrypt>
                    data += mlen;
 8007a4c:	9b00      	ldr	r3, [sp, #0]
 8007a4e:	18f6      	adds	r6, r6, r3
                    len -= mlen;
 8007a50:	1aed      	subs	r5, r5, r3
            }
            while (len > 16) {      /* not last block */
 8007a52:	2d10      	cmp	r5, #16
 8007a54:	d808      	bhi.n	8007a68 <AES_CMAC_Update+0x86>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8007a56:	b2aa      	uxth	r2, r5
 8007a58:	0031      	movs	r1, r6
 8007a5a:	9801      	ldr	r0, [sp, #4]
            ctx->M_n = len;
 8007a5c:	34fc      	adds	r4, #252	; 0xfc
            memcpy1(ctx->M_last, data, len);
 8007a5e:	f003 fbc4 	bl	800b1ea <memcpy1>
            ctx->M_n = len;
 8007a62:	61a5      	str	r5, [r4, #24]
}
 8007a64:	b007      	add	sp, #28
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a68:	0023      	movs	r3, r4
 8007a6a:	0032      	movs	r2, r6
 8007a6c:	1ca0      	adds	r0, r4, #2
 8007a6e:	33f1      	adds	r3, #241	; 0xf1
 8007a70:	30ff      	adds	r0, #255	; 0xff
                    XOR(data, ctx->X);
 8007a72:	7819      	ldrb	r1, [r3, #0]
 8007a74:	7817      	ldrb	r7, [r2, #0]
 8007a76:	3201      	adds	r2, #1
 8007a78:	4079      	eors	r1, r7
 8007a7a:	7019      	strb	r1, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	d1f7      	bne.n	8007a72 <AES_CMAC_Update+0x90>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007a82:	0027      	movs	r7, r4
 8007a84:	37f1      	adds	r7, #241	; 0xf1
 8007a86:	2210      	movs	r2, #16
 8007a88:	0039      	movs	r1, r7
 8007a8a:	a802      	add	r0, sp, #8
 8007a8c:	f003 fbad 	bl	800b1ea <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8007a90:	a902      	add	r1, sp, #8
 8007a92:	0022      	movs	r2, r4
 8007a94:	0008      	movs	r0, r1
 8007a96:	f7ff fe47 	bl	8007728 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	a902      	add	r1, sp, #8
 8007a9e:	0038      	movs	r0, r7
 8007aa0:	f003 fba3 	bl	800b1ea <memcpy1>
                    data += 16;
 8007aa4:	3610      	adds	r6, #16
                    len -= 16;
 8007aa6:	3d10      	subs	r5, #16
 8007aa8:	e7d3      	b.n	8007a52 <AES_CMAC_Update+0x70>

08007aaa <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	000c      	movs	r4, r1
 8007aae:	b088      	sub	sp, #32
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	2100      	movs	r1, #0
{
 8007ab4:	0005      	movs	r5, r0
            memset1(K, '\0', 16);
 8007ab6:	4668      	mov	r0, sp
 8007ab8:	f003 fbac 	bl	800b214 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8007abc:	0022      	movs	r2, r4
 8007abe:	4669      	mov	r1, sp
 8007ac0:	4668      	mov	r0, sp
 8007ac2:	f7ff fe31 	bl	8007728 <aes_encrypt>

            if (K[0] & 0x80) {
 8007ac6:	466b      	mov	r3, sp
 8007ac8:	781a      	ldrb	r2, [r3, #0]
                    LSHIFT(K, K);
                   K[15] ^= 0x87;
            } else
                    LSHIFT(K, K);
 8007aca:	2300      	movs	r3, #0
            if (K[0] & 0x80) {
 8007acc:	2a7f      	cmp	r2, #127	; 0x7f
 8007ace:	d940      	bls.n	8007b52 <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8007ad0:	466a      	mov	r2, sp
 8007ad2:	4669      	mov	r1, sp
 8007ad4:	5cd2      	ldrb	r2, [r2, r3]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	5cc9      	ldrb	r1, [r1, r3]
 8007ada:	0052      	lsls	r2, r2, #1
 8007adc:	09c9      	lsrs	r1, r1, #7
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	4669      	mov	r1, sp
 8007ae2:	1e58      	subs	r0, r3, #1
 8007ae4:	540a      	strb	r2, [r1, r0]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d1f2      	bne.n	8007ad0 <AES_CMAC_Final+0x26>
                   K[15] ^= 0x87;
 8007aea:	2379      	movs	r3, #121	; 0x79
                    LSHIFT(K, K);
 8007aec:	7bca      	ldrb	r2, [r1, #15]
                   K[15] ^= 0x87;
 8007aee:	425b      	negs	r3, r3
                    LSHIFT(K, K);
 8007af0:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
 8007af2:	4053      	eors	r3, r2
                    LSHIFT(K, K);
 8007af4:	466a      	mov	r2, sp
 8007af6:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
 8007af8:	0023      	movs	r3, r4
 8007afa:	33fc      	adds	r3, #252	; 0xfc
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	2a10      	cmp	r2, #16
 8007b00:	d137      	bne.n	8007b72 <AES_CMAC_Final+0xc8>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8007b02:	2300      	movs	r3, #0
 8007b04:	1ca2      	adds	r2, r4, #2
 8007b06:	32ff      	adds	r2, #255	; 0xff
 8007b08:	4668      	mov	r0, sp
 8007b0a:	7811      	ldrb	r1, [r2, #0]
 8007b0c:	5cc0      	ldrb	r0, [r0, r3]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4041      	eors	r1, r0
 8007b12:	7011      	strb	r1, [r2, #0]
 8007b14:	3201      	adds	r2, #1
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d1f6      	bne.n	8007b08 <AES_CMAC_Final+0x5e>
 8007b1a:	0023      	movs	r3, r4
 8007b1c:	33f1      	adds	r3, #241	; 0xf1
 8007b1e:	0019      	movs	r1, r3
 8007b20:	1ca0      	adds	r0, r4, #2
 8007b22:	30ff      	adds	r0, #255	; 0xff
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	7c1e      	ldrb	r6, [r3, #16]
 8007b28:	4072      	eors	r2, r6
 8007b2a:	701a      	strb	r2, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	d1f8      	bne.n	8007b24 <AES_CMAC_Final+0x7a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007b32:	a804      	add	r0, sp, #16
 8007b34:	2210      	movs	r2, #16
 8007b36:	f003 fb58 	bl	800b1ea <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8007b3a:	0022      	movs	r2, r4
 8007b3c:	0029      	movs	r1, r5
 8007b3e:	a804      	add	r0, sp, #16
 8007b40:	f7ff fdf2 	bl	8007728 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8007b44:	2210      	movs	r2, #16
 8007b46:	2100      	movs	r1, #0
 8007b48:	4668      	mov	r0, sp
 8007b4a:	f003 fb63 	bl	800b214 <memset1>

}
 8007b4e:	b008      	add	sp, #32
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 8007b52:	466a      	mov	r2, sp
 8007b54:	4669      	mov	r1, sp
 8007b56:	5cd2      	ldrb	r2, [r2, r3]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	5cc9      	ldrb	r1, [r1, r3]
 8007b5c:	0052      	lsls	r2, r2, #1
 8007b5e:	09c9      	lsrs	r1, r1, #7
 8007b60:	430a      	orrs	r2, r1
 8007b62:	4669      	mov	r1, sp
 8007b64:	1e58      	subs	r0, r3, #1
 8007b66:	540a      	strb	r2, [r1, r0]
 8007b68:	2b0f      	cmp	r3, #15
 8007b6a:	d1f2      	bne.n	8007b52 <AES_CMAC_Final+0xa8>
 8007b6c:	7bcb      	ldrb	r3, [r1, #15]
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	e7c0      	b.n	8007af4 <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 8007b72:	466b      	mov	r3, sp
 8007b74:	7819      	ldrb	r1, [r3, #0]
                           LSHIFT(K, K);
 8007b76:	2300      	movs	r3, #0
                  if (K[0] & 0x80) {
 8007b78:	297f      	cmp	r1, #127	; 0x7f
 8007b7a:	d92b      	bls.n	8007bd4 <AES_CMAC_Final+0x12a>
                          LSHIFT(K, K);
 8007b7c:	4669      	mov	r1, sp
 8007b7e:	4668      	mov	r0, sp
 8007b80:	5cc9      	ldrb	r1, [r1, r3]
 8007b82:	3301      	adds	r3, #1
 8007b84:	5cc0      	ldrb	r0, [r0, r3]
 8007b86:	0049      	lsls	r1, r1, #1
 8007b88:	09c0      	lsrs	r0, r0, #7
 8007b8a:	4301      	orrs	r1, r0
 8007b8c:	4668      	mov	r0, sp
 8007b8e:	1e5e      	subs	r6, r3, #1
 8007b90:	5581      	strb	r1, [r0, r6]
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	d1f2      	bne.n	8007b7c <AES_CMAC_Final+0xd2>
                          K[15] ^= 0x87;
 8007b96:	2379      	movs	r3, #121	; 0x79
                          LSHIFT(K, K);
 8007b98:	7bc1      	ldrb	r1, [r0, #15]
                          K[15] ^= 0x87;
 8007b9a:	425b      	negs	r3, r3
                          LSHIFT(K, K);
 8007b9c:	0049      	lsls	r1, r1, #1
                          K[15] ^= 0x87;
 8007b9e:	404b      	eors	r3, r1
                           LSHIFT(K, K);
 8007ba0:	4669      	mov	r1, sp
 8007ba2:	73cb      	strb	r3, [r1, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8007ba4:	2180      	movs	r1, #128	; 0x80
 8007ba6:	18a3      	adds	r3, r4, r2
 8007ba8:	33ff      	adds	r3, #255	; 0xff
 8007baa:	7099      	strb	r1, [r3, #2]
 8007bac:	2100      	movs	r1, #0
                   while (++ctx->M_n < 16)
 8007bae:	1c53      	adds	r3, r2, #1
 8007bb0:	2b0f      	cmp	r3, #15
 8007bb2:	d91f      	bls.n	8007bf4 <AES_CMAC_Final+0x14a>
 8007bb4:	0022      	movs	r2, r4
 8007bb6:	32fc      	adds	r2, #252	; 0xfc
 8007bb8:	6193      	str	r3, [r2, #24]
                  XOR(K, ctx->M_last);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	1ca2      	adds	r2, r4, #2
 8007bbe:	32ff      	adds	r2, #255	; 0xff
 8007bc0:	4668      	mov	r0, sp
 8007bc2:	7811      	ldrb	r1, [r2, #0]
 8007bc4:	5cc0      	ldrb	r0, [r0, r3]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	4041      	eors	r1, r0
 8007bca:	7011      	strb	r1, [r2, #0]
 8007bcc:	3201      	adds	r2, #1
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d1f6      	bne.n	8007bc0 <AES_CMAC_Final+0x116>
 8007bd2:	e7a2      	b.n	8007b1a <AES_CMAC_Final+0x70>
                           LSHIFT(K, K);
 8007bd4:	4669      	mov	r1, sp
 8007bd6:	4668      	mov	r0, sp
 8007bd8:	5cc9      	ldrb	r1, [r1, r3]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	5cc0      	ldrb	r0, [r0, r3]
 8007bde:	0049      	lsls	r1, r1, #1
 8007be0:	09c0      	lsrs	r0, r0, #7
 8007be2:	4301      	orrs	r1, r0
 8007be4:	4668      	mov	r0, sp
 8007be6:	1e5e      	subs	r6, r3, #1
 8007be8:	5581      	strb	r1, [r0, r6]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d1f2      	bne.n	8007bd4 <AES_CMAC_Final+0x12a>
 8007bee:	7bc3      	ldrb	r3, [r0, #15]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	e7d5      	b.n	8007ba0 <AES_CMAC_Final+0xf6>
                         ctx->M_last[ctx->M_n] = 0;
 8007bf4:	3203      	adds	r2, #3
 8007bf6:	32ff      	adds	r2, #255	; 0xff
 8007bf8:	18a2      	adds	r2, r4, r2
 8007bfa:	7011      	strb	r1, [r2, #0]
 8007bfc:	001a      	movs	r2, r3
 8007bfe:	e7d6      	b.n	8007bae <AES_CMAC_Final+0x104>

08007c00 <ResetMacParameters>:
    DownLinkCounter = 0;
    AdrAckCounter = 0;

    ChannelsNbRepCounter = 0;

    AckTimeoutRetries = 1;
 8007c00:	2101      	movs	r1, #1
    IsLoRaMacNetworkJoined = false;
 8007c02:	2200      	movs	r2, #0
    AckTimeoutRetries = 1;
 8007c04:	481e      	ldr	r0, [pc, #120]	; (8007c80 <ResetMacParameters+0x80>)
{
 8007c06:	b5f0      	push	{r4, r5, r6, r7, lr}
    IsLoRaMacNetworkJoined = false;
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <ResetMacParameters+0x84>)
    AckTimeoutRetries = 1;
 8007c0a:	7001      	strb	r1, [r0, #0]
    AckTimeoutRetriesCounter = 1;
 8007c0c:	7041      	strb	r1, [r0, #1]
    AggregatedDCycle = 1;

    MacCommandsBufferIndex = 0;
    MacCommandsBufferToRepeatIndex = 0;

    IsRxWindowsEnabled = true;
 8007c0e:	7081      	strb	r1, [r0, #2]

    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007c10:	481d      	ldr	r0, [pc, #116]	; (8007c88 <ResetMacParameters+0x88>)
    AggregatedDCycle = 1;
 8007c12:	8299      	strh	r1, [r3, #20]
    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007c14:	7804      	ldrb	r4, [r0, #0]
 8007c16:	491d      	ldr	r1, [pc, #116]	; (8007c8c <ResetMacParameters+0x8c>)
    IsLoRaMacNetworkJoined = false;
 8007c18:	701a      	strb	r2, [r3, #0]
    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007c1a:	700c      	strb	r4, [r1, #0]
    UpLinkCounter = 0;
 8007c1c:	605a      	str	r2, [r3, #4]
    DownLinkCounter = 0;
 8007c1e:	609a      	str	r2, [r3, #8]
    AdrAckCounter = 0;
 8007c20:	60da      	str	r2, [r3, #12]
    ChannelsNbRepCounter = 0;
 8007c22:	741a      	strb	r2, [r3, #16]
    AckTimeoutRetry = false;
 8007c24:	745a      	strb	r2, [r3, #17]
    MaxDCycle = 0;
 8007c26:	749a      	strb	r2, [r3, #18]
    MacCommandsBufferIndex = 0;
 8007c28:	759a      	strb	r2, [r3, #22]
    MacCommandsBufferToRepeatIndex = 0;
 8007c2a:	75da      	strb	r2, [r3, #23]
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007c2c:	7844      	ldrb	r4, [r0, #1]
    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 8007c2e:	1c85      	adds	r5, r0, #2
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007c30:	704c      	strb	r4, [r1, #1]
    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 8007c32:	7fed      	ldrb	r5, [r5, #31]
 8007c34:	1c8c      	adds	r4, r1, #2
 8007c36:	77e5      	strb	r5, [r4, #31]
    LoRaMacParams.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8007c38:	000c      	movs	r4, r1
 8007c3a:	0005      	movs	r5, r0
 8007c3c:	3424      	adds	r4, #36	; 0x24
 8007c3e:	3524      	adds	r5, #36	; 0x24
 8007c40:	cdc0      	ldmia	r5!, {r6, r7}
 8007c42:	c4c0      	stmia	r4!, {r6, r7}
    LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 8007c44:	0005      	movs	r5, r0
 8007c46:	000c      	movs	r4, r1
 8007c48:	352c      	adds	r5, #44	; 0x2c
 8007c4a:	782d      	ldrb	r5, [r5, #0]
 8007c4c:	342c      	adds	r4, #44	; 0x2c
 8007c4e:	7025      	strb	r5, [r4, #0]
    LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 8007c50:	0005      	movs	r5, r0
 8007c52:	000c      	movs	r4, r1
 8007c54:	352d      	adds	r5, #45	; 0x2d
 8007c56:	782d      	ldrb	r5, [r5, #0]
 8007c58:	342d      	adds	r4, #45	; 0x2d
 8007c5a:	7025      	strb	r5, [r4, #0]
    LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 8007c5c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 8007c5e:	6b40      	ldr	r0, [r0, #52]	; 0x34
    LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 8007c60:	630c      	str	r4, [r1, #48]	; 0x30
    LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 8007c62:	6348      	str	r0, [r1, #52]	; 0x34
    NodeAckRequested = false;
    SrvAckRequested = false;
    MacCommandsInNextTx = false;

    // Reset Multicast downlink counters
    MulticastParams_t *cur = MulticastChannels;
 8007c64:	69d9      	ldr	r1, [r3, #28]
    NodeAckRequested = false;
 8007c66:	761a      	strb	r2, [r3, #24]
    SrvAckRequested = false;
 8007c68:	765a      	strb	r2, [r3, #25]
    MacCommandsInNextTx = false;
 8007c6a:	769a      	strb	r2, [r3, #26]
    while( cur != NULL )
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d104      	bne.n	8007c7a <ResetMacParameters+0x7a>
        cur->DownLinkCounter = 0;
        cur = cur->Next;
    }

    // Initialize channel index.
    Channel = 0;
 8007c70:	1c5a      	adds	r2, r3, #1
    LastTxChannel = Channel;
 8007c72:	3302      	adds	r3, #2
    Channel = 0;
 8007c74:	77d1      	strb	r1, [r2, #31]
    LastTxChannel = Channel;
 8007c76:	77d9      	strb	r1, [r3, #31]
}
 8007c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cur->DownLinkCounter = 0;
 8007c7a:	624a      	str	r2, [r1, #36]	; 0x24
        cur = cur->Next;
 8007c7c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007c7e:	e7f5      	b.n	8007c6c <ResetMacParameters+0x6c>
 8007c80:	20000060 	.word	0x20000060
 8007c84:	20000300 	.word	0x20000300
 8007c88:	20000e2c 	.word	0x20000e2c
 8007c8c:	20000e64 	.word	0x20000e64

08007c90 <ValidatePayloadLength>:
{
 8007c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c92:	0015      	movs	r5, r2
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007c94:	4a0f      	ldr	r2, [pc, #60]	; (8007cd4 <ValidatePayloadLength+0x44>)
 8007c96:	ab01      	add	r3, sp, #4
 8007c98:	322c      	adds	r2, #44	; 0x2c
 8007c9a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8007c9c:	7059      	strb	r1, [r3, #1]
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007c9e:	709a      	strb	r2, [r3, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007ca0:	2209      	movs	r2, #9
 8007ca2:	701a      	strb	r2, [r3, #0]
    if( RepeaterSupport == true )
 8007ca4:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <ValidatePayloadLength+0x48>)
{
 8007ca6:	0004      	movs	r4, r0
    if( RepeaterSupport == true )
 8007ca8:	1cd1      	adds	r1, r2, #3
 8007caa:	7fc9      	ldrb	r1, [r1, #31]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d001      	beq.n	8007cb4 <ValidatePayloadLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007cb0:	210a      	movs	r1, #10
 8007cb2:	7019      	strb	r1, [r3, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007cb4:	3204      	adds	r2, #4
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	7fd0      	ldrb	r0, [r2, #31]
 8007cba:	f002 f91b 	bl	8009ef4 <RegionGetPhyParam>
    payloadSize = ( lenN + fOptsLen );
 8007cbe:	1964      	adds	r4, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007cc0:	b283      	uxth	r3, r0
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	d303      	bcc.n	8007cd0 <ValidatePayloadLength+0x40>
 8007cc8:	23ff      	movs	r3, #255	; 0xff
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	4140      	adcs	r0, r0
 8007cce:	b2c0      	uxtb	r0, r0
}
 8007cd0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	20000e64 	.word	0x20000e64
 8007cd8:	20000300 	.word	0x20000300

08007cdc <OnAckTimeoutTimerEvent>:
{
 8007cdc:	b510      	push	{r4, lr}
    TimerStop( &AckTimeoutTimer );
 8007cde:	4c0c      	ldr	r4, [pc, #48]	; (8007d10 <OnAckTimeoutTimerEvent+0x34>)
 8007ce0:	0020      	movs	r0, r4
 8007ce2:	3024      	adds	r0, #36	; 0x24
 8007ce4:	f003 fa0a 	bl	800b0fc <TimerStop>
    if( NodeAckRequested == true )
 8007ce8:	7e23      	ldrb	r3, [r4, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <OnAckTimeoutTimerEvent+0x1e>
        AckTimeoutRetry = true;
 8007cee:	2301      	movs	r3, #1
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 8007cf0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        AckTimeoutRetry = true;
 8007cf2:	7463      	strb	r3, [r4, #17]
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 8007cf4:	3303      	adds	r3, #3
 8007cf6:	439a      	bics	r2, r3
 8007cf8:	63a2      	str	r2, [r4, #56]	; 0x38
    if( LoRaMacDeviceClass == CLASS_C )
 8007cfa:	343c      	adds	r4, #60	; 0x3c
 8007cfc:	7823      	ldrb	r3, [r4, #0]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d104      	bne.n	8007d0c <OnAckTimeoutTimerEvent+0x30>
        LoRaMacFlags.Bits.MacDone = 1;
 8007d02:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <OnAckTimeoutTimerEvent+0x38>)
 8007d04:	330e      	adds	r3, #14
 8007d06:	7811      	ldrb	r1, [r2, #0]
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	7013      	strb	r3, [r2, #0]
}
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	20000300 	.word	0x20000300
 8007d14:	20000e28 	.word	0x20000e28

08007d18 <PrepareRxDoneAbort>:
    LoRaMacState |= LORAMAC_RX_ABORT;
 8007d18:	2340      	movs	r3, #64	; 0x40
{
 8007d1a:	b510      	push	{r4, lr}
    LoRaMacState |= LORAMAC_RX_ABORT;
 8007d1c:	4c0b      	ldr	r4, [pc, #44]	; (8007d4c <PrepareRxDoneAbort+0x34>)
 8007d1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d20:	4313      	orrs	r3, r2
 8007d22:	63a3      	str	r3, [r4, #56]	; 0x38
    if( NodeAckRequested )
 8007d24:	7e23      	ldrb	r3, [r4, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <PrepareRxDoneAbort+0x16>
        OnAckTimeoutTimerEvent( );
 8007d2a:	f7ff ffd7 	bl	8007cdc <OnAckTimeoutTimerEvent>
    LoRaMacFlags.Bits.MacDone = 1;
 8007d2e:	2112      	movs	r1, #18
    LoRaMacFlags.Bits.McpsInd = 1;
 8007d30:	4a07      	ldr	r2, [pc, #28]	; (8007d50 <PrepareRxDoneAbort+0x38>)
    TimerSetValue( &MacStateCheckTimer, 1 );
 8007d32:	3440      	adds	r4, #64	; 0x40
    LoRaMacFlags.Bits.McpsInd = 1;
 8007d34:	7813      	ldrb	r3, [r2, #0]
    TimerSetValue( &MacStateCheckTimer, 1 );
 8007d36:	0020      	movs	r0, r4
    LoRaMacFlags.Bits.MacDone = 1;
 8007d38:	430b      	orrs	r3, r1
    TimerSetValue( &MacStateCheckTimer, 1 );
 8007d3a:	3911      	subs	r1, #17
    LoRaMacFlags.Bits.MacDone = 1;
 8007d3c:	7013      	strb	r3, [r2, #0]
    TimerSetValue( &MacStateCheckTimer, 1 );
 8007d3e:	f003 fa09 	bl	800b154 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007d42:	0020      	movs	r0, r4
 8007d44:	f003 f968 	bl	800b018 <TimerStart>
}
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	20000300 	.word	0x20000300
 8007d50:	20000e28 	.word	0x20000e28

08007d54 <RxWindowSetup>:
{
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <RxWindowSetup+0x14>)
 8007d56:	b510      	push	{r4, lr}
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( rxContinuous == false )
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d102      	bne.n	8007d64 <RxWindowSetup+0x10>
        Radio.Rx( maxRxWindow );
 8007d5e:	0008      	movs	r0, r1
        Radio.Rx( 0 ); // Continuous mode
 8007d60:	4798      	blx	r3
}
 8007d62:	bd10      	pop	{r4, pc}
        Radio.Rx( 0 ); // Continuous mode
 8007d64:	2000      	movs	r0, #0
 8007d66:	e7fb      	b.n	8007d60 <RxWindowSetup+0xc>
 8007d68:	0800cfc4 	.word	0x0800cfc4

08007d6c <OnRxWindow1TimerEvent>:
{
 8007d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TimerStop( &RxWindowTimer1 );
 8007d6e:	4c19      	ldr	r4, [pc, #100]	; (8007dd4 <OnRxWindow1TimerEvent+0x68>)
 8007d70:	0020      	movs	r0, r4
 8007d72:	3054      	adds	r0, #84	; 0x54
 8007d74:	f003 f9c2 	bl	800b0fc <TimerStop>
    RxSlot = 0;
 8007d78:	0023      	movs	r3, r4
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	3368      	adds	r3, #104	; 0x68
 8007d7e:	701a      	strb	r2, [r3, #0]
    RxWindow1Config.Channel = Channel;
 8007d80:	0023      	movs	r3, r4
 8007d82:	1c61      	adds	r1, r4, #1
 8007d84:	7fc9      	ldrb	r1, [r1, #31]
    RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 8007d86:	4d14      	ldr	r5, [pc, #80]	; (8007dd8 <OnRxWindow1TimerEvent+0x6c>)
    RxWindow1Config.Channel = Channel;
 8007d88:	336c      	adds	r3, #108	; 0x6c
 8007d8a:	7019      	strb	r1, [r3, #0]
    RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 8007d8c:	1ca9      	adds	r1, r5, #2
 8007d8e:	7fc9      	ldrb	r1, [r1, #31]
 8007d90:	70d9      	strb	r1, [r3, #3]
    RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8007d92:	0029      	movs	r1, r5
 8007d94:	312d      	adds	r1, #45	; 0x2d
 8007d96:	7809      	ldrb	r1, [r1, #0]
    RxWindow1Config.RxContinuous = false;
 8007d98:	749a      	strb	r2, [r3, #18]
    RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8007d9a:	7419      	strb	r1, [r3, #16]
    RxWindow1Config.RepeaterSupport = RepeaterSupport;
 8007d9c:	1ce1      	adds	r1, r4, #3
 8007d9e:	7fc9      	ldrb	r1, [r1, #31]
    RxWindow1Config.Window = RxSlot;
 8007da0:	74da      	strb	r2, [r3, #19]
    RxWindow1Config.RepeaterSupport = RepeaterSupport;
 8007da2:	7459      	strb	r1, [r3, #17]
    if( LoRaMacDeviceClass == CLASS_C )
 8007da4:	0023      	movs	r3, r4
 8007da6:	333c      	adds	r3, #60	; 0x3c
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d103      	bne.n	8007db6 <OnRxWindow1TimerEvent+0x4a>
        Radio.Standby( );
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <OnRxWindow1TimerEvent+0x70>)
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	4798      	blx	r3
    RegionRxConfig( LoRaMacRegion, &RxWindow1Config, ( int8_t* )&McpsIndication.RxDatarate );
 8007db6:	0026      	movs	r6, r4
 8007db8:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <OnRxWindow1TimerEvent+0x74>)
 8007dba:	366c      	adds	r6, #108	; 0x6c
 8007dbc:	3404      	adds	r4, #4
 8007dbe:	0031      	movs	r1, r6
 8007dc0:	3204      	adds	r2, #4
 8007dc2:	7fe0      	ldrb	r0, [r4, #31]
 8007dc4:	f002 f8e0 	bl	8009f88 <RegionRxConfig>
    RxWindowSetup( RxWindow1Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8007dc8:	7cb0      	ldrb	r0, [r6, #18]
 8007dca:	68e9      	ldr	r1, [r5, #12]
 8007dcc:	f7ff ffc2 	bl	8007d54 <RxWindowSetup>
}
 8007dd0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	20000300 	.word	0x20000300
 8007dd8:	20000e64 	.word	0x20000e64
 8007ddc:	0800cfc4 	.word	0x0800cfc4
 8007de0:	20000380 	.word	0x20000380

08007de4 <OnRxWindow2TimerEvent>:
{
 8007de4:	b570      	push	{r4, r5, r6, lr}
    TimerStop( &RxWindowTimer2 );
 8007de6:	4c17      	ldr	r4, [pc, #92]	; (8007e44 <OnRxWindow2TimerEvent+0x60>)
 8007de8:	0020      	movs	r0, r4
 8007dea:	3018      	adds	r0, #24
 8007dec:	f003 f986 	bl	800b0fc <TimerStop>
    RxWindow2Config.Channel = Channel;
 8007df0:	0023      	movs	r3, r4
 8007df2:	4d15      	ldr	r5, [pc, #84]	; (8007e48 <OnRxWindow2TimerEvent+0x64>)
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 8007df4:	4e15      	ldr	r6, [pc, #84]	; (8007e4c <OnRxWindow2TimerEvent+0x68>)
    RxWindow2Config.Channel = Channel;
 8007df6:	1c6a      	adds	r2, r5, #1
 8007df8:	7fd2      	ldrb	r2, [r2, #31]
 8007dfa:	332c      	adds	r3, #44	; 0x2c
 8007dfc:	701a      	strb	r2, [r3, #0]
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 8007dfe:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if( LoRaMacDeviceClass != CLASS_C )
 8007e00:	0029      	movs	r1, r5
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 8007e02:	6322      	str	r2, [r4, #48]	; 0x30
    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8007e04:	0032      	movs	r2, r6
 8007e06:	322d      	adds	r2, #45	; 0x2d
 8007e08:	7812      	ldrb	r2, [r2, #0]
    if( LoRaMacDeviceClass != CLASS_C )
 8007e0a:	313c      	adds	r1, #60	; 0x3c
    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8007e0c:	741a      	strb	r2, [r3, #16]
    RxWindow2Config.RepeaterSupport = RepeaterSupport;
 8007e0e:	1cea      	adds	r2, r5, #3
 8007e10:	7fd2      	ldrb	r2, [r2, #31]
    if( LoRaMacDeviceClass != CLASS_C )
 8007e12:	7809      	ldrb	r1, [r1, #0]
    RxWindow2Config.RepeaterSupport = RepeaterSupport;
 8007e14:	745a      	strb	r2, [r3, #17]
    RxWindow2Config.Window = 1;
 8007e16:	2201      	movs	r2, #1
 8007e18:	74da      	strb	r2, [r3, #19]
    if( LoRaMacDeviceClass != CLASS_C )
 8007e1a:	2902      	cmp	r1, #2
 8007e1c:	d000      	beq.n	8007e20 <OnRxWindow2TimerEvent+0x3c>
        RxWindow2Config.RxContinuous = false;
 8007e1e:	2200      	movs	r2, #0
        RxWindow2Config.RxContinuous = true;
 8007e20:	749a      	strb	r2, [r3, #18]
    if( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t* )&McpsIndication.RxDatarate ) == true )
 8007e22:	1d22      	adds	r2, r4, #4
 8007e24:	1d2b      	adds	r3, r5, #4
 8007e26:	342c      	adds	r4, #44	; 0x2c
 8007e28:	7fd8      	ldrb	r0, [r3, #31]
 8007e2a:	0021      	movs	r1, r4
 8007e2c:	f002 f8ac 	bl	8009f88 <RegionRxConfig>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d006      	beq.n	8007e42 <OnRxWindow2TimerEvent+0x5e>
        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8007e34:	7ca0      	ldrb	r0, [r4, #18]
 8007e36:	68f1      	ldr	r1, [r6, #12]
 8007e38:	f7ff ff8c 	bl	8007d54 <RxWindowSetup>
        RxSlot = RxWindow2Config.Window;
 8007e3c:	7ce3      	ldrb	r3, [r4, #19]
 8007e3e:	3568      	adds	r5, #104	; 0x68
 8007e40:	702b      	strb	r3, [r5, #0]
}
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	20000380 	.word	0x20000380
 8007e48:	20000300 	.word	0x20000300
 8007e4c:	20000e64 	.word	0x20000e64

08007e50 <OnRadioTxTimeout>:
    if( LoRaMacDeviceClass != CLASS_C )
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <OnRadioTxTimeout+0x34>)
{
 8007e52:	b507      	push	{r0, r1, r2, lr}
    if( LoRaMacDeviceClass != CLASS_C )
 8007e54:	333c      	adds	r3, #60	; 0x3c
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d010      	beq.n	8007e7e <OnRadioTxTimeout+0x2e>
        Radio.Sleep( );
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <OnRadioTxTimeout+0x38>)
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	4798      	blx	r3
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007e64:	2202      	movs	r2, #2
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <OnRadioTxTimeout+0x3c>)
 8007e68:	0019      	movs	r1, r3
    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007e6a:	3354      	adds	r3, #84	; 0x54
 8007e6c:	705a      	strb	r2, [r3, #1]
    LoRaMacFlags.Bits.MacDone = 1;
 8007e6e:	2310      	movs	r3, #16
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007e70:	3140      	adds	r1, #64	; 0x40
 8007e72:	704a      	strb	r2, [r1, #1]
    LoRaMacFlags.Bits.MacDone = 1;
 8007e74:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <OnRadioTxTimeout+0x40>)
 8007e76:	7811      	ldrb	r1, [r2, #0]
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	7013      	strb	r3, [r2, #0]
}
 8007e7c:	bd07      	pop	{r0, r1, r2, pc}
        OnRxWindow2TimerEvent( );
 8007e7e:	f7ff ffb1 	bl	8007de4 <OnRxWindow2TimerEvent>
 8007e82:	e7ef      	b.n	8007e64 <OnRadioTxTimeout+0x14>
 8007e84:	20000300 	.word	0x20000300
 8007e88:	0800cfc4 	.word	0x0800cfc4
 8007e8c:	20000380 	.word	0x20000380
 8007e90:	20000e28 	.word	0x20000e28

08007e94 <OnRadioTxDone>:
{
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	b087      	sub	sp, #28
    TimerTime_t curTime = TimerGetCurrentTime( );
 8007e98:	f003 f96d 	bl	800b176 <TimerGetCurrentTime>
    if( LoRaMacDeviceClass != CLASS_C )
 8007e9c:	4c3f      	ldr	r4, [pc, #252]	; (8007f9c <OnRadioTxDone+0x108>)
    TimerTime_t curTime = TimerGetCurrentTime( );
 8007e9e:	9000      	str	r0, [sp, #0]
    if( LoRaMacDeviceClass != CLASS_C )
 8007ea0:	0023      	movs	r3, r4
 8007ea2:	333c      	adds	r3, #60	; 0x3c
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d05f      	beq.n	8007f6a <OnRadioTxDone+0xd6>
        Radio.Sleep( );
 8007eaa:	4b3d      	ldr	r3, [pc, #244]	; (8007fa0 <OnRadioTxDone+0x10c>)
 8007eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	4798      	blx	r3
    if( IsRxWindowsEnabled == true )
 8007eb2:	4b3c      	ldr	r3, [pc, #240]	; (8007fa4 <OnRadioTxDone+0x110>)
 8007eb4:	4d3c      	ldr	r5, [pc, #240]	; (8007fa8 <OnRadioTxDone+0x114>)
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	4e3c      	ldr	r6, [pc, #240]	; (8007fac <OnRadioTxDone+0x118>)
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d058      	beq.n	8007f70 <OnRadioTxDone+0xdc>
        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
 8007ebe:	0027      	movs	r7, r4
 8007ec0:	3754      	adds	r7, #84	; 0x54
 8007ec2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007ec4:	0038      	movs	r0, r7
 8007ec6:	f003 f945 	bl	800b154 <TimerSetValue>
        TimerStart( &RxWindowTimer1 );
 8007eca:	0038      	movs	r0, r7
 8007ecc:	f003 f8a4 	bl	800b018 <TimerStart>
        if( LoRaMacDeviceClass != CLASS_C )
 8007ed0:	0023      	movs	r3, r4
 8007ed2:	333c      	adds	r3, #60	; 0x3c
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d008      	beq.n	8007eec <OnRadioTxDone+0x58>
            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
 8007eda:	002f      	movs	r7, r5
 8007edc:	3718      	adds	r7, #24
 8007ede:	0038      	movs	r0, r7
 8007ee0:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8007ee2:	f003 f937 	bl	800b154 <TimerSetValue>
            TimerStart( &RxWindowTimer2 );
 8007ee6:	0038      	movs	r0, r7
 8007ee8:	f003 f896 	bl	800b018 <TimerStart>
        if( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) )
 8007eec:	0023      	movs	r3, r4
 8007eee:	333c      	adds	r3, #60	; 0x3c
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d002      	beq.n	8007efc <OnRadioTxDone+0x68>
 8007ef6:	7e23      	ldrb	r3, [r4, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <OnRadioTxDone+0x8a>
            getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007efc:	2312      	movs	r3, #18
 8007efe:	a903      	add	r1, sp, #12
 8007f00:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	7fd8      	ldrb	r0, [r3, #31]
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + phyParam.Value );
 8007f06:	0027      	movs	r7, r4
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f08:	f001 fff4 	bl	8009ef4 <RegionGetPhyParam>
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + phyParam.Value );
 8007f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0e:	3724      	adds	r7, #36	; 0x24
 8007f10:	18c1      	adds	r1, r0, r3
 8007f12:	0038      	movs	r0, r7
 8007f14:	f003 f91e 	bl	800b154 <TimerSetValue>
            TimerStart( &AckTimeoutTimer );
 8007f18:	0038      	movs	r0, r7
 8007f1a:	f003 f87d 	bl	800b018 <TimerStart>
    if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 8007f1e:	7833      	ldrb	r3, [r6, #0]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	d536      	bpl.n	8007f92 <OnRadioTxDone+0xfe>
 8007f24:	002b      	movs	r3, r5
 8007f26:	3354      	adds	r3, #84	; 0x54
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d131      	bne.n	8007f92 <OnRadioTxDone+0xfe>
        LastTxIsJoinRequest = true;
 8007f2e:	002b      	movs	r3, r5
 8007f30:	2201      	movs	r2, #1
 8007f32:	3368      	adds	r3, #104	; 0x68
        LastTxIsJoinRequest = false;
 8007f34:	701a      	strb	r2, [r3, #0]
    LastTxChannel = Channel;
 8007f36:	1c63      	adds	r3, r4, #1
 8007f38:	7fdb      	ldrb	r3, [r3, #31]
    txDone.Channel = Channel;
 8007f3a:	a904      	add	r1, sp, #16
    LastTxChannel = Channel;
 8007f3c:	1ca2      	adds	r2, r4, #2
 8007f3e:	77d3      	strb	r3, [r2, #31]
    txDone.Channel = Channel;
 8007f40:	700b      	strb	r3, [r1, #0]
    txDone.Joined = IsLoRaMacNetworkJoined;
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	704b      	strb	r3, [r1, #1]
    txDone.LastTxDoneTime = curTime;
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	604b      	str	r3, [r1, #4]
    RegionSetBandTxDone( LoRaMacRegion, &txDone );
 8007f4a:	1d23      	adds	r3, r4, #4
 8007f4c:	7fd8      	ldrb	r0, [r3, #31]
 8007f4e:	f001 ffda 	bl	8009f06 <RegionSetBandTxDone>
    AggregatedLastTxDoneTime = curTime;
 8007f52:	9b00      	ldr	r3, [sp, #0]
 8007f54:	66eb      	str	r3, [r5, #108]	; 0x6c
    if( NodeAckRequested == false )
 8007f56:	7e23      	ldrb	r3, [r4, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <OnRadioTxDone+0xd2>
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007f5c:	3540      	adds	r5, #64	; 0x40
 8007f5e:	706b      	strb	r3, [r5, #1]
        ChannelsNbRepCounter++;
 8007f60:	7c23      	ldrb	r3, [r4, #16]
 8007f62:	3301      	adds	r3, #1
 8007f64:	7423      	strb	r3, [r4, #16]
}
 8007f66:	b007      	add	sp, #28
 8007f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        OnRxWindow2TimerEvent( );
 8007f6a:	f7ff ff3b 	bl	8007de4 <OnRxWindow2TimerEvent>
 8007f6e:	e7a0      	b.n	8007eb2 <OnRadioTxDone+0x1e>
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007f70:	002a      	movs	r2, r5
 8007f72:	3240      	adds	r2, #64	; 0x40
 8007f74:	7053      	strb	r3, [r2, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8007f76:	002b      	movs	r3, r5
 8007f78:	2204      	movs	r2, #4
 8007f7a:	3354      	adds	r3, #84	; 0x54
 8007f7c:	705a      	strb	r2, [r3, #1]
        if( LoRaMacFlags.Value == 0 )
 8007f7e:	7833      	ldrb	r3, [r6, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <OnRadioTxDone+0xf4>
            LoRaMacFlags.Bits.McpsReq = 1;
 8007f84:	3301      	adds	r3, #1
 8007f86:	7033      	strb	r3, [r6, #0]
        LoRaMacFlags.Bits.MacDone = 1;
 8007f88:	2310      	movs	r3, #16
 8007f8a:	7832      	ldrb	r2, [r6, #0]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	7033      	strb	r3, [r6, #0]
 8007f90:	e7c5      	b.n	8007f1e <OnRadioTxDone+0x8a>
        LastTxIsJoinRequest = false;
 8007f92:	002b      	movs	r3, r5
 8007f94:	2200      	movs	r2, #0
 8007f96:	3368      	adds	r3, #104	; 0x68
 8007f98:	e7cc      	b.n	8007f34 <OnRadioTxDone+0xa0>
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	20000300 	.word	0x20000300
 8007fa0:	0800cfc4 	.word	0x0800cfc4
 8007fa4:	20000060 	.word	0x20000060
 8007fa8:	20000380 	.word	0x20000380
 8007fac:	20000e28 	.word	0x20000e28

08007fb0 <OnRadioRxTimeout>:
{
 8007fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( LoRaMacDeviceClass != CLASS_C )
 8007fb2:	4d1c      	ldr	r5, [pc, #112]	; (8008024 <OnRadioRxTimeout+0x74>)
 8007fb4:	002b      	movs	r3, r5
 8007fb6:	333c      	adds	r3, #60	; 0x3c
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d020      	beq.n	8008000 <OnRadioRxTimeout+0x50>
        Radio.Sleep( );
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <OnRadioRxTimeout+0x78>)
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	4798      	blx	r3
    if( RxSlot == 0 )
 8007fc6:	002a      	movs	r2, r5
 8007fc8:	3268      	adds	r2, #104	; 0x68
 8007fca:	7812      	ldrb	r2, [r2, #0]
 8007fcc:	7e2b      	ldrb	r3, [r5, #24]
 8007fce:	4c17      	ldr	r4, [pc, #92]	; (800802c <OnRadioRxTimeout+0x7c>)
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	d118      	bne.n	8008006 <OnRadioRxTimeout+0x56>
        if( NodeAckRequested == true )
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <OnRadioRxTimeout+0x30>
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8007fd8:	0023      	movs	r3, r4
 8007fda:	3203      	adds	r2, #3
 8007fdc:	3340      	adds	r3, #64	; 0x40
 8007fde:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8007fe0:	0023      	movs	r3, r4
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	3354      	adds	r3, #84	; 0x54
        if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8007fe6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8007fe8:	705a      	strb	r2, [r3, #1]
        if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8007fea:	f003 f8ca 	bl	800b182 <TimerGetElapsedTime>
 8007fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff0:	4298      	cmp	r0, r3
 8007ff2:	d304      	bcc.n	8007ffe <OnRadioRxTimeout+0x4e>
            LoRaMacFlags.Bits.MacDone = 1;
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	4a0e      	ldr	r2, [pc, #56]	; (8008030 <OnRadioRxTimeout+0x80>)
 8007ff8:	7811      	ldrb	r1, [r2, #0]
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	7013      	strb	r3, [r2, #0]
}
 8007ffe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        OnRxWindow2TimerEvent( );
 8008000:	f7ff fef0 	bl	8007de4 <OnRxWindow2TimerEvent>
 8008004:	e7df      	b.n	8007fc6 <OnRadioRxTimeout+0x16>
        if( NodeAckRequested == true )
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <OnRadioRxTimeout+0x62>
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 800800a:	0023      	movs	r3, r4
 800800c:	2204      	movs	r2, #4
 800800e:	3340      	adds	r3, #64	; 0x40
 8008010:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8008012:	2304      	movs	r3, #4
 8008014:	3454      	adds	r4, #84	; 0x54
        if( LoRaMacDeviceClass != CLASS_C )
 8008016:	353c      	adds	r5, #60	; 0x3c
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8008018:	7063      	strb	r3, [r4, #1]
        if( LoRaMacDeviceClass != CLASS_C )
 800801a:	782b      	ldrb	r3, [r5, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d1e9      	bne.n	8007ff4 <OnRadioRxTimeout+0x44>
 8008020:	e7ed      	b.n	8007ffe <OnRadioRxTimeout+0x4e>
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	20000300 	.word	0x20000300
 8008028:	0800cfc4 	.word	0x0800cfc4
 800802c:	20000380 	.word	0x20000380
 8008030:	20000e28 	.word	0x20000e28

08008034 <OnRadioRxError>:
{
 8008034:	b513      	push	{r0, r1, r4, lr}
    if( LoRaMacDeviceClass != CLASS_C )
 8008036:	4c1b      	ldr	r4, [pc, #108]	; (80080a4 <OnRadioRxError+0x70>)
 8008038:	0023      	movs	r3, r4
 800803a:	333c      	adds	r3, #60	; 0x3c
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d01f      	beq.n	8008082 <OnRadioRxError+0x4e>
        Radio.Sleep( );
 8008042:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <OnRadioRxError+0x74>)
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	4798      	blx	r3
 800804a:	7e23      	ldrb	r3, [r4, #24]
    if( RxSlot == 0 )
 800804c:	3468      	adds	r4, #104	; 0x68
 800804e:	7822      	ldrb	r2, [r4, #0]
 8008050:	4c16      	ldr	r4, [pc, #88]	; (80080ac <OnRadioRxError+0x78>)
 8008052:	2a00      	cmp	r2, #0
 8008054:	d118      	bne.n	8008088 <OnRadioRxError+0x54>
        if( NodeAckRequested == true )
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <OnRadioRxError+0x2e>
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 800805a:	0023      	movs	r3, r4
 800805c:	3205      	adds	r2, #5
 800805e:	3340      	adds	r3, #64	; 0x40
 8008060:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8008062:	0023      	movs	r3, r4
 8008064:	2205      	movs	r2, #5
 8008066:	3354      	adds	r3, #84	; 0x54
        if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8008068:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 800806a:	705a      	strb	r2, [r3, #1]
        if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 800806c:	f003 f889 	bl	800b182 <TimerGetElapsedTime>
 8008070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008072:	4298      	cmp	r0, r3
 8008074:	d304      	bcc.n	8008080 <OnRadioRxError+0x4c>
            LoRaMacFlags.Bits.MacDone = 1;
 8008076:	2310      	movs	r3, #16
 8008078:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <OnRadioRxError+0x7c>)
 800807a:	7811      	ldrb	r1, [r2, #0]
        LoRaMacFlags.Bits.MacDone = 1;
 800807c:	430b      	orrs	r3, r1
 800807e:	7013      	strb	r3, [r2, #0]
}
 8008080:	bd13      	pop	{r0, r1, r4, pc}
        OnRxWindow2TimerEvent( );
 8008082:	f7ff feaf 	bl	8007de4 <OnRxWindow2TimerEvent>
 8008086:	e7e0      	b.n	800804a <OnRadioRxError+0x16>
        if( NodeAckRequested == true )
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <OnRadioRxError+0x60>
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 800808c:	0023      	movs	r3, r4
 800808e:	2206      	movs	r2, #6
 8008090:	3340      	adds	r3, #64	; 0x40
 8008092:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8008094:	2306      	movs	r3, #6
        LoRaMacFlags.Bits.MacDone = 1;
 8008096:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <OnRadioRxError+0x7c>)
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8008098:	3454      	adds	r4, #84	; 0x54
 800809a:	7063      	strb	r3, [r4, #1]
        LoRaMacFlags.Bits.MacDone = 1;
 800809c:	7811      	ldrb	r1, [r2, #0]
 800809e:	330a      	adds	r3, #10
 80080a0:	e7ec      	b.n	800807c <OnRadioRxError+0x48>
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	20000300 	.word	0x20000300
 80080a8:	0800cfc4 	.word	0x0800cfc4
 80080ac:	20000380 	.word	0x20000380
 80080b0:	20000e28 	.word	0x20000e28

080080b4 <ProcessMacCommands>:
{
 80080b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b6:	0007      	movs	r7, r0
 80080b8:	000c      	movs	r4, r1
 80080ba:	b08f      	sub	sp, #60	; 0x3c
 80080bc:	9203      	str	r2, [sp, #12]
 80080be:	9307      	str	r3, [sp, #28]
    while( macIndex < commandsSize )
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	429c      	cmp	r4, r3
 80080c4:	d301      	bcc.n	80080ca <ProcessMacCommands+0x16>
}
 80080c6:	b00f      	add	sp, #60	; 0x3c
 80080c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
 80080ca:	5d38      	ldrb	r0, [r7, r4]
 80080cc:	1c65      	adds	r5, r4, #1
 80080ce:	3802      	subs	r0, #2
 80080d0:	b2ed      	uxtb	r5, r5
 80080d2:	2808      	cmp	r0, #8
 80080d4:	d8f7      	bhi.n	80080c6 <ProcessMacCommands+0x12>
 80080d6:	f7f8 f821 	bl	800011c <__gnu_thumb1_case_uhi>
 80080da:	0009      	.short	0x0009
 80080dc:	00860016 	.word	0x00860016
 80080e0:	00e3009f 	.word	0x00e3009f
 80080e4:	013e0107 	.word	0x013e0107
 80080e8:	0199015d 	.word	0x0199015d
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80080ec:	2200      	movs	r2, #0
 80080ee:	4bda      	ldr	r3, [pc, #872]	; (8008458 <ProcessMacCommands+0x3a4>)
 80080f0:	3354      	adds	r3, #84	; 0x54
 80080f2:	705a      	strb	r2, [r3, #1]
                MlmeConfirm.DemodMargin = payload[macIndex++];
 80080f4:	5d79      	ldrb	r1, [r7, r5]
 80080f6:	1ca2      	adds	r2, r4, #2
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	7219      	strb	r1, [r3, #8]
                MlmeConfirm.NbGateways = payload[macIndex++];
 80080fc:	5cba      	ldrb	r2, [r7, r2]
 80080fe:	3403      	adds	r4, #3
 8008100:	b2e4      	uxtb	r4, r4
 8008102:	725a      	strb	r2, [r3, #9]
                break;
 8008104:	e7dc      	b.n	80080c0 <ProcessMacCommands+0xc>
                    int8_t linkAdrDatarate = DR_0;
 8008106:	2300      	movs	r3, #0
                    uint8_t linkAdrNbRep = 0;
 8008108:	260b      	movs	r6, #11
                    int8_t linkAdrDatarate = DR_0;
 800810a:	aa06      	add	r2, sp, #24
 800810c:	7253      	strb	r3, [r2, #9]
                    int8_t linkAdrTxPower = TX_POWER_0;
 800810e:	7293      	strb	r3, [r2, #10]
                    uint8_t linkAdrNbRep = 0;
 8008110:	18b6      	adds	r6, r6, r2
                    uint8_t linkAdrNbBytesParsed = 0;
 8008112:	aa09      	add	r2, sp, #36	; 0x24
 8008114:	7013      	strb	r3, [r2, #0]
                    uint8_t linkAdrNbRep = 0;
 8008116:	7033      	strb	r3, [r6, #0]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008118:	1e6b      	subs	r3, r5, #1
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	930b      	str	r3, [sp, #44]	; 0x2c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800811e:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008120:	a90b      	add	r1, sp, #44	; 0x2c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008122:	3301      	adds	r3, #1
 8008124:	1b5b      	subs	r3, r3, r5
 8008126:	710b      	strb	r3, [r1, #4]
                    linkAdrReq.AdrEnabled = AdrCtrlOn;
 8008128:	4bcb      	ldr	r3, [pc, #812]	; (8008458 <ProcessMacCommands+0x3a4>)
                    linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800812a:	4ccc      	ldr	r4, [pc, #816]	; (800845c <ProcessMacCommands+0x3a8>)
                    linkAdrReq.AdrEnabled = AdrCtrlOn;
 800812c:	3370      	adds	r3, #112	; 0x70
 800812e:	781b      	ldrb	r3, [r3, #0]
                    status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 8008130:	a806      	add	r0, sp, #24
                    linkAdrReq.AdrEnabled = AdrCtrlOn;
 8008132:	718b      	strb	r3, [r1, #6]
                    linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008134:	0023      	movs	r3, r4
 8008136:	332c      	adds	r3, #44	; 0x2c
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	714b      	strb	r3, [r1, #5]
                    linkAdrReq.CurrentDatarate = LoRaMacParams.ChannelsDatarate;
 800813c:	7863      	ldrb	r3, [r4, #1]
 800813e:	71cb      	strb	r3, [r1, #7]
                    linkAdrReq.CurrentTxPower = LoRaMacParams.ChannelsTxPower;
 8008140:	7823      	ldrb	r3, [r4, #0]
 8008142:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.CurrentNbRep = LoRaMacParams.ChannelsNbRep;
 8008144:	4bc6      	ldr	r3, [pc, #792]	; (8008460 <ProcessMacCommands+0x3ac>)
 8008146:	7fdb      	ldrb	r3, [r3, #31]
 8008148:	724b      	strb	r3, [r1, #9]
                    status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 800814a:	4bc6      	ldr	r3, [pc, #792]	; (8008464 <ProcessMacCommands+0x3b0>)
 800814c:	3304      	adds	r3, #4
 800814e:	7fdb      	ldrb	r3, [r3, #31]
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	469c      	mov	ip, r3
 8008154:	230a      	movs	r3, #10
 8008156:	aa06      	add	r2, sp, #24
 8008158:	189b      	adds	r3, r3, r2
 800815a:	2209      	movs	r2, #9
 800815c:	9600      	str	r6, [sp, #0]
 800815e:	1812      	adds	r2, r2, r0
 8008160:	4660      	mov	r0, ip
 8008162:	f001 ff28 	bl	8009fb6 <RegionLinkAdrReq>
                    if( ( status & 0x07 ) == 0x07 )
 8008166:	43c3      	mvns	r3, r0
                    status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 8008168:	9004      	str	r0, [sp, #16]
                    if( ( status & 0x07 ) == 0x07 )
 800816a:	075b      	lsls	r3, r3, #29
 800816c:	d108      	bne.n	8008180 <ProcessMacCommands+0xcc>
                        LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 800816e:	ab06      	add	r3, sp, #24
 8008170:	7a5b      	ldrb	r3, [r3, #9]
                        LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 8008172:	4abb      	ldr	r2, [pc, #748]	; (8008460 <ProcessMacCommands+0x3ac>)
                        LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 8008174:	7063      	strb	r3, [r4, #1]
                        LoRaMacParams.ChannelsTxPower = linkAdrTxPower;
 8008176:	ab06      	add	r3, sp, #24
 8008178:	7a9b      	ldrb	r3, [r3, #10]
 800817a:	7023      	strb	r3, [r4, #0]
                        LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 800817c:	7833      	ldrb	r3, [r6, #0]
 800817e:	77d3      	strb	r3, [r2, #31]
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008180:	ab09      	add	r3, sp, #36	; 0x24
 8008182:	781c      	ldrb	r4, [r3, #0]
 8008184:	2105      	movs	r1, #5
 8008186:	0020      	movs	r0, r4
 8008188:	f7f7 ffd2 	bl	8000130 <__udivsi3>
 800818c:	b2c3      	uxtb	r3, r0
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 800818e:	2080      	movs	r0, #128	; 0x80
 8008190:	49b4      	ldr	r1, [pc, #720]	; (8008464 <ProcessMacCommands+0x3b0>)
 8008192:	4240      	negs	r0, r0
 8008194:	7dca      	ldrb	r2, [r1, #23]
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008196:	9305      	str	r3, [sp, #20]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008198:	1a82      	subs	r2, r0, r2
 800819a:	7d8b      	ldrb	r3, [r1, #22]
 800819c:	7e88      	ldrb	r0, [r1, #26]
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 800819e:	2100      	movs	r1, #0
 80081a0:	b2d2      	uxtb	r2, r2
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80081a2:	4eb1      	ldr	r6, [pc, #708]	; (8008468 <ProcessMacCommands+0x3b4>)
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 80081a4:	3a01      	subs	r2, #1
 80081a6:	9206      	str	r2, [sp, #24]
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80081a8:	46b4      	mov	ip, r6
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 80081aa:	000a      	movs	r2, r1
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80081ac:	9e05      	ldr	r6, [sp, #20]
 80081ae:	4296      	cmp	r6, r2
 80081b0:	d108      	bne.n	80081c4 <ProcessMacCommands+0x110>
 80081b2:	2900      	cmp	r1, #0
 80081b4:	d002      	beq.n	80081bc <ProcessMacCommands+0x108>
 80081b6:	4aab      	ldr	r2, [pc, #684]	; (8008464 <ProcessMacCommands+0x3b0>)
 80081b8:	7593      	strb	r3, [r2, #22]
 80081ba:	7690      	strb	r0, [r2, #26]
                    macIndex += linkAdrNbBytesParsed - 1;
 80081bc:	3c01      	subs	r4, #1
 80081be:	192c      	adds	r4, r5, r4
 80081c0:	b2e4      	uxtb	r4, r4
                break;
 80081c2:	e77d      	b.n	80080c0 <ProcessMacCommands+0xc>
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 80081c4:	9e06      	ldr	r6, [sp, #24]
 80081c6:	42b3      	cmp	r3, r6
 80081c8:	da0a      	bge.n	80081e0 <ProcessMacCommands+0x12c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80081ca:	4660      	mov	r0, ip
 80081cc:	2603      	movs	r6, #3
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	54c6      	strb	r6, [r0, r3]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80081d2:	9e04      	ldr	r6, [sp, #16]
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80081d4:	b2c9      	uxtb	r1, r1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80081d6:	5446      	strb	r6, [r0, r1]
        MacCommandsInNextTx = true;
 80081d8:	2001      	movs	r0, #1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80081da:	0001      	movs	r1, r0
 80081dc:	3302      	adds	r3, #2
 80081de:	b2db      	uxtb	r3, r3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80081e0:	3201      	adds	r2, #1
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	e7e2      	b.n	80081ac <ProcessMacCommands+0xf8>
                AggregatedDCycle = 1 << MaxDCycle;
 80081e6:	2001      	movs	r0, #1
 80081e8:	0001      	movs	r1, r0
                MaxDCycle = payload[macIndex++];
 80081ea:	5d7a      	ldrb	r2, [r7, r5]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80081ec:	2580      	movs	r5, #128	; 0x80
                AggregatedDCycle = 1 << MaxDCycle;
 80081ee:	4091      	lsls	r1, r2
                MaxDCycle = payload[macIndex++];
 80081f0:	4b9c      	ldr	r3, [pc, #624]	; (8008464 <ProcessMacCommands+0x3b0>)
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80081f2:	426d      	negs	r5, r5
                MaxDCycle = payload[macIndex++];
 80081f4:	749a      	strb	r2, [r3, #18]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80081f6:	7dda      	ldrb	r2, [r3, #23]
                AggregatedDCycle = 1 << MaxDCycle;
 80081f8:	8299      	strh	r1, [r3, #20]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80081fa:	1aaa      	subs	r2, r5, r2
            if( MacCommandsBufferIndex < bufLen )
 80081fc:	7d99      	ldrb	r1, [r3, #22]
                MaxDCycle = payload[macIndex++];
 80081fe:	3402      	adds	r4, #2
            if( MacCommandsBufferIndex < bufLen )
 8008200:	b2d2      	uxtb	r2, r2
                MaxDCycle = payload[macIndex++];
 8008202:	b2e4      	uxtb	r4, r4
            if( MacCommandsBufferIndex < bufLen )
 8008204:	428a      	cmp	r2, r1
 8008206:	d800      	bhi.n	800820a <ProcessMacCommands+0x156>
 8008208:	e75a      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800820a:	180a      	adds	r2, r1, r0
 800820c:	759a      	strb	r2, [r3, #22]
 800820e:	4a96      	ldr	r2, [pc, #600]	; (8008468 <ProcessMacCommands+0x3b4>)
 8008210:	3584      	adds	r5, #132	; 0x84
 8008212:	5455      	strb	r5, [r2, r1]
        MacCommandsInNextTx = true;
 8008214:	7698      	strb	r0, [r3, #26]
 8008216:	e753      	b.n	80080c0 <ProcessMacCommands+0xc>
                    rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008218:	2607      	movs	r6, #7
 800821a:	5d7b      	ldrb	r3, [r7, r5]
 800821c:	ad0b      	add	r5, sp, #44	; 0x2c
 800821e:	091a      	lsrs	r2, r3, #4
 8008220:	4032      	ands	r2, r6
 8008222:	706a      	strb	r2, [r5, #1]
                    rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008224:	220f      	movs	r2, #15
 8008226:	4013      	ands	r3, r2
 8008228:	702b      	strb	r3, [r5, #0]
                    macIndex++;
 800822a:	1ca3      	adds	r3, r4, #2
                    rxParamSetupReq.Frequency =  ( uint32_t )payload[macIndex++];
 800822c:	b2db      	uxtb	r3, r3
 800822e:	5cf9      	ldrb	r1, [r7, r3]
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008230:	1d20      	adds	r0, r4, #4
                    rxParamSetupReq.Frequency =  ( uint32_t )payload[macIndex++];
 8008232:	1ce3      	adds	r3, r4, #3
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008234:	b2c0      	uxtb	r0, r0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	5cfa      	ldrb	r2, [r7, r3]
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 800823a:	5c3b      	ldrb	r3, [r7, r0]
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 800823c:	0212      	lsls	r2, r2, #8
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	4313      	orrs	r3, r2
                    rxParamSetupReq.Frequency *= 100;
 8008242:	2264      	movs	r2, #100	; 0x64
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008244:	430b      	orrs	r3, r1
                    rxParamSetupReq.Frequency *= 100;
 8008246:	4353      	muls	r3, r2
 8008248:	930c      	str	r3, [sp, #48]	; 0x30
                    status = RegionRxParamSetupReq( LoRaMacRegion, &rxParamSetupReq );
 800824a:	4b86      	ldr	r3, [pc, #536]	; (8008464 <ProcessMacCommands+0x3b0>)
 800824c:	0029      	movs	r1, r5
 800824e:	3304      	adds	r3, #4
 8008250:	7fd8      	ldrb	r0, [r3, #31]
 8008252:	f001 febf 	bl	8009fd4 <RegionRxParamSetupReq>
                    rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008256:	3405      	adds	r4, #5
 8008258:	b2e4      	uxtb	r4, r4
                    if( ( status & 0x07 ) == 0x07 )
 800825a:	4006      	ands	r6, r0
 800825c:	2e07      	cmp	r6, #7
 800825e:	d109      	bne.n	8008274 <ProcessMacCommands+0x1c0>
                        LoRaMacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008260:	4b7e      	ldr	r3, [pc, #504]	; (800845c <ProcessMacCommands+0x3a8>)
 8008262:	7829      	ldrb	r1, [r5, #0]
 8008264:	001a      	movs	r2, r3
 8008266:	3228      	adds	r2, #40	; 0x28
 8008268:	7011      	strb	r1, [r2, #0]
                        LoRaMacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800826a:	686a      	ldr	r2, [r5, #4]
 800826c:	625a      	str	r2, [r3, #36]	; 0x24
                        LoRaMacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800826e:	786a      	ldrb	r2, [r5, #1]
 8008270:	3302      	adds	r3, #2
 8008272:	77da      	strb	r2, [r3, #31]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008274:	2580      	movs	r5, #128	; 0x80
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8008276:	4a7b      	ldr	r2, [pc, #492]	; (8008464 <ProcessMacCommands+0x3b0>)
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008278:	426d      	negs	r5, r5
 800827a:	7dd1      	ldrb	r1, [r2, #23]
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 800827c:	7d93      	ldrb	r3, [r2, #22]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 800827e:	1a69      	subs	r1, r5, r1
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8008280:	b2c9      	uxtb	r1, r1
 8008282:	3901      	subs	r1, #1
 8008284:	428b      	cmp	r3, r1
 8008286:	db00      	blt.n	800828a <ProcessMacCommands+0x1d6>
 8008288:	e71a      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800828a:	4977      	ldr	r1, [pc, #476]	; (8008468 <ProcessMacCommands+0x3b4>)
 800828c:	3585      	adds	r5, #133	; 0x85
 800828e:	54cd      	strb	r5, [r1, r3]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8008290:	1c9d      	adds	r5, r3, #2
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008292:	3301      	adds	r3, #1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8008294:	7595      	strb	r5, [r2, #22]
 8008296:	b2db      	uxtb	r3, r3
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008298:	5458      	strb	r0, [r3, r1]
        MacCommandsInNextTx = true;
 800829a:	2301      	movs	r3, #1
 800829c:	7693      	strb	r3, [r2, #26]
 800829e:	e70f      	b.n	80080c0 <ProcessMacCommands+0xc>
                    if( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) )
 80082a0:	4b6d      	ldr	r3, [pc, #436]	; (8008458 <ProcessMacCommands+0x3a4>)
                    uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80082a2:	20ff      	movs	r0, #255	; 0xff
                    if( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) )
 80082a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <ProcessMacCommands+0x1fe>
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d000      	beq.n	80082b2 <ProcessMacCommands+0x1fe>
                        batteryLevel = LoRaMacCallbacks->GetBatteryLevel( );
 80082b0:	4798      	blx	r3
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80082b2:	2480      	movs	r4, #128	; 0x80
            if( MacCommandsBufferIndex < ( bufLen - 2 ) )
 80082b4:	496b      	ldr	r1, [pc, #428]	; (8008464 <ProcessMacCommands+0x3b0>)
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80082b6:	4264      	negs	r4, r4
 80082b8:	7dca      	ldrb	r2, [r1, #23]
            if( MacCommandsBufferIndex < ( bufLen - 2 ) )
 80082ba:	7d8b      	ldrb	r3, [r1, #22]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80082bc:	1aa2      	subs	r2, r4, r2
            if( MacCommandsBufferIndex < ( bufLen - 2 ) )
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	3a02      	subs	r2, #2
        switch( payload[macIndex++] )
 80082c2:	002c      	movs	r4, r5
            if( MacCommandsBufferIndex < ( bufLen - 2 ) )
 80082c4:	4293      	cmp	r3, r2
 80082c6:	db00      	blt.n	80082ca <ProcessMacCommands+0x216>
 80082c8:	e6fa      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80082ca:	2506      	movs	r5, #6
 80082cc:	4a66      	ldr	r2, [pc, #408]	; (8008468 <ProcessMacCommands+0x3b4>)
 80082ce:	54d5      	strb	r5, [r2, r3]
 80082d0:	1c5d      	adds	r5, r3, #1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80082d2:	b2ed      	uxtb	r5, r5
 80082d4:	5550      	strb	r0, [r2, r5]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 80082d6:	1cd8      	adds	r0, r3, #3
 80082d8:	7588      	strb	r0, [r1, #22]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80082da:	3302      	adds	r3, #2
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 80082dc:	9807      	ldr	r0, [sp, #28]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	54d0      	strb	r0, [r2, r3]
        MacCommandsInNextTx = true;
 80082e2:	2301      	movs	r3, #1
 80082e4:	768b      	strb	r3, [r1, #26]
 80082e6:	e6eb      	b.n	80080c0 <ProcessMacCommands+0xc>
                    newChannelReq.ChannelId = payload[macIndex++];
 80082e8:	5d7b      	ldrb	r3, [r7, r5]
 80082ea:	a909      	add	r1, sp, #36	; 0x24
 80082ec:	710b      	strb	r3, [r1, #4]
                    chParam.Frequency = ( uint32_t )payload[macIndex++];
 80082ee:	1ce3      	adds	r3, r4, #3
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	5cfd      	ldrb	r5, [r7, r3]
 80082f4:	1d23      	adds	r3, r4, #4
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	5cfb      	ldrb	r3, [r7, r3]
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 80082fa:	022d      	lsls	r5, r5, #8
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 80082fc:	041b      	lsls	r3, r3, #16
 80082fe:	432b      	orrs	r3, r5
                    newChannelReq.ChannelId = payload[macIndex++];
 8008300:	1ca5      	adds	r5, r4, #2
                    chParam.Frequency = ( uint32_t )payload[macIndex++];
 8008302:	b2ed      	uxtb	r5, r5
 8008304:	5d7d      	ldrb	r5, [r7, r5]
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008306:	1d60      	adds	r0, r4, #5
 8008308:	432b      	orrs	r3, r5
                    chParam.Frequency *= 100;
 800830a:	2564      	movs	r5, #100	; 0x64
 800830c:	436b      	muls	r3, r5
 800830e:	930b      	str	r3, [sp, #44]	; 0x2c
                    chParam.Rx1Frequency = 0;
 8008310:	2300      	movs	r3, #0
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008312:	b2c0      	uxtb	r0, r0
                    status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 8008314:	4d53      	ldr	r5, [pc, #332]	; (8008464 <ProcessMacCommands+0x3b0>)
                    chParam.Rx1Frequency = 0;
 8008316:	930c      	str	r3, [sp, #48]	; 0x30
                    chParam.DrRange.Value = payload[macIndex++];
 8008318:	5c3b      	ldrb	r3, [r7, r0]
                    newChannelReq.NewChannel = &chParam;
 800831a:	aa0b      	add	r2, sp, #44	; 0x2c
                    chParam.DrRange.Value = payload[macIndex++];
 800831c:	7213      	strb	r3, [r2, #8]
                    status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 800831e:	1d2b      	adds	r3, r5, #4
 8008320:	7fd8      	ldrb	r0, [r3, #31]
                    newChannelReq.NewChannel = &chParam;
 8008322:	9209      	str	r2, [sp, #36]	; 0x24
                    status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 8008324:	f001 fe5f 	bl	8009fe6 <RegionNewChannelReq>
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008328:	2180      	movs	r1, #128	; 0x80
 800832a:	7dea      	ldrb	r2, [r5, #23]
 800832c:	4249      	negs	r1, r1
 800832e:	1a8a      	subs	r2, r1, r2
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	7dab      	ldrb	r3, [r5, #22]
                    chParam.DrRange.Value = payload[macIndex++];
 8008334:	3406      	adds	r4, #6
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8008336:	3a01      	subs	r2, #1
                    chParam.DrRange.Value = payload[macIndex++];
 8008338:	b2e4      	uxtb	r4, r4
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 800833a:	4293      	cmp	r3, r2
 800833c:	db00      	blt.n	8008340 <ProcessMacCommands+0x28c>
 800833e:	e6bf      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008340:	4a49      	ldr	r2, [pc, #292]	; (8008468 <ProcessMacCommands+0x3b4>)
 8008342:	3187      	adds	r1, #135	; 0x87
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008344:	54d1      	strb	r1, [r2, r3]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8008346:	1c99      	adds	r1, r3, #2
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008348:	3301      	adds	r3, #1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800834a:	b2db      	uxtb	r3, r3
 800834c:	54d0      	strb	r0, [r2, r3]
        MacCommandsInNextTx = true;
 800834e:	2301      	movs	r3, #1
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8008350:	75a9      	strb	r1, [r5, #22]
        MacCommandsInNextTx = true;
 8008352:	76ab      	strb	r3, [r5, #26]
                break;
 8008354:	e6b4      	b.n	80080c0 <ProcessMacCommands+0xc>
                    uint8_t delay = payload[macIndex++] & 0x0F;
 8008356:	220f      	movs	r2, #15
 8008358:	5d7b      	ldrb	r3, [r7, r5]
 800835a:	3402      	adds	r4, #2
 800835c:	b2e4      	uxtb	r4, r4
 800835e:	401a      	ands	r2, r3
                    if( delay == 0 )
 8008360:	d100      	bne.n	8008364 <ProcessMacCommands+0x2b0>
                        delay++;
 8008362:	3201      	adds	r2, #1
                    LoRaMacParams.ReceiveDelay1 = delay * 1000;
 8008364:	23fa      	movs	r3, #250	; 0xfa
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8008366:	21fa      	movs	r1, #250	; 0xfa
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008368:	2080      	movs	r0, #128	; 0x80
                    LoRaMacParams.ReceiveDelay1 = delay * 1000;
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4353      	muls	r3, r2
 800836e:	4a3b      	ldr	r2, [pc, #236]	; (800845c <ProcessMacCommands+0x3a8>)
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8008370:	0089      	lsls	r1, r1, #2
                    LoRaMacParams.ReceiveDelay1 = delay * 1000;
 8008372:	6113      	str	r3, [r2, #16]
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8008374:	185b      	adds	r3, r3, r1
 8008376:	6153      	str	r3, [r2, #20]
            if( MacCommandsBufferIndex < bufLen )
 8008378:	4a3a      	ldr	r2, [pc, #232]	; (8008464 <ProcessMacCommands+0x3b0>)
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 800837a:	4240      	negs	r0, r0
 800837c:	7dd3      	ldrb	r3, [r2, #23]
            if( MacCommandsBufferIndex < bufLen )
 800837e:	7d91      	ldrb	r1, [r2, #22]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8008380:	1ac3      	subs	r3, r0, r3
            if( MacCommandsBufferIndex < bufLen )
 8008382:	b2db      	uxtb	r3, r3
 8008384:	428b      	cmp	r3, r1
 8008386:	d800      	bhi.n	800838a <ProcessMacCommands+0x2d6>
 8008388:	e69a      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800838a:	1c4b      	adds	r3, r1, #1
 800838c:	7593      	strb	r3, [r2, #22]
 800838e:	3088      	adds	r0, #136	; 0x88
 8008390:	4b35      	ldr	r3, [pc, #212]	; (8008468 <ProcessMacCommands+0x3b4>)
 8008392:	e781      	b.n	8008298 <ProcessMacCommands+0x1e4>
                    txParamSetupReq.UplinkDwellTime = 0;
 8008394:	2200      	movs	r2, #0
                    uint8_t eirpDwellTime = payload[macIndex++];
 8008396:	5d7b      	ldrb	r3, [r7, r5]
                    txParamSetupReq.UplinkDwellTime = 0;
 8008398:	ad0b      	add	r5, sp, #44	; 0x2c
                    uint8_t eirpDwellTime = payload[macIndex++];
 800839a:	3402      	adds	r4, #2
                    txParamSetupReq.UplinkDwellTime = 0;
 800839c:	702a      	strb	r2, [r5, #0]
                    if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800839e:	3220      	adds	r2, #32
                    uint8_t eirpDwellTime = payload[macIndex++];
 80083a0:	b2e4      	uxtb	r4, r4
                    if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80083a2:	401a      	ands	r2, r3
 80083a4:	d130      	bne.n	8008408 <ProcessMacCommands+0x354>
                        txParamSetupReq.DownlinkDwellTime = 1;
 80083a6:	706a      	strb	r2, [r5, #1]
                    if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80083a8:	06da      	lsls	r2, r3, #27
 80083aa:	d501      	bpl.n	80083b0 <ProcessMacCommands+0x2fc>
                        txParamSetupReq.UplinkDwellTime = 1;
 80083ac:	2201      	movs	r2, #1
 80083ae:	702a      	strb	r2, [r5, #0]
                    txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80083b0:	220f      	movs	r2, #15
                    if( RegionTxParamSetupReq( LoRaMacRegion, &txParamSetupReq ) != -1 )
 80083b2:	4e2c      	ldr	r6, [pc, #176]	; (8008464 <ProcessMacCommands+0x3b0>)
                    txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80083b4:	4013      	ands	r3, r2
 80083b6:	70ab      	strb	r3, [r5, #2]
                    if( RegionTxParamSetupReq( LoRaMacRegion, &txParamSetupReq ) != -1 )
 80083b8:	1d33      	adds	r3, r6, #4
 80083ba:	7fd8      	ldrb	r0, [r3, #31]
 80083bc:	0029      	movs	r1, r5
 80083be:	f001 fe1b 	bl	8009ff8 <RegionTxParamSetupReq>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d100      	bne.n	80083c8 <ProcessMacCommands+0x314>
 80083c6:	e67b      	b.n	80080c0 <ProcessMacCommands+0xc>
                        LoRaMacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80083c8:	4b24      	ldr	r3, [pc, #144]	; (800845c <ProcessMacCommands+0x3a8>)
 80083ca:	782a      	ldrb	r2, [r5, #0]
 80083cc:	332c      	adds	r3, #44	; 0x2c
 80083ce:	701a      	strb	r2, [r3, #0]
                        LoRaMacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <ProcessMacCommands+0x3a8>)
 80083d2:	786a      	ldrb	r2, [r5, #1]
 80083d4:	332d      	adds	r3, #45	; 0x2d
 80083d6:	701a      	strb	r2, [r3, #0]
                        LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80083d8:	78ab      	ldrb	r3, [r5, #2]
 80083da:	4a24      	ldr	r2, [pc, #144]	; (800846c <ProcessMacCommands+0x3b8>)
 80083dc:	5cd0      	ldrb	r0, [r2, r3]
 80083de:	f7f9 f85f 	bl	80014a0 <__aeabi_ui2f>
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80083e2:	2180      	movs	r1, #128	; 0x80
                        LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <ProcessMacCommands+0x3a8>)
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80083e6:	4249      	negs	r1, r1
                        LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80083e8:	6318      	str	r0, [r3, #48]	; 0x30
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80083ea:	7df3      	ldrb	r3, [r6, #23]
            if( MacCommandsBufferIndex < bufLen )
 80083ec:	7db2      	ldrb	r2, [r6, #22]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80083ee:	1acb      	subs	r3, r1, r3
            if( MacCommandsBufferIndex < bufLen )
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d800      	bhi.n	80083f8 <ProcessMacCommands+0x344>
 80083f6:	e663      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80083f8:	1c53      	adds	r3, r2, #1
 80083fa:	75b3      	strb	r3, [r6, #22]
 80083fc:	4b1a      	ldr	r3, [pc, #104]	; (8008468 <ProcessMacCommands+0x3b4>)
 80083fe:	3189      	adds	r1, #137	; 0x89
 8008400:	5499      	strb	r1, [r3, r2]
        MacCommandsInNextTx = true;
 8008402:	2301      	movs	r3, #1
 8008404:	76b3      	strb	r3, [r6, #26]
                break;
 8008406:	e65b      	b.n	80080c0 <ProcessMacCommands+0xc>
                        txParamSetupReq.DownlinkDwellTime = 1;
 8008408:	2201      	movs	r2, #1
 800840a:	e7cc      	b.n	80083a6 <ProcessMacCommands+0x2f2>
                    dlChannelReq.ChannelId = payload[macIndex++];
 800840c:	5d7b      	ldrb	r3, [r7, r5]
 800840e:	a90b      	add	r1, sp, #44	; 0x2c
 8008410:	700b      	strb	r3, [r1, #0]
 8008412:	1ca3      	adds	r3, r4, #2
                    dlChannelReq.Rx1Frequency = ( uint32_t )payload[macIndex++];
 8008414:	b2db      	uxtb	r3, r3
 8008416:	5cfa      	ldrb	r2, [r7, r3]
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008418:	1d25      	adds	r5, r4, #4
                    dlChannelReq.Rx1Frequency = ( uint32_t )payload[macIndex++];
 800841a:	1ce3      	adds	r3, r4, #3
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 800841c:	b2ed      	uxtb	r5, r5
 800841e:	b2db      	uxtb	r3, r3
 8008420:	5cf8      	ldrb	r0, [r7, r3]
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008422:	5d7b      	ldrb	r3, [r7, r5]
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008424:	0200      	lsls	r0, r0, #8
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	4303      	orrs	r3, r0
 800842a:	4313      	orrs	r3, r2
                    dlChannelReq.Rx1Frequency *= 100;
 800842c:	2264      	movs	r2, #100	; 0x64
 800842e:	4353      	muls	r3, r2
                    status = RegionDlChannelReq( LoRaMacRegion, &dlChannelReq );
 8008430:	4d0c      	ldr	r5, [pc, #48]	; (8008464 <ProcessMacCommands+0x3b0>)
                    dlChannelReq.Rx1Frequency *= 100;
 8008432:	604b      	str	r3, [r1, #4]
                    status = RegionDlChannelReq( LoRaMacRegion, &dlChannelReq );
 8008434:	1d2b      	adds	r3, r5, #4
 8008436:	7fd8      	ldrb	r0, [r3, #31]
 8008438:	f001 fde7 	bl	800a00a <RegionDlChannelReq>
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 800843c:	2180      	movs	r1, #128	; 0x80
 800843e:	7dea      	ldrb	r2, [r5, #23]
 8008440:	4249      	negs	r1, r1
 8008442:	1a8a      	subs	r2, r1, r2
            if( MacCommandsBufferIndex < bufLen )
 8008444:	7dab      	ldrb	r3, [r5, #22]
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008446:	3405      	adds	r4, #5
            if( MacCommandsBufferIndex < bufLen )
 8008448:	b2d2      	uxtb	r2, r2
                    dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 800844a:	b2e4      	uxtb	r4, r4
            if( MacCommandsBufferIndex < bufLen )
 800844c:	429a      	cmp	r2, r3
 800844e:	d800      	bhi.n	8008452 <ProcessMacCommands+0x39e>
 8008450:	e636      	b.n	80080c0 <ProcessMacCommands+0xc>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8008452:	4a05      	ldr	r2, [pc, #20]	; (8008468 <ProcessMacCommands+0x3b4>)
 8008454:	318a      	adds	r1, #138	; 0x8a
 8008456:	e775      	b.n	8008344 <ProcessMacCommands+0x290>
 8008458:	20000380 	.word	0x20000380
 800845c:	20000e64 	.word	0x20000e64
 8008460:	20000e65 	.word	0x20000e65
 8008464:	20000300 	.word	0x20000300
 8008468:	20000501 	.word	0x20000501
 800846c:	0800d35e 	.word	0x0800d35e

08008470 <OnRadioRxDone>:
{
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
    McpsConfirm.AckReceived = false;
 8008472:	4cc5      	ldr	r4, [pc, #788]	; (8008788 <OnRadioRxDone+0x318>)
    McpsIndication.RxSlot = RxSlot;
 8008474:	4dc5      	ldr	r5, [pc, #788]	; (800878c <OnRadioRxDone+0x31c>)
{
 8008476:	b095      	sub	sp, #84	; 0x54
    McpsIndication.Snr = snr;
 8008478:	b2db      	uxtb	r3, r3
 800847a:	9308      	str	r3, [sp, #32]
 800847c:	7423      	strb	r3, [r4, #16]
    McpsIndication.RxSlot = RxSlot;
 800847e:	002b      	movs	r3, r5
{
 8008480:	0007      	movs	r7, r0
    McpsConfirm.AckReceived = false;
 8008482:	0020      	movs	r0, r4
{
 8008484:	9104      	str	r1, [sp, #16]
    uint32_t mic = 0;
 8008486:	2100      	movs	r1, #0
    McpsIndication.RxSlot = RxSlot;
 8008488:	3368      	adds	r3, #104	; 0x68
 800848a:	781b      	ldrb	r3, [r3, #0]
    McpsConfirm.AckReceived = false;
 800848c:	3040      	adds	r0, #64	; 0x40
    McpsIndication.RxSlot = RxSlot;
 800848e:	7463      	strb	r3, [r4, #17]
    Radio.Sleep( );
 8008490:	4bbf      	ldr	r3, [pc, #764]	; (8008790 <OnRadioRxDone+0x320>)
    McpsConfirm.AckReceived = false;
 8008492:	7101      	strb	r1, [r0, #4]
    Radio.Sleep( );
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    uint32_t mic = 0;
 8008496:	9111      	str	r1, [sp, #68]	; 0x44
    McpsIndication.Rssi = rssi;
 8008498:	81e2      	strh	r2, [r4, #14]
    McpsIndication.Multicast = 0;
 800849a:	8061      	strh	r1, [r4, #2]
    McpsIndication.FramePending = 0;
 800849c:	7161      	strb	r1, [r4, #5]
    McpsIndication.Buffer = NULL;
 800849e:	60a1      	str	r1, [r4, #8]
    McpsIndication.BufferSize = 0;
 80084a0:	7321      	strb	r1, [r4, #12]
    McpsIndication.RxData = false;
 80084a2:	7361      	strb	r1, [r4, #13]
    McpsIndication.AckReceived = false;
 80084a4:	74a1      	strb	r1, [r4, #18]
    McpsIndication.DownLinkCounter = 0;
 80084a6:	6161      	str	r1, [r4, #20]
    McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80084a8:	7021      	strb	r1, [r4, #0]
    Radio.Sleep( );
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	4798      	blx	r3
    TimerStop( &RxWindowTimer2 );
 80084ae:	0020      	movs	r0, r4
 80084b0:	3018      	adds	r0, #24
 80084b2:	f002 fe23 	bl	800b0fc <TimerStop>
    macHdr.Value = payload[pktHeaderLen++];
 80084b6:	783b      	ldrb	r3, [r7, #0]
    switch( macHdr.Bits.MType )
 80084b8:	0958      	lsrs	r0, r3, #5
 80084ba:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 80084bc:	930a      	str	r3, [sp, #40]	; 0x28
    switch( macHdr.Bits.MType )
 80084be:	2806      	cmp	r0, #6
 80084c0:	d900      	bls.n	80084c4 <OnRadioRxDone+0x54>
 80084c2:	e231      	b.n	8008928 <OnRadioRxDone+0x4b8>
 80084c4:	f7f7 fe2a 	bl	800011c <__gnu_thumb1_case_uhi>
 80084c8:	02300007 	.word	0x02300007
 80084cc:	02300092 	.word	0x02300092
 80084d0:	02300092 	.word	0x02300092
 80084d4:	021c      	.short	0x021c
            if( IsLoRaMacNetworkJoined == true )
 80084d6:	782b      	ldrb	r3, [r5, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <OnRadioRxDone+0x72>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80084dc:	2301      	movs	r3, #1
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80084de:	7063      	strb	r3, [r4, #1]
 80084e0:	e10b      	b.n	80086fa <OnRadioRxDone+0x28a>
            LoRaMacJoinDecrypt( payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1 );
 80084e2:	9b04      	ldr	r3, [sp, #16]
 80084e4:	4eab      	ldr	r6, [pc, #684]	; (8008794 <OnRadioRxDone+0x324>)
 80084e6:	1e59      	subs	r1, r3, #1
 80084e8:	b289      	uxth	r1, r1
 80084ea:	1c78      	adds	r0, r7, #1
 80084ec:	4baa      	ldr	r3, [pc, #680]	; (8008798 <OnRadioRxDone+0x328>)
 80084ee:	69b2      	ldr	r2, [r6, #24]
 80084f0:	f001 fc8e 	bl	8009e10 <LoRaMacJoinDecrypt>
            LoRaMacRxPayload[0] = macHdr.Value;
 80084f4:	4da9      	ldr	r5, [pc, #676]	; (800879c <OnRadioRxDone+0x32c>)
 80084f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 80084f8:	69b2      	ldr	r2, [r6, #24]
            LoRaMacRxPayload[0] = macHdr.Value;
 80084fa:	702b      	strb	r3, [r5, #0]
            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 80084fc:	9b04      	ldr	r3, [sp, #16]
 80084fe:	0028      	movs	r0, r5
 8008500:	1f19      	subs	r1, r3, #4
 8008502:	b289      	uxth	r1, r1
 8008504:	ab11      	add	r3, sp, #68	; 0x44
 8008506:	f001 fc5b 	bl	8009dc0 <LoRaMacJoinComputeMic>
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	18ea      	adds	r2, r5, r3
 800850e:	1ed3      	subs	r3, r2, #3
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8008510:	1e91      	subs	r1, r2, #2
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8008512:	781b      	ldrb	r3, [r3, #0]
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8008514:	7809      	ldrb	r1, [r1, #0]
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8008516:	021b      	lsls	r3, r3, #8
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8008518:	0409      	lsls	r1, r1, #16
 800851a:	430b      	orrs	r3, r1
            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 800851c:	1f11      	subs	r1, r2, #4
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800851e:	3a01      	subs	r2, #1
            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 8008520:	7809      	ldrb	r1, [r1, #0]
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8008522:	7812      	ldrb	r2, [r2, #0]
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8008524:	430b      	orrs	r3, r1
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8008526:	0612      	lsls	r2, r2, #24
 8008528:	4313      	orrs	r3, r2
            if( micRx == mic )
 800852a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800852c:	429a      	cmp	r2, r3
 800852e:	d159      	bne.n	80085e4 <OnRadioRxDone+0x174>
                LoRaMacJoinComputeSKeys( LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey );
 8008530:	0021      	movs	r1, r4
 8008532:	0033      	movs	r3, r6
 8008534:	3178      	adds	r1, #120	; 0x78
 8008536:	8bb2      	ldrh	r2, [r6, #28]
 8008538:	9100      	str	r1, [sp, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	4996      	ldr	r1, [pc, #600]	; (8008798 <OnRadioRxDone+0x328>)
 800853e:	69b0      	ldr	r0, [r6, #24]
 8008540:	f001 fc88 	bl	8009e54 <LoRaMacJoinComputeSKeys>
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 8008544:	796b      	ldrb	r3, [r5, #5]
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 8008546:	79aa      	ldrb	r2, [r5, #6]
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 8008548:	021b      	lsls	r3, r3, #8
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 800854a:	0412      	lsls	r2, r2, #16
 800854c:	4313      	orrs	r3, r2
                LoRaMacNetID = ( uint32_t )LoRaMacRxPayload[4];
 800854e:	792a      	ldrb	r2, [r5, #4]
                LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 8008550:	4f93      	ldr	r7, [pc, #588]	; (80087a0 <OnRadioRxDone+0x330>)
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 8008552:	4313      	orrs	r3, r2
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 8008554:	7a2a      	ldrb	r2, [r5, #8]
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 8008556:	6233      	str	r3, [r6, #32]
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 8008558:	79eb      	ldrb	r3, [r5, #7]
 800855a:	0212      	lsls	r2, r2, #8
 800855c:	431a      	orrs	r2, r3
 800855e:	7a6b      	ldrb	r3, [r5, #9]
                LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 8008560:	1cb9      	adds	r1, r7, #2
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	431a      	orrs	r2, r3
 8008566:	7aab      	ldrb	r3, [r5, #10]
 8008568:	061b      	lsls	r3, r3, #24
 800856a:	4313      	orrs	r3, r2
 800856c:	6273      	str	r3, [r6, #36]	; 0x24
                LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 800856e:	7aea      	ldrb	r2, [r5, #11]
 8008570:	0653      	lsls	r3, r2, #25
 8008572:	0f5b      	lsrs	r3, r3, #29
 8008574:	77cb      	strb	r3, [r1, #31]
                LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 8008576:	210f      	movs	r1, #15
 8008578:	003b      	movs	r3, r7
 800857a:	400a      	ands	r2, r1
 800857c:	3328      	adds	r3, #40	; 0x28
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	7b2b      	ldrb	r3, [r5, #12]
 8008582:	400b      	ands	r3, r1
                if( LoRaMacParams.ReceiveDelay1 == 0 )
 8008584:	d02c      	beq.n	80085e0 <OnRadioRxDone+0x170>
                    LoRaMacParams.ReceiveDelay1 = 1;
 8008586:	613b      	str	r3, [r7, #16]
                LoRaMacParams.ReceiveDelay1 *= 1000;
 8008588:	23fa      	movs	r3, #250	; 0xfa
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4353      	muls	r3, r2
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8008590:	22fa      	movs	r2, #250	; 0xfa
 8008592:	0092      	lsls	r2, r2, #2
                LoRaMacParams.ReceiveDelay1 *= 1000;
 8008594:	613b      	str	r3, [r7, #16]
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8008596:	189b      	adds	r3, r3, r2
                RegionApplyCFList( LoRaMacRegion, &applyCFList );
 8008598:	4d7c      	ldr	r5, [pc, #496]	; (800878c <OnRadioRxDone+0x31c>)
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 800859a:	617b      	str	r3, [r7, #20]
                applyCFList.Payload = &LoRaMacRxPayload[13];
 800859c:	4b81      	ldr	r3, [pc, #516]	; (80087a4 <OnRadioRxDone+0x334>)
                applyCFList.Size = size - 17;
 800859e:	9e04      	ldr	r6, [sp, #16]
                applyCFList.Payload = &LoRaMacRxPayload[13];
 80085a0:	9312      	str	r3, [sp, #72]	; 0x48
                RegionApplyCFList( LoRaMacRegion, &applyCFList );
 80085a2:	1d2b      	adds	r3, r5, #4
                applyCFList.Payload = &LoRaMacRxPayload[13];
 80085a4:	a912      	add	r1, sp, #72	; 0x48
                RegionApplyCFList( LoRaMacRegion, &applyCFList );
 80085a6:	7fd8      	ldrb	r0, [r3, #31]
                applyCFList.Size = size - 17;
 80085a8:	3e11      	subs	r6, #17
 80085aa:	710e      	strb	r6, [r1, #4]
                RegionApplyCFList( LoRaMacRegion, &applyCFList );
 80085ac:	f001 fcc4 	bl	8009f38 <RegionApplyCFList>
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	3454      	adds	r4, #84	; 0x54
 80085b4:	7063      	strb	r3, [r4, #1]
                IsLoRaMacNetworkJoined = true;
 80085b6:	3301      	adds	r3, #1
 80085b8:	702b      	strb	r3, [r5, #0]
                LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80085ba:	4b7b      	ldr	r3, [pc, #492]	; (80087a8 <OnRadioRxDone+0x338>)
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	707b      	strb	r3, [r7, #1]
    LoRaMacFlags.Bits.MacDone = 1;
 80085c0:	2310      	movs	r3, #16
 80085c2:	4a7a      	ldr	r2, [pc, #488]	; (80087ac <OnRadioRxDone+0x33c>)
    TimerSetValue( &MacStateCheckTimer, 1 );
 80085c4:	4c71      	ldr	r4, [pc, #452]	; (800878c <OnRadioRxDone+0x31c>)
    LoRaMacFlags.Bits.MacDone = 1;
 80085c6:	7811      	ldrb	r1, [r2, #0]
    TimerSetValue( &MacStateCheckTimer, 1 );
 80085c8:	3440      	adds	r4, #64	; 0x40
    LoRaMacFlags.Bits.MacDone = 1;
 80085ca:	430b      	orrs	r3, r1
    TimerSetValue( &MacStateCheckTimer, 1 );
 80085cc:	0020      	movs	r0, r4
 80085ce:	2101      	movs	r1, #1
    LoRaMacFlags.Bits.MacDone = 1;
 80085d0:	7013      	strb	r3, [r2, #0]
    TimerSetValue( &MacStateCheckTimer, 1 );
 80085d2:	f002 fdbf 	bl	800b154 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 80085d6:	0020      	movs	r0, r4
 80085d8:	f002 fd1e 	bl	800b018 <TimerStart>
}
 80085dc:	b015      	add	sp, #84	; 0x54
 80085de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    LoRaMacParams.ReceiveDelay1 = 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e7d0      	b.n	8008586 <OnRadioRxDone+0x116>
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80085e4:	2307      	movs	r3, #7
 80085e6:	3454      	adds	r4, #84	; 0x54
 80085e8:	7063      	strb	r3, [r4, #1]
 80085ea:	e7e9      	b.n	80085c0 <OnRadioRxDone+0x150>
                getPhy.UplinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80085ec:	4b6c      	ldr	r3, [pc, #432]	; (80087a0 <OnRadioRxDone+0x330>)
 80085ee:	a910      	add	r1, sp, #64	; 0x40
 80085f0:	332d      	adds	r3, #45	; 0x2d
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	708b      	strb	r3, [r1, #2]
                getPhy.Datarate = McpsIndication.RxDatarate;
 80085f6:	7923      	ldrb	r3, [r4, #4]
 80085f8:	704b      	strb	r3, [r1, #1]
                getPhy.Attribute = PHY_MAX_PAYLOAD;
 80085fa:	2309      	movs	r3, #9
 80085fc:	700b      	strb	r3, [r1, #0]
                if( RepeaterSupport == true )
 80085fe:	1ceb      	adds	r3, r5, #3
 8008600:	7fdb      	ldrb	r3, [r3, #31]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <OnRadioRxDone+0x19a>
                    getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008606:	230a      	movs	r3, #10
 8008608:	700b      	strb	r3, [r1, #0]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800860a:	1d2b      	adds	r3, r5, #4
 800860c:	7fd8      	ldrb	r0, [r3, #31]
 800860e:	f001 fc71 	bl	8009ef4 <RegionGetPhyParam>
                if( MAX( 0, ( int16_t )( ( int16_t )size - ( int16_t )LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value )
 8008612:	9a04      	ldr	r2, [sp, #16]
 8008614:	3a0d      	subs	r2, #13
 8008616:	1c13      	adds	r3, r2, #0
 8008618:	0412      	lsls	r2, r2, #16
 800861a:	d500      	bpl.n	800861e <OnRadioRxDone+0x1ae>
 800861c:	2300      	movs	r3, #0
 800861e:	b21b      	sxth	r3, r3
 8008620:	4283      	cmp	r3, r0
 8008622:	d900      	bls.n	8008626 <OnRadioRxDone+0x1b6>
 8008624:	e75a      	b.n	80084dc <OnRadioRxDone+0x6c>
                address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 8008626:	78bb      	ldrb	r3, [r7, #2]
 8008628:	7879      	ldrb	r1, [r7, #1]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	4319      	orrs	r1, r3
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	793a      	ldrb	r2, [r7, #4]
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	430b      	orrs	r3, r1
 8008636:	0612      	lsls	r2, r2, #24
 8008638:	431a      	orrs	r2, r3
                if( address != LoRaMacDevAddr )
 800863a:	4b56      	ldr	r3, [pc, #344]	; (8008794 <OnRadioRxDone+0x324>)
                address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 800863c:	9206      	str	r2, [sp, #24]
                if( address != LoRaMacDevAddr )
 800863e:	9906      	ldr	r1, [sp, #24]
 8008640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008642:	428a      	cmp	r2, r1
 8008644:	d05e      	beq.n	8008704 <OnRadioRxDone+0x294>
                    curMulticastParams = MulticastChannels;
 8008646:	69ee      	ldr	r6, [r5, #28]
                    while( curMulticastParams != NULL )
 8008648:	2e00      	cmp	r6, #0
 800864a:	d101      	bne.n	8008650 <OnRadioRxDone+0x1e0>
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800864c:	230b      	movs	r3, #11
 800864e:	e746      	b.n	80084de <OnRadioRxDone+0x6e>
                        if( address == curMulticastParams->Address )
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	9a06      	ldr	r2, [sp, #24]
 8008654:	4293      	cmp	r3, r2
 8008656:	d153      	bne.n	8008700 <OnRadioRxDone+0x290>
                            nwkSKey = curMulticastParams->NwkSKey;
 8008658:	1d33      	adds	r3, r6, #4
 800865a:	9309      	str	r3, [sp, #36]	; 0x24
                            appSKey = curMulticastParams->AppSKey;
 800865c:	3310      	adds	r3, #16
 800865e:	930f      	str	r3, [sp, #60]	; 0x3c
                            downLinkCounter = curMulticastParams->DownLinkCounter;
 8008660:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	2301      	movs	r3, #1
 8008666:	930b      	str	r3, [sp, #44]	; 0x2c
                fCtrl.Value = payload[pktHeaderLen++];
 8008668:	797b      	ldrb	r3, [r7, #5]
                appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 800866a:	071d      	lsls	r5, r3, #28
                fCtrl.Value = payload[pktHeaderLen++];
 800866c:	930d      	str	r3, [sp, #52]	; 0x34
                appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 800866e:	0f2b      	lsrs	r3, r5, #28
 8008670:	930e      	str	r3, [sp, #56]	; 0x38
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	1eda      	subs	r2, r3, #3
 8008678:	7815      	ldrb	r5, [r2, #0]
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 800867a:	1e9a      	subs	r2, r3, #2
 800867c:	7812      	ldrb	r2, [r2, #0]
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 800867e:	022d      	lsls	r5, r5, #8
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8008680:	0412      	lsls	r2, r2, #16
 8008682:	4315      	orrs	r5, r2
                micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 8008684:	1f1a      	subs	r2, r3, #4
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8008686:	3b01      	subs	r3, #1
                micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 8008688:	7812      	ldrb	r2, [r2, #0]
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800868a:	781b      	ldrb	r3, [r3, #0]
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 800868c:	4315      	orrs	r5, r2
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800868e:	061b      	lsls	r3, r3, #24
                sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 8008690:	79fa      	ldrb	r2, [r7, #7]
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8008692:	431d      	orrs	r5, r3
                sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 8008694:	79bb      	ldrb	r3, [r7, #6]
 8008696:	0212      	lsls	r2, r2, #8
 8008698:	4313      	orrs	r3, r2
                sequenceCounterDiff = ( sequenceCounter - sequenceCounterPrev );
 800869a:	9a07      	ldr	r2, [sp, #28]
 800869c:	1a9b      	subs	r3, r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	930c      	str	r3, [sp, #48]	; 0x30
                if( sequenceCounterDiff < ( 1 << 15 ) )
 80086a2:	466b      	mov	r3, sp
 80086a4:	2230      	movs	r2, #48	; 0x30
 80086a6:	5e9a      	ldrsh	r2, [r3, r2]
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	1f19      	subs	r1, r3, #4
 80086ac:	b289      	uxth	r1, r1
 80086ae:	ab11      	add	r3, sp, #68	; 0x44
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	db31      	blt.n	8008718 <OnRadioRxDone+0x2a8>
                    downLinkCounter += sequenceCounterDiff;
 80086b4:	980c      	ldr	r0, [sp, #48]	; 0x30
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 80086b6:	9302      	str	r3, [sp, #8]
                    downLinkCounter += sequenceCounterDiff;
 80086b8:	4684      	mov	ip, r0
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 80086ba:	2301      	movs	r3, #1
                    downLinkCounter += sequenceCounterDiff;
 80086bc:	9a07      	ldr	r2, [sp, #28]
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 80086be:	9300      	str	r3, [sp, #0]
                    downLinkCounter += sequenceCounterDiff;
 80086c0:	4462      	add	r2, ip
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 80086c2:	9201      	str	r2, [sp, #4]
 80086c4:	9b06      	ldr	r3, [sp, #24]
                    downLinkCounter += sequenceCounterDiff;
 80086c6:	0014      	movs	r4, r2
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 80086c8:	0038      	movs	r0, r7
 80086ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086cc:	f001 fab6 	bl	8009c3c <LoRaMacComputeMic>
                    if( micRx == mic )
 80086d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086d2:	1b5d      	subs	r5, r3, r5
 80086d4:	426b      	negs	r3, r5
 80086d6:	415d      	adcs	r5, r3
 80086d8:	b2eb      	uxtb	r3, r5
    bool isMicOk = false;
 80086da:	9305      	str	r3, [sp, #20]
                getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80086dc:	2311      	movs	r3, #17
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80086de:	4d2b      	ldr	r5, [pc, #172]	; (800878c <OnRadioRxDone+0x31c>)
                getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80086e0:	a910      	add	r1, sp, #64	; 0x40
 80086e2:	700b      	strb	r3, [r1, #0]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80086e4:	1d2b      	adds	r3, r5, #4
 80086e6:	7fd8      	ldrb	r0, [r3, #31]
 80086e8:	f001 fc04 	bl	8009ef4 <RegionGetPhyParam>
                if( sequenceCounterDiff >= phyParam.Value )
 80086ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ee:	4b26      	ldr	r3, [pc, #152]	; (8008788 <OnRadioRxDone+0x318>)
 80086f0:	4282      	cmp	r2, r0
 80086f2:	d327      	bcc.n	8008744 <OnRadioRxDone+0x2d4>
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80086f4:	220a      	movs	r2, #10
                    McpsIndication.DownLinkCounter = downLinkCounter;
 80086f6:	615c      	str	r4, [r3, #20]
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80086f8:	705a      	strb	r2, [r3, #1]
                        PrepareRxDoneAbort( );
 80086fa:	f7ff fb0d 	bl	8007d18 <PrepareRxDoneAbort>
                        return;
 80086fe:	e76d      	b.n	80085dc <OnRadioRxDone+0x16c>
                        curMulticastParams = curMulticastParams->Next;
 8008700:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8008702:	e7a1      	b.n	8008648 <OnRadioRxDone+0x1d8>
                    downLinkCounter = DownLinkCounter;
 8008704:	68aa      	ldr	r2, [r5, #8]
                    appSKey = LoRaMacAppSKey;
 8008706:	3478      	adds	r4, #120	; 0x78
                    downLinkCounter = DownLinkCounter;
 8008708:	9207      	str	r2, [sp, #28]
                    multicast = 0;
 800870a:	2200      	movs	r2, #0
                    nwkSKey = LoRaMacNwkSKey;
 800870c:	3308      	adds	r3, #8
                    multicast = 0;
 800870e:	920b      	str	r2, [sp, #44]	; 0x2c
                    appSKey = LoRaMacAppSKey;
 8008710:	940f      	str	r4, [sp, #60]	; 0x3c
                    nwkSKey = LoRaMacNwkSKey;
 8008712:	9309      	str	r3, [sp, #36]	; 0x24
    MulticastParams_t *curMulticastParams = NULL;
 8008714:	0016      	movs	r6, r2
 8008716:	e7a7      	b.n	8008668 <OnRadioRxDone+0x1f8>
                    uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 8008718:	2480      	movs	r4, #128	; 0x80
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	2301      	movs	r3, #1
                    uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 800871e:	9807      	ldr	r0, [sp, #28]
 8008720:	0264      	lsls	r4, r4, #9
 8008722:	1904      	adds	r4, r0, r4
 8008724:	18a4      	adds	r4, r4, r2
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	9401      	str	r4, [sp, #4]
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800872e:	0038      	movs	r0, r7
 8008730:	f001 fa84 	bl	8009c3c <LoRaMacComputeMic>
                        isMicOk = true;
 8008734:	2301      	movs	r3, #1
 8008736:	9305      	str	r3, [sp, #20]
                    if( micRx == mic )
 8008738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800873a:	42ab      	cmp	r3, r5
 800873c:	d0ce      	beq.n	80086dc <OnRadioRxDone+0x26c>
 800873e:	9c07      	ldr	r4, [sp, #28]
    bool isMicOk = false;
 8008740:	2300      	movs	r3, #0
 8008742:	e7ca      	b.n	80086da <OnRadioRxDone+0x26a>
                if( isMicOk == true )
 8008744:	9a05      	ldr	r2, [sp, #20]
 8008746:	2a00      	cmp	r2, #0
 8008748:	d100      	bne.n	800874c <OnRadioRxDone+0x2dc>
 800874a:	e0d7      	b.n	80088fc <OnRadioRxDone+0x48c>
                    McpsIndication.Multicast = multicast;
 800874c:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800874e:	2200      	movs	r2, #0
                    McpsIndication.Multicast = multicast;
 8008750:	7099      	strb	r1, [r3, #2]
                    McpsIndication.FramePending = fCtrl.Bits.FPending;
 8008752:	990d      	ldr	r1, [sp, #52]	; 0x34
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008754:	705a      	strb	r2, [r3, #1]
                    McpsIndication.FramePending = fCtrl.Bits.FPending;
 8008756:	06c9      	lsls	r1, r1, #27
 8008758:	0fc9      	lsrs	r1, r1, #31
 800875a:	7159      	strb	r1, [r3, #5]
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800875c:	0019      	movs	r1, r3
 800875e:	3140      	adds	r1, #64	; 0x40
 8008760:	704a      	strb	r2, [r1, #1]
                    if( multicast == 1 )
 8008762:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    McpsIndication.Buffer = NULL;
 8008764:	609a      	str	r2, [r3, #8]
                    McpsIndication.BufferSize = 0;
 8008766:	731a      	strb	r2, [r3, #12]
                    McpsIndication.DownLinkCounter = downLinkCounter;
 8008768:	615c      	str	r4, [r3, #20]
                    AdrAckCounter = 0;
 800876a:	60ea      	str	r2, [r5, #12]
                    MacCommandsBufferToRepeatIndex = 0;
 800876c:	75ea      	strb	r2, [r5, #23]
                    if( multicast == 1 )
 800876e:	2901      	cmp	r1, #1
 8008770:	d169      	bne.n	8008846 <OnRadioRxDone+0x3d6>
                        McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008772:	3202      	adds	r2, #2
 8008774:	701a      	strb	r2, [r3, #0]
                        if( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8008776:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008778:	42a3      	cmp	r3, r4
 800877a:	d119      	bne.n	80087b0 <OnRadioRxDone+0x340>
 800877c:	2c00      	cmp	r4, #0
 800877e:	d017      	beq.n	80087b0 <OnRadioRxDone+0x340>
                            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008780:	2208      	movs	r2, #8
 8008782:	4b01      	ldr	r3, [pc, #4]	; (8008788 <OnRadioRxDone+0x318>)
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008784:	705a      	strb	r2, [r3, #1]
 8008786:	e7b8      	b.n	80086fa <OnRadioRxDone+0x28a>
 8008788:	20000380 	.word	0x20000380
 800878c:	20000300 	.word	0x20000300
 8008790:	0800cfc4 	.word	0x0800cfc4
 8008794:	20000400 	.word	0x20000400
 8008798:	20000582 	.word	0x20000582
 800879c:	20000581 	.word	0x20000581
 80087a0:	20000e64 	.word	0x20000e64
 80087a4:	2000058e 	.word	0x2000058e
 80087a8:	20000e2c 	.word	0x20000e2c
 80087ac:	20000e28 	.word	0x20000e28
    bool skipIndication = false;
 80087b0:	2300      	movs	r3, #0
                        curMulticastParams->DownLinkCounter = downLinkCounter;
 80087b2:	6274      	str	r4, [r6, #36]	; 0x24
    bool skipIndication = false;
 80087b4:	9307      	str	r3, [sp, #28]
 80087b6:	466b      	mov	r3, sp
 80087b8:	2234      	movs	r2, #52	; 0x34
 80087ba:	189b      	adds	r3, r3, r2
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	930b      	str	r3, [sp, #44]	; 0x2c
                    if( McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80087c0:	4b5c      	ldr	r3, [pc, #368]	; (8008934 <OnRadioRxDone+0x4c4>)
 80087c2:	3340      	adds	r3, #64	; 0x40
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d102      	bne.n	80087d0 <OnRadioRxDone+0x360>
                        if( fCtrl.Bits.Ack == 1 )
 80087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087cc:	069b      	lsls	r3, r3, #26
 80087ce:	d502      	bpl.n	80087d6 <OnRadioRxDone+0x366>
                            MacCommandsBufferIndex = 0;
 80087d0:	2200      	movs	r2, #0
 80087d2:	4b59      	ldr	r3, [pc, #356]	; (8008938 <OnRadioRxDone+0x4c8>)
 80087d4:	759a      	strb	r2, [r3, #22]
 80087d6:	230f      	movs	r3, #15
 80087d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
                appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 80087da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087dc:	4019      	ands	r1, r3
                    if( ( ( size - 4 ) - appPayloadStartIndex ) > 0 )
 80087de:	9b04      	ldr	r3, [sp, #16]
                appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 80087e0:	3208      	adds	r2, #8
                    if( ( ( size - 4 ) - appPayloadStartIndex ) > 0 )
 80087e2:	3b04      	subs	r3, #4
 80087e4:	910a      	str	r1, [sp, #40]	; 0x28
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dd74      	ble.n	80088d6 <OnRadioRxDone+0x466>
                        port = payload[appPayloadStartIndex++];
 80087ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                        frameLen = ( size - 4 ) - appPayloadStartIndex;
 80087ee:	9904      	ldr	r1, [sp, #16]
                        port = payload[appPayloadStartIndex++];
 80087f0:	3509      	adds	r5, #9
                        frameLen = ( size - 4 ) - appPayloadStartIndex;
 80087f2:	1b4e      	subs	r6, r1, r5
                        port = payload[appPayloadStartIndex++];
 80087f4:	5cbb      	ldrb	r3, [r7, r2]
                        McpsIndication.Port = port;
 80087f6:	494f      	ldr	r1, [pc, #316]	; (8008934 <OnRadioRxDone+0x4c4>)
                        frameLen = ( size - 4 ) - appPayloadStartIndex;
 80087f8:	3e04      	subs	r6, #4
 80087fa:	b2f6      	uxtb	r6, r6
                        McpsIndication.Port = port;
 80087fc:	70cb      	strb	r3, [r1, #3]
                        if( port == 0 )
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d13d      	bne.n	800887e <OnRadioRxDone+0x40e>
                            if( fCtrl.Bits.FOptsLen == 0 )
 8008802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d113      	bne.n	8008830 <OnRadioRxDone+0x3c0>
                                LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8008808:	1978      	adds	r0, r7, r5
 800880a:	4d4c      	ldr	r5, [pc, #304]	; (800893c <OnRadioRxDone+0x4cc>)
 800880c:	3301      	adds	r3, #1
 800880e:	b2b1      	uxth	r1, r6
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	9502      	str	r5, [sp, #8]
 8008818:	9401      	str	r4, [sp, #4]
 800881a:	f001 fac3 	bl	8009da4 <LoRaMacPayloadDecrypt>
                                ProcessMacCommands( LoRaMacRxPayload, 0, frameLen, snr );
 800881e:	0032      	movs	r2, r6
 8008820:	0028      	movs	r0, r5
 8008822:	9b08      	ldr	r3, [sp, #32]
 8008824:	990a      	ldr	r1, [sp, #40]	; 0x28
                            ProcessMacCommands( payload, 8, appPayloadStartIndex, snr );
 8008826:	f7ff fc45 	bl	80080b4 <ProcessMacCommands>
                    if( skipIndication == false )
 800882a:	9b07      	ldr	r3, [sp, #28]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d040      	beq.n	80088b2 <OnRadioRxDone+0x442>
                    LoRaMacFlags.Bits.McpsIndSkip = skipIndication;
 8008830:	9b05      	ldr	r3, [sp, #20]
                    LoRaMacFlags.Bits.McpsInd = 1;
 8008832:	4a43      	ldr	r2, [pc, #268]	; (8008940 <OnRadioRxDone+0x4d0>)
                    LoRaMacFlags.Bits.McpsIndSkip = skipIndication;
 8008834:	009d      	lsls	r5, r3, #2
 8008836:	2302      	movs	r3, #2
                    LoRaMacFlags.Bits.McpsInd = 1;
 8008838:	7811      	ldrb	r1, [r2, #0]
                    LoRaMacFlags.Bits.McpsIndSkip = skipIndication;
 800883a:	430b      	orrs	r3, r1
 800883c:	2104      	movs	r1, #4
 800883e:	438b      	bics	r3, r1
 8008840:	431d      	orrs	r5, r3
 8008842:	7015      	strb	r5, [r2, #0]
            break;
 8008844:	e6bc      	b.n	80085c0 <OnRadioRxDone+0x150>
                        if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008846:	211f      	movs	r1, #31
 8008848:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800884a:	68a8      	ldr	r0, [r5, #8]
 800884c:	438e      	bics	r6, r1
 800884e:	2ea0      	cmp	r6, #160	; 0xa0
 8008850:	d10c      	bne.n	800886c <OnRadioRxDone+0x3fc>
                            SrvAckRequested = true;
 8008852:	2201      	movs	r2, #1
 8008854:	766a      	strb	r2, [r5, #25]
                            McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008856:	701a      	strb	r2, [r3, #0]
                            if( ( DownLinkCounter == downLinkCounter ) &&
 8008858:	4284      	cmp	r4, r0
 800885a:	d10e      	bne.n	800887a <OnRadioRxDone+0x40a>
 800885c:	0023      	movs	r3, r4
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	4193      	sbcs	r3, r2
 8008862:	b2db      	uxtb	r3, r3
    bool skipIndication = false;
 8008864:	9307      	str	r3, [sp, #28]
                        DownLinkCounter = downLinkCounter;
 8008866:	4b34      	ldr	r3, [pc, #208]	; (8008938 <OnRadioRxDone+0x4c8>)
 8008868:	609c      	str	r4, [r3, #8]
 800886a:	e7a4      	b.n	80087b6 <OnRadioRxDone+0x346>
                            SrvAckRequested = false;
 800886c:	766a      	strb	r2, [r5, #25]
                            McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800886e:	701a      	strb	r2, [r3, #0]
                            if( ( DownLinkCounter == downLinkCounter ) &&
 8008870:	4284      	cmp	r4, r0
 8008872:	d102      	bne.n	800887a <OnRadioRxDone+0x40a>
 8008874:	2c00      	cmp	r4, #0
 8008876:	d000      	beq.n	800887a <OnRadioRxDone+0x40a>
 8008878:	e782      	b.n	8008780 <OnRadioRxDone+0x310>
    bool skipIndication = false;
 800887a:	2300      	movs	r3, #0
 800887c:	e7f2      	b.n	8008864 <OnRadioRxDone+0x3f4>
                            if( fCtrl.Bits.FOptsLen > 0 )
 800887e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <OnRadioRxDone+0x41e>
                                ProcessMacCommands( payload, 8, appPayloadStartIndex - 1, snr );
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	2108      	movs	r1, #8
 8008888:	0038      	movs	r0, r7
 800888a:	f7ff fc13 	bl	80080b4 <ProcessMacCommands>
                            LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 800888e:	9401      	str	r4, [sp, #4]
 8008890:	2401      	movs	r4, #1
 8008892:	1978      	adds	r0, r7, r5
 8008894:	4f29      	ldr	r7, [pc, #164]	; (800893c <OnRadioRxDone+0x4cc>)
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	b2b1      	uxth	r1, r6
 800889a:	9702      	str	r7, [sp, #8]
 800889c:	9400      	str	r4, [sp, #0]
 800889e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088a0:	f001 fa80 	bl	8009da4 <LoRaMacPayloadDecrypt>
                            if( skipIndication == false )
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1c2      	bne.n	8008830 <OnRadioRxDone+0x3c0>
                                McpsIndication.Buffer = LoRaMacRxPayload;
 80088aa:	4b22      	ldr	r3, [pc, #136]	; (8008934 <OnRadioRxDone+0x4c4>)
 80088ac:	609f      	str	r7, [r3, #8]
                                McpsIndication.BufferSize = frameLen;
 80088ae:	731e      	strb	r6, [r3, #12]
                                McpsIndication.RxData = true;
 80088b0:	735c      	strb	r4, [r3, #13]
                        if( fCtrl.Bits.Ack == 1 )
 80088b2:	2520      	movs	r5, #32
 80088b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b6:	4820      	ldr	r0, [pc, #128]	; (8008938 <OnRadioRxDone+0x4c8>)
 80088b8:	402b      	ands	r3, r5
 80088ba:	1e1d      	subs	r5, r3, #0
 80088bc:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <OnRadioRxDone+0x4c4>)
 80088be:	d011      	beq.n	80088e4 <OnRadioRxDone+0x474>
                            McpsConfirm.AckReceived = true;
 80088c0:	0019      	movs	r1, r3
 80088c2:	2201      	movs	r2, #1
 80088c4:	3140      	adds	r1, #64	; 0x40
                            TimerStop( &AckTimeoutTimer );
 80088c6:	3024      	adds	r0, #36	; 0x24
                            McpsIndication.AckReceived = true;
 80088c8:	749a      	strb	r2, [r3, #18]
                            McpsConfirm.AckReceived = true;
 80088ca:	710a      	strb	r2, [r1, #4]
                            TimerStop( &AckTimeoutTimer );
 80088cc:	f002 fc16 	bl	800b0fc <TimerStop>
 80088d0:	2300      	movs	r3, #0
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	e7ac      	b.n	8008830 <OnRadioRxDone+0x3c0>
                        if( fCtrl.Bits.FOptsLen > 0 )
 80088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0a6      	beq.n	800882a <OnRadioRxDone+0x3ba>
                            ProcessMacCommands( payload, 8, appPayloadStartIndex, snr );
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	2108      	movs	r1, #8
 80088e0:	0038      	movs	r0, r7
 80088e2:	e7a0      	b.n	8008826 <OnRadioRxDone+0x3b6>
                            McpsConfirm.AckReceived = false;
 80088e4:	3340      	adds	r3, #64	; 0x40
 80088e6:	711d      	strb	r5, [r3, #4]
                            if( AckTimeoutRetriesCounter > AckTimeoutRetries )
 80088e8:	4b16      	ldr	r3, [pc, #88]	; (8008944 <OnRadioRxDone+0x4d4>)
 80088ea:	9505      	str	r5, [sp, #20]
 80088ec:	785a      	ldrb	r2, [r3, #1]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d99d      	bls.n	8008830 <OnRadioRxDone+0x3c0>
                                TimerStop( &AckTimeoutTimer );
 80088f4:	3024      	adds	r0, #36	; 0x24
 80088f6:	f002 fc01 	bl	800b0fc <TimerStop>
 80088fa:	e799      	b.n	8008830 <OnRadioRxDone+0x3c0>
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80088fc:	220c      	movs	r2, #12
 80088fe:	e741      	b.n	8008784 <OnRadioRxDone+0x314>
                memcpy1( LoRaMacRxPayload, &payload[pktHeaderLen], size );
 8008900:	4d0e      	ldr	r5, [pc, #56]	; (800893c <OnRadioRxDone+0x4cc>)
 8008902:	1c79      	adds	r1, r7, #1
 8008904:	9a04      	ldr	r2, [sp, #16]
 8008906:	0028      	movs	r0, r5
 8008908:	f002 fc6f 	bl	800b1ea <memcpy1>
                McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800890c:	2303      	movs	r3, #3
 800890e:	7023      	strb	r3, [r4, #0]
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008910:	2300      	movs	r3, #0
                LoRaMacFlags.Bits.McpsInd = 1;
 8008912:	4a0b      	ldr	r2, [pc, #44]	; (8008940 <OnRadioRxDone+0x4d0>)
                McpsIndication.BufferSize = size - pktHeaderLen;
 8008914:	9e04      	ldr	r6, [sp, #16]
                LoRaMacFlags.Bits.McpsInd = 1;
 8008916:	7811      	ldrb	r1, [r2, #0]
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008918:	7063      	strb	r3, [r4, #1]
                LoRaMacFlags.Bits.McpsInd = 1;
 800891a:	3302      	adds	r3, #2
                McpsIndication.BufferSize = size - pktHeaderLen;
 800891c:	3e01      	subs	r6, #1
                LoRaMacFlags.Bits.McpsInd = 1;
 800891e:	430b      	orrs	r3, r1
                McpsIndication.Buffer = LoRaMacRxPayload;
 8008920:	60a5      	str	r5, [r4, #8]
                McpsIndication.BufferSize = size - pktHeaderLen;
 8008922:	7326      	strb	r6, [r4, #12]
                LoRaMacFlags.Bits.McpsInd = 1;
 8008924:	7013      	strb	r3, [r2, #0]
                break;
 8008926:	e64b      	b.n	80085c0 <OnRadioRxDone+0x150>
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	7063      	strb	r3, [r4, #1]
            PrepareRxDoneAbort( );
 800892c:	f7ff f9f4 	bl	8007d18 <PrepareRxDoneAbort>
            break;
 8008930:	e646      	b.n	80085c0 <OnRadioRxDone+0x150>
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	20000380 	.word	0x20000380
 8008938:	20000300 	.word	0x20000300
 800893c:	20000581 	.word	0x20000581
 8008940:	20000e28 	.word	0x20000e28
 8008944:	20000060 	.word	0x20000060

08008948 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 8008948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894a:	b08d      	sub	sp, #52	; 0x34
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	ab12      	add	r3, sp, #72	; 0x48
 8008950:	9207      	str	r2, [sp, #28]
 8008952:	881a      	ldrh	r2, [r3, #0]
    AdrNextParams_t adrNext;
    uint16_t i;
    uint8_t pktHeaderLen = 0;
    uint32_t mic = 0;
 8008954:	2300      	movs	r3, #0
    const void* payload = fBuffer;
    uint8_t framePort = fPort;

    LoRaMacBufferPktLen = 0;
 8008956:	4cbe      	ldr	r4, [pc, #760]	; (8008c50 <PrepareFrame+0x308>)
{
 8008958:	000e      	movs	r6, r1

    NodeAckRequested = false;
 800895a:	49be      	ldr	r1, [pc, #760]	; (8008c54 <PrepareFrame+0x30c>)
    uint32_t mic = 0;
 800895c:	9308      	str	r3, [sp, #32]
    NodeAckRequested = false;
 800895e:	760b      	strb	r3, [r1, #24]
    LoRaMacBufferPktLen = 0;
 8008960:	8523      	strh	r3, [r4, #40]	; 0x28

    if( fBuffer == NULL )
    {
        fBufferSize = 0;
 8008962:	9b04      	ldr	r3, [sp, #16]
    }

    LoRaMacTxPayloadLen = fBufferSize;

    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 8008964:	4dbc      	ldr	r5, [pc, #752]	; (8008c58 <PrepareFrame+0x310>)
        fBufferSize = 0;
 8008966:	1e59      	subs	r1, r3, #1
 8008968:	418b      	sbcs	r3, r1
    LoRaMacTxPayloadLen = fBufferSize;
 800896a:	0021      	movs	r1, r4
        fBufferSize = 0;
 800896c:	425b      	negs	r3, r3
 800896e:	401a      	ands	r2, r3
    LoRaMacTxPayloadLen = fBufferSize;
 8008970:	312a      	adds	r1, #42	; 0x2a
 8008972:	b2d3      	uxtb	r3, r2
 8008974:	700b      	strb	r3, [r1, #0]
    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 8008976:	7801      	ldrb	r1, [r0, #0]
 8008978:	7029      	strb	r1, [r5, #0]

    switch( macHdr->Bits.MType )
 800897a:	7800      	ldrb	r0, [r0, #0]
 800897c:	0940      	lsrs	r0, r0, #5
 800897e:	f7f7 fbcd 	bl	800011c <__gnu_thumb1_case_uhi>
 8008982:	0008      	.short	0x0008
 8008984:	00480164 	.word	0x00480164
 8008988:	00450164 	.word	0x00450164
 800898c:	01640164 	.word	0x01640164
 8008990:	0152      	.short	0x0152
    {
        case FRAME_TYPE_JOIN_REQ:
            LoRaMacBufferPktLen = pktHeaderLen;
 8008992:	2301      	movs	r3, #1

            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 8008994:	2208      	movs	r2, #8
 8008996:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008998:	48b0      	ldr	r0, [pc, #704]	; (8008c5c <PrepareFrame+0x314>)
            LoRaMacBufferPktLen = pktHeaderLen;
 800899a:	8523      	strh	r3, [r4, #40]	; 0x28
            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 800899c:	f002 fc2e 	bl	800b1fc <memcpyr>
            LoRaMacBufferPktLen += 8;
 80089a0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 80089a2:	2208      	movs	r2, #8
            LoRaMacBufferPktLen += 8;
 80089a4:	3008      	adds	r0, #8
 80089a6:	b280      	uxth	r0, r0
            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 80089a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
            LoRaMacBufferPktLen += 8;
 80089aa:	8520      	strh	r0, [r4, #40]	; 0x28
            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 80089ac:	1828      	adds	r0, r5, r0
 80089ae:	f002 fc25 	bl	800b1fc <memcpyr>
            LoRaMacBufferPktLen += 8;
 80089b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089b4:	3308      	adds	r3, #8
 80089b6:	8523      	strh	r3, [r4, #40]	; 0x28

            LoRaMacDevNonce = Radio.Random( );
 80089b8:	4ba9      	ldr	r3, [pc, #676]	; (8008c60 <PrepareFrame+0x318>)
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	4798      	blx	r3

            LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 80089c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            LoRaMacDevNonce = Radio.Random( );
 80089c2:	b282      	uxth	r2, r0
            LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 80089c4:	54e8      	strb	r0, [r5, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 80089c6:	1c99      	adds	r1, r3, #2
            LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 80089c8:	3301      	adds	r3, #1
            LoRaMacDevNonce = Radio.Random( );
 80089ca:	83a2      	strh	r2, [r4, #28]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 80089cc:	b289      	uxth	r1, r1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	0a12      	lsrs	r2, r2, #8
 80089d2:	54ea      	strb	r2, [r5, r3]

            LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 80089d4:	0028      	movs	r0, r5
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 80089d6:	8521      	strh	r1, [r4, #40]	; 0x28
            LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 80089d8:	ab08      	add	r3, sp, #32
 80089da:	b2c9      	uxtb	r1, r1
 80089dc:	69a2      	ldr	r2, [r4, #24]
 80089de:	f001 f9ef 	bl	8009dc0 <LoRaMacJoinComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 80089e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089e4:	9a08      	ldr	r2, [sp, #32]
 80089e6:	1c59      	adds	r1, r3, #1
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 80089e8:	0a10      	lsrs	r0, r2, #8
 80089ea:	b289      	uxth	r1, r1
            LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 80089ec:	54ea      	strb	r2, [r5, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 80089ee:	5468      	strb	r0, [r5, r1]
 80089f0:	1c99      	adds	r1, r3, #2
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 80089f2:	b289      	uxth	r1, r1
 80089f4:	0c10      	lsrs	r0, r2, #16
 80089f6:	5468      	strb	r0, [r5, r1]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 80089f8:	1d19      	adds	r1, r3, #4
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 80089fa:	3303      	adds	r3, #3
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	0e12      	lsrs	r2, r2, #24
 8008a00:	54ea      	strb	r2, [r5, r3]
            break;
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
    }

    return LORAMAC_STATUS_OK;
 8008a02:	2500      	movs	r5, #0
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 8008a04:	8521      	strh	r1, [r4, #40]	; 0x28
}
 8008a06:	0028      	movs	r0, r5
 8008a08:	b00d      	add	sp, #52	; 0x34
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            NodeAckRequested = true;
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4b91      	ldr	r3, [pc, #580]	; (8008c54 <PrepareFrame+0x30c>)
 8008a10:	761a      	strb	r2, [r3, #24]
            if( IsLoRaMacNetworkJoined == false )
 8008a12:	4c90      	ldr	r4, [pc, #576]	; (8008c54 <PrepareFrame+0x30c>)
                return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 8008a14:	2507      	movs	r5, #7
            if( IsLoRaMacNetworkJoined == false )
 8008a16:	7823      	ldrb	r3, [r4, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0f4      	beq.n	8008a06 <PrepareFrame+0xbe>
            adrNext.AdrEnabled = fCtrl->Bits.Adr;
 8008a1c:	7833      	ldrb	r3, [r6, #0]
            adrNext.UpdateChanMask = true;
 8008a1e:	a909      	add	r1, sp, #36	; 0x24
            adrNext.AdrEnabled = fCtrl->Bits.Adr;
 8008a20:	09db      	lsrs	r3, r3, #7
 8008a22:	704b      	strb	r3, [r1, #1]
            adrNext.AdrAckCounter = AdrAckCounter;
 8008a24:	68e3      	ldr	r3, [r4, #12]
            adrNext.UpdateChanMask = true;
 8008a26:	3d06      	subs	r5, #6
            adrNext.AdrAckCounter = AdrAckCounter;
 8008a28:	604b      	str	r3, [r1, #4]
            adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8008a2a:	4b8e      	ldr	r3, [pc, #568]	; (8008c64 <PrepareFrame+0x31c>)
            adrNext.UpdateChanMask = true;
 8008a2c:	700d      	strb	r5, [r1, #0]
            adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8008a2e:	785a      	ldrb	r2, [r3, #1]
 8008a30:	720a      	strb	r2, [r1, #8]
            adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	724a      	strb	r2, [r1, #9]
            adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008a36:	001a      	movs	r2, r3
 8008a38:	322c      	adds	r2, #44	; 0x2c
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	728a      	strb	r2, [r1, #10]
            fCtrl->Bits.AdrAckReq = RegionAdrNext( LoRaMacRegion, &adrNext,
 8008a3e:	1d22      	adds	r2, r4, #4
 8008a40:	7fd0      	ldrb	r0, [r2, #31]
 8008a42:	0022      	movs	r2, r4
 8008a44:	320c      	adds	r2, #12
 8008a46:	9200      	str	r2, [sp, #0]
 8008a48:	4a87      	ldr	r2, [pc, #540]	; (8008c68 <PrepareFrame+0x320>)
 8008a4a:	f001 fa85 	bl	8009f58 <RegionAdrNext>
 8008a4e:	2340      	movs	r3, #64	; 0x40
 8008a50:	4028      	ands	r0, r5
 8008a52:	7835      	ldrb	r5, [r6, #0]
 8008a54:	0180      	lsls	r0, r0, #6
 8008a56:	439d      	bics	r5, r3
            if( SrvAckRequested == true )
 8008a58:	7e63      	ldrb	r3, [r4, #25]
            fCtrl->Bits.AdrAckReq = RegionAdrNext( LoRaMacRegion, &adrNext,
 8008a5a:	4305      	orrs	r5, r0
 8008a5c:	7035      	strb	r5, [r6, #0]
            if( SrvAckRequested == true )
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <PrepareFrame+0x126>
                SrvAckRequested = false;
 8008a62:	2300      	movs	r3, #0
                fCtrl->Bits.Ack = 1;
 8008a64:	b2ea      	uxtb	r2, r5
                SrvAckRequested = false;
 8008a66:	7663      	strb	r3, [r4, #25]
                fCtrl->Bits.Ack = 1;
 8008a68:	3320      	adds	r3, #32
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	7033      	strb	r3, [r6, #0]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 8008a6e:	4c78      	ldr	r4, [pc, #480]	; (8008c50 <PrepareFrame+0x308>)
 8008a70:	4a79      	ldr	r2, [pc, #484]	; (8008c58 <PrepareFrame+0x310>)
 8008a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 8008a74:	4978      	ldr	r1, [pc, #480]	; (8008c58 <PrepareFrame+0x310>)
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 8008a76:	7053      	strb	r3, [r2, #1]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 8008a78:	0a1a      	lsrs	r2, r3, #8
 8008a7a:	708a      	strb	r2, [r1, #2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 8008a7c:	0c1a      	lsrs	r2, r3, #16
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 8008a7e:	0e1b      	lsrs	r3, r3, #24
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 8008a80:	70ca      	strb	r2, [r1, #3]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 8008a82:	710b      	strb	r3, [r1, #4]
            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 8008a84:	4d73      	ldr	r5, [pc, #460]	; (8008c54 <PrepareFrame+0x30c>)
            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 8008a86:	7833      	ldrb	r3, [r6, #0]
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 8008a88:	7da8      	ldrb	r0, [r5, #22]
            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 8008a8a:	714b      	strb	r3, [r1, #5]
            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 8008a8c:	686b      	ldr	r3, [r5, #4]
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 8008a8e:	4f77      	ldr	r7, [pc, #476]	; (8008c6c <PrepareFrame+0x324>)
            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 8008a90:	718b      	strb	r3, [r1, #6]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	71cb      	strb	r3, [r1, #7]
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 8008a96:	7dea      	ldrb	r2, [r5, #23]
 8008a98:	19c0      	adds	r0, r0, r7
 8008a9a:	4975      	ldr	r1, [pc, #468]	; (8008c70 <PrepareFrame+0x328>)
 8008a9c:	f002 fba5 	bl	800b1ea <memcpy1>
            MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 8008aa0:	7dab      	ldrb	r3, [r5, #22]
 8008aa2:	7dea      	ldrb	r2, [r5, #23]
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	9305      	str	r3, [sp, #20]
 8008aaa:	75ab      	strb	r3, [r5, #22]
            if( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d100      	bne.n	8008ab4 <PrepareFrame+0x16c>
 8008ab2:	e07e      	b.n	8008bb2 <PrepareFrame+0x26a>
 8008ab4:	0023      	movs	r3, r4
 8008ab6:	332a      	adds	r3, #42	; 0x2a
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	d079      	beq.n	8008bb2 <PrepareFrame+0x26a>
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8008abe:	2108      	movs	r1, #8
                if( MacCommandsInNextTx == true )
 8008ac0:	7eaa      	ldrb	r2, [r5, #26]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8008ac2:	9106      	str	r1, [sp, #24]
                if( MacCommandsInNextTx == true )
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	d019      	beq.n	8008afc <PrepareFrame+0x1b4>
                    if( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH )
 8008ac8:	9a05      	ldr	r2, [sp, #20]
 8008aca:	2a0f      	cmp	r2, #15
 8008acc:	d87b      	bhi.n	8008bc6 <PrepareFrame+0x27e>
                        fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 8008ace:	7832      	ldrb	r2, [r6, #0]
 8008ad0:	9905      	ldr	r1, [sp, #20]
 8008ad2:	0713      	lsls	r3, r2, #28
 8008ad4:	0f1b      	lsrs	r3, r3, #28
 8008ad6:	18cb      	adds	r3, r1, r3
 8008ad8:	210f      	movs	r1, #15
 8008ada:	438a      	bics	r2, r1
 8008adc:	400b      	ands	r3, r1
 8008ade:	4313      	orrs	r3, r2
                        LoRaMacBuffer[0x05] = fCtrl->Value;
 8008ae0:	4a5d      	ldr	r2, [pc, #372]	; (8008c58 <PrepareFrame+0x310>)
                        fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 8008ae2:	7033      	strb	r3, [r6, #0]
                        LoRaMacBuffer[0x05] = fCtrl->Value;
 8008ae4:	7153      	strb	r3, [r2, #5]
                        for( i = 0; i < MacCommandsBufferIndex; i++ )
 8008ae6:	466a      	mov	r2, sp
 8008ae8:	2300      	movs	r3, #0
 8008aea:	8a92      	ldrh	r2, [r2, #20]
                            LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 8008aec:	495a      	ldr	r1, [pc, #360]	; (8008c58 <PrepareFrame+0x310>)
                        for( i = 0; i < MacCommandsBufferIndex; i++ )
 8008aee:	b298      	uxth	r0, r3
 8008af0:	4282      	cmp	r2, r0
 8008af2:	d859      	bhi.n	8008ba8 <PrepareFrame+0x260>
 8008af4:	9905      	ldr	r1, [sp, #20]
 8008af6:	3108      	adds	r1, #8
 8008af8:	b2cb      	uxtb	r3, r1
 8008afa:	9306      	str	r3, [sp, #24]
            MacCommandsInNextTx = false;
 8008afc:	2200      	movs	r2, #0
 8008afe:	4b55      	ldr	r3, [pc, #340]	; (8008c54 <PrepareFrame+0x30c>)
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008b00:	4f5b      	ldr	r7, [pc, #364]	; (8008c70 <PrepareFrame+0x328>)
            MacCommandsInNextTx = false;
 8008b02:	769a      	strb	r2, [r3, #26]
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8008b04:	003e      	movs	r6, r7
    for( i = 0; i < length; i++ )
 8008b06:	0013      	movs	r3, r2
 8008b08:	9905      	ldr	r1, [sp, #20]
 8008b0a:	4299      	cmp	r1, r3
 8008b0c:	d861      	bhi.n	8008bd2 <PrepareFrame+0x28a>
            MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat( MacCommandsBuffer, MacCommandsBufferIndex, MacCommandsBufferToRepeat );
 8008b0e:	4b51      	ldr	r3, [pc, #324]	; (8008c54 <PrepareFrame+0x30c>)
 8008b10:	469c      	mov	ip, r3
 8008b12:	75da      	strb	r2, [r3, #23]
            if( MacCommandsBufferToRepeatIndex > 0 )
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	d002      	beq.n	8008b1e <PrepareFrame+0x1d6>
                MacCommandsInNextTx = true;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4662      	mov	r2, ip
 8008b1c:	7693      	strb	r3, [r2, #26]
            if( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d021      	beq.n	8008b68 <PrepareFrame+0x220>
 8008b24:	4b4a      	ldr	r3, [pc, #296]	; (8008c50 <PrepareFrame+0x308>)
 8008b26:	332a      	adds	r3, #42	; 0x2a
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	2900      	cmp	r1, #0
 8008b2c:	d01c      	beq.n	8008b68 <PrepareFrame+0x220>
 8008b2e:	4660      	mov	r0, ip
 8008b30:	4b47      	ldr	r3, [pc, #284]	; (8008c50 <PrepareFrame+0x308>)
 8008b32:	6847      	ldr	r7, [r0, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 8008b36:	9806      	ldr	r0, [sp, #24]
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	1c46      	adds	r6, r0, #1
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	4846      	ldr	r0, [pc, #280]	; (8008c58 <PrepareFrame+0x310>)
 8008b40:	9a07      	ldr	r2, [sp, #28]
 8008b42:	b2f6      	uxtb	r6, r6
 8008b44:	54c2      	strb	r2, [r0, r3]
 8008b46:	b289      	uxth	r1, r1
 8008b48:	1830      	adds	r0, r6, r0
                if( framePort == 0 )
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d163      	bne.n	8008c16 <PrepareFrame+0x2ce>
                    MacCommandsBufferIndex = 0;
 8008b4e:	4663      	mov	r3, ip
 8008b50:	759a      	strb	r2, [r3, #22]
                    LoRaMacPayloadEncrypt( (uint8_t* ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8008b52:	9b07      	ldr	r3, [sp, #28]
 8008b54:	4a3e      	ldr	r2, [pc, #248]	; (8008c50 <PrepareFrame+0x308>)
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	3208      	adds	r2, #8
 8008b5c:	9002      	str	r0, [sp, #8]
 8008b5e:	9701      	str	r7, [sp, #4]
                    LoRaMacPayloadEncrypt( (uint8_t* ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8008b60:	9804      	ldr	r0, [sp, #16]
 8008b62:	f001 f8ad 	bl	8009cc0 <LoRaMacPayloadEncrypt>
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 8008b66:	9606      	str	r6, [sp, #24]
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8008b68:	0023      	movs	r3, r4
 8008b6a:	332a      	adds	r3, #42	; 0x2a
 8008b6c:	7819      	ldrb	r1, [r3, #0]
 8008b6e:	9b06      	ldr	r3, [sp, #24]
            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8008b70:	0022      	movs	r2, r4
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8008b72:	18c9      	adds	r1, r1, r3
            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8008b74:	ab08      	add	r3, sp, #32
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8008b76:	8521      	strh	r1, [r4, #40]	; 0x28
            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	686b      	ldr	r3, [r5, #4]
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	9500      	str	r5, [sp, #0]
 8008b82:	3208      	adds	r2, #8
 8008b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b86:	4834      	ldr	r0, [pc, #208]	; (8008c58 <PrepareFrame+0x310>)
 8008b88:	f001 f858 	bl	8009c3c <LoRaMacComputeMic>
            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 8008b8c:	9a08      	ldr	r2, [sp, #32]
 8008b8e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008b90:	4b31      	ldr	r3, [pc, #196]	; (8008c58 <PrepareFrame+0x310>)
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 8008b92:	0a10      	lsrs	r0, r2, #8
            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 8008b94:	545a      	strb	r2, [r3, r1]
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 8008b96:	185b      	adds	r3, r3, r1
 8008b98:	7058      	strb	r0, [r3, #1]
            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 8008b9a:	3104      	adds	r1, #4
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 8008b9c:	0c10      	lsrs	r0, r2, #16
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 8008b9e:	0e12      	lsrs	r2, r2, #24
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 8008ba0:	7098      	strb	r0, [r3, #2]
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 8008ba2:	70da      	strb	r2, [r3, #3]
            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 8008ba4:	8521      	strh	r1, [r4, #40]	; 0x28
            break;
 8008ba6:	e72e      	b.n	8008a06 <PrepareFrame+0xbe>
                            LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 8008ba8:	5cfe      	ldrb	r6, [r7, r3]
 8008baa:	1858      	adds	r0, r3, r1
 8008bac:	7206      	strb	r6, [r0, #8]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	e79d      	b.n	8008aee <PrepareFrame+0x1a6>
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	9306      	str	r3, [sp, #24]
                if( ( MacCommandsBufferIndex > 0 ) && ( MacCommandsInNextTx == true ) )
 8008bb6:	9b05      	ldr	r3, [sp, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d09f      	beq.n	8008afc <PrepareFrame+0x1b4>
 8008bbc:	7eab      	ldrb	r3, [r5, #26]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d09c      	beq.n	8008afc <PrepareFrame+0x1b4>
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 8008bc2:	0023      	movs	r3, r4
 8008bc4:	332a      	adds	r3, #42	; 0x2a
 8008bc6:	9a05      	ldr	r2, [sp, #20]
                    payload = MacCommandsBuffer;
 8008bc8:	9704      	str	r7, [sp, #16]
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 8008bca:	701a      	strb	r2, [r3, #0]
                    framePort = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	e794      	b.n	8008afc <PrepareFrame+0x1b4>
        switch( cmdBufIn[i] )
 8008bd2:	4926      	ldr	r1, [pc, #152]	; (8008c6c <PrepareFrame+0x324>)
 8008bd4:	5cc9      	ldrb	r1, [r1, r3]
 8008bd6:	1ec8      	subs	r0, r1, #3
 8008bd8:	2807      	cmp	r0, #7
 8008bda:	d80f      	bhi.n	8008bfc <PrepareFrame+0x2b4>
 8008bdc:	f7f7 fa94 	bl	8000108 <__gnu_thumb1_case_uqi>
 8008be0:	16040e19 	.word	0x16040e19
 8008be4:	040e1119 	.word	0x040e1119
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8008be8:	54b1      	strb	r1, [r6, r2]
 8008bea:	3301      	adds	r3, #1
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008bec:	491f      	ldr	r1, [pc, #124]	; (8008c6c <PrepareFrame+0x324>)
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	1c50      	adds	r0, r2, #1
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008bf2:	5cc9      	ldrb	r1, [r1, r3]
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8008bf4:	b2c0      	uxtb	r0, r0
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008bf6:	3202      	adds	r2, #2
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	5431      	strb	r1, [r6, r0]
    for( i = 0; i < length; i++ )
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	e782      	b.n	8008b08 <PrepareFrame+0x1c0>
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008c02:	2008      	movs	r0, #8
 8008c04:	1c51      	adds	r1, r2, #1
 8008c06:	54b8      	strb	r0, [r7, r2]
 8008c08:	b2ca      	uxtb	r2, r1
 8008c0a:	e7f7      	b.n	8008bfc <PrepareFrame+0x2b4>
                i += 2;
 8008c0c:	3302      	adds	r3, #2
                i++;
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	e7f4      	b.n	8008bfc <PrepareFrame+0x2b4>
 8008c12:	3301      	adds	r3, #1
 8008c14:	e7fb      	b.n	8008c0e <PrepareFrame+0x2c6>
                    LoRaMacPayloadEncrypt( (uint8_t* ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8008c16:	9002      	str	r0, [sp, #8]
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4a16      	ldr	r2, [pc, #88]	; (8008c74 <PrepareFrame+0x32c>)
 8008c1c:	9701      	str	r7, [sp, #4]
 8008c1e:	9000      	str	r0, [sp, #0]
 8008c20:	9b05      	ldr	r3, [sp, #20]
 8008c22:	3278      	adds	r2, #120	; 0x78
 8008c24:	e79c      	b.n	8008b60 <PrepareFrame+0x218>
    return LORAMAC_STATUS_OK;
 8008c26:	9d04      	ldr	r5, [sp, #16]
            if( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8008c28:	1e29      	subs	r1, r5, #0
 8008c2a:	d100      	bne.n	8008c2e <PrepareFrame+0x2e6>
 8008c2c:	e6eb      	b.n	8008a06 <PrepareFrame+0xbe>
    return LORAMAC_STATUS_OK;
 8008c2e:	2500      	movs	r5, #0
            if( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	d100      	bne.n	8008c36 <PrepareFrame+0x2ee>
 8008c34:	e6e7      	b.n	8008a06 <PrepareFrame+0xbe>
                memcpy1( LoRaMacBuffer + pktHeaderLen, ( uint8_t* ) fBuffer, LoRaMacTxPayloadLen );
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	4808      	ldr	r0, [pc, #32]	; (8008c5c <PrepareFrame+0x314>)
 8008c3a:	f002 fad6 	bl	800b1ea <memcpy1>
                LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8008c3e:	0023      	movs	r3, r4
 8008c40:	332a      	adds	r3, #42	; 0x2a
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	8523      	strh	r3, [r4, #40]	; 0x28
 8008c48:	e6dd      	b.n	8008a06 <PrepareFrame+0xbe>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008c4a:	2502      	movs	r5, #2
 8008c4c:	e6db      	b.n	8008a06 <PrepareFrame+0xbe>
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	20000400 	.word	0x20000400
 8008c54:	20000300 	.word	0x20000300
 8008c58:	20000680 	.word	0x20000680
 8008c5c:	20000681 	.word	0x20000681
 8008c60:	0800cfc4 	.word	0x0800cfc4
 8008c64:	20000e64 	.word	0x20000e64
 8008c68:	20000e65 	.word	0x20000e65
 8008c6c:	20000501 	.word	0x20000501
 8008c70:	20000481 	.word	0x20000481
 8008c74:	20000380 	.word	0x20000380

08008c78 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	b089      	sub	sp, #36	; 0x24
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8008c7c:	ab02      	add	r3, sp, #8
 8008c7e:	1ddf      	adds	r7, r3, #7
 8008c80:	2300      	movs	r3, #0

    txConfig.Channel = channel;
 8008c82:	a904      	add	r1, sp, #16
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 8008c84:	4e22      	ldr	r6, [pc, #136]	; (8008d10 <SendFrameOnChannel+0x98>)
    txConfig.Channel = channel;
 8008c86:	7008      	strb	r0, [r1, #0]
    int8_t txPower = 0;
 8008c88:	703b      	strb	r3, [r7, #0]
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 8008c8a:	7873      	ldrb	r3, [r6, #1]
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
    txConfig.PktLen = LoRaMacBufferPktLen;
 8008c8c:	4d21      	ldr	r5, [pc, #132]	; (8008d14 <SendFrameOnChannel+0x9c>)
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 8008c8e:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 8008c90:	7833      	ldrb	r3, [r6, #0]

    DBG_PRINTF( "\n\r*** seqTx= %d *****\n\r", UpLinkCounter );

    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8008c92:	4c21      	ldr	r4, [pc, #132]	; (8008d18 <SendFrameOnChannel+0xa0>)
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 8008c94:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 8008c96:	6b33      	ldr	r3, [r6, #48]	; 0x30
    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8008c98:	1d22      	adds	r2, r4, #4
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 8008c9a:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 8008c9c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8008c9e:	7fd0      	ldrb	r0, [r2, #31]
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 8008ca0:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = LoRaMacBufferPktLen;
 8008ca2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8008ca4:	003a      	movs	r2, r7
    txConfig.PktLen = LoRaMacBufferPktLen;
 8008ca6:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8008ca8:	002b      	movs	r3, r5
 8008caa:	3334      	adds	r3, #52	; 0x34
 8008cac:	f001 f977 	bl	8009f9e <RegionTxConfig>

    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <SendFrameOnChannel+0xa4>)
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	001a      	movs	r2, r3
 8008cb6:	3254      	adds	r2, #84	; 0x54
 8008cb8:	7051      	strb	r1, [r2, #1]
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008cba:	001a      	movs	r2, r3
 8008cbc:	3240      	adds	r2, #64	; 0x40
 8008cbe:	7051      	strb	r1, [r2, #1]
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8008cc0:	7871      	ldrb	r1, [r6, #1]
    // Store the time on air
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008cc2:	0026      	movs	r6, r4
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8008cc4:	7091      	strb	r1, [r2, #2]
    McpsConfirm.TxPower = txPower;
 8008cc6:	7839      	ldrb	r1, [r7, #0]
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008cc8:	3640      	adds	r6, #64	; 0x40
    McpsConfirm.TxPower = txPower;
 8008cca:	70d1      	strb	r1, [r2, #3]
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008ccc:	21fa      	movs	r1, #250	; 0xfa
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 8008cce:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008cd0:	0089      	lsls	r1, r1, #2
 8008cd2:	0030      	movs	r0, r6
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 8008cd4:	649a      	str	r2, [r3, #72]	; 0x48
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 8008cd6:	659a      	str	r2, [r3, #88]	; 0x58
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008cd8:	f002 fa3c 	bl	800b154 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8008cdc:	0030      	movs	r0, r6
 8008cde:	f002 f99b 	bl	800b018 <TimerStart>

    if( IsLoRaMacNetworkJoined == false )
 8008ce2:	7823      	ldrb	r3, [r4, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <SendFrameOnChannel+0x7a>
    {
        JoinRequestTrials++;
 8008ce8:	002a      	movs	r2, r5
 8008cea:	3238      	adds	r2, #56	; 0x38
 8008cec:	7813      	ldrb	r3, [r2, #0]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	7013      	strb	r3, [r2, #0]
    }

    // Send now
    Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <SendFrameOnChannel+0xa8>)
 8008cf4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	b2c9      	uxtb	r1, r1
 8008cfa:	480a      	ldr	r0, [pc, #40]	; (8008d24 <SendFrameOnChannel+0xac>)
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8008d00:	2301      	movs	r3, #1

    return LORAMAC_STATUS_OK;
}
 8008d02:	2000      	movs	r0, #0
    LoRaMacState |= LORAMAC_TX_RUNNING;
 8008d04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d06:	4313      	orrs	r3, r2
 8008d08:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008d0a:	b009      	add	sp, #36	; 0x24
 8008d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	20000e64 	.word	0x20000e64
 8008d14:	20000400 	.word	0x20000400
 8008d18:	20000300 	.word	0x20000300
 8008d1c:	20000380 	.word	0x20000380
 8008d20:	0800cfc4 	.word	0x0800cfc4
 8008d24:	20000680 	.word	0x20000680

08008d28 <ScheduleTx>:
    TimerTime_t dutyCycleTimeOff = 0;
 8008d28:	2300      	movs	r3, #0
{
 8008d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MaxDCycle == 255 )
 8008d2c:	4c4f      	ldr	r4, [pc, #316]	; (8008e6c <ScheduleTx+0x144>)
{
 8008d2e:	b087      	sub	sp, #28
    TimerTime_t dutyCycleTimeOff = 0;
 8008d30:	9302      	str	r3, [sp, #8]
    if( MaxDCycle == 255 )
 8008d32:	7ca3      	ldrb	r3, [r4, #18]
        return LORAMAC_STATUS_DEVICE_OFF;
 8008d34:	2009      	movs	r0, #9
    if( MaxDCycle == 255 )
 8008d36:	2bff      	cmp	r3, #255	; 0xff
 8008d38:	d06f      	beq.n	8008e1a <ScheduleTx+0xf2>
 8008d3a:	4e4d      	ldr	r6, [pc, #308]	; (8008e70 <ScheduleTx+0x148>)
    if( MaxDCycle == 0 )
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d100      	bne.n	8008d42 <ScheduleTx+0x1a>
        AggregatedTimeOff = 0;
 8008d40:	63f3      	str	r3, [r6, #60]	; 0x3c
    calcBackOff.Joined = IsLoRaMacNetworkJoined;
 8008d42:	7822      	ldrb	r2, [r4, #0]
 8008d44:	ad03      	add	r5, sp, #12
 8008d46:	702a      	strb	r2, [r5, #0]
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 8008d48:	4a4a      	ldr	r2, [pc, #296]	; (8008e74 <ScheduleTx+0x14c>)
    CalculateBackOff( LastTxChannel );
 8008d4a:	1ca3      	adds	r3, r4, #2
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 8008d4c:	7812      	ldrb	r2, [r2, #0]
    CalculateBackOff( LastTxChannel );
 8008d4e:	7fdb      	ldrb	r3, [r3, #31]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 8008d50:	6c70      	ldr	r0, [r6, #68]	; 0x44
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 8008d52:	70aa      	strb	r2, [r5, #2]
    calcBackOff.Channel = channel;
 8008d54:	70eb      	strb	r3, [r5, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 8008d56:	f002 fa14 	bl	800b182 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = TxTimeOnAir;
 8008d5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 8008d5c:	4f46      	ldr	r7, [pc, #280]	; (8008e78 <ScheduleTx+0x150>)
    calcBackOff.TxTimeOnAir = TxTimeOnAir;
 8008d5e:	60ab      	str	r3, [r5, #8]
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 8008d60:	003b      	movs	r3, r7
 8008d62:	3368      	adds	r3, #104	; 0x68
 8008d64:	781b      	ldrb	r3, [r3, #0]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 8008d66:	6068      	str	r0, [r5, #4]
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 8008d68:	706b      	strb	r3, [r5, #1]
    RegionCalcBackOff( LoRaMacRegion, &calcBackOff );
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	7fd8      	ldrb	r0, [r3, #31]
 8008d6e:	0029      	movs	r1, r5
 8008d70:	f001 f95d 	bl	800a02e <RegionCalcBackOff>
    AggregatedTimeOff = AggregatedTimeOff + ( TxTimeOnAir * AggregatedDCycle - TxTimeOnAir );
 8008d74:	8aa3      	ldrh	r3, [r4, #20]
 8008d76:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	4353      	muls	r3, r2
 8008d7c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008d7e:	189b      	adds	r3, r3, r2
 8008d80:	63f3      	str	r3, [r6, #60]	; 0x3c
    nextChan.AggrTimeOff = AggregatedTimeOff;
 8008d82:	9303      	str	r3, [sp, #12]
    nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8008d84:	4b3d      	ldr	r3, [pc, #244]	; (8008e7c <ScheduleTx+0x154>)
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	722b      	strb	r3, [r5, #8]
    nextChan.DutyCycleEnabled = DutyCycleOn;
 8008d8a:	4b3a      	ldr	r3, [pc, #232]	; (8008e74 <ScheduleTx+0x14c>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	72ab      	strb	r3, [r5, #10]
    nextChan.Joined = IsLoRaMacNetworkJoined;
 8008d90:	7823      	ldrb	r3, [r4, #0]
 8008d92:	726b      	strb	r3, [r5, #9]
    nextChan.LastAggrTx = AggregatedLastTxDoneTime;
 8008d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d96:	606b      	str	r3, [r5, #4]
    while( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false )
 8008d98:	0022      	movs	r2, r4
 8008d9a:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <ScheduleTx+0x158>)
 8008d9c:	af03      	add	r7, sp, #12
 8008d9e:	1d26      	adds	r6, r4, #4
 8008da0:	7ff0      	ldrb	r0, [r6, #31]
 8008da2:	3220      	adds	r2, #32
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	0039      	movs	r1, r7
 8008da8:	ab02      	add	r3, sp, #8
 8008daa:	f001 f947 	bl	800a03c <RegionNextChannel>
 8008dae:	4d33      	ldr	r5, [pc, #204]	; (8008e7c <ScheduleTx+0x154>)
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d034      	beq.n	8008e1e <ScheduleTx+0xf6>
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate, LoRaMacParams.Rx1DrOffset ),
 8008db4:	0029      	movs	r1, r5
 8008db6:	2201      	movs	r2, #1
 8008db8:	1cab      	adds	r3, r5, #2
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8008dba:	7ff7      	ldrb	r7, [r6, #31]
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate, LoRaMacParams.Rx1DrOffset ),
 8008dbc:	7fdb      	ldrb	r3, [r3, #31]
 8008dbe:	312d      	adds	r1, #45	; 0x2d
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	56aa      	ldrsb	r2, [r5, r2]
 8008dc4:	7809      	ldrb	r1, [r1, #0]
 8008dc6:	0038      	movs	r0, r7
 8008dc8:	f001 f94c 	bl	800a064 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8008dcc:	0023      	movs	r3, r4
 8008dce:	336c      	adds	r3, #108	; 0x6c
 8008dd0:	7a2a      	ldrb	r2, [r5, #8]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	b241      	sxtb	r1, r0
 8008dd6:	686b      	ldr	r3, [r5, #4]
 8008dd8:	0038      	movs	r0, r7
 8008dda:	f001 f8ca 	bl	8009f72 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8008dde:	7ff0      	ldrb	r0, [r6, #31]
 8008de0:	4e25      	ldr	r6, [pc, #148]	; (8008e78 <ScheduleTx+0x150>)
 8008de2:	2128      	movs	r1, #40	; 0x28
 8008de4:	0033      	movs	r3, r6
 8008de6:	332c      	adds	r3, #44	; 0x2c
 8008de8:	7a2a      	ldrb	r2, [r5, #8]
 8008dea:	5669      	ldrsb	r1, [r5, r1]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	686b      	ldr	r3, [r5, #4]
 8008df0:	f001 f8bf 	bl	8009f72 <RegionComputeRxWindowParameters>
    if( IsLoRaMacNetworkJoined == false )
 8008df4:	7823      	ldrb	r3, [r4, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d117      	bne.n	8008e2a <ScheduleTx+0x102>
        RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindow1Config.WindowOffset;
 8008dfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008dfc:	69aa      	ldr	r2, [r5, #24]
 8008dfe:	18d3      	adds	r3, r2, r3
 8008e00:	6633      	str	r3, [r6, #96]	; 0x60
        RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindow2Config.WindowOffset;
 8008e02:	69eb      	ldr	r3, [r5, #28]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 8008e04:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    if( dutyCycleTimeOff == 0 )
 8008e06:	9902      	ldr	r1, [sp, #8]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 8008e08:	189b      	adds	r3, r3, r2
 8008e0a:	6673      	str	r3, [r6, #100]	; 0x64
 8008e0c:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <ScheduleTx+0x144>)
    if( dutyCycleTimeOff == 0 )
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d11d      	bne.n	8008e4e <ScheduleTx+0x126>
        return SendFrameOnChannel( Channel );
 8008e12:	3301      	adds	r3, #1
 8008e14:	7fd8      	ldrb	r0, [r3, #31]
 8008e16:	f7ff ff2f 	bl	8008c78 <SendFrameOnChannel>
}
 8008e1a:	b007      	add	sp, #28
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8008e1e:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <ScheduleTx+0x15c>)
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	b25b      	sxtb	r3, r3
 8008e24:	706b      	strb	r3, [r5, #1]
        nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8008e26:	723b      	strb	r3, [r7, #8]
 8008e28:	e7b6      	b.n	8008d98 <ScheduleTx+0x70>
        if( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false )
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <ScheduleTx+0x148>)
 8008e2e:	7da2      	ldrb	r2, [r4, #22]
 8008e30:	332a      	adds	r3, #42	; 0x2a
 8008e32:	7818      	ldrb	r0, [r3, #0]
 8008e34:	5669      	ldrsb	r1, [r5, r1]
 8008e36:	f7fe ff2b 	bl	8007c90 <ValidatePayloadLength>
 8008e3a:	0003      	movs	r3, r0
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008e3c:	2008      	movs	r0, #8
        if( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false )
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0eb      	beq.n	8008e1a <ScheduleTx+0xf2>
        RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindow1Config.WindowOffset;
 8008e42:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008e44:	692a      	ldr	r2, [r5, #16]
 8008e46:	18d3      	adds	r3, r2, r3
 8008e48:	6633      	str	r3, [r6, #96]	; 0x60
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 8008e4a:	696b      	ldr	r3, [r5, #20]
 8008e4c:	e7da      	b.n	8008e04 <ScheduleTx+0xdc>
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8008e4e:	2210      	movs	r2, #16
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8008e50:	4c07      	ldr	r4, [pc, #28]	; (8008e70 <ScheduleTx+0x148>)
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8008e52:	6b98      	ldr	r0, [r3, #56]	; 0x38
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8008e54:	3448      	adds	r4, #72	; 0x48
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8008e56:	4302      	orrs	r2, r0
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8008e58:	0020      	movs	r0, r4
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8008e5c:	f002 f97a 	bl	800b154 <TimerSetValue>
        TimerStart( &TxDelayedTimer );
 8008e60:	0020      	movs	r0, r4
 8008e62:	f002 f8d9 	bl	800b018 <TimerStart>
        return LORAMAC_STATUS_OK;
 8008e66:	2000      	movs	r0, #0
 8008e68:	e7d7      	b.n	8008e1a <ScheduleTx+0xf2>
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	20000300 	.word	0x20000300
 8008e70:	20000400 	.word	0x20000400
 8008e74:	20000440 	.word	0x20000440
 8008e78:	20000380 	.word	0x20000380
 8008e7c:	20000e64 	.word	0x20000e64
 8008e80:	2000043c 	.word	0x2000043c
 8008e84:	20000e2c 	.word	0x20000e2c

08008e88 <Send>:
{
 8008e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8008e8a:	4c0d      	ldr	r4, [pc, #52]	; (8008ec0 <Send+0x38>)
{
 8008e8c:	000e      	movs	r6, r1
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8008e8e:	0025      	movs	r5, r4
 8008e90:	3570      	adds	r5, #112	; 0x70
 8008e92:	782d      	ldrb	r5, [r5, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8008e94:	a903      	add	r1, sp, #12
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8008e96:	01ed      	lsls	r5, r5, #7
 8008e98:	700d      	strb	r5, [r1, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	0013      	movs	r3, r2
 8008e9e:	0032      	movs	r2, r6
 8008ea0:	f7ff fd52 	bl	8008948 <PrepareFrame>
    if( status != LORAMAC_STATUS_OK )
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d108      	bne.n	8008eba <Send+0x32>
    McpsConfirm.NbRetries = 0;
 8008ea8:	0023      	movs	r3, r4
 8008eaa:	3340      	adds	r3, #64	; 0x40
 8008eac:	7158      	strb	r0, [r3, #5]
    McpsConfirm.AckReceived = false;
 8008eae:	7118      	strb	r0, [r3, #4]
    McpsConfirm.UpLinkCounter = UpLinkCounter;
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <Send+0x3c>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	64e3      	str	r3, [r4, #76]	; 0x4c
    status = ScheduleTx( );
 8008eb6:	f7ff ff37 	bl	8008d28 <ScheduleTx>
}
 8008eba:	b004      	add	sp, #16
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	20000380 	.word	0x20000380
 8008ec4:	20000300 	.word	0x20000300

08008ec8 <OnTxDelayedTimerEvent>:
{
 8008ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    TimerStop( &TxDelayedTimer );
 8008eca:	4f19      	ldr	r7, [pc, #100]	; (8008f30 <OnTxDelayedTimerEvent+0x68>)
{
 8008ecc:	b087      	sub	sp, #28
    TimerStop( &TxDelayedTimer );
 8008ece:	0038      	movs	r0, r7
 8008ed0:	3048      	adds	r0, #72	; 0x48
 8008ed2:	f002 f913 	bl	800b0fc <TimerStop>
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	4d16      	ldr	r5, [pc, #88]	; (8008f34 <OnTxDelayedTimerEvent+0x6c>)
 8008eda:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008edc:	439a      	bics	r2, r3
    if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 8008ede:	4b16      	ldr	r3, [pc, #88]	; (8008f38 <OnTxDelayedTimerEvent+0x70>)
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8008ee0:	63aa      	str	r2, [r5, #56]	; 0x38
    if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	071b      	lsls	r3, r3, #28
 8008ee6:	d51e      	bpl.n	8008f26 <OnTxDelayedTimerEvent+0x5e>
 8008ee8:	4e14      	ldr	r6, [pc, #80]	; (8008f3c <OnTxDelayedTimerEvent+0x74>)
 8008eea:	0033      	movs	r3, r6
 8008eec:	3354      	adds	r3, #84	; 0x54
 8008eee:	781c      	ldrb	r4, [r3, #0]
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	d118      	bne.n	8008f26 <OnTxDelayedTimerEvent+0x5e>
        altDr.NbTrials = JoinRequestTrials + 1;
 8008ef4:	3738      	adds	r7, #56	; 0x38
        ResetMacParameters( );
 8008ef6:	f7fe fe83 	bl	8007c00 <ResetMacParameters>
        altDr.NbTrials = JoinRequestTrials + 1;
 8008efa:	783b      	ldrb	r3, [r7, #0]
        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8008efc:	3504      	adds	r5, #4
        altDr.NbTrials = JoinRequestTrials + 1;
 8008efe:	a905      	add	r1, sp, #20
 8008f00:	3301      	adds	r3, #1
        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8008f02:	7fe8      	ldrb	r0, [r5, #31]
        altDr.NbTrials = JoinRequestTrials + 1;
 8008f04:	800b      	strh	r3, [r1, #0]
        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8008f06:	f001 f889 	bl	800a01c <RegionAlternateDr>
 8008f0a:	4b0d      	ldr	r3, [pc, #52]	; (8008f40 <OnTxDelayedTimerEvent+0x78>)
        fCtrl.Bits.Adr = AdrCtrlOn;
 8008f0c:	3670      	adds	r6, #112	; 0x70
        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8008f0e:	7058      	strb	r0, [r3, #1]
        fCtrl.Bits.Adr = AdrCtrlOn;
 8008f10:	7833      	ldrb	r3, [r6, #0]
        macHdr.Value = 0;
 8008f12:	a803      	add	r0, sp, #12
        fCtrl.Bits.Adr = AdrCtrlOn;
 8008f14:	01db      	lsls	r3, r3, #7
        fCtrl.Value = 0;
 8008f16:	a904      	add	r1, sp, #16
        macHdr.Value = 0;
 8008f18:	7004      	strb	r4, [r0, #0]
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 8008f1a:	0022      	movs	r2, r4
        fCtrl.Bits.Adr = AdrCtrlOn;
 8008f1c:	700b      	strb	r3, [r1, #0]
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 8008f1e:	9400      	str	r4, [sp, #0]
 8008f20:	0023      	movs	r3, r4
 8008f22:	f7ff fd11 	bl	8008948 <PrepareFrame>
    ScheduleTx( );
 8008f26:	f7ff feff 	bl	8008d28 <ScheduleTx>
}
 8008f2a:	b007      	add	sp, #28
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	20000400 	.word	0x20000400
 8008f34:	20000300 	.word	0x20000300
 8008f38:	20000e28 	.word	0x20000e28
 8008f3c:	20000380 	.word	0x20000380
 8008f40:	20000e64 	.word	0x20000e64

08008f44 <OnMacStateCheckTimerEvent>:
{
 8008f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &MacStateCheckTimer );
 8008f46:	4c9b      	ldr	r4, [pc, #620]	; (80091b4 <OnMacStateCheckTimerEvent+0x270>)
 8008f48:	0020      	movs	r0, r4
 8008f4a:	3040      	adds	r0, #64	; 0x40
 8008f4c:	f002 f8d6 	bl	800b0fc <TimerStop>
    if( LoRaMacFlags.Bits.MacDone == 1 )
 8008f50:	4d99      	ldr	r5, [pc, #612]	; (80091b8 <OnMacStateCheckTimerEvent+0x274>)
 8008f52:	782b      	ldrb	r3, [r5, #0]
 8008f54:	06da      	lsls	r2, r3, #27
 8008f56:	d400      	bmi.n	8008f5a <OnMacStateCheckTimerEvent+0x16>
 8008f58:	e098      	b.n	800908c <OnMacStateCheckTimerEvent+0x148>
        if( ( LoRaMacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008f5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f5c:	0651      	lsls	r1, r2, #25
 8008f5e:	d502      	bpl.n	8008f66 <OnMacStateCheckTimerEvent+0x22>
            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008f60:	2141      	movs	r1, #65	; 0x41
 8008f62:	438a      	bics	r2, r1
 8008f64:	63a2      	str	r2, [r4, #56]	; 0x38
        if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
 8008f66:	2109      	movs	r1, #9
    bool txTimeout = false;
 8008f68:	2200      	movs	r2, #0
        if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
 8008f6a:	4019      	ands	r1, r3
 8008f6c:	4291      	cmp	r1, r2
 8008f6e:	d018      	beq.n	8008fa2 <OnMacStateCheckTimerEvent+0x5e>
            if( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8008f70:	4892      	ldr	r0, [pc, #584]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 8008f72:	0006      	movs	r6, r0
 8008f74:	3640      	adds	r6, #64	; 0x40
 8008f76:	7876      	ldrb	r6, [r6, #1]
 8008f78:	2e02      	cmp	r6, #2
 8008f7a:	d004      	beq.n	8008f86 <OnMacStateCheckTimerEvent+0x42>
                ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 8008f7c:	0006      	movs	r6, r0
 8008f7e:	3654      	adds	r6, #84	; 0x54
            if( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8008f80:	7876      	ldrb	r6, [r6, #1]
 8008f82:	2e02      	cmp	r6, #2
 8008f84:	d10d      	bne.n	8008fa2 <OnMacStateCheckTimerEvent+0x5e>
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008f86:	2201      	movs	r2, #1
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8008f88:	0007      	movs	r7, r0
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008f8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8008f8c:	3740      	adds	r7, #64	; 0x40
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008f8e:	4396      	bics	r6, r2
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8008f90:	4a8b      	ldr	r2, [pc, #556]	; (80091c0 <OnMacStateCheckTimerEvent+0x27c>)
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008f92:	63a6      	str	r6, [r4, #56]	; 0x38
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8008f94:	7852      	ldrb	r2, [r2, #1]
                MacCommandsBufferIndex = 0;
 8008f96:	2600      	movs	r6, #0
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8008f98:	717a      	strb	r2, [r7, #5]
                txTimeout = true;
 8008f9a:	2201      	movs	r2, #1
                MacCommandsBufferIndex = 0;
 8008f9c:	75a6      	strb	r6, [r4, #22]
                McpsConfirm.AckReceived = false;
 8008f9e:	713e      	strb	r6, [r7, #4]
                McpsConfirm.TxTimeOnAir = 0;
 8008fa0:	6486      	str	r6, [r0, #72]	; 0x48
        if( ( NodeAckRequested == false ) && ( txTimeout == false ) )
 8008fa2:	7e20      	ldrb	r0, [r4, #24]
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d125      	bne.n	8008ff4 <OnMacStateCheckTimerEvent+0xb0>
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d123      	bne.n	8008ff4 <OnMacStateCheckTimerEvent+0xb0>
            if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d021      	beq.n	8008ff4 <OnMacStateCheckTimerEvent+0xb0>
                if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 8008fb0:	0719      	lsls	r1, r3, #28
 8008fb2:	d400      	bmi.n	8008fb6 <OnMacStateCheckTimerEvent+0x72>
 8008fb4:	e0a8      	b.n	8009108 <OnMacStateCheckTimerEvent+0x1c4>
 8008fb6:	4981      	ldr	r1, [pc, #516]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 8008fb8:	3154      	adds	r1, #84	; 0x54
 8008fba:	7808      	ldrb	r0, [r1, #0]
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d000      	beq.n	8008fc2 <OnMacStateCheckTimerEvent+0x7e>
 8008fc0:	e0a2      	b.n	8009108 <OnMacStateCheckTimerEvent+0x1c4>
                    MlmeConfirm.NbRetries = JoinRequestTrials;
 8008fc2:	4b80      	ldr	r3, [pc, #512]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	3038      	adds	r0, #56	; 0x38
 8008fc8:	7800      	ldrb	r0, [r0, #0]
 8008fca:	7288      	strb	r0, [r1, #10]
                    if( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008fcc:	7849      	ldrb	r1, [r1, #1]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d106      	bne.n	8008fe0 <OnMacStateCheckTimerEvent+0x9c>
                        UpLinkCounter = 0;
 8008fd2:	6062      	str	r2, [r4, #4]
                        ChannelsNbRepCounter = 0;
 8008fd4:	7422      	strb	r2, [r4, #16]
                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fda:	439a      	bics	r2, r3
 8008fdc:	63a2      	str	r2, [r4, #56]	; 0x38
 8008fde:	e009      	b.n	8008ff4 <OnMacStateCheckTimerEvent+0xb0>
                        if( JoinRequestTrials >= MaxJoinRequestTrials )
 8008fe0:	335c      	adds	r3, #92	; 0x5c
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4283      	cmp	r3, r0
 8008fe6:	d9f6      	bls.n	8008fd6 <OnMacStateCheckTimerEvent+0x92>
                            LoRaMacFlags.Bits.MacDone = 0;
 8008fe8:	2210      	movs	r2, #16
 8008fea:	782b      	ldrb	r3, [r5, #0]
 8008fec:	4393      	bics	r3, r2
 8008fee:	702b      	strb	r3, [r5, #0]
                            OnTxDelayedTimerEvent( );
 8008ff0:	f7ff ff6a 	bl	8008ec8 <OnTxDelayedTimerEvent>
        if( LoRaMacFlags.Bits.McpsInd == 1 )
 8008ff4:	782b      	ldrb	r3, [r5, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	d51b      	bpl.n	8009032 <OnMacStateCheckTimerEvent+0xee>
            if( ( McpsConfirm.AckReceived == true ) || ( AckTimeoutRetriesCounter > AckTimeoutRetries ) )
 8008ffa:	4b70      	ldr	r3, [pc, #448]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 8008ffc:	4a70      	ldr	r2, [pc, #448]	; (80091c0 <OnMacStateCheckTimerEvent+0x27c>)
 8008ffe:	0018      	movs	r0, r3
 8009000:	3040      	adds	r0, #64	; 0x40
 8009002:	7900      	ldrb	r0, [r0, #4]
 8009004:	7851      	ldrb	r1, [r2, #1]
 8009006:	2800      	cmp	r0, #0
 8009008:	d102      	bne.n	8009010 <OnMacStateCheckTimerEvent+0xcc>
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	428a      	cmp	r2, r1
 800900e:	d210      	bcs.n	8009032 <OnMacStateCheckTimerEvent+0xee>
                AckTimeoutRetry = false;
 8009010:	2200      	movs	r2, #0
 8009012:	7462      	strb	r2, [r4, #17]
                NodeAckRequested = false;
 8009014:	7622      	strb	r2, [r4, #24]
                if( IsUpLinkCounterFixed == false )
 8009016:	4a6b      	ldr	r2, [pc, #428]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 8009018:	325d      	adds	r2, #93	; 0x5d
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	2a00      	cmp	r2, #0
 800901e:	d102      	bne.n	8009026 <OnMacStateCheckTimerEvent+0xe2>
                    UpLinkCounter++;
 8009020:	6862      	ldr	r2, [r4, #4]
 8009022:	3201      	adds	r2, #1
 8009024:	6062      	str	r2, [r4, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8009026:	3340      	adds	r3, #64	; 0x40
 8009028:	7159      	strb	r1, [r3, #5]
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800902a:	2301      	movs	r3, #1
 800902c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800902e:	439a      	bics	r2, r3
 8009030:	63a2      	str	r2, [r4, #56]	; 0x38
        if( ( AckTimeoutRetry == true ) && ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == 0 ) )
 8009032:	7c63      	ldrb	r3, [r4, #17]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d029      	beq.n	800908c <OnMacStateCheckTimerEvent+0x148>
 8009038:	2310      	movs	r3, #16
 800903a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800903c:	4013      	ands	r3, r2
 800903e:	d125      	bne.n	800908c <OnMacStateCheckTimerEvent+0x148>
            if( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 8009040:	4e5f      	ldr	r6, [pc, #380]	; (80091c0 <OnMacStateCheckTimerEvent+0x27c>)
            AckTimeoutRetry = false;
 8009042:	7463      	strb	r3, [r4, #17]
            if( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 8009044:	7832      	ldrb	r2, [r6, #0]
 8009046:	7873      	ldrb	r3, [r6, #1]
 8009048:	429a      	cmp	r2, r3
 800904a:	d800      	bhi.n	800904e <OnMacStateCheckTimerEvent+0x10a>
 800904c:	e095      	b.n	800917a <OnMacStateCheckTimerEvent+0x236>
 800904e:	2b08      	cmp	r3, #8
 8009050:	d900      	bls.n	8009054 <OnMacStateCheckTimerEvent+0x110>
 8009052:	e092      	b.n	800917a <OnMacStateCheckTimerEvent+0x236>
                AckTimeoutRetriesCounter++;
 8009054:	3301      	adds	r3, #1
 8009056:	b2db      	uxtb	r3, r3
 8009058:	7073      	strb	r3, [r6, #1]
                if( ( AckTimeoutRetriesCounter % 2 ) == 1 )
 800905a:	07db      	lsls	r3, r3, #31
 800905c:	d50e      	bpl.n	800907c <OnMacStateCheckTimerEvent+0x138>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800905e:	2320      	movs	r3, #32
                    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009060:	4f59      	ldr	r7, [pc, #356]	; (80091c8 <OnMacStateCheckTimerEvent+0x284>)
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009062:	a901      	add	r1, sp, #4
 8009064:	700b      	strb	r3, [r1, #0]
                    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009066:	003b      	movs	r3, r7
 8009068:	332c      	adds	r3, #44	; 0x2c
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	708b      	strb	r3, [r1, #2]
                    getPhy.Datarate = LoRaMacParams.ChannelsDatarate;
 800906e:	787b      	ldrb	r3, [r7, #1]
 8009070:	704b      	strb	r3, [r1, #1]
                    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009072:	1d23      	adds	r3, r4, #4
 8009074:	7fd8      	ldrb	r0, [r3, #31]
 8009076:	f000 ff3d 	bl	8009ef4 <RegionGetPhyParam>
                    LoRaMacParams.ChannelsDatarate = phyParam.Value;
 800907a:	7078      	strb	r0, [r7, #1]
                if( ScheduleTx( ) == LORAMAC_STATUS_OK )
 800907c:	f7ff fe54 	bl	8008d28 <ScheduleTx>
 8009080:	2800      	cmp	r0, #0
 8009082:	d15f      	bne.n	8009144 <OnMacStateCheckTimerEvent+0x200>
                    LoRaMacFlags.Bits.MacDone = 0;
 8009084:	2210      	movs	r2, #16
 8009086:	782b      	ldrb	r3, [r5, #0]
 8009088:	4393      	bics	r3, r2
 800908a:	702b      	strb	r3, [r5, #0]
    if( ( LoRaMacState & LORAMAC_RX ) == LORAMAC_RX )
 800908c:	2202      	movs	r2, #2
 800908e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009090:	4213      	tst	r3, r2
 8009092:	d001      	beq.n	8009098 <OnMacStateCheckTimerEvent+0x154>
        LoRaMacState &= ~LORAMAC_RX;
 8009094:	4393      	bics	r3, r2
 8009096:	63a3      	str	r3, [r4, #56]	; 0x38
    if( LoRaMacState == LORAMAC_IDLE )
 8009098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d000      	beq.n	80090a0 <OnMacStateCheckTimerEvent+0x15c>
 800909e:	e07e      	b.n	800919e <OnMacStateCheckTimerEvent+0x25a>
        if( LoRaMacFlags.Bits.McpsReq == 1 )
 80090a0:	2601      	movs	r6, #1
 80090a2:	782b      	ldrb	r3, [r5, #0]
 80090a4:	4233      	tst	r3, r6
 80090a6:	d008      	beq.n	80090ba <OnMacStateCheckTimerEvent+0x176>
            LoRaMacPrimitives->MacMcpsConfirm( &McpsConfirm );
 80090a8:	4b46      	ldr	r3, [pc, #280]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 80090aa:	4844      	ldr	r0, [pc, #272]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	3040      	adds	r0, #64	; 0x40
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4798      	blx	r3
            LoRaMacFlags.Bits.McpsReq = 0;
 80090b4:	782b      	ldrb	r3, [r5, #0]
 80090b6:	43b3      	bics	r3, r6
 80090b8:	702b      	strb	r3, [r5, #0]
        if( LoRaMacFlags.Bits.MlmeReq == 1 )
 80090ba:	2608      	movs	r6, #8
 80090bc:	782b      	ldrb	r3, [r5, #0]
 80090be:	4233      	tst	r3, r6
 80090c0:	d008      	beq.n	80090d4 <OnMacStateCheckTimerEvent+0x190>
            LoRaMacPrimitives->MacMlmeConfirm( &MlmeConfirm );
 80090c2:	4b40      	ldr	r3, [pc, #256]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 80090c4:	483d      	ldr	r0, [pc, #244]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 80090c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c8:	3054      	adds	r0, #84	; 0x54
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeReq = 0;
 80090ce:	782b      	ldrb	r3, [r5, #0]
 80090d0:	43b3      	bics	r3, r6
 80090d2:	702b      	strb	r3, [r5, #0]
        LoRaMacFlags.Bits.MacDone = 0;
 80090d4:	2210      	movs	r2, #16
 80090d6:	782b      	ldrb	r3, [r5, #0]
 80090d8:	4393      	bics	r3, r2
 80090da:	702b      	strb	r3, [r5, #0]
    if( LoRaMacFlags.Bits.McpsInd == 1 )
 80090dc:	782b      	ldrb	r3, [r5, #0]
 80090de:	079b      	lsls	r3, r3, #30
 80090e0:	d511      	bpl.n	8009106 <OnMacStateCheckTimerEvent+0x1c2>
        if( LoRaMacDeviceClass == CLASS_C )
 80090e2:	343c      	adds	r4, #60	; 0x3c
 80090e4:	7823      	ldrb	r3, [r4, #0]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d101      	bne.n	80090ee <OnMacStateCheckTimerEvent+0x1aa>
            OnRxWindow2TimerEvent( );
 80090ea:	f7fe fe7b 	bl	8007de4 <OnRxWindow2TimerEvent>
        if( LoRaMacFlags.Bits.McpsIndSkip == 0 )
 80090ee:	782b      	ldrb	r3, [r5, #0]
 80090f0:	075b      	lsls	r3, r3, #29
 80090f2:	d404      	bmi.n	80090fe <OnMacStateCheckTimerEvent+0x1ba>
            LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
 80090f4:	4b33      	ldr	r3, [pc, #204]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 80090f6:	4831      	ldr	r0, [pc, #196]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
 80090f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	4798      	blx	r3
        LoRaMacFlags.Bits.McpsInd = 0;
 80090fe:	22f9      	movs	r2, #249	; 0xf9
        LoRaMacFlags.Bits.McpsIndSkip = 0;
 8009100:	782b      	ldrb	r3, [r5, #0]
        LoRaMacFlags.Bits.McpsInd = 0;
 8009102:	4013      	ands	r3, r2
 8009104:	702b      	strb	r3, [r5, #0]
}
 8009106:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009108:	2202      	movs	r2, #2
 800910a:	4013      	ands	r3, r2
                    if( ( ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep ) || ( LoRaMacFlags.Bits.McpsInd == 1 ) )
 800910c:	4a2e      	ldr	r2, [pc, #184]	; (80091c8 <OnMacStateCheckTimerEvent+0x284>)
 800910e:	3201      	adds	r2, #1
 8009110:	7fd1      	ldrb	r1, [r2, #31]
 8009112:	7c22      	ldrb	r2, [r4, #16]
 8009114:	4291      	cmp	r1, r2
 8009116:	d90e      	bls.n	8009136 <OnMacStateCheckTimerEvent+0x1f2>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d100      	bne.n	800911e <OnMacStateCheckTimerEvent+0x1da>
 800911c:	e764      	b.n	8008fe8 <OnMacStateCheckTimerEvent+0xa4>
                        ChannelsNbRepCounter = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	7423      	strb	r3, [r4, #16]
                        if( IsUpLinkCounterFixed == false )
 8009122:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 8009124:	335d      	adds	r3, #93	; 0x5d
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d000      	beq.n	800912e <OnMacStateCheckTimerEvent+0x1ea>
 800912c:	e753      	b.n	8008fd6 <OnMacStateCheckTimerEvent+0x92>
                            UpLinkCounter++;
 800912e:	6863      	ldr	r3, [r4, #4]
 8009130:	3301      	adds	r3, #1
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	e74f      	b.n	8008fd6 <OnMacStateCheckTimerEvent+0x92>
                        if( LoRaMacFlags.Bits.McpsInd == 0 )
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f1      	bne.n	800911e <OnMacStateCheckTimerEvent+0x1da>
                            MacCommandsBufferIndex = 0;
 800913a:	75a3      	strb	r3, [r4, #22]
                            AdrAckCounter++;
 800913c:	68e3      	ldr	r3, [r4, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60e3      	str	r3, [r4, #12]
 8009142:	e7ec      	b.n	800911e <OnMacStateCheckTimerEvent+0x1da>
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009144:	2209      	movs	r2, #9
 8009146:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8009148:	2101      	movs	r1, #1
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800914a:	3340      	adds	r3, #64	; 0x40
 800914c:	705a      	strb	r2, [r3, #1]
                    MacCommandsBufferIndex = 0;
 800914e:	2200      	movs	r2, #0
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8009150:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                    MacCommandsBufferIndex = 0;
 8009152:	75a2      	strb	r2, [r4, #22]
                    NodeAckRequested = false;
 8009154:	7622      	strb	r2, [r4, #24]
                    McpsConfirm.AckReceived = false;
 8009156:	711a      	strb	r2, [r3, #4]
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8009158:	7872      	ldrb	r2, [r6, #1]
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800915a:	4388      	bics	r0, r1
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800915c:	715a      	strb	r2, [r3, #5]
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800915e:	4a1a      	ldr	r2, [pc, #104]	; (80091c8 <OnMacStateCheckTimerEvent+0x284>)
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8009160:	63a0      	str	r0, [r4, #56]	; 0x38
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	709a      	strb	r2, [r3, #2]
                if( IsUpLinkCounterFixed == false )
 8009166:	4b17      	ldr	r3, [pc, #92]	; (80091c4 <OnMacStateCheckTimerEvent+0x280>)
 8009168:	335d      	adds	r3, #93	; 0x5d
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d000      	beq.n	8009172 <OnMacStateCheckTimerEvent+0x22e>
 8009170:	e78c      	b.n	800908c <OnMacStateCheckTimerEvent+0x148>
                    UpLinkCounter++;
 8009172:	6863      	ldr	r3, [r4, #4]
 8009174:	3301      	adds	r3, #1
 8009176:	6063      	str	r3, [r4, #4]
 8009178:	e788      	b.n	800908c <OnMacStateCheckTimerEvent+0x148>
                RegionInitDefaults( LoRaMacRegion, INIT_TYPE_RESTORE );
 800917a:	1d23      	adds	r3, r4, #4
 800917c:	7fd8      	ldrb	r0, [r3, #31]
 800917e:	2101      	movs	r1, #1
 8009180:	f000 fec8 	bl	8009f14 <RegionInitDefaults>
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8009184:	2301      	movs	r3, #1
 8009186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009188:	439a      	bics	r2, r3
 800918a:	63a2      	str	r2, [r4, #56]	; 0x38
                MacCommandsBufferIndex = 0;
 800918c:	2200      	movs	r2, #0
                McpsConfirm.AckReceived = false;
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <OnMacStateCheckTimerEvent+0x278>)
                MacCommandsBufferIndex = 0;
 8009190:	75a2      	strb	r2, [r4, #22]
                McpsConfirm.AckReceived = false;
 8009192:	3340      	adds	r3, #64	; 0x40
                NodeAckRequested = false;
 8009194:	7622      	strb	r2, [r4, #24]
                McpsConfirm.AckReceived = false;
 8009196:	711a      	strb	r2, [r3, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8009198:	7872      	ldrb	r2, [r6, #1]
 800919a:	715a      	strb	r2, [r3, #5]
 800919c:	e7e3      	b.n	8009166 <OnMacStateCheckTimerEvent+0x222>
        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 800919e:	0026      	movs	r6, r4
 80091a0:	21fa      	movs	r1, #250	; 0xfa
 80091a2:	3640      	adds	r6, #64	; 0x40
 80091a4:	0030      	movs	r0, r6
 80091a6:	0089      	lsls	r1, r1, #2
 80091a8:	f001 ffd4 	bl	800b154 <TimerSetValue>
        TimerStart( &MacStateCheckTimer );
 80091ac:	0030      	movs	r0, r6
 80091ae:	f001 ff33 	bl	800b018 <TimerStart>
 80091b2:	e793      	b.n	80090dc <OnMacStateCheckTimerEvent+0x198>
 80091b4:	20000300 	.word	0x20000300
 80091b8:	20000e28 	.word	0x20000e28
 80091bc:	20000380 	.word	0x20000380
 80091c0:	20000060 	.word	0x20000060
 80091c4:	20000400 	.word	0x20000400
 80091c8:	20000e64 	.word	0x20000e64

080091cc <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80091cc:	b530      	push	{r4, r5, lr}
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = Channel;
 80091ce:	4c13      	ldr	r4, [pc, #76]	; (800921c <SetTxContinuousWave+0x50>)
{
 80091d0:	b087      	sub	sp, #28
    continuousWave.Channel = Channel;
 80091d2:	1c63      	adds	r3, r4, #1
 80091d4:	7fdb      	ldrb	r3, [r3, #31]
 80091d6:	aa02      	add	r2, sp, #8
 80091d8:	7013      	strb	r3, [r2, #0]
    continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 80091da:	4b11      	ldr	r3, [pc, #68]	; (8009220 <SetTxContinuousWave+0x54>)
 80091dc:	a902      	add	r1, sp, #8
 80091de:	785a      	ldrb	r2, [r3, #1]
    continuousWave.Timeout = timeout;

    RegionSetContinuousWave( LoRaMacRegion, &continuousWave );

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80091e0:	0025      	movs	r5, r4
    continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 80091e2:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 80091e4:	781a      	ldrb	r2, [r3, #0]
    continuousWave.Timeout = timeout;
 80091e6:	8188      	strh	r0, [r1, #12]
    continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 80091e8:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 80091ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 80091ee:	9203      	str	r2, [sp, #12]
    continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	9304      	str	r3, [sp, #16]
    RegionSetContinuousWave( LoRaMacRegion, &continuousWave );
 80091f4:	1d23      	adds	r3, r4, #4
 80091f6:	7fd8      	ldrb	r0, [r3, #31]
 80091f8:	f000 ff2d 	bl	800a056 <RegionSetContinuousWave>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80091fc:	21fa      	movs	r1, #250	; 0xfa
 80091fe:	3540      	adds	r5, #64	; 0x40
 8009200:	0089      	lsls	r1, r1, #2
 8009202:	0028      	movs	r0, r5
 8009204:	f001 ffa6 	bl	800b154 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8009208:	0028      	movs	r0, r5
 800920a:	f001 ff05 	bl	800b018 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 800920e:	2301      	movs	r3, #1

    return LORAMAC_STATUS_OK;
}
 8009210:	2000      	movs	r0, #0
    LoRaMacState |= LORAMAC_TX_RUNNING;
 8009212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009214:	4313      	orrs	r3, r2
 8009216:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009218:	b007      	add	sp, #28
 800921a:	bd30      	pop	{r4, r5, pc}
 800921c:	20000300 	.word	0x20000300
 8009220:	20000e64 	.word	0x20000e64

08009224 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	0004      	movs	r4, r0
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <SetTxContinuousWave1+0x34>)
{
 800922a:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800922c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922e:	b251      	sxtb	r1, r2
 8009230:	0022      	movs	r2, r4
 8009232:	4798      	blx	r3

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8009234:	4c09      	ldr	r4, [pc, #36]	; (800925c <SetTxContinuousWave1+0x38>)
 8009236:	21fa      	movs	r1, #250	; 0xfa
 8009238:	0025      	movs	r5, r4
 800923a:	3540      	adds	r5, #64	; 0x40
 800923c:	0028      	movs	r0, r5
 800923e:	0089      	lsls	r1, r1, #2
 8009240:	f001 ff88 	bl	800b154 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8009244:	0028      	movs	r0, r5
 8009246:	f001 fee7 	bl	800b018 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 800924a:	2301      	movs	r3, #1
 800924c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

    return LORAMAC_STATUS_OK;
}
 800924e:	2000      	movs	r0, #0
    LoRaMacState |= LORAMAC_TX_RUNNING;
 8009250:	4313      	orrs	r3, r2
 8009252:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009254:	bd70      	pop	{r4, r5, r6, pc}
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	0800cfc4 	.word	0x0800cfc4
 800925c:	20000300 	.word	0x20000300

08009260 <LoRaMacInitialization>:
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( primitives == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009260:	2303      	movs	r3, #3
{
 8009262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009264:	b085      	sub	sp, #20
 8009266:	0004      	movs	r4, r0
 8009268:	000e      	movs	r6, r1
 800926a:	0015      	movs	r5, r2
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800926c:	9301      	str	r3, [sp, #4]
    if( primitives == NULL )
 800926e:	2800      	cmp	r0, #0
 8009270:	d100      	bne.n	8009274 <LoRaMacInitialization+0x14>
 8009272:	e105      	b.n	8009480 <LoRaMacInitialization+0x220>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009274:	6803      	ldr	r3, [r0, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d100      	bne.n	800927c <LoRaMacInitialization+0x1c>
 800927a:	e101      	b.n	8009480 <LoRaMacInitialization+0x220>
 800927c:	6843      	ldr	r3, [r0, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d100      	bne.n	8009284 <LoRaMacInitialization+0x24>
 8009282:	e0fd      	b.n	8009480 <LoRaMacInitialization+0x220>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009284:	6883      	ldr	r3, [r0, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d100      	bne.n	800928c <LoRaMacInitialization+0x2c>
 800928a:	e0f9      	b.n	8009480 <LoRaMacInitialization+0x220>
        ( primitives->MacMlmeConfirm == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800928c:	0010      	movs	r0, r2
 800928e:	f000 fe2d 	bl	8009eec <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009292:	230a      	movs	r3, #10
 8009294:	9301      	str	r3, [sp, #4]
    if( RegionIsActive( region ) == false )
 8009296:	2800      	cmp	r0, #0
 8009298:	d100      	bne.n	800929c <LoRaMacInitialization+0x3c>
 800929a:	e0f1      	b.n	8009480 <LoRaMacInitialization+0x220>

    LoRaMacPrimitives = primitives;
    LoRaMacCallbacks = callbacks;
    LoRaMacRegion = region;

    LoRaMacFlags.Value = 0;
 800929c:	2200      	movs	r2, #0
    LoRaMacCallbacks = callbacks;
 800929e:	4b7a      	ldr	r3, [pc, #488]	; (8009488 <LoRaMacInitialization+0x228>)
    LoRaMacPrimitives = primitives;
 80092a0:	4f7a      	ldr	r7, [pc, #488]	; (800948c <LoRaMacInitialization+0x22c>)
    LoRaMacCallbacks = callbacks;
 80092a2:	675e      	str	r6, [r3, #116]	; 0x74
    LoRaMacRegion = region;
 80092a4:	4b7a      	ldr	r3, [pc, #488]	; (8009490 <LoRaMacInitialization+0x230>)

    LoRaMacDeviceClass = CLASS_A;
    LoRaMacState = LORAMAC_IDLE;

    JoinRequestTrials = 0;
    MaxJoinRequestTrials = 1;
 80092a6:	2101      	movs	r1, #1
    LoRaMacRegion = region;
 80092a8:	1d1e      	adds	r6, r3, #4
    LoRaMacFlags.Value = 0;
 80092aa:	4b7a      	ldr	r3, [pc, #488]	; (8009494 <LoRaMacInitialization+0x234>)
    LoRaMacPrimitives = primitives;
 80092ac:	663c      	str	r4, [r7, #96]	; 0x60
    LoRaMacFlags.Value = 0;
 80092ae:	701a      	strb	r2, [r3, #0]
    LoRaMacDeviceClass = CLASS_A;
 80092b0:	4b77      	ldr	r3, [pc, #476]	; (8009490 <LoRaMacInitialization+0x230>)
    // Reset duty cycle times
    AggregatedLastTxDoneTime = 0;
    AggregatedTimeOff = 0;

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80092b2:	ac03      	add	r4, sp, #12
    LoRaMacDeviceClass = CLASS_A;
 80092b4:	333c      	adds	r3, #60	; 0x3c
 80092b6:	701a      	strb	r2, [r3, #0]
    LoRaMacState = LORAMAC_IDLE;
 80092b8:	4b75      	ldr	r3, [pc, #468]	; (8009490 <LoRaMacInitialization+0x230>)
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092ba:	0028      	movs	r0, r5
    LoRaMacState = LORAMAC_IDLE;
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38
    JoinRequestTrials = 0;
 80092be:	003b      	movs	r3, r7
 80092c0:	3338      	adds	r3, #56	; 0x38
 80092c2:	701a      	strb	r2, [r3, #0]
    MaxJoinRequestTrials = 1;
 80092c4:	003b      	movs	r3, r7
 80092c6:	335c      	adds	r3, #92	; 0x5c
 80092c8:	7019      	strb	r1, [r3, #0]
    RepeaterSupport = false;
 80092ca:	4b71      	ldr	r3, [pc, #452]	; (8009490 <LoRaMacInitialization+0x230>)
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092cc:	0021      	movs	r1, r4
    RepeaterSupport = false;
 80092ce:	3303      	adds	r3, #3
 80092d0:	77da      	strb	r2, [r3, #31]
    AggregatedLastTxDoneTime = 0;
 80092d2:	4b6d      	ldr	r3, [pc, #436]	; (8009488 <LoRaMacInitialization+0x228>)
    AggregatedTimeOff = 0;
 80092d4:	63fa      	str	r2, [r7, #60]	; 0x3c
    AggregatedLastTxDoneTime = 0;
 80092d6:	66da      	str	r2, [r3, #108]	; 0x6c
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80092d8:	230b      	movs	r3, #11
    LoRaMacRegion = region;
 80092da:	77f5      	strb	r5, [r6, #31]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80092dc:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092de:	f000 fe09 	bl	8009ef4 <RegionGetPhyParam>
    DutyCycleOn = ( bool ) phyParam.Value;
 80092e2:	003b      	movs	r3, r7
 80092e4:	1e42      	subs	r2, r0, #1
 80092e6:	4190      	sbcs	r0, r2
 80092e8:	3340      	adds	r3, #64	; 0x40
 80092ea:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80092ec:	2308      	movs	r3, #8
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092ee:	0021      	movs	r1, r4
 80092f0:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 80092f2:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092f4:	f000 fdfe 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 80092f8:	2305      	movs	r3, #5
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 80092fa:	4d67      	ldr	r5, [pc, #412]	; (8009498 <LoRaMacInitialization+0x238>)
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80092fc:	0021      	movs	r1, r4
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 80092fe:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009300:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_TX_DR;
 8009302:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009304:	f000 fdf6 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009308:	230c      	movs	r3, #12
    LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800930a:	7068      	strb	r0, [r5, #1]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800930c:	0021      	movs	r1, r4
 800930e:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009310:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009312:	f000 fdef 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009316:	230d      	movs	r3, #13
    LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009318:	60e8      	str	r0, [r5, #12]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800931a:	0021      	movs	r1, r4
 800931c:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800931e:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009320:	f000 fde8 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009324:	230e      	movs	r3, #14
    LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009326:	6128      	str	r0, [r5, #16]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009328:	0021      	movs	r1, r4
 800932a:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800932c:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800932e:	f000 fde1 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009332:	230f      	movs	r3, #15
    LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009334:	6168      	str	r0, [r5, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009336:	0021      	movs	r1, r4
 8009338:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800933a:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800933c:	f000 fdda 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009340:	2310      	movs	r3, #16
    LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009342:	61a8      	str	r0, [r5, #24]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009344:	0021      	movs	r1, r4
 8009346:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009348:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800934a:	f000 fdd3 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800934e:	2313      	movs	r3, #19
    LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009350:	61e8      	str	r0, [r5, #28]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009352:	0021      	movs	r1, r4
 8009354:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009356:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009358:	f000 fdcc 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800935c:	1cab      	adds	r3, r5, #2
 800935e:	77d8      	strb	r0, [r3, #31]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009360:	2314      	movs	r3, #20
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009362:	0021      	movs	r1, r4
 8009364:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009366:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009368:	f000 fdc4 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800936c:	2315      	movs	r3, #21
    LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800936e:	6268      	str	r0, [r5, #36]	; 0x24
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009370:	0021      	movs	r1, r4
 8009372:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009374:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009376:	f000 fdbd 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800937a:	002b      	movs	r3, r5
 800937c:	3328      	adds	r3, #40	; 0x28
 800937e:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009380:	231a      	movs	r3, #26
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009382:	0021      	movs	r1, r4
 8009384:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009386:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009388:	f000 fdb4 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800938c:	002b      	movs	r3, r5
 800938e:	332c      	adds	r3, #44	; 0x2c
 8009390:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009392:	231b      	movs	r3, #27
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009394:	0021      	movs	r1, r4
 8009396:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009398:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800939a:	f000 fdab 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800939e:	002b      	movs	r3, r5
 80093a0:	332d      	adds	r3, #45	; 0x2d
 80093a2:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80093a4:	231c      	movs	r3, #28
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80093a6:	0021      	movs	r1, r4
 80093a8:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80093aa:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80093ac:	f000 fda2 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80093b0:	231d      	movs	r3, #29
    LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;
 80093b2:	6328      	str	r0, [r5, #48]	; 0x30
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80093b4:	0021      	movs	r1, r4
 80093b6:	7ff0      	ldrb	r0, [r6, #31]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80093b8:	7023      	strb	r3, [r4, #0]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80093ba:	f000 fd9b 	bl	8009ef4 <RegionGetPhyParam>
    LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;

    RegionInitDefaults( LoRaMacRegion, INIT_TYPE_INIT );
 80093be:	2100      	movs	r1, #0
    LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;
 80093c0:	6368      	str	r0, [r5, #52]	; 0x34
    RegionInitDefaults( LoRaMacRegion, INIT_TYPE_INIT );
 80093c2:	7ff0      	ldrb	r0, [r6, #31]
 80093c4:	f000 fda6 	bl	8009f14 <RegionInitDefaults>

    // Init parameters which are not set in function ResetMacParameters
    LoRaMacParamsDefaults.ChannelsNbRep = 1;
 80093c8:	2101      	movs	r1, #1
 80093ca:	1c6b      	adds	r3, r5, #1
 80093cc:	77d9      	strb	r1, [r3, #31]
    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 80093ce:	230a      	movs	r3, #10
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 80093d0:	2206      	movs	r2, #6

    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 80093d2:	200a      	movs	r0, #10
    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 80093d4:	606b      	str	r3, [r5, #4]
    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 80093d6:	4b31      	ldr	r3, [pc, #196]	; (800949c <LoRaMacInitialization+0x23c>)
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 80093d8:	722a      	strb	r2, [r5, #8]
    LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 80093da:	721a      	strb	r2, [r3, #8]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 80093dc:	68ea      	ldr	r2, [r5, #12]
    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 80093de:	6058      	str	r0, [r3, #4]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 80093e0:	60da      	str	r2, [r3, #12]
    LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 80093e2:	692a      	ldr	r2, [r5, #16]
 80093e4:	611a      	str	r2, [r3, #16]
    LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 80093e6:	696a      	ldr	r2, [r5, #20]
 80093e8:	615a      	str	r2, [r3, #20]
    LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 80093ea:	69aa      	ldr	r2, [r5, #24]
 80093ec:	619a      	str	r2, [r3, #24]
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 80093ee:	69ea      	ldr	r2, [r5, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 80093f0:	000d      	movs	r5, r1
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 80093f2:	61da      	str	r2, [r3, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 80093f4:	185b      	adds	r3, r3, r1
 80093f6:	77d9      	strb	r1, [r3, #31]

    ResetMacParameters( );
 80093f8:	f7fe fc02 	bl	8007c00 <ResetMacParameters>

    // Initialize timers
    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
 80093fc:	4c24      	ldr	r4, [pc, #144]	; (8009490 <LoRaMacInitialization+0x230>)
 80093fe:	4928      	ldr	r1, [pc, #160]	; (80094a0 <LoRaMacInitialization+0x240>)
 8009400:	3440      	adds	r4, #64	; 0x40
 8009402:	0020      	movs	r0, r4
 8009404:	f001 fe00 	bl	800b008 <TimerInit>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8009408:	21fa      	movs	r1, #250	; 0xfa
 800940a:	0020      	movs	r0, r4
 800940c:	0089      	lsls	r1, r1, #2
 800940e:	f001 fea1 	bl	800b154 <TimerSetValue>

    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
 8009412:	0038      	movs	r0, r7
 8009414:	4923      	ldr	r1, [pc, #140]	; (80094a4 <LoRaMacInitialization+0x244>)
 8009416:	3048      	adds	r0, #72	; 0x48
 8009418:	f001 fdf6 	bl	800b008 <TimerInit>
    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
 800941c:	481c      	ldr	r0, [pc, #112]	; (8009490 <LoRaMacInitialization+0x230>)
 800941e:	4922      	ldr	r1, [pc, #136]	; (80094a8 <LoRaMacInitialization+0x248>)
 8009420:	3054      	adds	r0, #84	; 0x54
 8009422:	f001 fdf1 	bl	800b008 <TimerInit>
    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
 8009426:	4818      	ldr	r0, [pc, #96]	; (8009488 <LoRaMacInitialization+0x228>)
 8009428:	4920      	ldr	r1, [pc, #128]	; (80094ac <LoRaMacInitialization+0x24c>)
 800942a:	3018      	adds	r0, #24
 800942c:	f001 fdec 	bl	800b008 <TimerInit>
    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009430:	4817      	ldr	r0, [pc, #92]	; (8009490 <LoRaMacInitialization+0x230>)
 8009432:	491f      	ldr	r1, [pc, #124]	; (80094b0 <LoRaMacInitialization+0x250>)
 8009434:	3024      	adds	r0, #36	; 0x24
 8009436:	f001 fde7 	bl	800b008 <TimerInit>

    // Store the current initialization time
    LoRaMacInitializationTime = TimerGetCurrentTime( );
 800943a:	f001 fe9c 	bl	800b176 <TimerGetCurrentTime>
 800943e:	6478      	str	r0, [r7, #68]	; 0x44
    RadioEvents.TxDone = OnRadioTxDone;
    RadioEvents.RxDone = OnRadioRxDone;
    RadioEvents.RxError = OnRadioRxError;
    RadioEvents.TxTimeout = OnRadioTxTimeout;
    RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &RadioEvents );
 8009440:	0038      	movs	r0, r7
    RadioEvents.TxDone = OnRadioTxDone;
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <LoRaMacInitialization+0x254>)
    Radio.Init( &RadioEvents );
 8009444:	4c1c      	ldr	r4, [pc, #112]	; (80094b8 <LoRaMacInitialization+0x258>)
    RadioEvents.TxDone = OnRadioTxDone;
 8009446:	667b      	str	r3, [r7, #100]	; 0x64
    RadioEvents.RxDone = OnRadioRxDone;
 8009448:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <LoRaMacInitialization+0x25c>)
    Radio.Init( &RadioEvents );
 800944a:	3064      	adds	r0, #100	; 0x64
    RadioEvents.RxDone = OnRadioRxDone;
 800944c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RadioEvents.RxError = OnRadioRxError;
 800944e:	4b1c      	ldr	r3, [pc, #112]	; (80094c0 <LoRaMacInitialization+0x260>)
 8009450:	677b      	str	r3, [r7, #116]	; 0x74
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <LoRaMacInitialization+0x264>)
 8009454:	66bb      	str	r3, [r7, #104]	; 0x68
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009456:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <LoRaMacInitialization+0x268>)
 8009458:	673b      	str	r3, [r7, #112]	; 0x70
    Radio.Init( &RadioEvents );
 800945a:	68a3      	ldr	r3, [r4, #8]
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
 8009460:	69e3      	ldr	r3, [r4, #28]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	4798      	blx	r3
 8009466:	f001 feaf 	bl	800b1c8 <srand1>

    PublicNetwork = true;
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <LoRaMacInitialization+0x26c>)
    Radio.SetPublicNetwork( PublicNetwork );
 800946c:	0028      	movs	r0, r5
    PublicNetwork = true;
 800946e:	701d      	strb	r5, [r3, #0]
    Radio.SetPublicNetwork( PublicNetwork );
 8009470:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	4798      	blx	r3
    Radio.Sleep( );
 8009476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	9301      	str	r3, [sp, #4]
}
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	b005      	add	sp, #20
 8009484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	20000380 	.word	0x20000380
 800948c:	20000400 	.word	0x20000400
 8009490:	20000300 	.word	0x20000300
 8009494:	20000e28 	.word	0x20000e28
 8009498:	20000e2c 	.word	0x20000e2c
 800949c:	20000e64 	.word	0x20000e64
 80094a0:	08008f45 	.word	0x08008f45
 80094a4:	08008ec9 	.word	0x08008ec9
 80094a8:	08007d6d 	.word	0x08007d6d
 80094ac:	08007de5 	.word	0x08007de5
 80094b0:	08007cdd 	.word	0x08007cdd
 80094b4:	08007e95 	.word	0x08007e95
 80094b8:	0800cfc4 	.word	0x0800cfc4
 80094bc:	08008471 	.word	0x08008471
 80094c0:	08008035 	.word	0x08008035
 80094c4:	08007e51 	.word	0x08007e51
 80094c8:	08007fb1 	.word	0x08007fb1
 80094cc:	20000480 	.word	0x20000480

080094d0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80094d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    AdrNextParams_t adrNext;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80094d2:	260e      	movs	r6, #14
{
 80094d4:	b08d      	sub	sp, #52	; 0x34
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80094d6:	4a2e      	ldr	r2, [pc, #184]	; (8009590 <LoRaMacQueryTxPossible+0xc0>)
{
 80094d8:	9005      	str	r0, [sp, #20]
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80094da:	ab04      	add	r3, sp, #16
 80094dc:	18f6      	adds	r6, r6, r3
 80094de:	7853      	ldrb	r3, [r2, #1]
{
 80094e0:	000d      	movs	r5, r1
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80094e2:	7033      	strb	r3, [r6, #0]
    int8_t txPower = LoRaMacParamsDefaults.ChannelsTxPower;
 80094e4:	230f      	movs	r3, #15
 80094e6:	a904      	add	r1, sp, #16
 80094e8:	7812      	ldrb	r2, [r2, #0]
 80094ea:	185b      	adds	r3, r3, r1
 80094ec:	701a      	strb	r2, [r3, #0]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80094ee:	2003      	movs	r0, #3
    if( txInfo == NULL )
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	d045      	beq.n	8009580 <LoRaMacQueryTxPossible+0xb0>
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 80094f4:	4c27      	ldr	r4, [pc, #156]	; (8009594 <LoRaMacQueryTxPossible+0xc4>)
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 80094f6:	a909      	add	r1, sp, #36	; 0x24
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 80094f8:	7da2      	ldrb	r2, [r4, #22]
    adrNext.AdrEnabled = AdrCtrlOn;
    adrNext.AdrAckCounter = AdrAckCounter;
    adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 80094fa:	4f27      	ldr	r7, [pc, #156]	; (8009598 <LoRaMacQueryTxPossible+0xc8>)
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 80094fc:	9203      	str	r2, [sp, #12]
 80094fe:	7de2      	ldrb	r2, [r4, #23]
 8009500:	9204      	str	r2, [sp, #16]
    adrNext.UpdateChanMask = false;
 8009502:	2200      	movs	r2, #0
 8009504:	700a      	strb	r2, [r1, #0]
    adrNext.AdrEnabled = AdrCtrlOn;
 8009506:	4a25      	ldr	r2, [pc, #148]	; (800959c <LoRaMacQueryTxPossible+0xcc>)
 8009508:	3270      	adds	r2, #112	; 0x70
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	704a      	strb	r2, [r1, #1]
    adrNext.AdrAckCounter = AdrAckCounter;
 800950e:	68e2      	ldr	r2, [r4, #12]
 8009510:	604a      	str	r2, [r1, #4]
    adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8009512:	7878      	ldrb	r0, [r7, #1]
 8009514:	7208      	strb	r0, [r1, #8]
    adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 8009516:	7838      	ldrb	r0, [r7, #0]
    adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009518:	372c      	adds	r7, #44	; 0x2c
    adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 800951a:	7248      	strb	r0, [r1, #9]
    adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800951c:	783a      	ldrb	r2, [r7, #0]
 800951e:	728a      	strb	r2, [r1, #10]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    RegionAdrNext( LoRaMacRegion, &adrNext, &datarate, &txPower, &AdrAckCounter );
 8009520:	1d22      	adds	r2, r4, #4
 8009522:	7fd0      	ldrb	r0, [r2, #31]
 8009524:	0022      	movs	r2, r4
 8009526:	320c      	adds	r2, #12
 8009528:	9200      	str	r2, [sp, #0]
 800952a:	0032      	movs	r2, r6
 800952c:	f000 fd14 	bl	8009f58 <RegionAdrNext>

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009530:	783b      	ldrb	r3, [r7, #0]
 8009532:	a908      	add	r1, sp, #32
 8009534:	708b      	strb	r3, [r1, #2]
    getPhy.Datarate = datarate;
 8009536:	7833      	ldrb	r3, [r6, #0]
 8009538:	704b      	strb	r3, [r1, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800953a:	2309      	movs	r3, #9
 800953c:	700b      	strb	r3, [r1, #0]

    // Change request in case repeater is supported
    if( RepeaterSupport == true )
 800953e:	1ce3      	adds	r3, r4, #3
 8009540:	7fdb      	ldrb	r3, [r3, #31]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <LoRaMacQueryTxPossible+0x7a>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009546:	230a      	movs	r3, #10
 8009548:	700b      	strb	r3, [r1, #0]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 800954a:	9a04      	ldr	r2, [sp, #16]
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	4694      	mov	ip, r2
 8009550:	4463      	add	r3, ip
 8009552:	b2de      	uxtb	r6, r3
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009554:	1d23      	adds	r3, r4, #4
 8009556:	7fd8      	ldrb	r0, [r3, #31]
 8009558:	f000 fccc 	bl	8009ef4 <RegionGetPhyParam>
    txInfo->CurrentPayloadSize = phyParam.Value;
 800955c:	b2c0      	uxtb	r0, r0
 800955e:	7068      	strb	r0, [r5, #1]

    // Verify if the fOpts fit into the maximum payload
    if( txInfo->CurrentPayloadSize >= fOptLen )
 8009560:	42b0      	cmp	r0, r6
 8009562:	d30f      	bcc.n	8009584 <LoRaMacQueryTxPossible+0xb4>
    {
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 8009564:	1b80      	subs	r0, r0, r6
 8009566:	7028      	strb	r0, [r5, #0]
        MacCommandsBufferIndex = 0;
        MacCommandsBufferToRepeatIndex = 0;
    }

    // Verify if the fOpts and the payload fit into the maximum payload
    if( ValidatePayloadLength( size, datarate, fOptLen ) == false )
 8009568:	230e      	movs	r3, #14
 800956a:	2100      	movs	r1, #0
 800956c:	aa04      	add	r2, sp, #16
 800956e:	189b      	adds	r3, r3, r2
 8009570:	5659      	ldrsb	r1, [r3, r1]
 8009572:	0032      	movs	r2, r6
 8009574:	9805      	ldr	r0, [sp, #20]
 8009576:	f7fe fb8b 	bl	8007c90 <ValidatePayloadLength>
    {
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
    return LORAMAC_STATUS_OK;
 800957a:	4243      	negs	r3, r0
 800957c:	4158      	adcs	r0, r3
 800957e:	00c0      	lsls	r0, r0, #3
}
 8009580:	b00d      	add	sp, #52	; 0x34
 8009582:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MacCommandsBufferIndex = 0;
 8009584:	2600      	movs	r6, #0
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize;
 8009586:	7028      	strb	r0, [r5, #0]
        MacCommandsBufferIndex = 0;
 8009588:	75a6      	strb	r6, [r4, #22]
        MacCommandsBufferToRepeatIndex = 0;
 800958a:	75e6      	strb	r6, [r4, #23]
 800958c:	e7ec      	b.n	8009568 <LoRaMacQueryTxPossible+0x98>
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	20000e2c 	.word	0x20000e2c
 8009594:	20000300 	.word	0x20000300
 8009598:	20000e64 	.word	0x20000e64
 800959c:	20000380 	.word	0x20000380

080095a0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80095a0:	b513      	push	{r0, r1, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80095a2:	2303      	movs	r3, #3
{
 80095a4:	1e04      	subs	r4, r0, #0
    if( mibGet == NULL )
 80095a6:	d041      	beq.n	800962c <LoRaMacMibGetRequestConfirm+0x8c>
    }

    switch( mibGet->Type )
 80095a8:	7800      	ldrb	r0, [r0, #0]
        {
            mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
            break;
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80095aa:	3b01      	subs	r3, #1
    switch( mibGet->Type )
 80095ac:	281d      	cmp	r0, #29
 80095ae:	d83d      	bhi.n	800962c <LoRaMacMibGetRequestConfirm+0x8c>
 80095b0:	f7f6 fdaa 	bl	8000108 <__gnu_thumb1_case_uqi>
 80095b4:	1916140f 	.word	0x1916140f
 80095b8:	2623201d 	.word	0x2623201d
 80095bc:	3e362c28 	.word	0x3e362c28
 80095c0:	4a474144 	.word	0x4a474144
 80095c4:	5653504d 	.word	0x5653504d
 80095c8:	5e605c59 	.word	0x5e605c59
 80095cc:	6a686562 	.word	0x6a686562
 80095d0:	6f6c      	.short	0x6f6c
            mibGet->Param.Class = LoRaMacDeviceClass;
 80095d2:	4b32      	ldr	r3, [pc, #200]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 80095d4:	333c      	adds	r3, #60	; 0x3c
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 80095d6:	781b      	ldrb	r3, [r3, #0]
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 80095d8:	7123      	strb	r3, [r4, #4]
 80095da:	e026      	b.n	800962a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 80095dc:	4b2f      	ldr	r3, [pc, #188]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 80095de:	e7fa      	b.n	80095d6 <LoRaMacMibGetRequestConfirm+0x36>
            mibGet->Param.AdrEnable = AdrCtrlOn;
 80095e0:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <LoRaMacMibGetRequestConfirm+0x100>)
 80095e2:	3370      	adds	r3, #112	; 0x70
 80095e4:	e7f7      	b.n	80095d6 <LoRaMacMibGetRequestConfirm+0x36>
            mibGet->Param.NetID = LoRaMacNetID;
 80095e6:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <LoRaMacMibGetRequestConfirm+0x104>)
 80095e8:	6a1b      	ldr	r3, [r3, #32]
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	e01d      	b.n	800962a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.DevAddr = LoRaMacDevAddr;
 80095ee:	4b2d      	ldr	r3, [pc, #180]	; (80096a4 <LoRaMacMibGetRequestConfirm+0x104>)
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	e7fa      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 80095f4:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <LoRaMacMibGetRequestConfirm+0x104>)
 80095f6:	3308      	adds	r3, #8
 80095f8:	e7f7      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.AppSKey = LoRaMacAppSKey;
 80095fa:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <LoRaMacMibGetRequestConfirm+0x100>)
 80095fc:	3378      	adds	r3, #120	; 0x78
 80095fe:	e7f4      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.EnablePublicNetwork = PublicNetwork;
 8009600:	4b29      	ldr	r3, [pc, #164]	; (80096a8 <LoRaMacMibGetRequestConfirm+0x108>)
 8009602:	e7e8      	b.n	80095d6 <LoRaMacMibGetRequestConfirm+0x36>
            mibGet->Param.EnableRepeaterSupport = RepeaterSupport;
 8009604:	4b25      	ldr	r3, [pc, #148]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 8009606:	3303      	adds	r3, #3
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 8009608:	7fdb      	ldrb	r3, [r3, #31]
 800960a:	e7e5      	b.n	80095d8 <LoRaMacMibGetRequestConfirm+0x38>
            getPhy.Attribute = PHY_CHANNELS;
 800960c:	2319      	movs	r3, #25
 800960e:	a901      	add	r1, sp, #4
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009610:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009612:	4b22      	ldr	r3, [pc, #136]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 8009614:	3304      	adds	r3, #4
 8009616:	7fd8      	ldrb	r0, [r3, #31]
 8009618:	f000 fc6c 	bl	8009ef4 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800961c:	6060      	str	r0, [r4, #4]
 800961e:	e004      	b.n	800962a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009622:	3404      	adds	r4, #4
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8009624:	3324      	adds	r3, #36	; 0x24
 8009626:	cb06      	ldmia	r3!, {r1, r2}
 8009628:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800962a:	2300      	movs	r3, #0
            break;
    }

    return status;
}
 800962c:	0018      	movs	r0, r3
 800962e:	bd16      	pop	{r1, r2, r4, pc}
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8009630:	3404      	adds	r4, #4
 8009632:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <LoRaMacMibGetRequestConfirm+0x110>)
 8009634:	e7f6      	b.n	8009624 <LoRaMacMibGetRequestConfirm+0x84>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009636:	a901      	add	r1, sp, #4
 8009638:	2317      	movs	r3, #23
 800963a:	e7e9      	b.n	8009610 <LoRaMacMibGetRequestConfirm+0x70>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800963c:	a901      	add	r1, sp, #4
 800963e:	2316      	movs	r3, #22
 8009640:	e7e6      	b.n	8009610 <LoRaMacMibGetRequestConfirm+0x70>
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009644:	3301      	adds	r3, #1
 8009646:	e7df      	b.n	8009608 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 8009648:	4b18      	ldr	r3, [pc, #96]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	e7cd      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 800964e:	4b17      	ldr	r3, [pc, #92]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	e7ca      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	e7c7      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	e7c4      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
            mibGet->Param.MulticastList = MulticastChannels;
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	e7c1      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8009666:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <LoRaMacMibGetRequestConfirm+0x110>)
            mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	e7b5      	b.n	80095d8 <LoRaMacMibGetRequestConfirm+0x38>
 800966c:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 800966e:	e7fb      	b.n	8009668 <LoRaMacMibGetRequestConfirm+0xc8>
            mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8009670:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <LoRaMacMibGetRequestConfirm+0x110>)
 8009672:	e7b0      	b.n	80095d6 <LoRaMacMibGetRequestConfirm+0x36>
            mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009676:	e7ae      	b.n	80095d6 <LoRaMacMibGetRequestConfirm+0x36>
            mibGet->Param.UpLinkCounter = UpLinkCounter;
 8009678:	4b08      	ldr	r3, [pc, #32]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	e7b5      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.DownLinkCounter = DownLinkCounter;
 800967e:	4b07      	ldr	r3, [pc, #28]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	e7b2      	b.n	80095ea <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.MulticastList = MulticastChannels;
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <LoRaMacMibGetRequestConfirm+0xfc>)
 8009686:	e7ec      	b.n	8009662 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 8009688:	4b08      	ldr	r3, [pc, #32]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 800968a:	e7f6      	b.n	800967a <LoRaMacMibGetRequestConfirm+0xda>
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 800968c:	4b07      	ldr	r3, [pc, #28]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 800968e:	7a1b      	ldrb	r3, [r3, #8]
 8009690:	e7a2      	b.n	80095d8 <LoRaMacMibGetRequestConfirm+0x38>
            mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <LoRaMacMibGetRequestConfirm+0x10c>)
 8009694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009696:	6063      	str	r3, [r4, #4]
 8009698:	e7c7      	b.n	800962a <LoRaMacMibGetRequestConfirm+0x8a>
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	20000300 	.word	0x20000300
 80096a0:	20000380 	.word	0x20000380
 80096a4:	20000400 	.word	0x20000400
 80096a8:	20000480 	.word	0x20000480
 80096ac:	20000e64 	.word	0x20000e64
 80096b0:	20000e2c 	.word	0x20000e2c

080096b4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80096b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b6:	0005      	movs	r5, r0
 80096b8:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d100      	bne.n	80096c0 <LoRaMacMibSetRequestConfirm+0xc>
 80096be:	e0ce      	b.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
    {
        return LORAMAC_STATUS_BUSY;
 80096c0:	2001      	movs	r0, #1
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80096c2:	4ca1      	ldr	r4, [pc, #644]	; (8009948 <LoRaMacMibSetRequestConfirm+0x294>)
 80096c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096c6:	4203      	tst	r3, r0
 80096c8:	d000      	beq.n	80096cc <LoRaMacMibSetRequestConfirm+0x18>
 80096ca:	e0c9      	b.n	8009860 <LoRaMacMibSetRequestConfirm+0x1ac>
    }

    switch( mibSet->Type )
 80096cc:	7828      	ldrb	r0, [r5, #0]
 80096ce:	281d      	cmp	r0, #29
 80096d0:	d900      	bls.n	80096d4 <LoRaMacMibSetRequestConfirm+0x20>
 80096d2:	e137      	b.n	8009944 <LoRaMacMibSetRequestConfirm+0x290>
 80096d4:	f7f6 fd22 	bl	800011c <__gnu_thumb1_case_uhi>
 80096d8:	0033001e 	.word	0x0033001e
 80096dc:	003b0036 	.word	0x003b0036
 80096e0:	0043003f 	.word	0x0043003f
 80096e4:	0053004c 	.word	0x0053004c
 80096e8:	0136005b 	.word	0x0136005b
 80096ec:	00a3005f 	.word	0x00a3005f
 80096f0:	00b700c6 	.word	0x00b700c6
 80096f4:	00d300cb 	.word	0x00d300cb
 80096f8:	00db00d7 	.word	0x00db00d7
 80096fc:	00e300df 	.word	0x00e300df
 8009700:	00f600e7 	.word	0x00f600e7
 8009704:	01040112 	.word	0x01040112
 8009708:	01230120 	.word	0x01230120
 800970c:	01260136 	.word	0x01260136
 8009710:	0132012c 	.word	0x0132012c
    {
        case MIB_DEVICE_CLASS:
        {
            LoRaMacDeviceClass = mibSet->Param.Class;
 8009714:	0023      	movs	r3, r4
 8009716:	792e      	ldrb	r6, [r5, #4]
 8009718:	2500      	movs	r5, #0
 800971a:	333c      	adds	r3, #60	; 0x3c
 800971c:	701e      	strb	r6, [r3, #0]
            switch( LoRaMacDeviceClass )
 800971e:	42ae      	cmp	r6, r5
 8009720:	d003      	beq.n	800972a <LoRaMacMibSetRequestConfirm+0x76>
 8009722:	2e02      	cmp	r6, #2
 8009724:	d007      	beq.n	8009736 <LoRaMacMibSetRequestConfirm+0x82>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009726:	0028      	movs	r0, r5
 8009728:	e09a      	b.n	8009860 <LoRaMacMibSetRequestConfirm+0x1ac>
            {
                case CLASS_A:
                {
                    // Set the radio into sleep to setup a defined state
                    Radio.Sleep( );
 800972a:	4b88      	ldr	r3, [pc, #544]	; (800994c <LoRaMacMibSetRequestConfirm+0x298>)
 800972c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009732:	2000      	movs	r0, #0
            break;
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
            break;
 8009734:	e094      	b.n	8009860 <LoRaMacMibSetRequestConfirm+0x1ac>
                    NodeAckRequested = false;
 8009736:	7625      	strb	r5, [r4, #24]
                    OnRxWindow2TimerEvent( );
 8009738:	f7fe fb54 	bl	8007de4 <OnRxWindow2TimerEvent>
 800973c:	e7f3      	b.n	8009726 <LoRaMacMibSetRequestConfirm+0x72>
            IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 800973e:	792b      	ldrb	r3, [r5, #4]
                        RxSlot = RxWindow2Config.Window;
 8009740:	7023      	strb	r3, [r4, #0]
 8009742:	e7f6      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            AdrCtrlOn = mibSet->Param.AdrEnable;
 8009744:	4b82      	ldr	r3, [pc, #520]	; (8009950 <LoRaMacMibSetRequestConfirm+0x29c>)
 8009746:	792a      	ldrb	r2, [r5, #4]
 8009748:	3370      	adds	r3, #112	; 0x70
                LoRaMacParams.ChannelsTxPower = verify.TxPower;
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e7f1      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacNetID = mibSet->Param.NetID;
 800974e:	686a      	ldr	r2, [r5, #4]
 8009750:	4b80      	ldr	r3, [pc, #512]	; (8009954 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8009752:	621a      	str	r2, [r3, #32]
 8009754:	e7ed      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacDevAddr = mibSet->Param.DevAddr;
 8009756:	686a      	ldr	r2, [r5, #4]
 8009758:	4b7e      	ldr	r3, [pc, #504]	; (8009954 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800975a:	625a      	str	r2, [r3, #36]	; 0x24
 800975c:	e7e9      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            if( mibSet->Param.NwkSKey != NULL )
 800975e:	6869      	ldr	r1, [r5, #4]
 8009760:	2900      	cmp	r1, #0
 8009762:	d07c      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                memcpy1( LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 8009764:	2210      	movs	r2, #16
 8009766:	487b      	ldr	r0, [pc, #492]	; (8009954 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8009768:	3008      	adds	r0, #8
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 800976a:	f001 fd3e 	bl	800b1ea <memcpy1>
 800976e:	e7e0      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            if( mibSet->Param.AppSKey != NULL )
 8009770:	6869      	ldr	r1, [r5, #4]
 8009772:	2900      	cmp	r1, #0
 8009774:	d073      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 8009776:	4876      	ldr	r0, [pc, #472]	; (8009950 <LoRaMacMibSetRequestConfirm+0x29c>)
 8009778:	2210      	movs	r2, #16
 800977a:	3078      	adds	r0, #120	; 0x78
 800977c:	e7f5      	b.n	800976a <LoRaMacMibSetRequestConfirm+0xb6>
            PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800977e:	7928      	ldrb	r0, [r5, #4]
 8009780:	4b75      	ldr	r3, [pc, #468]	; (8009958 <LoRaMacMibSetRequestConfirm+0x2a4>)
 8009782:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( PublicNetwork );
 8009784:	4b71      	ldr	r3, [pc, #452]	; (800994c <LoRaMacMibSetRequestConfirm+0x298>)
 8009786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	4798      	blx	r3
 800978c:	e7d1      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
             RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800978e:	792b      	ldrb	r3, [r5, #4]
 8009790:	3403      	adds	r4, #3
 8009792:	77e3      	strb	r3, [r4, #31]
 8009794:	e7cd      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009796:	7a2b      	ldrb	r3, [r5, #8]
 8009798:	a904      	add	r1, sp, #16
 800979a:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800979c:	4b6f      	ldr	r3, [pc, #444]	; (800995c <LoRaMacMibSetRequestConfirm+0x2a8>)
            if( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true )
 800979e:	2206      	movs	r2, #6
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	4e6f      	ldr	r6, [pc, #444]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 80097a4:	704b      	strb	r3, [r1, #1]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true )
 80097a6:	4b6f      	ldr	r3, [pc, #444]	; (8009964 <LoRaMacMibSetRequestConfirm+0x2b0>)
 80097a8:	7fd8      	ldrb	r0, [r3, #31]
 80097aa:	f000 fbba 	bl	8009f22 <RegionVerify>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d055      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80097b2:	0033      	movs	r3, r6
 80097b4:	3504      	adds	r5, #4
 80097b6:	3324      	adds	r3, #36	; 0x24
 80097b8:	cd06      	ldmia	r5!, {r1, r2}
 80097ba:	c306      	stmia	r3!, {r1, r2}
                if( ( LoRaMacDeviceClass == CLASS_C ) && ( IsLoRaMacNetworkJoined == true ) )
 80097bc:	0023      	movs	r3, r4
 80097be:	333c      	adds	r3, #60	; 0x3c
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d1b5      	bne.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
 80097c6:	7823      	ldrb	r3, [r4, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0b2      	beq.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 80097cc:	4f60      	ldr	r7, [pc, #384]	; (8009950 <LoRaMacMibSetRequestConfirm+0x29c>)
 80097ce:	2128      	movs	r1, #40	; 0x28
 80097d0:	003d      	movs	r5, r7
 80097d2:	4b64      	ldr	r3, [pc, #400]	; (8009964 <LoRaMacMibSetRequestConfirm+0x2b0>)
 80097d4:	352c      	adds	r5, #44	; 0x2c
 80097d6:	7fd8      	ldrb	r0, [r3, #31]
 80097d8:	7a32      	ldrb	r2, [r6, #8]
 80097da:	5671      	ldrsb	r1, [r6, r1]
 80097dc:	9500      	str	r5, [sp, #0]
 80097de:	6873      	ldr	r3, [r6, #4]
 80097e0:	f000 fbc7 	bl	8009f72 <RegionComputeRxWindowParameters>
                    RxWindow2Config.Channel = Channel;
 80097e4:	1c63      	adds	r3, r4, #1
 80097e6:	7fdb      	ldrb	r3, [r3, #31]
                    if( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t* )&McpsIndication.RxDatarate ) == true )
 80097e8:	1d3a      	adds	r2, r7, #4
                    RxWindow2Config.Channel = Channel;
 80097ea:	702b      	strb	r3, [r5, #0]
                    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 80097ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
                    if( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t* )&McpsIndication.RxDatarate ) == true )
 80097ee:	0029      	movs	r1, r5
                    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 80097f0:	633b      	str	r3, [r7, #48]	; 0x30
                    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80097f2:	4b5a      	ldr	r3, [pc, #360]	; (800995c <LoRaMacMibSetRequestConfirm+0x2a8>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	742b      	strb	r3, [r5, #16]
                    RxWindow2Config.RepeaterSupport = RepeaterSupport;
 80097f8:	1ce3      	adds	r3, r4, #3
 80097fa:	7fdb      	ldrb	r3, [r3, #31]
 80097fc:	746b      	strb	r3, [r5, #17]
                    RxWindow2Config.Window = 1;
 80097fe:	2301      	movs	r3, #1
 8009800:	74eb      	strb	r3, [r5, #19]
                    RxWindow2Config.RxContinuous = true;
 8009802:	74ab      	strb	r3, [r5, #18]
                    if( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t* )&McpsIndication.RxDatarate ) == true )
 8009804:	4b57      	ldr	r3, [pc, #348]	; (8009964 <LoRaMacMibSetRequestConfirm+0x2b0>)
 8009806:	7fd8      	ldrb	r0, [r3, #31]
 8009808:	f000 fbbe 	bl	8009f88 <RegionRxConfig>
 800980c:	2800      	cmp	r0, #0
 800980e:	d026      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8009810:	7ca8      	ldrb	r0, [r5, #18]
 8009812:	68f1      	ldr	r1, [r6, #12]
 8009814:	f7fe fa9e 	bl	8007d54 <RxWindowSetup>
                        RxSlot = RxWindow2Config.Window;
 8009818:	3468      	adds	r4, #104	; 0x68
 800981a:	7ceb      	ldrb	r3, [r5, #19]
 800981c:	e790      	b.n	8009740 <LoRaMacMibSetRequestConfirm+0x8c>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800981e:	7a2b      	ldrb	r3, [r5, #8]
 8009820:	a904      	add	r1, sp, #16
 8009822:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8009824:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
            if( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true )
 8009826:	3404      	adds	r4, #4
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8009828:	332d      	adds	r3, #45	; 0x2d
 800982a:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true )
 800982c:	7fe0      	ldrb	r0, [r4, #31]
 800982e:	2206      	movs	r2, #6
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8009830:	704b      	strb	r3, [r1, #1]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true )
 8009832:	f000 fb76 	bl	8009f22 <RegionVerify>
 8009836:	2800      	cmp	r0, #0
 8009838:	d011      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800983a:	4b4b      	ldr	r3, [pc, #300]	; (8009968 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800983c:	3504      	adds	r5, #4
 800983e:	3324      	adds	r3, #36	; 0x24
 8009840:	cd06      	ldmia	r5!, {r1, r2}
 8009842:	c306      	stmia	r3!, {r1, r2}
 8009844:	e775      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009846:	686b      	ldr	r3, [r5, #4]
 8009848:	a904      	add	r1, sp, #16
 800984a:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800984c:	2301      	movs	r3, #1
            if( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false )
 800984e:	3404      	adds	r4, #4
 8009850:	7fe0      	ldrb	r0, [r4, #31]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009852:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false )
 8009854:	f000 fb77 	bl	8009f46 <RegionChanMaskSet>
 8009858:	2800      	cmp	r0, #0
 800985a:	d000      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
 800985c:	e769      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800985e:	2003      	movs	r0, #3
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
            break;
    }

    return status;
}
 8009860:	b007      	add	sp, #28
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009864:	686b      	ldr	r3, [r5, #4]
 8009866:	a904      	add	r1, sp, #16
 8009868:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800986a:	2300      	movs	r3, #0
 800986c:	e7ef      	b.n	800984e <LoRaMacMibSetRequestConfirm+0x19a>
            if( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 800986e:	792a      	ldrb	r2, [r5, #4]
 8009870:	1e53      	subs	r3, r2, #1
 8009872:	2b0e      	cmp	r3, #14
 8009874:	d8f3      	bhi.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 8009876:	4b3a      	ldr	r3, [pc, #232]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009878:	3301      	adds	r3, #1
 800987a:	77da      	strb	r2, [r3, #31]
 800987c:	e759      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800987e:	686a      	ldr	r2, [r5, #4]
 8009880:	4b37      	ldr	r3, [pc, #220]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009882:	60da      	str	r2, [r3, #12]
 8009884:	e755      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009886:	686a      	ldr	r2, [r5, #4]
 8009888:	4b35      	ldr	r3, [pc, #212]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800988a:	611a      	str	r2, [r3, #16]
 800988c:	e751      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800988e:	686a      	ldr	r2, [r5, #4]
 8009890:	4b33      	ldr	r3, [pc, #204]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009892:	615a      	str	r2, [r3, #20]
 8009894:	e74d      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009896:	686a      	ldr	r2, [r5, #4]
 8009898:	4b31      	ldr	r3, [pc, #196]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800989a:	619a      	str	r2, [r3, #24]
 800989c:	e749      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800989e:	686a      	ldr	r2, [r5, #4]
 80098a0:	4b2f      	ldr	r3, [pc, #188]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 80098a2:	61da      	str	r2, [r3, #28]
 80098a4:	e745      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80098a6:	ae04      	add	r6, sp, #16
 80098a8:	792b      	ldrb	r3, [r5, #4]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_DR ) == true )
 80098aa:	3404      	adds	r4, #4
 80098ac:	7fe0      	ldrb	r0, [r4, #31]
 80098ae:	2205      	movs	r2, #5
 80098b0:	0031      	movs	r1, r6
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80098b2:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_DR ) == true )
 80098b4:	f000 fb35 	bl	8009f22 <RegionVerify>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d0d0      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 80098bc:	7832      	ldrb	r2, [r6, #0]
 80098be:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <LoRaMacMibSetRequestConfirm+0x2b4>)
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80098c0:	705a      	strb	r2, [r3, #1]
 80098c2:	e736      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80098c4:	ae04      	add	r6, sp, #16
 80098c6:	792b      	ldrb	r3, [r5, #4]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true )
 80098c8:	3404      	adds	r4, #4
 80098ca:	7fe0      	ldrb	r0, [r4, #31]
 80098cc:	2204      	movs	r2, #4
 80098ce:	0031      	movs	r1, r6
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80098d0:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true )
 80098d2:	f000 fb26 	bl	8009f22 <RegionVerify>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0c1      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80098da:	7832      	ldrb	r2, [r6, #0]
 80098dc:	4b20      	ldr	r3, [pc, #128]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 80098de:	e7ef      	b.n	80098c0 <LoRaMacMibSetRequestConfirm+0x20c>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80098e0:	ae04      	add	r6, sp, #16
 80098e2:	792b      	ldrb	r3, [r5, #4]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_POWER ) == true )
 80098e4:	3404      	adds	r4, #4
 80098e6:	7fe0      	ldrb	r0, [r4, #31]
 80098e8:	2208      	movs	r2, #8
 80098ea:	0031      	movs	r1, r6
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80098ec:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_POWER ) == true )
 80098ee:	f000 fb18 	bl	8009f22 <RegionVerify>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d0b3      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80098f6:	7832      	ldrb	r2, [r6, #0]
 80098f8:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <LoRaMacMibSetRequestConfirm+0x2b4>)
 80098fa:	e726      	b.n	800974a <LoRaMacMibSetRequestConfirm+0x96>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80098fc:	ae04      	add	r6, sp, #16
 80098fe:	792b      	ldrb	r3, [r5, #4]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_POWER ) == true )
 8009900:	3404      	adds	r4, #4
 8009902:	7fe0      	ldrb	r0, [r4, #31]
 8009904:	2207      	movs	r2, #7
 8009906:	0031      	movs	r1, r6
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009908:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_POWER ) == true )
 800990a:	f000 fb0a 	bl	8009f22 <RegionVerify>
 800990e:	2800      	cmp	r0, #0
 8009910:	d0a5      	beq.n	800985e <LoRaMacMibSetRequestConfirm+0x1aa>
                LoRaMacParams.ChannelsTxPower = verify.TxPower;
 8009912:	7832      	ldrb	r2, [r6, #0]
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009916:	e718      	b.n	800974a <LoRaMacMibSetRequestConfirm+0x96>
            UpLinkCounter = mibSet->Param.UpLinkCounter;
 8009918:	686b      	ldr	r3, [r5, #4]
 800991a:	6063      	str	r3, [r4, #4]
 800991c:	e709      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            DownLinkCounter = mibSet->Param.DownLinkCounter;
 800991e:	686b      	ldr	r3, [r5, #4]
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	e706      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009924:	686b      	ldr	r3, [r5, #4]
 8009926:	4a10      	ldr	r2, [pc, #64]	; (8009968 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8009928:	6053      	str	r3, [r2, #4]
 800992a:	4a0d      	ldr	r2, [pc, #52]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	e700      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009930:	792b      	ldrb	r3, [r5, #4]
 8009932:	4a0d      	ldr	r2, [pc, #52]	; (8009968 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8009934:	7213      	strb	r3, [r2, #8]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009938:	7213      	strb	r3, [r2, #8]
 800993a:	e6fa      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            LoRaMacParams.AntennaGain = mibSet->Param.AntennaGain;
 800993c:	686a      	ldr	r2, [r5, #4]
 800993e:	4b08      	ldr	r3, [pc, #32]	; (8009960 <LoRaMacMibSetRequestConfirm+0x2ac>)
 8009940:	635a      	str	r2, [r3, #52]	; 0x34
 8009942:	e6f6      	b.n	8009732 <LoRaMacMibSetRequestConfirm+0x7e>
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009944:	2002      	movs	r0, #2
 8009946:	e78b      	b.n	8009860 <LoRaMacMibSetRequestConfirm+0x1ac>
 8009948:	20000300 	.word	0x20000300
 800994c:	0800cfc4 	.word	0x0800cfc4
 8009950:	20000380 	.word	0x20000380
 8009954:	20000400 	.word	0x20000400
 8009958:	20000480 	.word	0x20000480
 800995c:	20000e91 	.word	0x20000e91
 8009960:	20000e64 	.word	0x20000e64
 8009964:	20000304 	.word	0x20000304
 8009968:	20000e2c 	.word	0x20000e2c

0800996c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
{
 800996c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996e:	0004      	movs	r4, r0
 8009970:	b085      	sub	sp, #20
    AlternateDrParams_t altDr;
    VerifyParams_t verify;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mlmeRequest == NULL )
 8009972:	2800      	cmp	r0, #0
 8009974:	d102      	bne.n	800997c <LoRaMacMlmeRequest+0x10>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009976:	2003      	movs	r0, #3
        NodeAckRequested = false;
        LoRaMacFlags.Bits.MlmeReq = 0;
    }

    return status;
}
 8009978:	b005      	add	sp, #20
 800997a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800997c:	2301      	movs	r3, #1
 800997e:	4e4e      	ldr	r6, [pc, #312]	; (8009ab8 <LoRaMacMlmeRequest+0x14c>)
 8009980:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009982:	4019      	ands	r1, r3
 8009984:	d001      	beq.n	800998a <LoRaMacMlmeRequest+0x1e>
        return LORAMAC_STATUS_BUSY;
 8009986:	2001      	movs	r0, #1
 8009988:	e7f6      	b.n	8009978 <LoRaMacMlmeRequest+0xc>
    memset1( ( uint8_t* ) &MlmeConfirm, 0, sizeof( MlmeConfirm ) );
 800998a:	4d4c      	ldr	r5, [pc, #304]	; (8009abc <LoRaMacMlmeRequest+0x150>)
 800998c:	220c      	movs	r2, #12
 800998e:	002f      	movs	r7, r5
 8009990:	3754      	adds	r7, #84	; 0x54
 8009992:	0038      	movs	r0, r7
 8009994:	f001 fc3e 	bl	800b214 <memset1>
    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009998:	2301      	movs	r3, #1
    switch( mlmeRequest->Type )
 800999a:	7820      	ldrb	r0, [r4, #0]
    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800999c:	707b      	strb	r3, [r7, #1]
    switch( mlmeRequest->Type )
 800999e:	2803      	cmp	r0, #3
 80099a0:	d900      	bls.n	80099a4 <LoRaMacMlmeRequest+0x38>
 80099a2:	e087      	b.n	8009ab4 <LoRaMacMlmeRequest+0x148>
 80099a4:	f7f6 fbb0 	bl	8000108 <__gnu_thumb1_case_uqi>
 80099a8:	786c5402 	.word	0x786c5402
            if( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80099ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80099ae:	06db      	lsls	r3, r3, #27
 80099b0:	d4e9      	bmi.n	8009986 <LoRaMacMlmeRequest+0x1a>
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 80099b2:	6863      	ldr	r3, [r4, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0de      	beq.n	8009976 <LoRaMacMlmeRequest+0xa>
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0db      	beq.n	8009976 <LoRaMacMlmeRequest+0xa>
                ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0d8      	beq.n	8009976 <LoRaMacMlmeRequest+0xa>
                ( mlmeRequest->Req.Join.NbTrials == 0 ) )
 80099c4:	7c23      	ldrb	r3, [r4, #16]
                ( mlmeRequest->Req.Join.AppKey == NULL ) ||
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0d5      	beq.n	8009976 <LoRaMacMlmeRequest+0xa>
            if( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false )
 80099ca:	1d37      	adds	r7, r6, #4
            verify.NbJoinTrials = mlmeRequest->Req.Join.NbTrials;
 80099cc:	a902      	add	r1, sp, #8
            if( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false )
 80099ce:	7ff8      	ldrb	r0, [r7, #31]
 80099d0:	221e      	movs	r2, #30
            verify.NbJoinTrials = mlmeRequest->Req.Join.NbTrials;
 80099d2:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false )
 80099d4:	f000 faa5 	bl	8009f22 <RegionVerify>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d106      	bne.n	80099ea <LoRaMacMlmeRequest+0x7e>
                getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
 80099dc:	231f      	movs	r3, #31
 80099de:	a903      	add	r1, sp, #12
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80099e0:	7ff8      	ldrb	r0, [r7, #31]
                getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
 80099e2:	700b      	strb	r3, [r1, #0]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80099e4:	f000 fa86 	bl	8009ef4 <RegionGetPhyParam>
                mlmeRequest->Req.Join.NbTrials = ( uint8_t ) phyParam.Value;
 80099e8:	7420      	strb	r0, [r4, #16]
            LoRaMacFlags.Bits.MlmeReq = 1;
 80099ea:	2308      	movs	r3, #8
 80099ec:	4a34      	ldr	r2, [pc, #208]	; (8009ac0 <LoRaMacMlmeRequest+0x154>)
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 80099ee:	3554      	adds	r5, #84	; 0x54
            LoRaMacFlags.Bits.MlmeReq = 1;
 80099f0:	7811      	ldrb	r1, [r2, #0]
 80099f2:	430b      	orrs	r3, r1
 80099f4:	7013      	strb	r3, [r2, #0]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 80099f6:	7823      	ldrb	r3, [r4, #0]
            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 80099f8:	6862      	ldr	r2, [r4, #4]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 80099fa:	702b      	strb	r3, [r5, #0]
            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 80099fc:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <LoRaMacMlmeRequest+0x158>)
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
            LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 8009a00:	68a2      	ldr	r2, [r4, #8]
 8009a02:	62da      	str	r2, [r3, #44]	; 0x2c
            LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 8009a04:	68e2      	ldr	r2, [r4, #12]
 8009a06:	619a      	str	r2, [r3, #24]
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8009a08:	7c21      	ldrb	r1, [r4, #16]
            JoinRequestTrials = 0;
 8009a0a:	2400      	movs	r4, #0
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8009a0c:	001a      	movs	r2, r3
            JoinRequestTrials = 0;
 8009a0e:	3338      	adds	r3, #56	; 0x38
 8009a10:	701c      	strb	r4, [r3, #0]
            macHdr.Value = 0;
 8009a12:	466b      	mov	r3, sp
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8009a14:	325c      	adds	r2, #92	; 0x5c
            macHdr.Value = 0;
 8009a16:	701c      	strb	r4, [r3, #0]
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8009a18:	7011      	strb	r1, [r2, #0]
            ResetMacParameters( );
 8009a1a:	f7fe f8f1 	bl	8007c00 <ResetMacParameters>
            altDr.NbTrials = JoinRequestTrials + 1;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	a901      	add	r1, sp, #4
 8009a22:	800b      	strh	r3, [r1, #0]
            LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8009a24:	1d33      	adds	r3, r6, #4
 8009a26:	7fd8      	ldrb	r0, [r3, #31]
 8009a28:	f000 faf8 	bl	800a01c <RegionAlternateDr>
 8009a2c:	4b26      	ldr	r3, [pc, #152]	; (8009ac8 <LoRaMacMlmeRequest+0x15c>)
            status = Send( &macHdr, 0, NULL, 0 );
 8009a2e:	0022      	movs	r2, r4
            LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8009a30:	7058      	strb	r0, [r3, #1]
            status = Send( &macHdr, 0, NULL, 0 );
 8009a32:	0021      	movs	r1, r4
 8009a34:	0023      	movs	r3, r4
 8009a36:	4668      	mov	r0, sp
 8009a38:	f7ff fa26 	bl	8008e88 <Send>
    if( status != LORAMAC_STATUS_OK )
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d09b      	beq.n	8009978 <LoRaMacMlmeRequest+0xc>
        NodeAckRequested = false;
 8009a40:	2300      	movs	r3, #0
        LoRaMacFlags.Bits.MlmeReq = 0;
 8009a42:	2108      	movs	r1, #8
 8009a44:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <LoRaMacMlmeRequest+0x154>)
        NodeAckRequested = false;
 8009a46:	7633      	strb	r3, [r6, #24]
        LoRaMacFlags.Bits.MlmeReq = 0;
 8009a48:	7813      	ldrb	r3, [r2, #0]
 8009a4a:	438b      	bics	r3, r1
 8009a4c:	7013      	strb	r3, [r2, #0]
 8009a4e:	e793      	b.n	8009978 <LoRaMacMlmeRequest+0xc>
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a50:	2308      	movs	r3, #8
 8009a52:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <LoRaMacMlmeRequest+0x154>)
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a54:	2001      	movs	r0, #1
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a56:	7811      	ldrb	r1, [r2, #0]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a58:	3554      	adds	r5, #84	; 0x54
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	7013      	strb	r3, [r2, #0]
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8009a5e:	2380      	movs	r3, #128	; 0x80
 8009a60:	7df1      	ldrb	r1, [r6, #23]
 8009a62:	425b      	negs	r3, r3
 8009a64:	1a5b      	subs	r3, r3, r1
            if( MacCommandsBufferIndex < bufLen )
 8009a66:	7db2      	ldrb	r2, [r6, #22]
 8009a68:	b2db      	uxtb	r3, r3
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a6a:	7028      	strb	r0, [r5, #0]
            if( MacCommandsBufferIndex < bufLen )
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d9e7      	bls.n	8009a40 <LoRaMacMlmeRequest+0xd4>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8009a70:	2102      	movs	r1, #2
 8009a72:	1813      	adds	r3, r2, r0
 8009a74:	75b3      	strb	r3, [r6, #22]
 8009a76:	4b15      	ldr	r3, [pc, #84]	; (8009acc <LoRaMacMlmeRequest+0x160>)
        MacCommandsInNextTx = true;
 8009a78:	76b0      	strb	r0, [r6, #26]
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8009a7a:	5499      	strb	r1, [r3, r2]
        MacCommandsInNextTx = true;
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	e77b      	b.n	8009978 <LoRaMacMlmeRequest+0xc>
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a80:	2302      	movs	r3, #2
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a82:	4a0f      	ldr	r2, [pc, #60]	; (8009ac0 <LoRaMacMlmeRequest+0x154>)
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a84:	3554      	adds	r5, #84	; 0x54
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a86:	7811      	ldrb	r1, [r2, #0]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a88:	702b      	strb	r3, [r5, #0]
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a8a:	3306      	adds	r3, #6
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	7013      	strb	r3, [r2, #0]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009a90:	88a0      	ldrh	r0, [r4, #4]
 8009a92:	f7ff fb9b 	bl	80091cc <SetTxContinuousWave>
            break;
 8009a96:	e7d1      	b.n	8009a3c <LoRaMacMlmeRequest+0xd0>
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a98:	2303      	movs	r3, #3
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a9a:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <LoRaMacMlmeRequest+0x154>)
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009a9c:	3554      	adds	r5, #84	; 0x54
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009a9e:	7811      	ldrb	r1, [r2, #0]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8009aa0:	702b      	strb	r3, [r5, #0]
            LoRaMacFlags.Bits.MlmeReq = 1;
 8009aa2:	3305      	adds	r3, #5
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	7013      	strb	r3, [r2, #0]
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009aa8:	7b22      	ldrb	r2, [r4, #12]
 8009aaa:	88a0      	ldrh	r0, [r4, #4]
 8009aac:	68a1      	ldr	r1, [r4, #8]
 8009aae:	f7ff fbb9 	bl	8009224 <SetTxContinuousWave1>
            break;
 8009ab2:	e7c3      	b.n	8009a3c <LoRaMacMlmeRequest+0xd0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009ab4:	2002      	movs	r0, #2
 8009ab6:	e7c3      	b.n	8009a40 <LoRaMacMlmeRequest+0xd4>
 8009ab8:	20000300 	.word	0x20000300
 8009abc:	20000380 	.word	0x20000380
 8009ac0:	20000e28 	.word	0x20000e28
 8009ac4:	20000400 	.word	0x20000400
 8009ac8:	20000e64 	.word	0x20000e64
 8009acc:	20000501 	.word	0x20000501

08009ad0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
{
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad2:	0004      	movs	r4, r0
 8009ad4:	b089      	sub	sp, #36	; 0x24
    void *fBuffer;
    uint16_t fBufferSize;
    int8_t datarate;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d103      	bne.n	8009ae2 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009ada:	2503      	movs	r5, #3
            NodeAckRequested = false;
        }
    }

    return status;
}
 8009adc:	0028      	movs	r0, r5
 8009ade:	b009      	add	sp, #36	; 0x24
 8009ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8009ae2:	2611      	movs	r6, #17
 8009ae4:	4b46      	ldr	r3, [pc, #280]	; (8009c00 <LoRaMacMcpsRequest+0x130>)
        return LORAMAC_STATUS_BUSY;
 8009ae6:	2501      	movs	r5, #1
    if( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	4033      	ands	r3, r6
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	d1f5      	bne.n	8009adc <LoRaMacMcpsRequest+0xc>
    memset1 ( ( uint8_t* ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 8009af0:	4f44      	ldr	r7, [pc, #272]	; (8009c04 <LoRaMacMcpsRequest+0x134>)
 8009af2:	0019      	movs	r1, r3
 8009af4:	3740      	adds	r7, #64	; 0x40
 8009af6:	0038      	movs	r0, r7
    macHdr.Value = 0;
 8009af8:	ae05      	add	r6, sp, #20
    memset1 ( ( uint8_t* ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 8009afa:	2214      	movs	r2, #20
    macHdr.Value = 0;
 8009afc:	7033      	strb	r3, [r6, #0]
    memset1 ( ( uint8_t* ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 8009afe:	f001 fb89 	bl	800b214 <memset1>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b02:	707d      	strb	r5, [r7, #1]
    AckTimeoutRetriesCounter = 1;
 8009b04:	4b40      	ldr	r3, [pc, #256]	; (8009c08 <LoRaMacMcpsRequest+0x138>)
    switch( mcpsRequest->Type )
 8009b06:	7827      	ldrb	r7, [r4, #0]
    AckTimeoutRetriesCounter = 1;
 8009b08:	705d      	strb	r5, [r3, #1]
    switch( mcpsRequest->Type )
 8009b0a:	42af      	cmp	r7, r5
 8009b0c:	d052      	beq.n	8009bb4 <LoRaMacMcpsRequest+0xe4>
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	d004      	beq.n	8009b1c <LoRaMacMcpsRequest+0x4c>
 8009b12:	2f03      	cmp	r7, #3
 8009b14:	d060      	beq.n	8009bd8 <LoRaMacMcpsRequest+0x108>
    bool readyToSend = false;
 8009b16:	9f00      	ldr	r7, [sp, #0]
    uint8_t fPort = 0;
 8009b18:	003e      	movs	r6, r7
 8009b1a:	e00f      	b.n	8009b3c <LoRaMacMcpsRequest+0x6c>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009b1c:	221f      	movs	r2, #31
            AckTimeoutRetries = 1;
 8009b1e:	701d      	strb	r5, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009b20:	7833      	ldrb	r3, [r6, #0]
            readyToSend = true;
 8009b22:	002f      	movs	r7, r5
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009b24:	401a      	ands	r2, r3
 8009b26:	2340      	movs	r3, #64	; 0x40
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	7033      	strb	r3, [r6, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009b2c:	68a3      	ldr	r3, [r4, #8]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8009b2e:	7926      	ldrb	r6, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009b30:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009b36:	230e      	movs	r3, #14
 8009b38:	56e3      	ldrsb	r3, [r4, r3]
 8009b3a:	9301      	str	r3, [sp, #4]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	a907      	add	r1, sp, #28
 8009b40:	700b      	strb	r3, [r1, #0]
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009b42:	4b32      	ldr	r3, [pc, #200]	; (8009c0c <LoRaMacMcpsRequest+0x13c>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009b44:	2502      	movs	r5, #2
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009b46:	332c      	adds	r3, #44	; 0x2c
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	708b      	strb	r3, [r1, #2]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8009b4c:	4b2c      	ldr	r3, [pc, #176]	; (8009c00 <LoRaMacMcpsRequest+0x130>)
 8009b4e:	3304      	adds	r3, #4
 8009b50:	7fd8      	ldrb	r0, [r3, #31]
 8009b52:	f000 f9cf 	bl	8009ef4 <RegionGetPhyParam>
    if( readyToSend == true )
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	d0c0      	beq.n	8009adc <LoRaMacMcpsRequest+0xc>
        if( AdrCtrlOn == false )
 8009b5a:	4b2a      	ldr	r3, [pc, #168]	; (8009c04 <LoRaMacMcpsRequest+0x134>)
 8009b5c:	3370      	adds	r3, #112	; 0x70
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d115      	bne.n	8009b90 <LoRaMacMcpsRequest+0xc0>
    datarate = MAX( datarate, phyParam.Value );
 8009b64:	9b01      	ldr	r3, [sp, #4]
 8009b66:	4298      	cmp	r0, r3
 8009b68:	d200      	bcs.n	8009b6c <LoRaMacMcpsRequest+0x9c>
 8009b6a:	0018      	movs	r0, r3
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009b6c:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <LoRaMacMcpsRequest+0x13c>)
            verify.DatarateParams.Datarate = datarate;
 8009b6e:	ad06      	add	r5, sp, #24
 8009b70:	7028      	strb	r0, [r5, #0]
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009b72:	332c      	adds	r3, #44	; 0x2c
 8009b74:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true )
 8009b76:	2204      	movs	r2, #4
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8009b78:	70ab      	strb	r3, [r5, #2]
            if( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true )
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <LoRaMacMcpsRequest+0x130>)
 8009b7c:	0029      	movs	r1, r5
 8009b7e:	3304      	adds	r3, #4
 8009b80:	7fd8      	ldrb	r0, [r3, #31]
 8009b82:	f000 f9ce 	bl	8009f22 <RegionVerify>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0a7      	beq.n	8009ada <LoRaMacMcpsRequest+0xa>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009b8a:	782b      	ldrb	r3, [r5, #0]
 8009b8c:	4a1f      	ldr	r2, [pc, #124]	; (8009c0c <LoRaMacMcpsRequest+0x13c>)
 8009b8e:	7053      	strb	r3, [r2, #1]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	9a02      	ldr	r2, [sp, #8]
 8009b94:	0031      	movs	r1, r6
 8009b96:	a805      	add	r0, sp, #20
 8009b98:	f7ff f976 	bl	8008e88 <Send>
 8009b9c:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
 8009b9e:	d12b      	bne.n	8009bf8 <LoRaMacMcpsRequest+0x128>
            McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009ba0:	4b18      	ldr	r3, [pc, #96]	; (8009c04 <LoRaMacMcpsRequest+0x134>)
 8009ba2:	7822      	ldrb	r2, [r4, #0]
 8009ba4:	3340      	adds	r3, #64	; 0x40
 8009ba6:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.McpsReq = 1;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4a19      	ldr	r2, [pc, #100]	; (8009c10 <LoRaMacMcpsRequest+0x140>)
 8009bac:	7811      	ldrb	r1, [r2, #0]
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	7013      	strb	r3, [r2, #0]
 8009bb2:	e793      	b.n	8009adc <LoRaMacMcpsRequest+0xc>
            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 8009bb4:	7be2      	ldrb	r2, [r4, #15]
 8009bb6:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009bb8:	221f      	movs	r2, #31
 8009bba:	7833      	ldrb	r3, [r6, #0]
 8009bbc:	401a      	ands	r2, r3
 8009bbe:	2380      	movs	r3, #128	; 0x80
 8009bc0:	425b      	negs	r3, r3
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	7033      	strb	r3, [r6, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009bc6:	68a3      	ldr	r3, [r4, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009bc8:	7926      	ldrb	r6, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009bca:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009bd0:	230e      	movs	r3, #14
 8009bd2:	56e3      	ldrsb	r3, [r4, r3]
 8009bd4:	9301      	str	r3, [sp, #4]
            break;
 8009bd6:	e7b1      	b.n	8009b3c <LoRaMacMcpsRequest+0x6c>
            AckTimeoutRetries = 1;
 8009bd8:	701d      	strb	r5, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009bda:	2320      	movs	r3, #32
 8009bdc:	7832      	ldrb	r2, [r6, #0]
 8009bde:	425b      	negs	r3, r3
 8009be0:	4313      	orrs	r3, r2
 8009be2:	7033      	strb	r3, [r6, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009be4:	6863      	ldr	r3, [r4, #4]
            readyToSend = true;
 8009be6:	002f      	movs	r7, r5
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009be8:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009bea:	8923      	ldrh	r3, [r4, #8]
    uint8_t fPort = 0;
 8009bec:	9e00      	ldr	r6, [sp, #0]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009bee:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009bf0:	230a      	movs	r3, #10
 8009bf2:	56e3      	ldrsb	r3, [r4, r3]
 8009bf4:	9301      	str	r3, [sp, #4]
            break;
 8009bf6:	e7a1      	b.n	8009b3c <LoRaMacMcpsRequest+0x6c>
            NodeAckRequested = false;
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4b01      	ldr	r3, [pc, #4]	; (8009c00 <LoRaMacMcpsRequest+0x130>)
 8009bfc:	761a      	strb	r2, [r3, #24]
 8009bfe:	e76d      	b.n	8009adc <LoRaMacMcpsRequest+0xc>
 8009c00:	20000300 	.word	0x20000300
 8009c04:	20000380 	.word	0x20000380
 8009c08:	20000060 	.word	0x20000060
 8009c0c:	20000e64 	.word	0x20000e64
 8009c10:	20000e28 	.word	0x20000e28

08009c14 <LoRaMacTestSetDutyCycleOn>:
    UpLinkCounter = txPacketCounter;
    IsUpLinkCounterFixed = true;
}

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8009c14:	b513      	push	{r0, r1, r4, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( LoRaMacRegion, &verify, PHY_DUTY_CYCLE ) == true )
 8009c16:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 8009c18:	a901      	add	r1, sp, #4
    if( RegionVerify( LoRaMacRegion, &verify, PHY_DUTY_CYCLE ) == true )
 8009c1a:	3304      	adds	r3, #4
{
 8009c1c:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 8009c1e:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( LoRaMacRegion, &verify, PHY_DUTY_CYCLE ) == true )
 8009c20:	220b      	movs	r2, #11
 8009c22:	7fd8      	ldrb	r0, [r3, #31]
 8009c24:	f000 f97d 	bl	8009f22 <RegionVerify>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d002      	beq.n	8009c32 <LoRaMacTestSetDutyCycleOn+0x1e>
    {
        DutyCycleOn = enable;
 8009c2c:	4b02      	ldr	r3, [pc, #8]	; (8009c38 <LoRaMacTestSetDutyCycleOn+0x24>)
 8009c2e:	3340      	adds	r3, #64	; 0x40
 8009c30:	701c      	strb	r4, [r3, #0]
    }
}
 8009c32:	bd13      	pop	{r0, r1, r4, pc}
 8009c34:	20000300 	.word	0x20000300
 8009c38:	20000400 	.word	0x20000400

08009c3c <LoRaMacComputeMic>:
 * \param [IN]  dir             Frame direction [0: uplink, 1: downlink]
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */
void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )
{
 8009c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3e:	000e      	movs	r6, r1
 8009c40:	0007      	movs	r7, r0
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	aa08      	add	r2, sp, #32
    MicBlockB0[5] = dir;
 8009c46:	4c1b      	ldr	r4, [pc, #108]	; (8009cb4 <LoRaMacComputeMic+0x78>)
{
 8009c48:	7811      	ldrb	r1, [r2, #0]
 8009c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    MicBlockB0[5] = dir;
 8009c4c:	7161      	strb	r1, [r4, #5]
    
    MicBlockB0[6] = ( address ) & 0xFF;
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 8009c4e:	0a19      	lsrs	r1, r3, #8
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;

    MicBlockB0[15] = size & 0xFF;

    AES_CMAC_Init( AesCmacCtx );
 8009c50:	4d19      	ldr	r5, [pc, #100]	; (8009cb8 <LoRaMacComputeMic+0x7c>)
    MicBlockB0[6] = ( address ) & 0xFF;
 8009c52:	71a3      	strb	r3, [r4, #6]
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 8009c54:	71e1      	strb	r1, [r4, #7]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 8009c56:	0c19      	lsrs	r1, r3, #16
    MicBlockB0[9] = ( address >> 24 ) & 0xFF;
 8009c58:	0e1b      	lsrs	r3, r3, #24
 8009c5a:	7263      	strb	r3, [r4, #9]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009c5c:	0a13      	lsrs	r3, r2, #8
    AES_CMAC_Init( AesCmacCtx );
 8009c5e:	0028      	movs	r0, r5
    MicBlockB0[10] = ( sequenceCounter ) & 0xFF;
 8009c60:	72a2      	strb	r2, [r4, #10]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009c62:	72e3      	strb	r3, [r4, #11]
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8009c64:	0c13      	lsrs	r3, r2, #16
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009c66:	0e12      	lsrs	r2, r2, #24
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8009c68:	7323      	strb	r3, [r4, #12]
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009c6a:	7362      	strb	r2, [r4, #13]
    MicBlockB0[15] = size & 0xFF;
 8009c6c:	73e6      	strb	r6, [r4, #15]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 8009c6e:	7221      	strb	r1, [r4, #8]
    AES_CMAC_Init( AesCmacCtx );
 8009c70:	f7fd fea0 	bl	80079b4 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8009c74:	0028      	movs	r0, r5
 8009c76:	9901      	ldr	r1, [sp, #4]
 8009c78:	f7fd feac 	bl	80079d4 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
 8009c7c:	0028      	movs	r0, r5
 8009c7e:	0021      	movs	r1, r4
 8009c80:	2210      	movs	r2, #16
 8009c82:	f7fd feae 	bl	80079e2 <AES_CMAC_Update>
    
    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 8009c86:	b2f2      	uxtb	r2, r6
 8009c88:	0039      	movs	r1, r7
 8009c8a:	0028      	movs	r0, r5
 8009c8c:	f7fd fea9 	bl	80079e2 <AES_CMAC_Update>
    
    AES_CMAC_Final( Mic, AesCmacCtx );
 8009c90:	4c0a      	ldr	r4, [pc, #40]	; (8009cbc <LoRaMacComputeMic+0x80>)
 8009c92:	0029      	movs	r1, r5
 8009c94:	0020      	movs	r0, r4
 8009c96:	f7fd ff08 	bl	8007aaa <AES_CMAC_Final>
    
    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 8009c9a:	7862      	ldrb	r2, [r4, #1]
 8009c9c:	7823      	ldrb	r3, [r4, #0]
 8009c9e:	0212      	lsls	r2, r2, #8
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	78a3      	ldrb	r3, [r4, #2]
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	78e3      	ldrb	r3, [r4, #3]
 8009caa:	061b      	lsls	r3, r3, #24
 8009cac:	4313      	orrs	r3, r2
 8009cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb0:	6013      	str	r3, [r2, #0]
}
 8009cb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009cb4:	20000063 	.word	0x20000063
 8009cb8:	200007a0 	.word	0x200007a0
 8009cbc:	20000780 	.word	0x20000780

08009cc0 <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
{
 8009cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc2:	001d      	movs	r5, r3
 8009cc4:	b085      	sub	sp, #20
    uint16_t i;
    uint8_t bufferIndex = 0;
    uint16_t ctr = 1;

    memset1( AesContext.ksch, '\0', 240 );
 8009cc6:	4f34      	ldr	r7, [pc, #208]	; (8009d98 <LoRaMacPayloadEncrypt+0xd8>)
{
 8009cc8:	ab0a      	add	r3, sp, #40	; 0x28
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	9002      	str	r0, [sp, #8]
 8009cce:	000e      	movs	r6, r1
 8009cd0:	9201      	str	r2, [sp, #4]
    memset1( AesContext.ksch, '\0', 240 );
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	22f0      	movs	r2, #240	; 0xf0
 8009cd6:	0038      	movs	r0, r7
{
 8009cd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009cda:	9303      	str	r3, [sp, #12]
    memset1( AesContext.ksch, '\0', 240 );
 8009cdc:	f001 fa9a 	bl	800b214 <memset1>
    aes_set_key( key, 16, &AesContext );
 8009ce0:	003a      	movs	r2, r7
 8009ce2:	2110      	movs	r1, #16
 8009ce4:	9801      	ldr	r0, [sp, #4]
 8009ce6:	f7fd fc9b 	bl	8007620 <aes_set_key>

    aBlock[5] = dir;
 8009cea:	4b2c      	ldr	r3, [pc, #176]	; (8009d9c <LoRaMacPayloadEncrypt+0xdc>)
 8009cec:	9a03      	ldr	r2, [sp, #12]

    aBlock[6] = ( address ) & 0xFF;
 8009cee:	759d      	strb	r5, [r3, #22]
    aBlock[5] = dir;
 8009cf0:	755a      	strb	r2, [r3, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8009cf2:	0a2a      	lsrs	r2, r5, #8
 8009cf4:	75da      	strb	r2, [r3, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009cf6:	0c2a      	lsrs	r2, r5, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009cf8:	0e2d      	lsrs	r5, r5, #24
 8009cfa:	765d      	strb	r5, [r3, #25]
    aBlock[10] = ( sequenceCounter ) & 0xFF;
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;

    while( size >= 16 )
 8009cfc:	2500      	movs	r5, #0
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009cfe:	761a      	strb	r2, [r3, #24]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009d00:	0a22      	lsrs	r2, r4, #8
    aBlock[10] = ( sequenceCounter ) & 0xFF;
 8009d02:	769c      	strb	r4, [r3, #26]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009d04:	76da      	strb	r2, [r3, #27]
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8009d06:	0c22      	lsrs	r2, r4, #16
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009d08:	0e24      	lsrs	r4, r4, #24
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8009d0a:	771a      	strb	r2, [r3, #28]
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009d0c:	775c      	strb	r4, [r3, #29]
    while( size >= 16 )
 8009d0e:	9601      	str	r6, [sp, #4]
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	012c      	lsls	r4, r5, #4
 8009d14:	b2e4      	uxtb	r4, r4
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d822      	bhi.n	8009d60 <LoRaMacPayloadEncrypt+0xa0>
 8009d1a:	2410      	movs	r4, #16
 8009d1c:	0933      	lsrs	r3, r6, #4
 8009d1e:	4264      	negs	r4, r4
 8009d20:	435c      	muls	r4, r3
 8009d22:	1934      	adds	r4, r6, r4
 8009d24:	011f      	lsls	r7, r3, #4
 8009d26:	b2a4      	uxth	r4, r4
 8009d28:	b2ff      	uxtb	r7, r7
 8009d2a:	3301      	adds	r3, #1
        }
        size -= 16;
        bufferIndex += 16;
    }

    if( size > 0 )
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	d015      	beq.n	8009d5c <LoRaMacPayloadEncrypt+0x9c>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d30:	4d1b      	ldr	r5, [pc, #108]	; (8009da0 <LoRaMacPayloadEncrypt+0xe0>)
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009d32:	481a      	ldr	r0, [pc, #104]	; (8009d9c <LoRaMacPayloadEncrypt+0xdc>)
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d34:	3510      	adds	r5, #16
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009d36:	77c3      	strb	r3, [r0, #31]
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d38:	4a17      	ldr	r2, [pc, #92]	; (8009d98 <LoRaMacPayloadEncrypt+0xd8>)
 8009d3a:	3010      	adds	r0, #16
 8009d3c:	0029      	movs	r1, r5
 8009d3e:	f7fd fcf3 	bl	8007728 <aes_encrypt>
 8009d42:	2300      	movs	r3, #0
        for( i = 0; i < size; i++ )
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d46:	19d0      	adds	r0, r2, r7
 8009d48:	9a02      	ldr	r2, [sp, #8]
 8009d4a:	19d7      	adds	r7, r2, r7
 8009d4c:	5cfa      	ldrb	r2, [r7, r3]
 8009d4e:	5d59      	ldrb	r1, [r3, r5]
 8009d50:	404a      	eors	r2, r1
 8009d52:	54c2      	strb	r2, [r0, r3]
 8009d54:	3301      	adds	r3, #1
        for( i = 0; i < size; i++ )
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	42a2      	cmp	r2, r4
 8009d5a:	d3f7      	bcc.n	8009d4c <LoRaMacPayloadEncrypt+0x8c>
        }
    }
}
 8009d5c:	b005      	add	sp, #20
 8009d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d60:	4f0f      	ldr	r7, [pc, #60]	; (8009da0 <LoRaMacPayloadEncrypt+0xe0>)
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009d62:	480e      	ldr	r0, [pc, #56]	; (8009d9c <LoRaMacPayloadEncrypt+0xdc>)
 8009d64:	3501      	adds	r5, #1
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d66:	3710      	adds	r7, #16
 8009d68:	b2ed      	uxtb	r5, r5
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009d6a:	77c5      	strb	r5, [r0, #31]
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009d6c:	4a0a      	ldr	r2, [pc, #40]	; (8009d98 <LoRaMacPayloadEncrypt+0xd8>)
 8009d6e:	0039      	movs	r1, r7
 8009d70:	3010      	adds	r0, #16
 8009d72:	f7fd fcd9 	bl	8007728 <aes_encrypt>
 8009d76:	0022      	movs	r2, r4
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009d78:	1b3f      	subs	r7, r7, r4
 8009d7a:	3210      	adds	r2, #16
 8009d7c:	9902      	ldr	r1, [sp, #8]
 8009d7e:	5d3b      	ldrb	r3, [r7, r4]
 8009d80:	5d09      	ldrb	r1, [r1, r4]
 8009d82:	404b      	eors	r3, r1
 8009d84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d86:	550b      	strb	r3, [r1, r4]
 8009d88:	3401      	adds	r4, #1
        for( i = 0; i < 16; i++ )
 8009d8a:	4294      	cmp	r4, r2
 8009d8c:	d1f6      	bne.n	8009d7c <LoRaMacPayloadEncrypt+0xbc>
        size -= 16;
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	3b10      	subs	r3, #16
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	e7bb      	b.n	8009d10 <LoRaMacPayloadEncrypt+0x50>
 8009d98:	200008b8 	.word	0x200008b8
 8009d9c:	20000063 	.word	0x20000063
 8009da0:	20000780 	.word	0x20000780

08009da4 <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )
{
 8009da4:	b530      	push	{r4, r5, lr}
 8009da6:	b085      	sub	sp, #20
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 8009da8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8009daa:	ac08      	add	r4, sp, #32
 8009dac:	7824      	ldrb	r4, [r4, #0]
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 8009dae:	9502      	str	r5, [sp, #8]
 8009db0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009db2:	9400      	str	r4, [sp, #0]
 8009db4:	9501      	str	r5, [sp, #4]
 8009db6:	f7ff ff83 	bl	8009cc0 <LoRaMacPayloadEncrypt>
}
 8009dba:	b005      	add	sp, #20
 8009dbc:	bd30      	pop	{r4, r5, pc}
	...

08009dc0 <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
{
 8009dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc2:	0007      	movs	r7, r0
 8009dc4:	000d      	movs	r5, r1
 8009dc6:	001e      	movs	r6, r3
    AES_CMAC_Init( AesCmacCtx );
 8009dc8:	4c0f      	ldr	r4, [pc, #60]	; (8009e08 <LoRaMacJoinComputeMic+0x48>)
{
 8009dca:	9201      	str	r2, [sp, #4]
    AES_CMAC_Init( AesCmacCtx );
 8009dcc:	0020      	movs	r0, r4
 8009dce:	f7fd fdf1 	bl	80079b4 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8009dd2:	9901      	ldr	r1, [sp, #4]
 8009dd4:	0020      	movs	r0, r4
 8009dd6:	f7fd fdfd 	bl	80079d4 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 8009dda:	b2ea      	uxtb	r2, r5
 8009ddc:	0039      	movs	r1, r7
 8009dde:	0020      	movs	r0, r4
 8009de0:	f7fd fdff 	bl	80079e2 <AES_CMAC_Update>

    AES_CMAC_Final( Mic, AesCmacCtx );
 8009de4:	4d09      	ldr	r5, [pc, #36]	; (8009e0c <LoRaMacJoinComputeMic+0x4c>)
 8009de6:	0021      	movs	r1, r4
 8009de8:	0028      	movs	r0, r5
 8009dea:	f7fd fe5e 	bl	8007aaa <AES_CMAC_Final>

    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 8009dee:	786a      	ldrb	r2, [r5, #1]
 8009df0:	782b      	ldrb	r3, [r5, #0]
 8009df2:	0212      	lsls	r2, r2, #8
 8009df4:	431a      	orrs	r2, r3
 8009df6:	78ab      	ldrb	r3, [r5, #2]
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	78eb      	ldrb	r3, [r5, #3]
 8009dfe:	061b      	lsls	r3, r3, #24
 8009e00:	4313      	orrs	r3, r2
 8009e02:	6033      	str	r3, [r6, #0]
}
 8009e04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	200007a0 	.word	0x200007a0
 8009e0c:	20000780 	.word	0x20000780

08009e10 <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
{
 8009e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e12:	001d      	movs	r5, r3
 8009e14:	0004      	movs	r4, r0
    memset1( AesContext.ksch, '\0', 240 );
 8009e16:	4e0e      	ldr	r6, [pc, #56]	; (8009e50 <LoRaMacJoinDecrypt+0x40>)
{
 8009e18:	000f      	movs	r7, r1
 8009e1a:	9201      	str	r2, [sp, #4]
    memset1( AesContext.ksch, '\0', 240 );
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	22f0      	movs	r2, #240	; 0xf0
 8009e20:	0030      	movs	r0, r6
 8009e22:	f001 f9f7 	bl	800b214 <memset1>
    aes_set_key( key, 16, &AesContext );
 8009e26:	0032      	movs	r2, r6
 8009e28:	2110      	movs	r1, #16
 8009e2a:	9801      	ldr	r0, [sp, #4]
 8009e2c:	f7fd fbf8 	bl	8007620 <aes_set_key>
    aes_encrypt( buffer, decBuffer, &AesContext );
 8009e30:	0032      	movs	r2, r6
 8009e32:	0029      	movs	r1, r5
 8009e34:	0020      	movs	r0, r4
 8009e36:	f7fd fc77 	bl	8007728 <aes_encrypt>
    // Check if optional CFList is included
    if( size >= 16 )
 8009e3a:	2f0f      	cmp	r7, #15
 8009e3c:	d906      	bls.n	8009e4c <LoRaMacJoinDecrypt+0x3c>
    {
        aes_encrypt( buffer + 16, decBuffer + 16, &AesContext );
 8009e3e:	0029      	movs	r1, r5
 8009e40:	0020      	movs	r0, r4
 8009e42:	3110      	adds	r1, #16
 8009e44:	3010      	adds	r0, #16
 8009e46:	0032      	movs	r2, r6
 8009e48:	f7fd fc6e 	bl	8007728 <aes_encrypt>
    }
}
 8009e4c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	200008b8 	.word	0x200008b8

08009e54 <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )
{
 8009e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e56:	b087      	sub	sp, #28
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	466b      	mov	r3, sp
 8009e5c:	0004      	movs	r4, r0
    uint8_t nonce[16];
    uint8_t *pDevNonce = ( uint8_t * )&devNonce;
    
    memset1( AesContext.ksch, '\0', 240 );
 8009e5e:	4d22      	ldr	r5, [pc, #136]	; (8009ee8 <LoRaMacJoinComputeSKeys+0x94>)
{
 8009e60:	80da      	strh	r2, [r3, #6]
 8009e62:	000f      	movs	r7, r1
    memset1( AesContext.ksch, '\0', 240 );
 8009e64:	0028      	movs	r0, r5
 8009e66:	22f0      	movs	r2, #240	; 0xf0
 8009e68:	2100      	movs	r1, #0
{
 8009e6a:	1d9e      	adds	r6, r3, #6
    memset1( AesContext.ksch, '\0', 240 );
 8009e6c:	f001 f9d2 	bl	800b214 <memset1>
    aes_set_key( key, 16, &AesContext );
 8009e70:	002a      	movs	r2, r5
 8009e72:	2110      	movs	r1, #16
 8009e74:	0020      	movs	r0, r4

    memset1( nonce, 0, sizeof( nonce ) );
 8009e76:	ac02      	add	r4, sp, #8
    aes_set_key( key, 16, &AesContext );
 8009e78:	f7fd fbd2 	bl	8007620 <aes_set_key>
    memset1( nonce, 0, sizeof( nonce ) );
 8009e7c:	0020      	movs	r0, r4
 8009e7e:	2210      	movs	r2, #16
 8009e80:	2100      	movs	r1, #0
 8009e82:	f001 f9c7 	bl	800b214 <memset1>
    nonce[0] = 0x01;
 8009e86:	2301      	movs	r3, #1
 8009e88:	7023      	strb	r3, [r4, #0]
    memcpy1( nonce + 1, appNonce, 6 );
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	446b      	add	r3, sp
 8009e8e:	0039      	movs	r1, r7
 8009e90:	0018      	movs	r0, r3
 8009e92:	2206      	movs	r2, #6
 8009e94:	f001 f9a9 	bl	800b1ea <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 8009e98:	230f      	movs	r3, #15
 8009e9a:	446b      	add	r3, sp
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	0031      	movs	r1, r6
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f001 f9a2 	bl	800b1ea <memcpy1>
    aes_encrypt( nonce, nwkSKey, &AesContext );
 8009ea6:	002a      	movs	r2, r5
 8009ea8:	9900      	ldr	r1, [sp, #0]
 8009eaa:	0020      	movs	r0, r4
 8009eac:	f7fd fc3c 	bl	8007728 <aes_encrypt>

    memset1( nonce, 0, sizeof( nonce ) );
 8009eb0:	0020      	movs	r0, r4
 8009eb2:	2210      	movs	r2, #16
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	f001 f9ad 	bl	800b214 <memset1>
    nonce[0] = 0x02;
 8009eba:	2302      	movs	r3, #2
 8009ebc:	7023      	strb	r3, [r4, #0]
    memcpy1( nonce + 1, appNonce, 6 );
 8009ebe:	2309      	movs	r3, #9
 8009ec0:	446b      	add	r3, sp
 8009ec2:	0039      	movs	r1, r7
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	2206      	movs	r2, #6
 8009ec8:	f001 f98f 	bl	800b1ea <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 8009ecc:	230f      	movs	r3, #15
 8009ece:	446b      	add	r3, sp
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	0031      	movs	r1, r6
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f001 f988 	bl	800b1ea <memcpy1>
    aes_encrypt( nonce, appSKey, &AesContext );
 8009eda:	002a      	movs	r2, r5
 8009edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ede:	0020      	movs	r0, r4
 8009ee0:	f7fd fc22 	bl	8007728 <aes_encrypt>
}
 8009ee4:	b007      	add	sp, #28
 8009ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee8:	200008b8 	.word	0x200008b8

08009eec <RegionIsActive>:
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        US915_HYBRID_IS_ACTIVE( );
        default:
        {
            return false;
 8009eec:	3805      	subs	r0, #5
 8009eee:	4243      	negs	r3, r0
 8009ef0:	4158      	adcs	r0, r3
        }
    }
}
 8009ef2:	4770      	bx	lr

08009ef4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8009ef4:	b510      	push	{r4, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 8009ef6:	2805      	cmp	r0, #5
 8009ef8:	d103      	bne.n	8009f02 <RegionGetPhyParam+0xe>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009efa:	0008      	movs	r0, r1
 8009efc:	f000 fb28 	bl	800a550 <RegionEU868GetPhyParam>
        default:
        {
            return phyParam;
        }
    }
}
 8009f00:	bd10      	pop	{r4, pc}
            return phyParam;
 8009f02:	2000      	movs	r0, #0
 8009f04:	e7fc      	b.n	8009f00 <RegionGetPhyParam+0xc>

08009f06 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8009f06:	b510      	push	{r4, lr}
    switch( region )
 8009f08:	2805      	cmp	r0, #5
 8009f0a:	d102      	bne.n	8009f12 <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8009f0c:	0008      	movs	r0, r1
 8009f0e:	f000 fb89 	bl	800a624 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 8009f12:	bd10      	pop	{r4, pc}

08009f14 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitType_t type )
{
 8009f14:	b510      	push	{r4, lr}
    switch( region )
 8009f16:	2805      	cmp	r0, #5
 8009f18:	d102      	bne.n	8009f20 <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8009f1a:	0008      	movs	r0, r1
 8009f1c:	f000 fb96 	bl	800a64c <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009f22:	b510      	push	{r4, lr}
 8009f24:	000b      	movs	r3, r1
    switch( region )
 8009f26:	2805      	cmp	r0, #5
 8009f28:	d104      	bne.n	8009f34 <RegionVerify+0x12>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 fbb7 	bl	800a6a0 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 8009f32:	bd10      	pop	{r4, pc}
            return false;
 8009f34:	2000      	movs	r0, #0
 8009f36:	e7fc      	b.n	8009f32 <RegionVerify+0x10>

08009f38 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8009f38:	b510      	push	{r4, lr}
    switch( region )
 8009f3a:	2805      	cmp	r0, #5
 8009f3c:	d102      	bne.n	8009f44 <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8009f3e:	0008      	movs	r0, r1
 8009f40:	f000 ff82 	bl	800ae48 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8009f46:	b510      	push	{r4, lr}
    switch( region )
 8009f48:	2805      	cmp	r0, #5
 8009f4a:	d103      	bne.n	8009f54 <RegionChanMaskSet+0xe>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8009f4c:	0008      	movs	r0, r1
 8009f4e:	f000 fbcd 	bl	800a6ec <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 8009f52:	bd10      	pop	{r4, pc}
            return false;
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7fc      	b.n	8009f52 <RegionChanMaskSet+0xc>

08009f58 <RegionAdrNext>:

bool RegionAdrNext( LoRaMacRegion_t region, AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	0004      	movs	r4, r0
 8009f5c:	0008      	movs	r0, r1
 8009f5e:	0011      	movs	r1, r2
 8009f60:	001a      	movs	r2, r3
    switch( region )
 8009f62:	2c05      	cmp	r4, #5
 8009f64:	d103      	bne.n	8009f6e <RegionAdrNext+0x16>
        AS923_ADR_NEXT( );
        AU915_ADR_NEXT( );
        CN470_ADR_NEXT( );
        CN779_ADR_NEXT( );
        EU433_ADR_NEXT( );
        EU868_ADR_NEXT( );
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	f000 fbd6 	bl	800a718 <RegionEU868AdrNext>
        default:
        {
            return false;
        }
    }
}
 8009f6c:	bd10      	pop	{r4, pc}
            return false;
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e7fc      	b.n	8009f6c <RegionAdrNext+0x14>

08009f72 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009f72:	b510      	push	{r4, lr}
 8009f74:	0004      	movs	r4, r0
 8009f76:	0008      	movs	r0, r1
 8009f78:	0011      	movs	r1, r2
 8009f7a:	001a      	movs	r2, r3
    switch( region )
 8009f7c:	2c05      	cmp	r4, #5
 8009f7e:	d102      	bne.n	8009f86 <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009f80:	9b02      	ldr	r3, [sp, #8]
 8009f82:	f000 fc03 	bl	800a78c <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 8009f86:	bd10      	pop	{r4, pc}

08009f88 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	000b      	movs	r3, r1
    switch( region )
 8009f8c:	2805      	cmp	r0, #5
 8009f8e:	d104      	bne.n	8009f9a <RegionRxConfig+0x12>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009f90:	0011      	movs	r1, r2
 8009f92:	0018      	movs	r0, r3
 8009f94:	f000 fc3c 	bl	800a810 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 8009f98:	bd10      	pop	{r4, pc}
            return false;
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e7fc      	b.n	8009f98 <RegionRxConfig+0x10>

08009f9e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	0004      	movs	r4, r0
 8009fa2:	0008      	movs	r0, r1
 8009fa4:	0011      	movs	r1, r2
    switch( region )
 8009fa6:	2c05      	cmp	r4, #5
 8009fa8:	d103      	bne.n	8009fb2 <RegionTxConfig+0x14>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8009faa:	001a      	movs	r2, r3
 8009fac:	f000 fca4 	bl	800a8f8 <RegionEU868TxConfig>
        default:
        {
            return false;
        }
    }
}
 8009fb0:	bd10      	pop	{r4, pc}
            return false;
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e7fc      	b.n	8009fb0 <RegionTxConfig+0x12>

08009fb6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009fb6:	b513      	push	{r0, r1, r4, lr}
 8009fb8:	0004      	movs	r4, r0
 8009fba:	0008      	movs	r0, r1
 8009fbc:	0011      	movs	r1, r2
 8009fbe:	001a      	movs	r2, r3
    switch( region )
 8009fc0:	2c05      	cmp	r4, #5
 8009fc2:	d105      	bne.n	8009fd0 <RegionLinkAdrReq+0x1a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8009fc4:	9b05      	ldr	r3, [sp, #20]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	f000 fd21 	bl	800aa10 <RegionEU868LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 8009fce:	bd16      	pop	{r1, r2, r4, pc}
            return 0;
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e7fc      	b.n	8009fce <RegionLinkAdrReq+0x18>

08009fd4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009fd4:	b510      	push	{r4, lr}
    switch( region )
 8009fd6:	2805      	cmp	r0, #5
 8009fd8:	d103      	bne.n	8009fe2 <RegionRxParamSetupReq+0xe>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8009fda:	0008      	movs	r0, r1
 8009fdc:	f000 fda2 	bl	800ab24 <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 8009fe0:	bd10      	pop	{r4, pc}
            return 0;
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e7fc      	b.n	8009fe0 <RegionRxParamSetupReq+0xc>

08009fe6 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8009fe6:	b510      	push	{r4, lr}
    switch( region )
 8009fe8:	2805      	cmp	r0, #5
 8009fea:	d103      	bne.n	8009ff4 <RegionNewChannelReq+0xe>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8009fec:	0008      	movs	r0, r1
 8009fee:	f000 ff61 	bl	800aeb4 <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 8009ff2:	bd10      	pop	{r4, pc}
            return 0;
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7fc      	b.n	8009ff2 <RegionNewChannelReq+0xc>

08009ff8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8009ff8:	b510      	push	{r4, lr}
    switch( region )
 8009ffa:	2805      	cmp	r0, #5
 8009ffc:	d103      	bne.n	800a006 <RegionTxParamSetupReq+0xe>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8009ffe:	0008      	movs	r0, r1
 800a000:	f000 fdb4 	bl	800ab6c <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800a004:	bd10      	pop	{r4, pc}
            return 0;
 800a006:	2000      	movs	r0, #0
 800a008:	e7fc      	b.n	800a004 <RegionTxParamSetupReq+0xc>

0800a00a <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800a00a:	b510      	push	{r4, lr}
    switch( region )
 800a00c:	2805      	cmp	r0, #5
 800a00e:	d103      	bne.n	800a018 <RegionDlChannelReq+0xe>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800a010:	0008      	movs	r0, r1
 800a012:	f000 fdaf 	bl	800ab74 <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800a016:	bd10      	pop	{r4, pc}
            return 0;
 800a018:	2000      	movs	r0, #0
 800a01a:	e7fc      	b.n	800a016 <RegionDlChannelReq+0xc>

0800a01c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, AlternateDrParams_t* alternateDr )
{
 800a01c:	b510      	push	{r4, lr}
    switch( region )
 800a01e:	2805      	cmp	r0, #5
 800a020:	d103      	bne.n	800a02a <RegionAlternateDr+0xe>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800a022:	0008      	movs	r0, r1
 800a024:	f000 fdc6 	bl	800abb4 <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800a028:	bd10      	pop	{r4, pc}
            return 0;
 800a02a:	2000      	movs	r0, #0
 800a02c:	e7fc      	b.n	800a028 <RegionAlternateDr+0xc>

0800a02e <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800a02e:	b510      	push	{r4, lr}
    switch( region )
 800a030:	2805      	cmp	r0, #5
 800a032:	d102      	bne.n	800a03a <RegionCalcBackOff+0xc>
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
 800a034:	0008      	movs	r0, r1
 800a036:	f000 fddb 	bl	800abf0 <RegionEU868CalcBackOff>
        default:
        {
            break;
        }
    }
}
 800a03a:	bd10      	pop	{r4, pc}

0800a03c <RegionNextChannel>:

bool RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a03c:	b510      	push	{r4, lr}
 800a03e:	0004      	movs	r4, r0
 800a040:	0008      	movs	r0, r1
 800a042:	0011      	movs	r1, r2
 800a044:	001a      	movs	r2, r3
    switch( region )
 800a046:	2c05      	cmp	r4, #5
 800a048:	d103      	bne.n	800a052 <RegionNextChannel+0x16>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	f000 fdec 	bl	800ac28 <RegionEU868NextChannel>
        default:
        {
            return false;
        }
    }
}
 800a050:	bd10      	pop	{r4, pc}
            return false;
 800a052:	2000      	movs	r0, #0
 800a054:	e7fc      	b.n	800a050 <RegionNextChannel+0x14>

0800a056 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800a056:	b510      	push	{r4, lr}
    switch( region )
 800a058:	2805      	cmp	r0, #5
 800a05a:	d102      	bne.n	800a062 <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800a05c:	0008      	movs	r0, r1
 800a05e:	f000 ff4b 	bl	800aef8 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800a062:	bd10      	pop	{r4, pc}

0800a064 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a064:	b510      	push	{r4, lr}
 800a066:	0004      	movs	r4, r0
 800a068:	0008      	movs	r0, r1
 800a06a:	0011      	movs	r1, r2
    switch( region )
 800a06c:	2c05      	cmp	r4, #5
 800a06e:	d103      	bne.n	800a078 <RegionApplyDrOffset+0x14>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 800a070:	001a      	movs	r2, r3
 800a072:	f000 ff69 	bl	800af48 <RegionEU868ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 800a076:	bd10      	pop	{r4, pc}
            return dr;
 800a078:	b2d0      	uxtb	r0, r2
 800a07a:	e7fc      	b.n	800a076 <RegionApplyDrOffset+0x12>

0800a07c <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <RegionCommonGetJoinDc+0x20>)
{
 800a07e:	0002      	movs	r2, r0
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800a080:	2064      	movs	r0, #100	; 0x64
    if( elapsedTime < 3600000 )
 800a082:	429a      	cmp	r2, r3
 800a084:	d908      	bls.n	800a098 <RegionCommonGetJoinDc+0x1c>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800a086:	2300      	movs	r3, #0
 800a088:	4905      	ldr	r1, [pc, #20]	; (800a0a0 <RegionCommonGetJoinDc+0x24>)
 800a08a:	4291      	cmp	r1, r2
 800a08c:	415b      	adcs	r3, r3
 800a08e:	4258      	negs	r0, r3
 800a090:	4b04      	ldr	r3, [pc, #16]	; (800a0a4 <RegionCommonGetJoinDc+0x28>)
 800a092:	4018      	ands	r0, r3
 800a094:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <RegionCommonGetJoinDc+0x2c>)
 800a096:	18c0      	adds	r0, r0, r3
    }
    return dutyCycle;
}
 800a098:	4770      	bx	lr
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	0036ee7f 	.word	0x0036ee7f
 800a0a0:	025c3f7f 	.word	0x025c3f7f
 800a0a4:	ffffdcd8 	.word	0xffffdcd8
 800a0a8:	00002710 	.word	0x00002710

0800a0ac <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800a0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	9101      	str	r1, [sp, #4]
 800a0b2:	ac08      	add	r4, sp, #32
 800a0b4:	57a6      	ldrsb	r6, [r4, r6]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800a0b6:	2500      	movs	r5, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	db09      	blt.n	800a0d0 <RegionCommonChanVerifyDr+0x24>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a0bc:	002c      	movs	r4, r5
    if( ( value >= min ) && ( value <= max ) )
 800a0be:	42b2      	cmp	r2, r6
 800a0c0:	dc06      	bgt.n	800a0d0 <RegionCommonChanVerifyDr+0x24>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a0c2:	230f      	movs	r3, #15
 800a0c4:	469c      	mov	ip, r3
 800a0c6:	0127      	lsls	r7, r4, #4
 800a0c8:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a0ca:	42b8      	cmp	r0, r7
 800a0cc:	d802      	bhi.n	800a0d4 <RegionCommonChanVerifyDr+0x28>
        return false;
 800a0ce:	2500      	movs	r5, #0
}
 800a0d0:	0028      	movs	r0, r5
 800a0d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	9901      	ldr	r1, [sp, #4]
 800a0d8:	0063      	lsls	r3, r4, #1
 800a0da:	5a5b      	ldrh	r3, [r3, r1]
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	9b00      	ldr	r3, [sp, #0]
 800a0e0:	2601      	movs	r6, #1
 800a0e2:	412b      	asrs	r3, r5
 800a0e4:	4233      	tst	r3, r6
 800a0e6:	d010      	beq.n	800a10a <RegionCommonChanVerifyDr+0x5e>
    if( ( value >= min ) && ( value <= max ) )
 800a0e8:	4661      	mov	r1, ip
 800a0ea:	360b      	adds	r6, #11
 800a0ec:	197b      	adds	r3, r7, r5
 800a0ee:	4373      	muls	r3, r6
 800a0f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0f2:	18f3      	adds	r3, r6, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800a0f4:	7a1b      	ldrb	r3, [r3, #8]
 800a0f6:	b25e      	sxtb	r6, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a0f8:	071b      	lsls	r3, r3, #28
 800a0fa:	171b      	asrs	r3, r3, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800a0fc:	1136      	asrs	r6, r6, #4
    if( ( value >= min ) && ( value <= max ) )
 800a0fe:	400b      	ands	r3, r1
 800a100:	429a      	cmp	r2, r3
 800a102:	db02      	blt.n	800a10a <RegionCommonChanVerifyDr+0x5e>
 800a104:	400e      	ands	r6, r1
 800a106:	42b2      	cmp	r2, r6
 800a108:	dd05      	ble.n	800a116 <RegionCommonChanVerifyDr+0x6a>
 800a10a:	3501      	adds	r5, #1
        for( uint8_t j = 0; j < 16; j++ )
 800a10c:	2d10      	cmp	r5, #16
 800a10e:	d1e6      	bne.n	800a0de <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a110:	3401      	adds	r4, #1
 800a112:	b2e4      	uxtb	r4, r4
 800a114:	e7d7      	b.n	800a0c6 <RegionCommonChanVerifyDr+0x1a>
                    return true;
 800a116:	2501      	movs	r5, #1
 800a118:	e7da      	b.n	800a0d0 <RegionCommonChanVerifyDr+0x24>

0800a11a <RegionCommonValueInRange>:
    {
        return 1;
    }
    return 0;
 800a11a:	2300      	movs	r3, #0
    if( ( value >= min ) && ( value <= max ) )
 800a11c:	4288      	cmp	r0, r1
 800a11e:	db04      	blt.n	800a12a <RegionCommonValueInRange+0x10>
 800a120:	0fc3      	lsrs	r3, r0, #31
 800a122:	17d1      	asrs	r1, r2, #31
 800a124:	4282      	cmp	r2, r0
 800a126:	414b      	adcs	r3, r1
        return 1;
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	0018      	movs	r0, r3
 800a12c:	4770      	bx	lr

0800a12e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800a12e:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    {
        return false;
 800a130:	2300      	movs	r3, #0
    uint8_t index = id / 16;
 800a132:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800a134:	0915      	lsrs	r5, r2, #4
 800a136:	42a5      	cmp	r5, r4
 800a138:	d30c      	bcc.n	800a154 <RegionCommonChanDisable+0x26>
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d20a      	bcs.n	800a154 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800a13e:	330f      	adds	r3, #15
 800a140:	4019      	ands	r1, r3
 800a142:	3b0e      	subs	r3, #14
 800a144:	001a      	movs	r2, r3
 800a146:	408a      	lsls	r2, r1
 800a148:	0011      	movs	r1, r2
 800a14a:	0064      	lsls	r4, r4, #1
 800a14c:	1900      	adds	r0, r0, r4
 800a14e:	8802      	ldrh	r2, [r0, #0]
 800a150:	438a      	bics	r2, r1
 800a152:	8002      	strh	r2, [r0, #0]

    return true;
}
 800a154:	0018      	movs	r0, r3
 800a156:	bd30      	pop	{r4, r5, pc}

0800a158 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
    {
        return 0;
 800a15a:	1e06      	subs	r6, r0, #0
{
 800a15c:	9201      	str	r2, [sp, #4]
    if( channelsMask == NULL )
 800a15e:	d005      	beq.n	800a16c <RegionCommonCountChannels+0x14>
    uint8_t nbChannels = 0;
 800a160:	2600      	movs	r6, #0
 800a162:	004b      	lsls	r3, r1, #1
 800a164:	18c3      	adds	r3, r0, r3
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a166:	9a01      	ldr	r2, [sp, #4]
 800a168:	4291      	cmp	r1, r2
 800a16a:	d301      	bcc.n	800a170 <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800a16c:	0030      	movs	r0, r6
 800a16e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a170:	2500      	movs	r5, #0
    uint8_t nbActiveBits = 0;
 800a172:	002c      	movs	r4, r5
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a174:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800a176:	2001      	movs	r0, #1
 800a178:	40a8      	lsls	r0, r5
 800a17a:	0002      	movs	r2, r0
 800a17c:	403a      	ands	r2, r7
 800a17e:	4290      	cmp	r0, r2
 800a180:	d101      	bne.n	800a186 <RegionCommonCountChannels+0x2e>
            nbActiveBits++;
 800a182:	3401      	adds	r4, #1
 800a184:	b2e4      	uxtb	r4, r4
 800a186:	3501      	adds	r5, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 800a188:	2d10      	cmp	r5, #16
 800a18a:	d1f4      	bne.n	800a176 <RegionCommonCountChannels+0x1e>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a18c:	1936      	adds	r6, r6, r4
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a18e:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a190:	b2f6      	uxtb	r6, r6
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a192:	b2c9      	uxtb	r1, r1
 800a194:	3302      	adds	r3, #2
 800a196:	e7e6      	b.n	800a166 <RegionCommonCountChannels+0xe>

0800a198 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a198:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d005      	beq.n	800a1aa <RegionCommonChanMaskCopy+0x12>
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d003      	beq.n	800a1aa <RegionCommonChanMaskCopy+0x12>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d100      	bne.n	800a1ac <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800a1aa:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a1ac:	5acc      	ldrh	r4, [r1, r3]
 800a1ae:	52c4      	strh	r4, [r0, r3]
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7f8      	b.n	800a1a6 <RegionCommonChanMaskCopy+0xe>

0800a1b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 800a1b4:	608a      	str	r2, [r1, #8]
    if( joined == true )
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d000      	beq.n	800a1bc <RegionCommonSetBandTxDone+0x8>
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800a1ba:	4770      	bx	lr
        band->LastJoinTxDoneTime = lastTxDone;
 800a1bc:	604a      	str	r2, [r1, #4]
}
 800a1be:	e7fc      	b.n	800a1ba <RegionCommonSetBandTxDone+0x6>

0800a1c0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800a1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800a1c2:	2501      	movs	r5, #1
{
 800a1c4:	000f      	movs	r7, r1
 800a1c6:	1d14      	adds	r4, r2, #4
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	191b      	adds	r3, r3, r4
 800a1cc:	9001      	str	r0, [sp, #4]
 800a1ce:	9300      	str	r3, [sp, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800a1d0:	426d      	negs	r5, r5

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800a1d2:	9b00      	ldr	r3, [sp, #0]
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d101      	bne.n	800a1dc <RegionCommonUpdateBandTimeOff+0x1c>
                bands[i].TimeOff = 0;
            }
        }
    }
    return nextTxDelay;
}
 800a1d8:	0028      	movs	r0, r5
 800a1da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( joined == false )
 800a1dc:	9b01      	ldr	r3, [sp, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d11e      	bne.n	800a220 <RegionCommonUpdateBandTimeOff+0x60>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	f000 ffcd 	bl	800b182 <TimerGetElapsedTime>
 800a1e8:	0006      	movs	r6, r0
 800a1ea:	2f00      	cmp	r7, #0
 800a1ec:	d034      	beq.n	800a258 <RegionCommonUpdateBandTimeOff+0x98>
 800a1ee:	6860      	ldr	r0, [r4, #4]
 800a1f0:	f000 ffc7 	bl	800b182 <TimerGetElapsedTime>
 800a1f4:	4286      	cmp	r6, r0
 800a1f6:	d911      	bls.n	800a21c <RegionCommonUpdateBandTimeOff+0x5c>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	f000 ffc2 	bl	800b182 <TimerGetElapsedTime>
 800a1fe:	0006      	movs	r6, r0
            if( bands[i].TimeOff <= txDoneTime )
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	42b3      	cmp	r3, r6
 800a204:	d801      	bhi.n	800a20a <RegionCommonUpdateBandTimeOff+0x4a>
                bands[i].TimeOff = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	60a3      	str	r3, [r4, #8]
            if( bands[i].TimeOff != 0 )
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800a210:	1b9e      	subs	r6, r3, r6
 800a212:	42b5      	cmp	r5, r6
 800a214:	d900      	bls.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
 800a216:	0035      	movs	r5, r6
 800a218:	3410      	adds	r4, #16
 800a21a:	e7da      	b.n	800a1d2 <RegionCommonUpdateBandTimeOff+0x12>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a21c:	6860      	ldr	r0, [r4, #4]
 800a21e:	e7ec      	b.n	800a1fa <RegionCommonUpdateBandTimeOff+0x3a>
            if( dutyCycle == true )
 800a220:	2f00      	cmp	r7, #0
 800a222:	d016      	beq.n	800a252 <RegionCommonUpdateBandTimeOff+0x92>
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 800a224:	6860      	ldr	r0, [r4, #4]
 800a226:	68a6      	ldr	r6, [r4, #8]
 800a228:	f000 ffab 	bl	800b182 <TimerGetElapsedTime>
 800a22c:	4286      	cmp	r6, r0
 800a22e:	d801      	bhi.n	800a234 <RegionCommonUpdateBandTimeOff+0x74>
                    bands[i].TimeOff = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	60a3      	str	r3, [r4, #8]
                if( bands[i].TimeOff != 0 )
 800a234:	68a6      	ldr	r6, [r4, #8]
 800a236:	2e00      	cmp	r6, #0
 800a238:	d0ee      	beq.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 800a23a:	6860      	ldr	r0, [r4, #4]
 800a23c:	f000 ffa1 	bl	800b182 <TimerGetElapsedTime>
 800a240:	1a36      	subs	r6, r6, r0
 800a242:	42ae      	cmp	r6, r5
 800a244:	d2e8      	bcs.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
 800a246:	6860      	ldr	r0, [r4, #4]
 800a248:	68a5      	ldr	r5, [r4, #8]
 800a24a:	f000 ff9a 	bl	800b182 <TimerGetElapsedTime>
 800a24e:	1a2d      	subs	r5, r5, r0
 800a250:	e7e2      	b.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
                bands[i].TimeOff = 0;
 800a252:	60a7      	str	r7, [r4, #8]
                nextTxDelay = 0;
 800a254:	003d      	movs	r5, r7
 800a256:	e7df      	b.n	800a218 <RegionCommonUpdateBandTimeOff+0x58>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0d1      	beq.n	800a200 <RegionCommonUpdateBandTimeOff+0x40>
 800a25c:	e7cc      	b.n	800a1f8 <RegionCommonUpdateBandTimeOff+0x38>

0800a25e <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800a25e:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a260:	7802      	ldrb	r2, [r0, #0]
{
 800a262:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800a264:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a266:	2a03      	cmp	r2, #3
 800a268:	d113      	bne.n	800a292 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800a26a:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a26c:	300f      	adds	r0, #15
 800a26e:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a270:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a272:	4004      	ands	r4, r0
 800a274:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a276:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800a278:	789a      	ldrb	r2, [r3, #2]
 800a27a:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800a27c:	78dc      	ldrb	r4, [r3, #3]
 800a27e:	0224      	lsls	r4, r4, #8
 800a280:	4322      	orrs	r2, r4
 800a282:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800a284:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a286:	065a      	lsls	r2, r3, #25
 800a288:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800a28a:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a28c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800a28e:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800a290:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800a292:	bd10      	pop	{r4, pc}

0800a294 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	b087      	sub	sp, #28
 800a298:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800a29a:	2302      	movs	r3, #2
    int8_t txPower = verifyParams->TxPower;
 800a29c:	2603      	movs	r6, #3
    int8_t nbRepetitions = verifyParams->NbRep;
 800a29e:	2704      	movs	r7, #4
{
 800a2a0:	9103      	str	r1, [sp, #12]
 800a2a2:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800a2a4:	56c3      	ldrsb	r3, [r0, r3]
{
 800a2a6:	0004      	movs	r4, r0
    int8_t datarate = verifyParams->Datarate;
 800a2a8:	9302      	str	r3, [sp, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800a2aa:	7843      	ldrb	r3, [r0, #1]
    uint8_t status = verifyParams->Status;
 800a2ac:	7805      	ldrb	r5, [r0, #0]
    int8_t txPower = verifyParams->TxPower;
 800a2ae:	5786      	ldrsb	r6, [r0, r6]
    int8_t nbRepetitions = verifyParams->NbRep;
 800a2b0:	57c7      	ldrsb	r7, [r0, r7]
    if( verifyParams->AdrEnabled == false )
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10c      	bne.n	800a2d0 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    {
        // When ADR is off, we are allowed to change the channels mask and the NbRep,
        // if the datarate and the TX power of the LinkAdrReq are set to 0x0F.
        if( ( verifyParams->Datarate != 0x0F ) || ( verifyParams->TxPower != 0x0F ) )
 800a2b6:	4a1d      	ldr	r2, [pc, #116]	; (800a32c <RegionCommonLinkAdrReqVerifyParams+0x98>)
 800a2b8:	2002      	movs	r0, #2
 800a2ba:	5e21      	ldrsh	r1, [r4, r0]
 800a2bc:	4291      	cmp	r1, r2
 800a2be:	d002      	beq.n	800a2c6 <RegionCommonLinkAdrReqVerifyParams+0x32>
        {
            status = 0;
            nbRepetitions = verifyParams->CurrentNbRep;
 800a2c0:	2707      	movs	r7, #7
            status = 0;
 800a2c2:	001d      	movs	r5, r3
            nbRepetitions = verifyParams->CurrentNbRep;
 800a2c4:	57e7      	ldrsb	r7, [r4, r7]
        }
        // Get the current datarate and tx power
        datarate = verifyParams->CurrentDatarate;
 800a2c6:	2305      	movs	r3, #5
        txPower = verifyParams->CurrentTxPower;
 800a2c8:	2606      	movs	r6, #6
        datarate = verifyParams->CurrentDatarate;
 800a2ca:	56e3      	ldrsb	r3, [r4, r3]
        txPower = verifyParams->CurrentTxPower;
 800a2cc:	57a6      	ldrsb	r6, [r4, r6]
        datarate = verifyParams->CurrentDatarate;
 800a2ce:	9302      	str	r3, [sp, #8]
    }

    if( status != 0 )
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d01f      	beq.n	800a314 <RegionCommonLinkAdrReqVerifyParams+0x80>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800a2d4:	6962      	ldr	r2, [r4, #20]
 800a2d6:	2310      	movs	r3, #16
 800a2d8:	9201      	str	r2, [sp, #4]
 800a2da:	2211      	movs	r2, #17
 800a2dc:	56a2      	ldrsb	r2, [r4, r2]
 800a2de:	56e3      	ldrsb	r3, [r4, r3]
 800a2e0:	9200      	str	r2, [sp, #0]
 800a2e2:	7a20      	ldrb	r0, [r4, #8]
 800a2e4:	9a02      	ldr	r2, [sp, #8]
 800a2e6:	68e1      	ldr	r1, [r4, #12]
 800a2e8:	f7ff fee0 	bl	800a0ac <RegionCommonChanVerifyDr>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d101      	bne.n	800a2f4 <RegionCommonLinkAdrReqVerifyParams+0x60>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800a2f4:	2319      	movs	r3, #25
 800a2f6:	2218      	movs	r2, #24
 800a2f8:	56e3      	ldrsb	r3, [r4, r3]
 800a2fa:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	dc13      	bgt.n	800a328 <RegionCommonLinkAdrReqVerifyParams+0x94>
 800a300:	42b2      	cmp	r2, r6
 800a302:	da01      	bge.n	800a308 <RegionCommonLinkAdrReqVerifyParams+0x74>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800a304:	2304      	movs	r3, #4
 800a306:	439d      	bics	r5, r3
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800a308:	2d07      	cmp	r5, #7
 800a30a:	d103      	bne.n	800a314 <RegionCommonLinkAdrReqVerifyParams+0x80>
    {
        if( nbRepetitions == 0 )
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d101      	bne.n	800a314 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // Keep the current one
            nbRepetitions = verifyParams->CurrentNbRep;
 800a310:	2707      	movs	r7, #7
 800a312:	57e7      	ldrsb	r7, [r4, r7]
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800a314:	0028      	movs	r0, r5
    *dr = datarate;
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	9a02      	ldr	r2, [sp, #8]
 800a31a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	701f      	strb	r7, [r3, #0]
}
 800a324:	b007      	add	sp, #28
 800a326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( value >= min ) && ( value <= max ) )
 800a328:	001e      	movs	r6, r3
 800a32a:	e7ed      	b.n	800a308 <RegionCommonLinkAdrReqVerifyParams+0x74>
 800a32c:	00000f0f 	.word	0x00000f0f

0800a330 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a330:	2301      	movs	r3, #1
 800a332:	4083      	lsls	r3, r0
{
 800a334:	b5d0      	push	{r4, r6, r7, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a336:	0018      	movs	r0, r3
{
 800a338:	000c      	movs	r4, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a33a:	f7f8 fe07 	bl	8002f4c <__aeabi_i2d>
 800a33e:	0006      	movs	r6, r0
 800a340:	0020      	movs	r0, r4
 800a342:	000f      	movs	r7, r1
 800a344:	f7f8 fe3c 	bl	8002fc0 <__aeabi_ui2d>
 800a348:	0002      	movs	r2, r0
 800a34a:	000b      	movs	r3, r1
 800a34c:	0030      	movs	r0, r6
 800a34e:	0039      	movs	r1, r7
 800a350:	f7f7 fc02 	bl	8001b58 <__aeabi_ddiv>
 800a354:	2200      	movs	r2, #0
 800a356:	4b02      	ldr	r3, [pc, #8]	; (800a360 <RegionCommonComputeSymbolTimeLoRa+0x30>)
 800a358:	f7f8 f808 	bl	800236c <__aeabi_dmul>
}
 800a35c:	bdd0      	pop	{r4, r6, r7, pc}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	408f4000 	.word	0x408f4000

0800a364 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800a364:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800a366:	f7f8 fe2b 	bl	8002fc0 <__aeabi_ui2d>
 800a36a:	0002      	movs	r2, r0
 800a36c:	000b      	movs	r3, r1
 800a36e:	2000      	movs	r0, #0
 800a370:	4901      	ldr	r1, [pc, #4]	; (800a378 <RegionCommonComputeSymbolTimeFsk+0x14>)
 800a372:	f7f7 fbf1 	bl	8001b58 <__aeabi_ddiv>
}
 800a376:	bd10      	pop	{r4, pc}
 800a378:	40200000 	.word	0x40200000

0800a37c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37e:	0004      	movs	r4, r0
 800a380:	000d      	movs	r5, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a382:	1f10      	subs	r0, r2, #4
{
 800a384:	b085      	sub	sp, #20
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a386:	0040      	lsls	r0, r0, #1
{
 800a388:	9200      	str	r2, [sp, #0]
 800a38a:	9303      	str	r3, [sp, #12]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a38c:	f7f8 fdde 	bl	8002f4c <__aeabi_i2d>
 800a390:	0022      	movs	r2, r4
 800a392:	002b      	movs	r3, r5
 800a394:	f7f7 ffea 	bl	800236c <__aeabi_dmul>
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	0006      	movs	r6, r0
 800a39c:	0058      	lsls	r0, r3, #1
 800a39e:	000f      	movs	r7, r1
 800a3a0:	f7f8 fe0e 	bl	8002fc0 <__aeabi_ui2d>
 800a3a4:	0002      	movs	r2, r0
 800a3a6:	000b      	movs	r3, r1
 800a3a8:	0030      	movs	r0, r6
 800a3aa:	0039      	movs	r1, r7
 800a3ac:	f7f7 f8b8 	bl	8001520 <__aeabi_dadd>
 800a3b0:	002b      	movs	r3, r5
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	f7f7 fbd0 	bl	8001b58 <__aeabi_ddiv>
 800a3b8:	f002 fc1c 	bl	800cbf4 <ceil>
 800a3bc:	f7f6 f908 	bl	80005d0 <__aeabi_d2uiz>
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	0006      	movs	r6, r0
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	d200      	bcs.n	800a3ca <RegionCommonComputeRxWindowParameters+0x4e>
 800a3c8:	001e      	movs	r6, r3
 800a3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800a3cc:	2200      	movs	r2, #0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a3ce:	601e      	str	r6, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800a3d0:	0020      	movs	r0, r4
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <RegionCommonComputeRxWindowParameters+0xac>)
 800a3d4:	0029      	movs	r1, r5
 800a3d6:	f7f7 ffc9 	bl	800236c <__aeabi_dmul>
 800a3da:	9000      	str	r0, [sp, #0]
 800a3dc:	9101      	str	r1, [sp, #4]
 800a3de:	0030      	movs	r0, r6
 800a3e0:	f7f8 fdee 	bl	8002fc0 <__aeabi_ui2d>
 800a3e4:	0022      	movs	r2, r4
 800a3e6:	002b      	movs	r3, r5
 800a3e8:	f7f7 ffc0 	bl	800236c <__aeabi_dmul>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <RegionCommonComputeRxWindowParameters+0xb0>)
 800a3f0:	f7f7 ffbc 	bl	800236c <__aeabi_dmul>
 800a3f4:	0002      	movs	r2, r0
 800a3f6:	000b      	movs	r3, r1
 800a3f8:	9800      	ldr	r0, [sp, #0]
 800a3fa:	9901      	ldr	r1, [sp, #4]
 800a3fc:	f7f8 fa28 	bl	8002850 <__aeabi_dsub>
 800a400:	0004      	movs	r4, r0
 800a402:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a404:	000d      	movs	r5, r1
 800a406:	f7f8 fddb 	bl	8002fc0 <__aeabi_ui2d>
 800a40a:	0002      	movs	r2, r0
 800a40c:	000b      	movs	r3, r1
 800a40e:	0020      	movs	r0, r4
 800a410:	0029      	movs	r1, r5
 800a412:	f7f8 fa1d 	bl	8002850 <__aeabi_dsub>
 800a416:	f002 fbed 	bl	800cbf4 <ceil>
 800a41a:	f7f8 fd61 	bl	8002ee0 <__aeabi_d2iz>
 800a41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a420:	6018      	str	r0, [r3, #0]
}
 800a422:	b005      	add	sp, #20
 800a424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	40100000 	.word	0x40100000
 800a42c:	3fe00000 	.word	0x3fe00000

0800a430 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800a430:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a432:	0040      	lsls	r0, r0, #1
{
 800a434:	1c14      	adds	r4, r2, #0
 800a436:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a438:	f7f7 f832 	bl	80014a0 <__aeabi_ui2f>
 800a43c:	1c01      	adds	r1, r0, #0
 800a43e:	1c28      	adds	r0, r5, #0
 800a440:	f7f6 fe4a 	bl	80010d8 <__aeabi_fsub>
 800a444:	1c21      	adds	r1, r4, #0
 800a446:	f7f6 fe47 	bl	80010d8 <__aeabi_fsub>
 800a44a:	f7f8 fdeb 	bl	8003024 <__aeabi_f2d>
 800a44e:	f002 fc53 	bl	800ccf8 <floor>
 800a452:	f7f8 fd45 	bl	8002ee0 <__aeabi_d2iz>

    return phyTxPower;
 800a456:	b240      	sxtb	r0, r0
}
 800a458:	bd70      	pop	{r4, r5, r6, pc}

0800a45a <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 800a45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800a45c:	230c      	movs	r3, #12
 800a45e:	7ac2      	ldrb	r2, [r0, #11]
{
 800a460:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800a462:	4353      	muls	r3, r2
 800a464:	6802      	ldr	r2, [r0, #0]
 800a466:	18d3      	adds	r3, r2, r3
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800a468:	7a5d      	ldrb	r5, [r3, #9]
 800a46a:	6843      	ldr	r3, [r0, #4]
 800a46c:	012d      	lsls	r5, r5, #4
 800a46e:	195d      	adds	r5, r3, r5
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 800a474:	7a43      	ldrb	r3, [r0, #9]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800a476:	882e      	ldrh	r6, [r5, #0]
 800a478:	7a87      	ldrb	r7, [r0, #10]
    if( calcBackOffParams->Joined == false )
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d112      	bne.n	800a4a4 <RegionCommonCalcBackOff+0x4a>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800a47e:	68c0      	ldr	r0, [r0, #12]
 800a480:	f7ff fdfc 	bl	800a07c <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800a484:	2f00      	cmp	r7, #0
 800a486:	d102      	bne.n	800a48e <RegionCommonCalcBackOff+0x34>
 800a488:	7a23      	ldrb	r3, [r4, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <RegionCommonCalcBackOff+0x48>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800a48e:	b282      	uxth	r2, r0
 800a490:	1c33      	adds	r3, r6, #0
 800a492:	4296      	cmp	r6, r2
 800a494:	d200      	bcs.n	800a498 <RegionCommonCalcBackOff+0x3e>
 800a496:	1c03      	adds	r3, r0, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3b01      	subs	r3, #1
 800a49e:	4353      	muls	r3, r2
 800a4a0:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 800a4a4:	2f00      	cmp	r7, #0
 800a4a6:	d0fc      	beq.n	800a4a2 <RegionCommonCalcBackOff+0x48>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800a4a8:	6903      	ldr	r3, [r0, #16]
 800a4aa:	3e01      	subs	r6, #1
 800a4ac:	435e      	muls	r6, r3
 800a4ae:	60ee      	str	r6, [r5, #12]
}
 800a4b0:	e7f7      	b.n	800a4a2 <RegionCommonCalcBackOff+0x48>
	...

0800a4b4 <VerifyTxFreq>:

    return txPowerResult;
}

static bool VerifyTxFreq( uint32_t freq, uint8_t *band )
{
 800a4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800a4b6:	4b19      	ldr	r3, [pc, #100]	; (800a51c <VerifyTxFreq+0x68>)
{
 800a4b8:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 800a4bc:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	4798      	blx	r3
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d006      	beq.n	800a4d4 <VerifyTxFreq+0x20>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800a4c6:	4b16      	ldr	r3, [pc, #88]	; (800a520 <VerifyTxFreq+0x6c>)
 800a4c8:	4a16      	ldr	r2, [pc, #88]	; (800a524 <VerifyTxFreq+0x70>)
 800a4ca:	18e3      	adds	r3, r4, r3
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d802      	bhi.n	800a4d6 <VerifyTxFreq+0x22>
    {
        *band = 2;
 800a4d0:	2302      	movs	r3, #2
    {
        *band = 2;
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
    {
        *band = 3;
 800a4d2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800a4d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <VerifyTxFreq+0x74>)
 800a4d8:	4a14      	ldr	r2, [pc, #80]	; (800a52c <VerifyTxFreq+0x78>)
 800a4da:	18e3      	adds	r3, r4, r3
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d801      	bhi.n	800a4e4 <VerifyTxFreq+0x30>
        *band = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e7f6      	b.n	800a4d2 <VerifyTxFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800a4e4:	4b12      	ldr	r3, [pc, #72]	; (800a530 <VerifyTxFreq+0x7c>)
 800a4e6:	4a13      	ldr	r2, [pc, #76]	; (800a534 <VerifyTxFreq+0x80>)
 800a4e8:	18e3      	adds	r3, r4, r3
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d801      	bhi.n	800a4f2 <VerifyTxFreq+0x3e>
        *band = 1;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7ef      	b.n	800a4d2 <VerifyTxFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800a4f2:	4b11      	ldr	r3, [pc, #68]	; (800a538 <VerifyTxFreq+0x84>)
 800a4f4:	4a11      	ldr	r2, [pc, #68]	; (800a53c <VerifyTxFreq+0x88>)
 800a4f6:	18e3      	adds	r3, r4, r3
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d9e9      	bls.n	800a4d0 <VerifyTxFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800a4fc:	4b10      	ldr	r3, [pc, #64]	; (800a540 <VerifyTxFreq+0x8c>)
 800a4fe:	4a11      	ldr	r2, [pc, #68]	; (800a544 <VerifyTxFreq+0x90>)
 800a500:	18e3      	adds	r3, r4, r3
 800a502:	4293      	cmp	r3, r2
 800a504:	d801      	bhi.n	800a50a <VerifyTxFreq+0x56>
        *band = 3;
 800a506:	2303      	movs	r3, #3
 800a508:	e7e3      	b.n	800a4d2 <VerifyTxFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <VerifyTxFreq+0x94>)
 800a50c:	18e4      	adds	r4, r4, r3
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <VerifyTxFreq+0x98>)
 800a510:	429c      	cmp	r4, r3
 800a512:	d801      	bhi.n	800a518 <VerifyTxFreq+0x64>
        *band = 4;
 800a514:	2304      	movs	r3, #4
 800a516:	e7dc      	b.n	800a4d2 <VerifyTxFreq+0x1e>
        return false;
 800a518:	2000      	movs	r0, #0
 800a51a:	e7db      	b.n	800a4d4 <VerifyTxFreq+0x20>
 800a51c:	0800cfc4 	.word	0x0800cfc4
 800a520:	cc8faa40 	.word	0xcc8faa40
 800a524:	001e847f 	.word	0x001e847f
 800a528:	cc7125c0 	.word	0xcc7125c0
 800a52c:	002dc6c0 	.word	0x002dc6c0
 800a530:	cc435eff 	.word	0xcc435eff
 800a534:	000927bf 	.word	0x000927bf
 800a538:	cc38b0a0 	.word	0xcc38b0a0
 800a53c:	0007a120 	.word	0x0007a120
 800a540:	cc2e0240 	.word	0xcc2e0240
 800a544:	0003d090 	.word	0x0003d090
 800a548:	cc296e60 	.word	0xcc296e60
 800a54c:	000493e0 	.word	0x000493e0

0800a550 <RegionEU868GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800a550:	0003      	movs	r3, r0
    PhyParam_t phyParam = { 0 };

    switch( getPhy->Attribute )
 800a552:	7800      	ldrb	r0, [r0, #0]
{
 800a554:	b510      	push	{r4, lr}
    switch( getPhy->Attribute )
 800a556:	3809      	subs	r0, #9
 800a558:	2817      	cmp	r0, #23
 800a55a:	d84d      	bhi.n	800a5f8 <RegionEU868GetPhyParam+0xa8>
 800a55c:	f7f5 fdd4 	bl	8000108 <__gnu_thumb1_case_uqi>
 800a560:	220c1c17 	.word	0x220c1c17
 800a564:	2c2a2724 	.word	0x2c2a2724
 800a568:	3a4c312e 	.word	0x3a4c312e
 800a56c:	413e3c4c 	.word	0x413e3c4c
 800a570:	454c4c43 	.word	0x454c4c43
 800a574:	0e4a4a48 	.word	0x0e4a4a48
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
            break;
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800a578:	2001      	movs	r0, #1
            break;
        }
    }

    return phyParam;
}
 800a57a:	bd10      	pop	{r4, pc}
        nextLowerDr = minDr;
 800a57c:	2000      	movs	r0, #0
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	b25b      	sxtb	r3, r3
    if( dr == minDr )
 800a582:	4283      	cmp	r3, r0
 800a584:	d001      	beq.n	800a58a <RegionEU868GetPhyParam+0x3a>
        nextLowerDr = dr - 1;
 800a586:	3b01      	subs	r3, #1
 800a588:	b2d8      	uxtb	r0, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800a58a:	b240      	sxtb	r0, r0
            break;
 800a58c:	e7f5      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	4a1a      	ldr	r2, [pc, #104]	; (800a5fc <RegionEU868GetPhyParam+0xac>)
 800a592:	b25b      	sxtb	r3, r3
 800a594:	5cd0      	ldrb	r0, [r2, r3]
            break;
 800a596:	e7f0      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800a598:	2201      	movs	r2, #1
 800a59a:	569a      	ldrsb	r2, [r3, r2]
 800a59c:	4b17      	ldr	r3, [pc, #92]	; (800a5fc <RegionEU868GetPhyParam+0xac>)
 800a59e:	189b      	adds	r3, r3, r2
 800a5a0:	7a18      	ldrb	r0, [r3, #8]
            break;
 800a5a2:	e7ea      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800a5a4:	4816      	ldr	r0, [pc, #88]	; (800a600 <RegionEU868GetPhyParam+0xb0>)
            break;
 800a5a6:	e7e8      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800a5a8:	20fa      	movs	r0, #250	; 0xfa
 800a5aa:	0080      	lsls	r0, r0, #2
            break;
 800a5ac:	e7e5      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800a5ae:	20fa      	movs	r0, #250	; 0xfa
 800a5b0:	00c0      	lsls	r0, r0, #3
            break;
 800a5b2:	e7e2      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800a5b4:	4813      	ldr	r0, [pc, #76]	; (800a604 <RegionEU868GetPhyParam+0xb4>)
            break;
 800a5b6:	e7e0      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800a5b8:	4813      	ldr	r0, [pc, #76]	; (800a608 <RegionEU868GetPhyParam+0xb8>)
            break;
 800a5ba:	e7de      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800a5bc:	2080      	movs	r0, #128	; 0x80
 800a5be:	01c0      	lsls	r0, r0, #7
            break;
 800a5c0:	e7db      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800a5c2:	21fa      	movs	r1, #250	; 0xfa
 800a5c4:	4811      	ldr	r0, [pc, #68]	; (800a60c <RegionEU868GetPhyParam+0xbc>)
 800a5c6:	0089      	lsls	r1, r1, #2
 800a5c8:	f000 fe04 	bl	800b1d4 <randr>
 800a5cc:	23fa      	movs	r3, #250	; 0xfa
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	18c0      	adds	r0, r0, r3
            break;
 800a5d2:	e7d2      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800a5d4:	480e      	ldr	r0, [pc, #56]	; (800a610 <RegionEU868GetPhyParam+0xc0>)
            break;
 800a5d6:	e7d0      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.ChannelsMask = ChannelsMask;
 800a5d8:	480e      	ldr	r0, [pc, #56]	; (800a614 <RegionEU868GetPhyParam+0xc4>)
            break;
 800a5da:	e7ce      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.ChannelsMask = ChannelsDefaultMask;
 800a5dc:	480e      	ldr	r0, [pc, #56]	; (800a618 <RegionEU868GetPhyParam+0xc8>)
 800a5de:	3002      	adds	r0, #2
            break;
 800a5e0:	e7cb      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800a5e2:	2010      	movs	r0, #16
            break;
 800a5e4:	e7c9      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Channels = Channels;
 800a5e6:	480d      	ldr	r0, [pc, #52]	; (800a61c <RegionEU868GetPhyParam+0xcc>)
            break;
 800a5e8:	e7c7      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800a5ea:	2083      	movs	r0, #131	; 0x83
 800a5ec:	05c0      	lsls	r0, r0, #23
            break;
 800a5ee:	e7c4      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800a5f0:	480b      	ldr	r0, [pc, #44]	; (800a620 <RegionEU868GetPhyParam+0xd0>)
            break;
 800a5f2:	e7c2      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = 48;
 800a5f4:	2030      	movs	r0, #48	; 0x30
            break;
 800a5f6:	e7c0      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
    PhyParam_t phyParam = { 0 };
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e7be      	b.n	800a57a <RegionEU868GetPhyParam+0x2a>
 800a5fc:	0800d370 	.word	0x0800d370
 800a600:	00000bb8 	.word	0x00000bb8
 800a604:	00001388 	.word	0x00001388
 800a608:	00001770 	.word	0x00001770
 800a60c:	fffffc18 	.word	0xfffffc18
 800a610:	33d3e608 	.word	0x33d3e608
 800a614:	200009ac 	.word	0x200009ac
 800a618:	200009ac 	.word	0x200009ac
 800a61c:	200009b0 	.word	0x200009b0
 800a620:	4009999a 	.word	0x4009999a

0800a624 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800a624:	220c      	movs	r2, #12
{
 800a626:	0003      	movs	r3, r0
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800a628:	7801      	ldrb	r1, [r0, #0]
{
 800a62a:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800a62c:	4351      	muls	r1, r2
 800a62e:	4a05      	ldr	r2, [pc, #20]	; (800a644 <RegionEU868SetBandTxDone+0x20>)
 800a630:	7840      	ldrb	r0, [r0, #1]
 800a632:	1852      	adds	r2, r2, r1
 800a634:	7a52      	ldrb	r2, [r2, #9]
 800a636:	4904      	ldr	r1, [pc, #16]	; (800a648 <RegionEU868SetBandTxDone+0x24>)
 800a638:	0112      	lsls	r2, r2, #4
 800a63a:	1889      	adds	r1, r1, r2
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	f7ff fdb9 	bl	800a1b4 <RegionCommonSetBandTxDone>
}
 800a642:	bd10      	pop	{r4, pc}
 800a644:	200009b0 	.word	0x200009b0
 800a648:	20000084 	.word	0x20000084

0800a64c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitType_t type )
{
 800a64c:	b570      	push	{r4, r5, r6, lr}
    switch( type )
 800a64e:	2800      	cmp	r0, #0
 800a650:	d002      	beq.n	800a658 <RegionEU868InitDefaults+0xc>
 800a652:	2801      	cmp	r0, #1
 800a654:	d017      	beq.n	800a686 <RegionEU868InitDefaults+0x3a>
        default:
        {
            break;
        }
    }
}
 800a656:	bd70      	pop	{r4, r5, r6, pc}
            Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800a658:	4a0e      	ldr	r2, [pc, #56]	; (800a694 <RegionEU868InitDefaults+0x48>)
 800a65a:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <RegionEU868InitDefaults+0x4c>)
 800a65c:	0011      	movs	r1, r2
 800a65e:	0018      	movs	r0, r3
 800a660:	3110      	adds	r1, #16
 800a662:	c970      	ldmia	r1!, {r4, r5, r6}
 800a664:	c070      	stmia	r0!, {r4, r5, r6}
            Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800a666:	0011      	movs	r1, r2
 800a668:	311c      	adds	r1, #28
 800a66a:	c970      	ldmia	r1!, {r4, r5, r6}
 800a66c:	c070      	stmia	r0!, {r4, r5, r6}
            Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800a66e:	3318      	adds	r3, #24
 800a670:	3228      	adds	r2, #40	; 0x28
 800a672:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a674:	c313      	stmia	r3!, {r0, r1, r4}
            ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800a676:	2307      	movs	r3, #7
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <RegionEU868InitDefaults+0x50>)
            RegionCommonChanMaskCopy( ChannelsMask, ChannelsDefaultMask, 1 );
 800a67a:	2201      	movs	r2, #1
 800a67c:	1c81      	adds	r1, r0, #2
            ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800a67e:	8043      	strh	r3, [r0, #2]
            RegionCommonChanMaskCopy( ChannelsMask, ChannelsDefaultMask, 1 );
 800a680:	f7ff fd8a 	bl	800a198 <RegionCommonChanMaskCopy>
            break;
 800a684:	e7e7      	b.n	800a656 <RegionEU868InitDefaults+0xa>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <RegionEU868InitDefaults+0x50>)
 800a688:	881a      	ldrh	r2, [r3, #0]
 800a68a:	8859      	ldrh	r1, [r3, #2]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	801a      	strh	r2, [r3, #0]
}
 800a690:	e7e1      	b.n	800a656 <RegionEU868InitDefaults+0xa>
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	0800d370 	.word	0x0800d370
 800a698:	200009b0 	.word	0x200009b0
 800a69c:	200009ac 	.word	0x200009ac

0800a6a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	0003      	movs	r3, r0
 800a6a4:	000a      	movs	r2, r1
    switch( phyAttribute )
 800a6a6:	2908      	cmp	r1, #8
 800a6a8:	d808      	bhi.n	800a6bc <RegionEU868Verify+0x1c>
 800a6aa:	2907      	cmp	r1, #7
 800a6ac:	d21a      	bcs.n	800a6e4 <RegionEU868Verify+0x44>
 800a6ae:	2905      	cmp	r1, #5
 800a6b0:	d00f      	beq.n	800a6d2 <RegionEU868Verify+0x32>
 800a6b2:	d817      	bhi.n	800a6e4 <RegionEU868Verify+0x44>
 800a6b4:	2904      	cmp	r1, #4
 800a6b6:	d015      	beq.n	800a6e4 <RegionEU868Verify+0x44>
                return false;
            }
            break;
        }
        default:
            return false;
 800a6b8:	2000      	movs	r0, #0
    }
    return true;
}
 800a6ba:	bd10      	pop	{r4, pc}
            return EU868_DUTY_CYCLE_ENABLED;
 800a6bc:	2001      	movs	r0, #1
    switch( phyAttribute )
 800a6be:	290b      	cmp	r1, #11
 800a6c0:	d0fb      	beq.n	800a6ba <RegionEU868Verify+0x1a>
 800a6c2:	291e      	cmp	r1, #30
 800a6c4:	d1f8      	bne.n	800a6b8 <RegionEU868Verify+0x18>
            if( verify->NbJoinTrials < 48 )
 800a6c6:	202f      	movs	r0, #47	; 0x2f
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	4180      	sbcs	r0, r0
 800a6ce:	4240      	negs	r0, r0
 800a6d0:	e7f3      	b.n	800a6ba <RegionEU868Verify+0x1a>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	5618      	ldrsb	r0, [r3, r0]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	f7ff fd1f 	bl	800a11a <RegionCommonValueInRange>
 800a6dc:	1e43      	subs	r3, r0, #1
 800a6de:	4198      	sbcs	r0, r3
 800a6e0:	b2c0      	uxtb	r0, r0
 800a6e2:	e7ea      	b.n	800a6ba <RegionEU868Verify+0x1a>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	2207      	movs	r2, #7
 800a6e8:	5618      	ldrsb	r0, [r3, r0]
 800a6ea:	e7f4      	b.n	800a6d6 <RegionEU868Verify+0x36>

0800a6ec <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800a6ec:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800a6ee:	7904      	ldrb	r4, [r0, #4]
 800a6f0:	2c00      	cmp	r4, #0
 800a6f2:	d003      	beq.n	800a6fc <RegionEU868ChanMaskSet+0x10>
 800a6f4:	2c01      	cmp	r4, #1
 800a6f6:	d008      	beq.n	800a70a <RegionEU868ChanMaskSet+0x1e>
        {
            RegionCommonChanMaskCopy( ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        default:
            return false;
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e005      	b.n	800a708 <RegionEU868ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	6801      	ldr	r1, [r0, #0]
 800a700:	4804      	ldr	r0, [pc, #16]	; (800a714 <RegionEU868ChanMaskSet+0x28>)
 800a702:	f7ff fd49 	bl	800a198 <RegionCommonChanMaskCopy>
    }
    return true;
 800a706:	2001      	movs	r0, #1
}
 800a708:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a70a:	4b02      	ldr	r3, [pc, #8]	; (800a714 <RegionEU868ChanMaskSet+0x28>)
 800a70c:	6801      	ldr	r1, [r0, #0]
 800a70e:	0022      	movs	r2, r4
 800a710:	1c98      	adds	r0, r3, #2
 800a712:	e7f6      	b.n	800a702 <RegionEU868ChanMaskSet+0x16>
 800a714:	200009ac 	.word	0x200009ac

0800a718 <RegionEU868AdrNext>:

bool RegionEU868AdrNext( AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a71a:	b085      	sub	sp, #20
 800a71c:	9201      	str	r2, [sp, #4]
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
    int8_t txPower = adrNext->TxPower;
 800a71e:	2609      	movs	r6, #9
    int8_t datarate = adrNext->Datarate;
 800a720:	2208      	movs	r2, #8
{
 800a722:	000f      	movs	r7, r1
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800a724:	6841      	ldr	r1, [r0, #4]
    int8_t datarate = adrNext->Datarate;
 800a726:	5682      	ldrsb	r2, [r0, r2]
    int8_t txPower = adrNext->TxPower;
 800a728:	5786      	ldrsb	r6, [r0, r6]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a72a:	6019      	str	r1, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800a72c:	7844      	ldrb	r4, [r0, #1]
{
 800a72e:	0005      	movs	r5, r0
    if( adrNext->AdrEnabled == true )
 800a730:	2c00      	cmp	r4, #0
 800a732:	d003      	beq.n	800a73c <RegionEU868AdrNext+0x24>
    {
        if( datarate == EU868_TX_MIN_DATARATE )
 800a734:	2a00      	cmp	r2, #0
 800a736:	d107      	bne.n	800a748 <RegionEU868AdrNext+0x30>
        {
            *adrAckCounter = 0;
 800a738:	601a      	str	r2, [r3, #0]
                adrAckReq = true;
                txPower = EU868_MAX_TX_POWER;
            }
            else
            {
                adrAckReq = false;
 800a73a:	2400      	movs	r4, #0
    }

    *drOut = datarate;
    *txPowOut = txPower;
    return adrAckReq;
}
 800a73c:	0020      	movs	r0, r4
    *txPowOut = txPower;
 800a73e:	9b01      	ldr	r3, [sp, #4]
    *drOut = datarate;
 800a740:	703a      	strb	r2, [r7, #0]
    *txPowOut = txPower;
 800a742:	701e      	strb	r6, [r3, #0]
}
 800a744:	b005      	add	sp, #20
 800a746:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >= EU868_ADR_ACK_LIMIT )
 800a748:	6843      	ldr	r3, [r0, #4]
 800a74a:	2b3f      	cmp	r3, #63	; 0x3f
 800a74c:	d9f5      	bls.n	800a73a <RegionEU868AdrNext+0x22>
                txPower = EU868_MAX_TX_POWER;
 800a74e:	2600      	movs	r6, #0
            if( adrNext->AdrAckCounter >= ( EU868_ADR_ACK_LIMIT + EU868_ADR_ACK_DELAY ) )
 800a750:	2b5f      	cmp	r3, #95	; 0x5f
 800a752:	d9f3      	bls.n	800a73c <RegionEU868AdrNext+0x24>
                if( ( adrNext->AdrAckCounter % EU868_ADR_ACK_DELAY ) == 1 )
 800a754:	211f      	movs	r1, #31
 800a756:	400b      	ands	r3, r1
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d1ef      	bne.n	800a73c <RegionEU868AdrNext+0x24>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a75c:	a803      	add	r0, sp, #12
 800a75e:	185b      	adds	r3, r3, r1
                    getPhy.Datarate = datarate;
 800a760:	7042      	strb	r2, [r0, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a762:	7003      	strb	r3, [r0, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a764:	7aab      	ldrb	r3, [r5, #10]
 800a766:	7083      	strb	r3, [r0, #2]
                    phyParam = RegionEU868GetPhyParam( &getPhy );
 800a768:	f7ff fef2 	bl	800a550 <RegionEU868GetPhyParam>
                    datarate = phyParam.Value;
 800a76c:	b242      	sxtb	r2, r0
                    if( datarate == EU868_TX_MIN_DATARATE )
 800a76e:	42b2      	cmp	r2, r6
 800a770:	d1e4      	bne.n	800a73c <RegionEU868AdrNext+0x24>
                        if( adrNext->UpdateChanMask == true )
 800a772:	782c      	ldrb	r4, [r5, #0]
                txPower = EU868_MAX_TX_POWER;
 800a774:	0016      	movs	r6, r2
                        if( adrNext->UpdateChanMask == true )
 800a776:	2c00      	cmp	r4, #0
 800a778:	d0e0      	beq.n	800a73c <RegionEU868AdrNext+0x24>
                            ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800a77a:	2307      	movs	r3, #7
 800a77c:	4902      	ldr	r1, [pc, #8]	; (800a788 <RegionEU868AdrNext+0x70>)
 800a77e:	8808      	ldrh	r0, [r1, #0]
 800a780:	4303      	orrs	r3, r0
 800a782:	800b      	strh	r3, [r1, #0]
 800a784:	e7d9      	b.n	800a73a <RegionEU868AdrNext+0x22>
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	200009ac 	.word	0x200009ac

0800a78c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78e:	b087      	sub	sp, #28
 800a790:	001c      	movs	r4, r3
 800a792:	9104      	str	r1, [sp, #16]
 800a794:	0015      	movs	r5, r2
    double tSymbol = 0.0;
    uint32_t radioWakeUpTime;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800a796:	1c03      	adds	r3, r0, #0
 800a798:	2807      	cmp	r0, #7
 800a79a:	dd00      	ble.n	800a79e <RegionEU868ComputeRxWindowParameters+0x12>
 800a79c:	2307      	movs	r3, #7
    switch( BandwidthsEU868[drIndex] )
 800a79e:	4f18      	ldr	r7, [pc, #96]	; (800a800 <RegionEU868ComputeRxWindowParameters+0x74>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800a7a0:	b25e      	sxtb	r6, r3
    switch( BandwidthsEU868[drIndex] )
 800a7a2:	46bc      	mov	ip, r7
 800a7a4:	4a17      	ldr	r2, [pc, #92]	; (800a804 <RegionEU868ComputeRxWindowParameters+0x78>)
 800a7a6:	00b1      	lsls	r1, r6, #2
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800a7a8:	7063      	strb	r3, [r4, #1]
    switch( BandwidthsEU868[drIndex] )
 800a7aa:	1853      	adds	r3, r2, r1
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            return 1;
 800a7ae:	2701      	movs	r7, #1
    switch( BandwidthsEU868[drIndex] )
 800a7b0:	4563      	cmp	r3, ip
 800a7b2:	d004      	beq.n	800a7be <RegionEU868ComputeRxWindowParameters+0x32>
            return 0;
 800a7b4:	4f14      	ldr	r7, [pc, #80]	; (800a808 <RegionEU868ComputeRxWindowParameters+0x7c>)
 800a7b6:	19db      	adds	r3, r3, r7
 800a7b8:	425f      	negs	r7, r3
 800a7ba:	415f      	adcs	r7, r3
 800a7bc:	007f      	lsls	r7, r7, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800a7be:	70a7      	strb	r7, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800a7c0:	2806      	cmp	r0, #6
 800a7c2:	dd16      	ble.n	800a7f2 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800a7c4:	2032      	movs	r0, #50	; 0x32
 800a7c6:	f7ff fdcd 	bl	800a364 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    radioWakeUpTime = Radio.GetRadioWakeUpTime();
 800a7ca:	4b10      	ldr	r3, [pc, #64]	; (800a80c <RegionEU868ComputeRxWindowParameters+0x80>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800a7cc:	0006      	movs	r6, r0
    radioWakeUpTime = Radio.GetRadioWakeUpTime();
 800a7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800a7d0:	000f      	movs	r7, r1
    radioWakeUpTime = Radio.GetRadioWakeUpTime();
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	4798      	blx	r3
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, radioWakeUpTime, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a7d6:	0023      	movs	r3, r4
 800a7d8:	3408      	adds	r4, #8
 800a7da:	330c      	adds	r3, #12
 800a7dc:	9302      	str	r3, [sp, #8]
 800a7de:	9000      	str	r0, [sp, #0]
 800a7e0:	9401      	str	r4, [sp, #4]
 800a7e2:	002b      	movs	r3, r5
 800a7e4:	9a04      	ldr	r2, [sp, #16]
 800a7e6:	0030      	movs	r0, r6
 800a7e8:	0039      	movs	r1, r7
 800a7ea:	f7ff fdc7 	bl	800a37c <RegionCommonComputeRxWindowParameters>
}
 800a7ee:	b007      	add	sp, #28
 800a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800a7f2:	1851      	adds	r1, r2, r1
 800a7f4:	3254      	adds	r2, #84	; 0x54
 800a7f6:	5d90      	ldrb	r0, [r2, r6]
 800a7f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a7fa:	f7ff fd99 	bl	800a330 <RegionCommonComputeSymbolTimeLoRa>
 800a7fe:	e7e4      	b.n	800a7ca <RegionEU868ComputeRxWindowParameters+0x3e>
 800a800:	0003d090 	.word	0x0003d090
 800a804:	0800d370 	.word	0x0800d370
 800a808:	fff85ee0 	.word	0xfff85ee0
 800a80c:	0800cfc4 	.word	0x0800cfc4

0800a810 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a810:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800a812:	2701      	movs	r7, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800a814:	4b33      	ldr	r3, [pc, #204]	; (800a8e4 <RegionEU868RxConfig+0xd4>)
{
 800a816:	b08d      	sub	sp, #52	; 0x34
    if( Radio.GetStatus( ) != RF_IDLE )
 800a818:	68db      	ldr	r3, [r3, #12]
{
 800a81a:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t dr = rxConfig->Datarate;
 800a81c:	57c7      	ldrsb	r7, [r0, r7]
{
 800a81e:	0005      	movs	r5, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a820:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t frequency = rxConfig->Frequency;
 800a822:	6844      	ldr	r4, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800a824:	4798      	blx	r3
    {
        return false;
 800a826:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800a828:	4298      	cmp	r0, r3
 800a82a:	d143      	bne.n	800a8b4 <RegionEU868RxConfig+0xa4>
    }

    if( rxConfig->Window == 0 )
 800a82c:	7ceb      	ldrb	r3, [r5, #19]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <RegionEU868RxConfig+0x36>
    {
        // Apply window 1 frequency
        frequency = Channels[rxConfig->Channel].Frequency;
 800a832:	220c      	movs	r2, #12
 800a834:	7829      	ldrb	r1, [r5, #0]
 800a836:	4b2c      	ldr	r3, [pc, #176]	; (800a8e8 <RegionEU868RxConfig+0xd8>)
 800a838:	434a      	muls	r2, r1
 800a83a:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800a83c:	189b      	adds	r3, r3, r2
 800a83e:	685c      	ldr	r4, [r3, #4]
 800a840:	2c00      	cmp	r4, #0
 800a842:	d100      	bne.n	800a846 <RegionEU868RxConfig+0x36>
        frequency = Channels[rxConfig->Channel].Frequency;
 800a844:	000c      	movs	r4, r1
            frequency = Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800a846:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <RegionEU868RxConfig+0xdc>)

    Radio.SetChannel( frequency );
 800a848:	0020      	movs	r0, r4
    phyDr = DataratesEU868[dr];
 800a84a:	3354      	adds	r3, #84	; 0x54
 800a84c:	57db      	ldrsb	r3, [r3, r7]
 800a84e:	001e      	movs	r6, r3
    Radio.SetChannel( frequency );
 800a850:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <RegionEU868RxConfig+0xd4>)
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	930a      	str	r3, [sp, #40]	; 0x28
 800a856:	4798      	blx	r3
 800a858:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <RegionEU868RxConfig+0xd4>)
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	930a      	str	r3, [sp, #40]	; 0x28
 800a85e:	7cab      	ldrb	r3, [r5, #18]

    // Radio configuration
    if( dr == DR_7 )
 800a860:	2f07      	cmp	r7, #7
 800a862:	d12a      	bne.n	800a8ba <RegionEU868RxConfig+0xaa>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a864:	9309      	str	r3, [sp, #36]	; 0x24
 800a866:	2301      	movs	r3, #1
 800a868:	9305      	str	r3, [sp, #20]
 800a86a:	68ab      	ldr	r3, [r5, #8]
 800a86c:	2400      	movs	r4, #0
 800a86e:	b29b      	uxth	r3, r3
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	2305      	movs	r3, #5
 800a874:	22fa      	movs	r2, #250	; 0xfa
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <RegionEU868RxConfig+0xe0>)
 800a87a:	0092      	lsls	r2, r2, #2
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	0023      	movs	r3, r4
 800a880:	4372      	muls	r2, r6
 800a882:	491c      	ldr	r1, [pc, #112]	; (800a8f4 <RegionEU868RxConfig+0xe4>)
 800a884:	9408      	str	r4, [sp, #32]
 800a886:	9407      	str	r4, [sp, #28]
 800a888:	9406      	str	r4, [sp, #24]
 800a88a:	9404      	str	r4, [sp, #16]
 800a88c:	9403      	str	r4, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a88e:	0020      	movs	r0, r4
 800a890:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a892:	47b0      	blx	r6
    }

    if( rxConfig->RepeaterSupport == true )
 800a894:	7c6a      	ldrb	r2, [r5, #17]
        modem = MODEM_LORA;
 800a896:	0020      	movs	r0, r4
 800a898:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <RegionEU868RxConfig+0xdc>)
    if( rxConfig->RepeaterSupport == true )
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	d020      	beq.n	800a8e0 <RegionEU868RxConfig+0xd0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800a89e:	19db      	adds	r3, r3, r7
 800a8a0:	7a19      	ldrb	r1, [r3, #8]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800a8a2:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <RegionEU868RxConfig+0xd4>)
 800a8a4:	310d      	adds	r1, #13
 800a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a8:	b2c9      	uxtb	r1, r1
 800a8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ac:	4798      	blx	r3
    DBG_PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );

    *datarate = (uint8_t) dr;
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b0:	701f      	strb	r7, [r3, #0]
    return true;
 800a8b2:	2301      	movs	r3, #1
}
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	b00d      	add	sp, #52	; 0x34
 800a8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a8ba:	68aa      	ldr	r2, [r5, #8]
 800a8bc:	2401      	movs	r4, #1
 800a8be:	b292      	uxth	r2, r2
 800a8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c2:	9202      	str	r2, [sp, #8]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2208      	movs	r2, #8
 800a8c8:	9307      	str	r3, [sp, #28]
 800a8ca:	9306      	str	r3, [sp, #24]
 800a8cc:	9305      	str	r3, [sp, #20]
 800a8ce:	9304      	str	r3, [sp, #16]
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	9201      	str	r2, [sp, #4]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	78a9      	ldrb	r1, [r5, #2]
 800a8d8:	9408      	str	r4, [sp, #32]
 800a8da:	0023      	movs	r3, r4
 800a8dc:	0032      	movs	r2, r6
 800a8de:	e7d6      	b.n	800a88e <RegionEU868RxConfig+0x7e>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800a8e0:	5dd9      	ldrb	r1, [r3, r7]
 800a8e2:	e7de      	b.n	800a8a2 <RegionEU868RxConfig+0x92>
 800a8e4:	0800cfc4 	.word	0x0800cfc4
 800a8e8:	200009b0 	.word	0x200009b0
 800a8ec:	0800d370 	.word	0x0800d370
 800a8f0:	00014585 	.word	0x00014585
 800a8f4:	0000c350 	.word	0x0000c350

0800a8f8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a8fa:	4b3d      	ldr	r3, [pc, #244]	; (800a9f0 <RegionEU868TxConfig+0xf8>)
{
 800a8fc:	b091      	sub	sp, #68	; 0x44
 800a8fe:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a900:	2201      	movs	r2, #1
{
 800a902:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a904:	0019      	movs	r1, r3
 800a906:	5682      	ldrsb	r2, [r0, r2]
 800a908:	3154      	adds	r1, #84	; 0x54
 800a90a:	5689      	ldrsb	r1, [r1, r2]
{
 800a90c:	0005      	movs	r5, r0
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800a90e:	910a      	str	r1, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 800a910:	210c      	movs	r1, #12
 800a912:	7800      	ldrb	r0, [r0, #0]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800a914:	78ac      	ldrb	r4, [r5, #2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 800a916:	4348      	muls	r0, r1
 800a918:	4936      	ldr	r1, [pc, #216]	; (800a9f4 <RegionEU868TxConfig+0xfc>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800a91a:	b266      	sxtb	r6, r4
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 800a91c:	1809      	adds	r1, r1, r0
 800a91e:	7a48      	ldrb	r0, [r1, #9]
 800a920:	4935      	ldr	r1, [pc, #212]	; (800a9f8 <RegionEU868TxConfig+0x100>)
 800a922:	0100      	lsls	r0, r0, #4
 800a924:	1809      	adds	r1, r1, r0
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800a926:	7889      	ldrb	r1, [r1, #2]
 800a928:	1c08      	adds	r0, r1, #0
 800a92a:	b249      	sxtb	r1, r1
 800a92c:	42b1      	cmp	r1, r6
 800a92e:	da00      	bge.n	800a932 <RegionEU868TxConfig+0x3a>
 800a930:	1c20      	adds	r0, r4, #0
    switch( BandwidthsEU868[drIndex] )
 800a932:	0092      	lsls	r2, r2, #2
 800a934:	189b      	adds	r3, r3, r2
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	4a30      	ldr	r2, [pc, #192]	; (800a9fc <RegionEU868TxConfig+0x104>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800a93a:	b241      	sxtb	r1, r0
 800a93c:	910b      	str	r1, [sp, #44]	; 0x2c
            return 1;
 800a93e:	2701      	movs	r7, #1
    switch( BandwidthsEU868[drIndex] )
 800a940:	4293      	cmp	r3, r2
 800a942:	d004      	beq.n	800a94e <RegionEU868TxConfig+0x56>
            return 0;
 800a944:	4a2e      	ldr	r2, [pc, #184]	; (800aa00 <RegionEU868TxConfig+0x108>)
 800a946:	189b      	adds	r3, r3, r2
 800a948:	425f      	negs	r7, r3
 800a94a:	415f      	adcs	r7, r3
 800a94c:	007f      	lsls	r7, r7, #1
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a94e:	68aa      	ldr	r2, [r5, #8]
 800a950:	6869      	ldr	r1, [r5, #4]
 800a952:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a954:	f7ff fd6c 	bl	800a430 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( Channels[txConfig->Channel].Frequency );
 800a958:	230c      	movs	r3, #12
 800a95a:	4c2a      	ldr	r4, [pc, #168]	; (800aa04 <RegionEU868TxConfig+0x10c>)
 800a95c:	782a      	ldrb	r2, [r5, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a95e:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( Channels[txConfig->Channel].Frequency );
 800a960:	4353      	muls	r3, r2
 800a962:	6962      	ldr	r2, [r4, #20]
 800a964:	920c      	str	r2, [sp, #48]	; 0x30
 800a966:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <RegionEU868TxConfig+0xfc>)
 800a968:	5898      	ldr	r0, [r3, r2]
 800a96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a96c:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800a96e:	2201      	movs	r2, #1
 800a970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a972:	2400      	movs	r4, #0
 800a974:	930c      	str	r3, [sp, #48]	; 0x30
 800a976:	56aa      	ldrsb	r2, [r5, r2]
 800a978:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <RegionEU868TxConfig+0x110>)
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 800a97a:	9407      	str	r4, [sp, #28]
 800a97c:	9308      	str	r3, [sp, #32]
 800a97e:	9406      	str	r4, [sp, #24]
 800a980:	9405      	str	r4, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800a982:	2a07      	cmp	r2, #7
 800a984:	d123      	bne.n	800a9ce <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 800a986:	2301      	movs	r3, #1
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	3304      	adds	r3, #4
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	23fa      	movs	r3, #250	; 0xfa
 800a990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4353      	muls	r3, r2
 800a996:	9403      	str	r4, [sp, #12]
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	9401      	str	r4, [sp, #4]
 800a99c:	003b      	movs	r3, r7
 800a99e:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <RegionEU868TxConfig+0x114>)
 800a9a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9a2:	0020      	movs	r0, r4
 800a9a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9a6:	47b0      	blx	r6
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
    }
    DBG_PRINTF( "TX on freq %d Hz at DR %d\n\r", Channels[txConfig->Channel].Frequency, txConfig->Datarate );

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800a9a8:	4e16      	ldr	r6, [pc, #88]	; (800aa04 <RegionEU868TxConfig+0x10c>)
 800a9aa:	7b29      	ldrb	r1, [r5, #12]
 800a9ac:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800a9ae:	0020      	movs	r0, r4
 800a9b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b2:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800a9b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a9b6:	7b29      	ldrb	r1, [r5, #12]
 800a9b8:	0020      	movs	r0, r4
 800a9ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a9bc:	4798      	blx	r3
 800a9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    *txPower = txPowerLimited;
 800a9c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800a9c2:	6018      	str	r0, [r3, #0]
    return true;
}
 800a9c4:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c8:	701a      	strb	r2, [r3, #0]
}
 800a9ca:	b011      	add	sp, #68	; 0x44
 800a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 800a9ce:	2308      	movs	r3, #8
 800a9d0:	2601      	movs	r6, #1
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d6:	9403      	str	r4, [sp, #12]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	0022      	movs	r2, r4
 800a9dc:	9604      	str	r6, [sp, #16]
 800a9de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a9e0:	9601      	str	r6, [sp, #4]
 800a9e2:	003b      	movs	r3, r7
 800a9e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9e6:	0030      	movs	r0, r6
 800a9e8:	47a0      	blx	r4
        modem = MODEM_LORA;
 800a9ea:	0034      	movs	r4, r6
 800a9ec:	e7dc      	b.n	800a9a8 <RegionEU868TxConfig+0xb0>
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	0800d370 	.word	0x0800d370
 800a9f4:	200009b0 	.word	0x200009b0
 800a9f8:	20000084 	.word	0x20000084
 800a9fc:	0003d090 	.word	0x0003d090
 800aa00:	fff85ee0 	.word	0xfff85ee0
 800aa04:	0800cfc4 	.word	0x0800cfc4
 800aa08:	00000bb8 	.word	0x00000bb8
 800aa0c:	000061a8 	.word	0x000061a8

0800aa10 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800aa10:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800aa12:	2400      	movs	r4, #0
{
 800aa14:	0006      	movs	r6, r0
    uint8_t status = 0x07;
 800aa16:	2507      	movs	r5, #7
{
 800aa18:	b08f      	sub	sp, #60	; 0x3c
 800aa1a:	9303      	str	r3, [sp, #12]
    uint16_t chMask = 0;
 800aa1c:	ab04      	add	r3, sp, #16
{
 800aa1e:	9101      	str	r1, [sp, #4]
 800aa20:	9202      	str	r2, [sp, #8]
    uint16_t chMask = 0;
 800aa22:	805c      	strh	r4, [r3, #2]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800aa24:	7933      	ldrb	r3, [r6, #4]
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	d907      	bls.n	800aa3a <RegionEU868LinkAdrReq+0x2a>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800aa2a:	6833      	ldr	r3, [r6, #0]
 800aa2c:	af05      	add	r7, sp, #20
 800aa2e:	1918      	adds	r0, r3, r4
 800aa30:	0039      	movs	r1, r7
 800aa32:	f7ff fc14 	bl	800a25e <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d135      	bne.n	800aaa6 <RegionEU868LinkAdrReq+0x96>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800aa3a:	a807      	add	r0, sp, #28
 800aa3c:	7005      	strb	r5, [r0, #0]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800aa3e:	79b3      	ldrb	r3, [r6, #6]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800aa40:	ad05      	add	r5, sp, #20
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800aa42:	7043      	strb	r3, [r0, #1]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800aa44:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.Channels = Channels;
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800aa46:	aa04      	add	r2, sp, #16
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800aa48:	7083      	strb	r3, [r0, #2]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800aa4a:	78ab      	ldrb	r3, [r5, #2]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800aa4c:	a904      	add	r1, sp, #16
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800aa4e:	70c3      	strb	r3, [r0, #3]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800aa50:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800aa52:	3206      	adds	r2, #6
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800aa54:	7103      	strb	r3, [r0, #4]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800aa56:	79f3      	ldrb	r3, [r6, #7]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800aa58:	3105      	adds	r1, #5
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800aa5a:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800aa5c:	7a33      	ldrb	r3, [r6, #8]
 800aa5e:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800aa60:	7a73      	ldrb	r3, [r6, #9]
 800aa62:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800aa64:	2310      	movs	r3, #16
 800aa66:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800aa68:	ab04      	add	r3, sp, #16
 800aa6a:	1c9e      	adds	r6, r3, #2
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800aa6c:	23e0      	movs	r3, #224	; 0xe0
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	8203      	strh	r3, [r0, #16]
    linkAdrVerifyParams.Channels = Channels;
 800aa72:	4b2a      	ldr	r3, [pc, #168]	; (800ab1c <RegionEU868LinkAdrReq+0x10c>)
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800aa74:	60c6      	str	r6, [r0, #12]
    linkAdrVerifyParams.Channels = Channels;
 800aa76:	6143      	str	r3, [r0, #20]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800aa78:	2307      	movs	r3, #7
 800aa7a:	8303      	strh	r3, [r0, #24]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800aa7c:	002b      	movs	r3, r5
 800aa7e:	f7ff fc09 	bl	800a294 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800aa82:	2807      	cmp	r0, #7
 800aa84:	d102      	bne.n	800aa8c <RegionEU868LinkAdrReq+0x7c>
    {
        // Set the channels mask to a default value
        memset( ChannelsMask, 0, sizeof( ChannelsMask ) );
        // Update the channels mask
        ChannelsMask[0] = chMask;
 800aa86:	8832      	ldrh	r2, [r6, #0]
 800aa88:	4b25      	ldr	r3, [pc, #148]	; (800ab20 <RegionEU868LinkAdrReq+0x110>)
 800aa8a:	801a      	strh	r2, [r3, #0]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800aa8c:	786b      	ldrb	r3, [r5, #1]
 800aa8e:	9a01      	ldr	r2, [sp, #4]
 800aa90:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800aa92:	78ab      	ldrb	r3, [r5, #2]
 800aa94:	9a02      	ldr	r2, [sp, #8]
 800aa96:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800aa98:	782b      	ldrb	r3, [r5, #0]
 800aa9a:	9a03      	ldr	r2, [sp, #12]
 800aa9c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800aa9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaa0:	701c      	strb	r4, [r3, #0]

    return status;
}
 800aaa2:	b00f      	add	sp, #60	; 0x3c
 800aaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800aaa6:	88ba      	ldrh	r2, [r7, #4]
 800aaa8:	ab04      	add	r3, sp, #16
 800aaaa:	805a      	strh	r2, [r3, #2]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800aaac:	78f9      	ldrb	r1, [r7, #3]
        bytesProcessed += nextIndex;
 800aaae:	1824      	adds	r4, r4, r0
 800aab0:	b2e4      	uxtb	r4, r4
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800aab2:	2900      	cmp	r1, #0
 800aab4:	d102      	bne.n	800aabc <RegionEU868LinkAdrReq+0xac>
            status &= 0xFE; // Channel mask KO
 800aab6:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800aab8:	2a00      	cmp	r2, #0
 800aaba:	d0b3      	beq.n	800aa24 <RegionEU868LinkAdrReq+0x14>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800aabc:	1e4b      	subs	r3, r1, #1
            status &= 0xFE; // Channel mask KO
 800aabe:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	d9af      	bls.n	800aa24 <RegionEU868LinkAdrReq+0x14>
 800aac4:	42a9      	cmp	r1, r5
 800aac6:	d8ad      	bhi.n	800aa24 <RegionEU868LinkAdrReq+0x14>
 800aac8:	2300      	movs	r3, #0
        status = 0x07;
 800aaca:	3501      	adds	r5, #1
 800aacc:	9300      	str	r3, [sp, #0]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800aace:	2906      	cmp	r1, #6
 800aad0:	d117      	bne.n	800ab02 <RegionEU868LinkAdrReq+0xf2>
                    if( Channels[i].Frequency != 0 )
 800aad2:	4f12      	ldr	r7, [pc, #72]	; (800ab1c <RegionEU868LinkAdrReq+0x10c>)
 800aad4:	46bc      	mov	ip, r7
 800aad6:	270c      	movs	r7, #12
 800aad8:	4660      	mov	r0, ip
 800aada:	435f      	muls	r7, r3
 800aadc:	59c7      	ldr	r7, [r0, r7]
 800aade:	2f00      	cmp	r7, #0
 800aae0:	d005      	beq.n	800aaee <RegionEU868LinkAdrReq+0xde>
                        chMask |= 1 << i;
 800aae2:	2701      	movs	r7, #1
 800aae4:	409f      	lsls	r7, r3
 800aae6:	2001      	movs	r0, #1
 800aae8:	433a      	orrs	r2, r7
 800aaea:	b292      	uxth	r2, r2
 800aaec:	9000      	str	r0, [sp, #0]
 800aaee:	3301      	adds	r3, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d1ec      	bne.n	800aace <RegionEU868LinkAdrReq+0xbe>
 800aaf4:	9b00      	ldr	r3, [sp, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d100      	bne.n	800aafc <RegionEU868LinkAdrReq+0xec>
 800aafa:	e793      	b.n	800aa24 <RegionEU868LinkAdrReq+0x14>
 800aafc:	ab04      	add	r3, sp, #16
 800aafe:	805a      	strh	r2, [r3, #2]
 800ab00:	e790      	b.n	800aa24 <RegionEU868LinkAdrReq+0x14>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ab02:	0017      	movs	r7, r2
 800ab04:	2001      	movs	r0, #1
 800ab06:	411f      	asrs	r7, r3
 800ab08:	4207      	tst	r7, r0
 800ab0a:	d0f0      	beq.n	800aaee <RegionEU868LinkAdrReq+0xde>
 800ab0c:	270c      	movs	r7, #12
 800ab0e:	435f      	muls	r7, r3
 800ab10:	4802      	ldr	r0, [pc, #8]	; (800ab1c <RegionEU868LinkAdrReq+0x10c>)
 800ab12:	59c7      	ldr	r7, [r0, r7]
 800ab14:	2f00      	cmp	r7, #0
 800ab16:	d1ea      	bne.n	800aaee <RegionEU868LinkAdrReq+0xde>
                        status &= 0xFE; // Channel mask KO
 800ab18:	2506      	movs	r5, #6
 800ab1a:	e7e8      	b.n	800aaee <RegionEU868LinkAdrReq+0xde>
 800ab1c:	200009b0 	.word	0x200009b0
 800ab20:	200009ac 	.word	0x200009ac

0800ab24 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ab24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t status = 0x07;

    // Verify radio frequency
    if( Radio.CheckRfFrequency( rxParamSetupReq->Frequency ) == false )
 800ab26:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <RegionEU868RxParamSetupReq+0x44>)
{
 800ab28:	0005      	movs	r5, r0
    if( Radio.CheckRfFrequency( rxParamSetupReq->Frequency ) == false )
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2c:	6840      	ldr	r0, [r0, #4]
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	4798      	blx	r3
    {
        status &= 0xFE; // Channel frequency KO
 800ab32:	0004      	movs	r4, r0
 800ab34:	1e60      	subs	r0, r4, #1
 800ab36:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ab38:	2000      	movs	r0, #0
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	5628      	ldrsb	r0, [r5, r0]
 800ab3e:	2100      	movs	r1, #0
        status &= 0xFE; // Channel frequency KO
 800ab40:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ab42:	f7ff faea 	bl	800a11a <RegionCommonValueInRange>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d101      	bne.n	800ab4e <RegionEU868RxParamSetupReq+0x2a>
    {
        status &= 0xFD; // Datarate KO
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800ab4e:	2001      	movs	r0, #1
 800ab50:	2205      	movs	r2, #5
 800ab52:	5628      	ldrsb	r0, [r5, r0]
 800ab54:	2100      	movs	r1, #0
 800ab56:	f7ff fae0 	bl	800a11a <RegionCommonValueInRange>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d101      	bne.n	800ab62 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ab5e:	2304      	movs	r3, #4
 800ab60:	439c      	bics	r4, r3
    }

    return status;
}
 800ab62:	0020      	movs	r0, r4
 800ab64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	0800cfc4 	.word	0x0800cfc4

0800ab6c <RegionEU868TxParamSetupReq>:
    return status;
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
 800ab6c:	2001      	movs	r0, #1
}
 800ab6e:	4240      	negs	r0, r0
 800ab70:	4770      	bx	lr
	...

0800ab74 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ab74:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 800ab76:	466b      	mov	r3, sp
 800ab78:	1dd9      	adds	r1, r3, #7
 800ab7a:	2300      	movs	r3, #0
{
 800ab7c:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyTxFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ab7e:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800ab80:	700b      	strb	r3, [r1, #0]
    if( VerifyTxFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ab82:	f7ff fc97 	bl	800a4b4 <VerifyTxFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ab86:	220c      	movs	r2, #12
        status &= 0xFE;
 800ab88:	1e43      	subs	r3, r0, #1
 800ab8a:	4198      	sbcs	r0, r3
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ab8c:	7821      	ldrb	r1, [r4, #0]
 800ab8e:	4b08      	ldr	r3, [pc, #32]	; (800abb0 <RegionEU868DlChannelReq+0x3c>)
 800ab90:	434a      	muls	r2, r1
 800ab92:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800ab94:	3002      	adds	r0, #2
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ab96:	2900      	cmp	r1, #0
 800ab98:	d102      	bne.n	800aba0 <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	4398      	bics	r0, r3
    {
        Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800ab9e:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800aba0:	2803      	cmp	r0, #3
 800aba2:	d103      	bne.n	800abac <RegionEU868DlChannelReq+0x38>
        Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800aba4:	189b      	adds	r3, r3, r2
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	e7f8      	b.n	800ab9e <RegionEU868DlChannelReq+0x2a>
 800abac:	2002      	movs	r0, #2
 800abae:	e7f6      	b.n	800ab9e <RegionEU868DlChannelReq+0x2a>
 800abb0:	200009b0 	.word	0x200009b0

0800abb4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( AlternateDrParams_t* alternateDr )
{
 800abb4:	b510      	push	{r4, lr}
    int8_t datarate = 0;

    if( ( alternateDr->NbTrials % 48 ) == 0 )
 800abb6:	8804      	ldrh	r4, [r0, #0]
 800abb8:	2130      	movs	r1, #48	; 0x30
 800abba:	0020      	movs	r0, r4
 800abbc:	f7f5 fb3e 	bl	800023c <__aeabi_uidivmod>
    {
        datarate = DR_0;
 800abc0:	2000      	movs	r0, #0
    if( ( alternateDr->NbTrials % 48 ) == 0 )
 800abc2:	b289      	uxth	r1, r1
 800abc4:	4281      	cmp	r1, r0
 800abc6:	d012      	beq.n	800abee <RegionEU868AlternateDr+0x3a>
    }
    else if( ( alternateDr->NbTrials % 32 ) == 0 )
    {
        datarate = DR_1;
 800abc8:	3001      	adds	r0, #1
    else if( ( alternateDr->NbTrials % 32 ) == 0 )
 800abca:	06e3      	lsls	r3, r4, #27
 800abcc:	d00f      	beq.n	800abee <RegionEU868AlternateDr+0x3a>
    }
    else if( ( alternateDr->NbTrials % 24 ) == 0 )
 800abce:	2118      	movs	r1, #24
 800abd0:	0020      	movs	r0, r4
 800abd2:	f7f5 fb33 	bl	800023c <__aeabi_uidivmod>
 800abd6:	b289      	uxth	r1, r1
    {
        datarate = DR_2;
 800abd8:	2002      	movs	r0, #2
    else if( ( alternateDr->NbTrials % 24 ) == 0 )
 800abda:	2900      	cmp	r1, #0
 800abdc:	d007      	beq.n	800abee <RegionEU868AlternateDr+0x3a>
    }
    else if( ( alternateDr->NbTrials % 16 ) == 0 )
    {
        datarate = DR_3;
 800abde:	3001      	adds	r0, #1
    else if( ( alternateDr->NbTrials % 16 ) == 0 )
 800abe0:	0723      	lsls	r3, r4, #28
 800abe2:	d004      	beq.n	800abee <RegionEU868AlternateDr+0x3a>
    }
    else if( ( alternateDr->NbTrials % 8 ) == 0 )
 800abe4:	3004      	adds	r0, #4
 800abe6:	4004      	ands	r4, r0
    {
        datarate = DR_4;
    }
    else
    {
        datarate = DR_5;
 800abe8:	1e60      	subs	r0, r4, #1
 800abea:	4184      	sbcs	r4, r0
 800abec:	1d20      	adds	r0, r4, #4
    }
    return datarate;
}
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 800abf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = Channels;
 800abf2:	4a0b      	ldr	r2, [pc, #44]	; (800ac20 <RegionEU868CalcBackOff+0x30>)
 800abf4:	ab01      	add	r3, sp, #4
 800abf6:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = Bands;
 800abf8:	4a0a      	ldr	r2, [pc, #40]	; (800ac24 <RegionEU868CalcBackOff+0x34>)
 800abfa:	9202      	str	r2, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800abfc:	7842      	ldrb	r2, [r0, #1]
 800abfe:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 800ac00:	7802      	ldrb	r2, [r0, #0]
 800ac02:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800ac04:	7882      	ldrb	r2, [r0, #2]
 800ac06:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 800ac08:	78c2      	ldrb	r2, [r0, #3]
 800ac0a:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800ac0c:	6842      	ldr	r2, [r0, #4]
 800ac0e:	9204      	str	r2, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800ac10:	6882      	ldr	r2, [r0, #8]

    RegionCommonCalcBackOff( &calcBackOffParams );
 800ac12:	0018      	movs	r0, r3
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800ac14:	9205      	str	r2, [sp, #20]
    RegionCommonCalcBackOff( &calcBackOffParams );
 800ac16:	f7ff fc20 	bl	800a45a <RegionCommonCalcBackOff>
}
 800ac1a:	b007      	add	sp, #28
 800ac1c:	bd00      	pop	{pc}
 800ac1e:	46c0      	nop			; (mov r8, r8)
 800ac20:	200009b0 	.word	0x200009b0
 800ac24:	20000084 	.word	0x20000084

0800ac28 <RegionEU868NextChannel>:

bool RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2a:	b08b      	sub	sp, #44	; 0x2c
 800ac2c:	9105      	str	r1, [sp, #20]
 800ac2e:	0005      	movs	r5, r0
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800ac30:	2100      	movs	r1, #0
{
 800ac32:	0016      	movs	r6, r2
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800ac34:	a806      	add	r0, sp, #24
 800ac36:	2210      	movs	r2, #16
{
 800ac38:	001f      	movs	r7, r3
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800ac3a:	f001 fbd2 	bl	800c3e2 <memset>
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( ChannelsMask, 0, 1 ) == 0 )
 800ac3e:	4c3e      	ldr	r4, [pc, #248]	; (800ad38 <RegionEU868NextChannel+0x110>)
 800ac40:	2201      	movs	r2, #1
 800ac42:	2100      	movs	r1, #0
 800ac44:	0020      	movs	r0, r4
 800ac46:	f7ff fa87 	bl	800a158 <RegionCommonCountChannels>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d103      	bne.n	800ac56 <RegionEU868NextChannel+0x2e>
    { // Reactivate default channels
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ac4e:	2307      	movs	r3, #7
 800ac50:	8822      	ldrh	r2, [r4, #0]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	8023      	strh	r3, [r4, #0]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 800ac56:	6868      	ldr	r0, [r5, #4]
 800ac58:	682c      	ldr	r4, [r5, #0]
 800ac5a:	f000 fa92 	bl	800b182 <TimerGetElapsedTime>
 800ac5e:	4284      	cmp	r4, r0
 800ac60:	d858      	bhi.n	800ad14 <RegionEU868NextChannel+0xec>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ac62:	2400      	movs	r4, #0
 800ac64:	603c      	str	r4, [r7, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU868_MAX_NB_BANDS );
 800ac66:	7aa9      	ldrb	r1, [r5, #10]
 800ac68:	7a68      	ldrb	r0, [r5, #9]
 800ac6a:	2305      	movs	r3, #5
 800ac6c:	4a33      	ldr	r2, [pc, #204]	; (800ad3c <RegionEU868NextChannel+0x114>)
 800ac6e:	f7ff faa7 	bl	800a1c0 <RegionCommonUpdateBandTimeOff>
 800ac72:	9001      	str	r0, [sp, #4]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800ac74:	7a6b      	ldrb	r3, [r5, #9]
    uint8_t delayTransmission = 0;
 800ac76:	0027      	movs	r7, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	56eb      	ldrsb	r3, [r5, r3]
    uint8_t nbEnabledChannels = 0;
 800ac7e:	0025      	movs	r5, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	b2e3      	uxtb	r3, r4
 800ac84:	9302      	str	r3, [sp, #8]
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800ac86:	4b2c      	ldr	r3, [pc, #176]	; (800ad38 <RegionEU868NextChannel+0x110>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	4123      	asrs	r3, r4
 800ac8e:	4213      	tst	r3, r2
 800ac90:	d111      	bne.n	800acb6 <RegionEU868NextChannel+0x8e>
 800ac92:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 800ac94:	2c10      	cmp	r4, #16
 800ac96:	d1f4      	bne.n	800ac82 <RegionEU868NextChannel+0x5a>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
    }

    if( nbEnabledChannels > 0 )
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	d043      	beq.n	800ad24 <RegionEU868NextChannel+0xfc>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ac9c:	1e69      	subs	r1, r5, #1
 800ac9e:	2000      	movs	r0, #0
 800aca0:	f000 fa98 	bl	800b1d4 <randr>
 800aca4:	ab06      	add	r3, sp, #24
 800aca6:	5c1b      	ldrb	r3, [r3, r0]
 800aca8:	9a05      	ldr	r2, [sp, #20]
 800acaa:	7013      	strb	r3, [r2, #0]

        *time = 0;
 800acac:	2300      	movs	r3, #0
    {
        if( delayTx > 0 )
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
            return true;
 800acae:	2001      	movs	r0, #1
            *time = nextTxDelay;
 800acb0:	6033      	str	r3, [r6, #0]
        // Datarate not supported by any channel, restore defaults
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
        *time = 0;
        return false;
    }
}
 800acb2:	b00b      	add	sp, #44	; 0x2c
 800acb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb6:	230c      	movs	r3, #12
 800acb8:	4363      	muls	r3, r4
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	9a02      	ldr	r2, [sp, #8]
 800acbe:	4b20      	ldr	r3, [pc, #128]	; (800ad40 <RegionEU868NextChannel+0x118>)
 800acc0:	18d3      	adds	r3, r2, r3
                if( channels[i + j].Frequency == 0 )
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	d0e4      	beq.n	800ac92 <RegionEU868NextChannel+0x6a>
                if( joined == false )
 800acc8:	9a03      	ldr	r2, [sp, #12]
 800acca:	2a00      	cmp	r2, #0
 800accc:	d01c      	beq.n	800ad08 <RegionEU868NextChannel+0xe0>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800acce:	7a19      	ldrb	r1, [r3, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800acd0:	9804      	ldr	r0, [sp, #16]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800acd2:	b24a      	sxtb	r2, r1
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800acd4:	0709      	lsls	r1, r1, #28
 800acd6:	1112      	asrs	r2, r2, #4
 800acd8:	1709      	asrs	r1, r1, #28
 800acda:	f7ff fa1e 	bl	800a11a <RegionCommonValueInRange>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0d7      	beq.n	800ac92 <RegionEU868NextChannel+0x6a>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800ace2:	9a02      	ldr	r2, [sp, #8]
 800ace4:	4b16      	ldr	r3, [pc, #88]	; (800ad40 <RegionEU868NextChannel+0x118>)
 800ace6:	18d3      	adds	r3, r2, r3
 800ace8:	7a5a      	ldrb	r2, [r3, #9]
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <RegionEU868NextChannel+0x114>)
 800acec:	0112      	lsls	r2, r2, #4
 800acee:	189b      	adds	r3, r3, r2
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d105      	bne.n	800ad02 <RegionEU868NextChannel+0xda>
                enabledChannels[nbEnabledChannels++] = i + j;
 800acf6:	1c6b      	adds	r3, r5, #1
 800acf8:	aa06      	add	r2, sp, #24
 800acfa:	b2e1      	uxtb	r1, r4
 800acfc:	5551      	strb	r1, [r2, r5]
 800acfe:	b2dd      	uxtb	r5, r3
 800ad00:	e7c7      	b.n	800ac92 <RegionEU868NextChannel+0x6a>
                    delayTransmission++;
 800ad02:	3701      	adds	r7, #1
 800ad04:	b2ff      	uxtb	r7, r7
 800ad06:	e7c4      	b.n	800ac92 <RegionEU868NextChannel+0x6a>
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800ad08:	2207      	movs	r2, #7
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	4122      	asrs	r2, r4
 800ad0e:	420a      	tst	r2, r1
 800ad10:	d1dd      	bne.n	800acce <RegionEU868NextChannel+0xa6>
 800ad12:	e7be      	b.n	800ac92 <RegionEU868NextChannel+0x6a>
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 800ad14:	6868      	ldr	r0, [r5, #4]
 800ad16:	682c      	ldr	r4, [r5, #0]
 800ad18:	f000 fa33 	bl	800b182 <TimerGetElapsedTime>
 800ad1c:	1a23      	subs	r3, r4, r0
 800ad1e:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	e7c4      	b.n	800acae <RegionEU868NextChannel+0x86>
        if( delayTx > 0 )
 800ad24:	2f00      	cmp	r7, #0
 800ad26:	d1fb      	bne.n	800ad20 <RegionEU868NextChannel+0xf8>
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ad28:	2307      	movs	r3, #7
 800ad2a:	4a03      	ldr	r2, [pc, #12]	; (800ad38 <RegionEU868NextChannel+0x110>)
        return false;
 800ad2c:	0038      	movs	r0, r7
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ad2e:	8811      	ldrh	r1, [r2, #0]
 800ad30:	430b      	orrs	r3, r1
 800ad32:	8013      	strh	r3, [r2, #0]
        *time = 0;
 800ad34:	6037      	str	r7, [r6, #0]
        return false;
 800ad36:	e7bc      	b.n	800acb2 <RegionEU868NextChannel+0x8a>
 800ad38:	200009ac 	.word	0x200009ac
 800ad3c:	20000084 	.word	0x20000084
 800ad40:	200009b0 	.word	0x200009b0

0800ad44 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t band = 0;
 800ad46:	2400      	movs	r4, #0
{
 800ad48:	b085      	sub	sp, #20
    uint8_t band = 0;
 800ad4a:	ab02      	add	r3, sp, #8
 800ad4c:	1ddf      	adds	r7, r3, #7
 800ad4e:	703c      	strb	r4, [r7, #0]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800ad50:	7906      	ldrb	r6, [r0, #4]
{
 800ad52:	0005      	movs	r5, r0

    if( id >= EU868_MAX_NB_CHANNELS )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ad54:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800ad56:	2e0f      	cmp	r6, #15
 800ad58:	d857      	bhi.n	800ae0a <RegionEU868ChannelAdd+0xc6>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	0021      	movs	r1, r4
 800ad5e:	7a18      	ldrb	r0, [r3, #8]
 800ad60:	2207      	movs	r2, #7
 800ad62:	0700      	lsls	r0, r0, #28
 800ad64:	1700      	asrs	r0, r0, #28
 800ad66:	f7ff f9d8 	bl	800a11a <RegionCommonValueInRange>
 800ad6a:	9001      	str	r0, [sp, #4]
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ad6c:	2008      	movs	r0, #8
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	0021      	movs	r1, r4
 800ad72:	5618      	ldrsb	r0, [r3, r0]
 800ad74:	2207      	movs	r2, #7
 800ad76:	1100      	asrs	r0, r0, #4
 800ad78:	f7ff f9cf 	bl	800a11a <RegionCommonValueInRange>
    {
        drInvalid = true;
 800ad7c:	3401      	adds	r4, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d003      	beq.n	800ad8a <RegionEU868ChannelAdd+0x46>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ad82:	9c01      	ldr	r4, [sp, #4]
 800ad84:	4263      	negs	r3, r4
 800ad86:	415c      	adcs	r4, r3
 800ad88:	b2e4      	uxtb	r4, r4
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	7a18      	ldrb	r0, [r3, #8]
 800ad8e:	0703      	lsls	r3, r0, #28
 800ad90:	b240      	sxtb	r0, r0
 800ad92:	171b      	asrs	r3, r3, #28
 800ad94:	1100      	asrs	r0, r0, #4
 800ad96:	4283      	cmp	r3, r0
 800ad98:	dd00      	ble.n	800ad9c <RegionEU868ChannelAdd+0x58>
    {
        drInvalid = true;
 800ad9a:	2401      	movs	r4, #1
    }

    // Default channels don't accept all values
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800ad9c:	2e02      	cmp	r6, #2
 800ad9e:	d811      	bhi.n	800adc4 <RegionEU868ChannelAdd+0x80>
    {
        // Validate the datarate range for min: must be DR_0
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd00      	ble.n	800ada6 <RegionEU868ChannelAdd+0x62>
        {
            drInvalid = true;
 800ada4:	2401      	movs	r4, #1
        }
        // Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
 800ada6:	2207      	movs	r2, #7
 800ada8:	2105      	movs	r1, #5
 800adaa:	f7ff f9b6 	bl	800a11a <RegionCommonValueInRange>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d100      	bne.n	800adb4 <RegionEU868ChannelAdd+0x70>
        {
            drInvalid = true;
 800adb2:	2401      	movs	r4, #1
        }
        // We are not allowed to change the frequency
        if( channelAdd->NewChannel->Frequency != Channels[id].Frequency )
 800adb4:	230c      	movs	r3, #12
 800adb6:	4373      	muls	r3, r6
 800adb8:	682a      	ldr	r2, [r5, #0]
 800adba:	4915      	ldr	r1, [pc, #84]	; (800ae10 <RegionEU868ChannelAdd+0xcc>)
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	585b      	ldr	r3, [r3, r1]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d106      	bne.n	800add2 <RegionEU868ChannelAdd+0x8e>
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyTxFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	0039      	movs	r1, r7
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f7ff fb73 	bl	800a4b4 <VerifyTxFreq>
 800adce:	2800      	cmp	r0, #0
 800add0:	d104      	bne.n	800addc <RegionEU868ChannelAdd+0x98>
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800add2:	2006      	movs	r0, #6
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800add4:	2c00      	cmp	r4, #0
 800add6:	d118      	bne.n	800ae0a <RegionEU868ChannelAdd+0xc6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800add8:	3802      	subs	r0, #2
 800adda:	e016      	b.n	800ae0a <RegionEU868ChannelAdd+0xc6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800addc:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800adde:	2c00      	cmp	r4, #0
 800ade0:	d113      	bne.n	800ae0a <RegionEU868ChannelAdd+0xc6>
    }

    memcpy( &(Channels[id]), channelAdd->NewChannel, sizeof( Channels[id] ) );
 800ade2:	220c      	movs	r2, #12
 800ade4:	0011      	movs	r1, r2
 800ade6:	4371      	muls	r1, r6
 800ade8:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <RegionEU868ChannelAdd+0xcc>)
 800adea:	18cb      	adds	r3, r1, r3
 800adec:	0018      	movs	r0, r3
 800adee:	6829      	ldr	r1, [r5, #0]
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	f001 faed 	bl	800c3d0 <memcpy>
    Channels[id].Band = band;
 800adf6:	783b      	ldrb	r3, [r7, #0]
 800adf8:	9a01      	ldr	r2, [sp, #4]
    ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
 800adfa:	0020      	movs	r0, r4
    Channels[id].Band = band;
 800adfc:	7253      	strb	r3, [r2, #9]
    ChannelsMask[0] |= ( 1 << id );
 800adfe:	2201      	movs	r2, #1
 800ae00:	40b2      	lsls	r2, r6
 800ae02:	4904      	ldr	r1, [pc, #16]	; (800ae14 <RegionEU868ChannelAdd+0xd0>)
 800ae04:	880b      	ldrh	r3, [r1, #0]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	800b      	strh	r3, [r1, #0]
}
 800ae0a:	b005      	add	sp, #20
 800ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae0e:	46c0      	nop			; (mov r8, r8)
 800ae10:	200009b0 	.word	0x200009b0
 800ae14:	200009ac 	.word	0x200009ac

0800ae18 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800ae18:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800ae1a:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800ae1c:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800ae1e:	2c02      	cmp	r4, #2
 800ae20:	d90c      	bls.n	800ae3c <RegionEU868ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800ae22:	220c      	movs	r2, #12
 800ae24:	0013      	movs	r3, r2
 800ae26:	4363      	muls	r3, r4
 800ae28:	4805      	ldr	r0, [pc, #20]	; (800ae40 <RegionEU868ChannelsRemove+0x28>)
 800ae2a:	18c0      	adds	r0, r0, r3
 800ae2c:	f001 fad9 	bl	800c3e2 <memset>

    return RegionCommonChanDisable( ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800ae30:	0021      	movs	r1, r4
 800ae32:	2210      	movs	r2, #16
 800ae34:	4803      	ldr	r0, [pc, #12]	; (800ae44 <RegionEU868ChannelsRemove+0x2c>)
 800ae36:	f7ff f97a 	bl	800a12e <RegionCommonChanDisable>
 800ae3a:	0001      	movs	r1, r0
}
 800ae3c:	0008      	movs	r0, r1
 800ae3e:	bd10      	pop	{r4, pc}
 800ae40:	200009b0 	.word	0x200009b0
 800ae44:	200009ac 	.word	0x200009ac

0800ae48 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ae48:	2350      	movs	r3, #80	; 0x50
{
 800ae4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4c:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ae4e:	ac03      	add	r4, sp, #12
 800ae50:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800ae52:	7903      	ldrb	r3, [r0, #4]
{
 800ae54:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800ae56:	2b10      	cmp	r3, #16
 800ae58:	d120      	bne.n	800ae9c <RegionEU868ApplyCFList+0x54>
 800ae5a:	2600      	movs	r6, #0
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ae5c:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800ae5e:	2d07      	cmp	r5, #7
 800ae60:	d81e      	bhi.n	800aea0 <RegionEU868ApplyCFList+0x58>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	5d8a      	ldrb	r2, [r1, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ae66:	1989      	adds	r1, r1, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ae68:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ae6a:	784b      	ldrb	r3, [r1, #1]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ae72:	788b      	ldrb	r3, [r1, #2]
 800ae74:	041b      	lsls	r3, r3, #16
 800ae76:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800ae78:	2264      	movs	r2, #100	; 0x64
 800ae7a:	4353      	muls	r3, r2
 800ae7c:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800ae7e:	2300      	movs	r3, #0
            newChannel.Rx1Frequency = 0;
 800ae80:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00f      	beq.n	800aea8 <RegionEU868ApplyCFList+0x60>
            channelAdd.NewChannel = &newChannel;
 800ae88:	a801      	add	r0, sp, #4
 800ae8a:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ae8c:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800ae8e:	f7ff ff59 	bl	800ad44 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ae92:	3501      	adds	r5, #1
 800ae94:	b2ed      	uxtb	r5, r5
 800ae96:	3603      	adds	r6, #3
 800ae98:	2d10      	cmp	r5, #16
 800ae9a:	d1e0      	bne.n	800ae5e <RegionEU868ApplyCFList+0x16>
}
 800ae9c:	b007      	add	sp, #28
 800ae9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            newChannel.Frequency = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800aea4:	7223      	strb	r3, [r4, #8]
 800aea6:	e7eb      	b.n	800ae80 <RegionEU868ApplyCFList+0x38>
            channelRemove.ChannelId = chanIdx;
 800aea8:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800aeaa:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800aeac:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800aeae:	f7ff ffb3 	bl	800ae18 <RegionEU868ChannelsRemove>
 800aeb2:	e7ee      	b.n	800ae92 <RegionEU868ApplyCFList+0x4a>

0800aeb4 <RegionEU868NewChannelReq>:
{
 800aeb4:	b513      	push	{r0, r1, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800aeb6:	6802      	ldr	r2, [r0, #0]
 800aeb8:	7903      	ldrb	r3, [r0, #4]
 800aeba:	6814      	ldr	r4, [r2, #0]
 800aebc:	2c00      	cmp	r4, #0
 800aebe:	d109      	bne.n	800aed4 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800aec0:	466a      	mov	r2, sp
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800aec2:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800aec4:	7013      	strb	r3, [r2, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800aec6:	f7ff ffa7 	bl	800ae18 <RegionEU868ChannelsRemove>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d000      	beq.n	800aed0 <RegionEU868NewChannelReq+0x1c>
    uint8_t status = 0x03;
 800aece:	3403      	adds	r4, #3
}
 800aed0:	0020      	movs	r0, r4
 800aed2:	bd16      	pop	{r1, r2, r4, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800aed4:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800aed6:	466a      	mov	r2, sp
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800aed8:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800aeda:	7113      	strb	r3, [r2, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800aedc:	f7ff ff32 	bl	800ad44 <RegionEU868ChannelAdd>
                status &= 0xFE;
 800aee0:	2402      	movs	r4, #2
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800aee2:	2804      	cmp	r0, #4
 800aee4:	d0f4      	beq.n	800aed0 <RegionEU868NewChannelReq+0x1c>
                status &= 0xFD;
 800aee6:	3c01      	subs	r4, #1
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800aee8:	2805      	cmp	r0, #5
 800aeea:	d0f1      	beq.n	800aed0 <RegionEU868NewChannelReq+0x1c>
                status &= 0xFC;
 800aeec:	4242      	negs	r2, r0
 800aeee:	4150      	adcs	r0, r2
    uint8_t status = 0x03;
 800aef0:	3402      	adds	r4, #2
                status &= 0xFC;
 800aef2:	4240      	negs	r0, r0
 800aef4:	4004      	ands	r4, r0
 800aef6:	e7eb      	b.n	800aed0 <RegionEU868NewChannelReq+0x1c>

0800aef8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800aef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 800aefa:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
 800aefc:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <RegionEU868SetContinuousWave+0x44>)
 800af00:	434a      	muls	r2, r1
 800af02:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
 800af04:	189b      	adds	r3, r3, r2
 800af06:	7a5a      	ldrb	r2, [r3, #9]
 800af08:	4b0d      	ldr	r3, [pc, #52]	; (800af40 <RegionEU868SetContinuousWave+0x48>)
 800af0a:	0112      	lsls	r2, r2, #4
 800af0c:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800af0e:	789b      	ldrb	r3, [r3, #2]
 800af10:	7882      	ldrb	r2, [r0, #2]
{
 800af12:	0004      	movs	r4, r0
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800af14:	b251      	sxtb	r1, r2
 800af16:	1c18      	adds	r0, r3, #0
 800af18:	b25b      	sxtb	r3, r3
 800af1a:	428b      	cmp	r3, r1
 800af1c:	da00      	bge.n	800af20 <RegionEU868SetContinuousWave+0x28>
 800af1e:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800af20:	68a2      	ldr	r2, [r4, #8]
 800af22:	6861      	ldr	r1, [r4, #4]
 800af24:	b240      	sxtb	r0, r0
 800af26:	f7ff fa83 	bl	800a430 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <RegionEU868SetContinuousWave+0x4c>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800af2c:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800af2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af30:	0028      	movs	r0, r5
 800af32:	89a2      	ldrh	r2, [r4, #12]
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	4798      	blx	r3
}
 800af38:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800af3a:	46c0      	nop			; (mov r8, r8)
 800af3c:	200009b0 	.word	0x200009b0
 800af40:	20000084 	.word	0x20000084
 800af44:	0800cfc4 	.word	0x0800cfc4

0800af48 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800af48:	1a8a      	subs	r2, r1, r2
 800af4a:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800af4c:	1c10      	adds	r0, r2, #0
 800af4e:	2a00      	cmp	r2, #0
 800af50:	da00      	bge.n	800af54 <RegionEU868ApplyDrOffset+0xc>
 800af52:	2000      	movs	r0, #0
 800af54:	b2c0      	uxtb	r0, r0
}
 800af56:	4770      	bx	lr

0800af58 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 800af58:	b510      	push	{r4, lr}
  HW_RTC_DelayMs( ms );
 800af5a:	f000 fbd7 	bl	800b70c <HW_RTC_DelayMs>

}
 800af5e:	bd10      	pop	{r4, pc}

0800af60 <LowPower_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800af60:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af64:	b672      	cpsid	i
{
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 800af66:	4b03      	ldr	r3, [pc, #12]	; (800af74 <LowPower_Disable+0x14>)
 800af68:	6819      	ldr	r1, [r3, #0]
 800af6a:	4308      	orrs	r0, r1
 800af6c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af6e:	f382 8810 	msr	PRIMASK, r2

  RESTORE_PRIMASK( );
}
 800af72:	4770      	bx	lr
 800af74:	20000a70 	.word	0x20000a70

0800af78 <LowPower_Enable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800af78:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af7c:	b672      	cpsid	i
{
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 800af7e:	4a03      	ldr	r2, [pc, #12]	; (800af8c <LowPower_Enable+0x14>)
 800af80:	6813      	ldr	r3, [r2, #0]
 800af82:	4383      	bics	r3, r0
 800af84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af86:	f381 8810 	msr	PRIMASK, r1
  
  RESTORE_PRIMASK( );
}
 800af8a:	4770      	bx	lr
 800af8c:	20000a70 	.word	0x20000a70

0800af90 <LowPower_GetState>:
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
  return LowPower_State;
 800af90:	4b01      	ldr	r3, [pc, #4]	; (800af98 <LowPower_GetState+0x8>)
 800af92:	6818      	ldr	r0, [r3, #0]
}
 800af94:	4770      	bx	lr
 800af96:	46c0      	nop			; (mov r8, r8)
 800af98:	20000a70 	.word	0x20000a70

0800af9c <LowPower_Handler>:
{
  DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
  
  if ( LowPower_State == 0 )
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <LowPower_Handler+0x20>)
{
 800af9e:	b510      	push	{r4, lr}
  if ( LowPower_State == 0 )
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d106      	bne.n	800afb4 <LowPower_Handler+0x18>
  {    
    
    DBG_PRINTF_CRITICAL("dz\n\r");
    
    HW_EnterStopMode( );
 800afa6:	f001 f81f 	bl	800bfe8 <HW_EnterStopMode>
    
    /* mcu dependent. to be implemented by user*/
    HW_ExitStopMode();
 800afaa:	f001 f839 	bl	800c020 <HW_ExitStopMode>
    
    DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
    
    HW_RTC_setMcuWakeUpTime( );
 800afae:	f000 fa6d 	bl	800b48c <HW_RTC_setMcuWakeUpTime>
    HW_EnterSleepMode( );

    DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
  }
  
}
 800afb2:	bd10      	pop	{r4, pc}
    HW_EnterSleepMode( );
 800afb4:	f001 f864 	bl	800c080 <HW_EnterSleepMode>
}
 800afb8:	e7fb      	b.n	800afb2 <LowPower_Handler+0x16>
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	20000a70 	.word	0x20000a70

0800afc0 <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800afc4:	f000 fa9c 	bl	800b500 <HW_RTC_GetMinimumTimeout>
  obj->IsRunning = true; 
 800afc8:	2301      	movs	r3, #1
 800afca:	7223      	strb	r3, [r4, #8]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800afcc:	0005      	movs	r5, r0

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800afce:	6826      	ldr	r6, [r4, #0]
 800afd0:	f000 faaa 	bl	800b528 <HW_RTC_GetTimerElapsedTime>
 800afd4:	1828      	adds	r0, r5, r0
 800afd6:	4286      	cmp	r6, r0
 800afd8:	d203      	bcs.n	800afe2 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800afda:	f000 faa5 	bl	800b528 <HW_RTC_GetTimerElapsedTime>
 800afde:	182d      	adds	r5, r5, r0
 800afe0:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	f000 fac6 	bl	800b574 <HW_RTC_SetAlarm>
}
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afec <TimerInsertNewHeadTimer>:
  TimerEvent_t* cur = TimerListHead;
 800afec:	4a05      	ldr	r2, [pc, #20]	; (800b004 <TimerInsertNewHeadTimer+0x18>)
{
 800afee:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800aff0:	6813      	ldr	r3, [r2, #0]
  if( cur != NULL )
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <TimerInsertNewHeadTimer+0xe>
    cur->IsRunning = false;
 800aff6:	2100      	movs	r1, #0
 800aff8:	7219      	strb	r1, [r3, #8]
  obj->Next = cur;
 800affa:	6103      	str	r3, [r0, #16]
  TimerListHead = obj;
 800affc:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800affe:	f7ff ffdf 	bl	800afc0 <TimerSetTimeout>
}
 800b002:	bd10      	pop	{r4, pc}
 800b004:	20000a74 	.word	0x20000a74

0800b008 <TimerInit>:
  obj->Timestamp = 0;
 800b008:	2300      	movs	r3, #0
  obj->Callback = callback;
 800b00a:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 800b00c:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800b00e:	6043      	str	r3, [r0, #4]
  obj->IsRunning = false;
 800b010:	7203      	strb	r3, [r0, #8]
  obj->Next = NULL;
 800b012:	6103      	str	r3, [r0, #16]
}
 800b014:	4770      	bx	lr
	...

0800b018 <TimerStart>:
{
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b01c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b020:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800b022:	2800      	cmp	r0, #0
 800b024:	d00e      	beq.n	800b044 <TimerStart+0x2c>
  TimerEvent_t* cur = TimerListHead;
 800b026:	4e17      	ldr	r6, [pc, #92]	; (800b084 <TimerStart+0x6c>)
 800b028:	6832      	ldr	r2, [r6, #0]
 800b02a:	0013      	movs	r3, r2
  while( cur != NULL )
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10c      	bne.n	800b04a <TimerStart+0x32>
  obj->Timestamp = obj->ReloadValue;
 800b030:	6861      	ldr	r1, [r4, #4]
  obj->IsRunning = false;
 800b032:	7223      	strb	r3, [r4, #8]
  obj->Timestamp = obj->ReloadValue;
 800b034:	6021      	str	r1, [r4, #0]
  if( TimerListHead == NULL )
 800b036:	2a00      	cmp	r2, #0
 800b038:	d10b      	bne.n	800b052 <TimerStart+0x3a>
    HW_RTC_SetTimerContext( );
 800b03a:	f000 fb7b 	bl	800b734 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 800b03e:	0020      	movs	r0, r4
 800b040:	f7ff ffd4 	bl	800afec <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b044:	f385 8810 	msr	PRIMASK, r5
}
 800b048:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 800b04a:	429c      	cmp	r4, r3
 800b04c:	d0fa      	beq.n	800b044 <TimerStart+0x2c>
    cur = cur->Next;
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	e7ec      	b.n	800b02c <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800b052:	f000 fa69 	bl	800b528 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 800b05a:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 800b05c:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	4290      	cmp	r0, r2
 800b062:	d3ec      	bcc.n	800b03e <TimerStart+0x26>
  TimerEvent_t* next = TimerListHead->Next;
 800b064:	691a      	ldr	r2, [r3, #16]
  while (cur->Next != NULL )
 800b066:	6919      	ldr	r1, [r3, #16]
 800b068:	2900      	cmp	r1, #0
 800b06a:	d102      	bne.n	800b072 <TimerStart+0x5a>
  cur->Next = obj;
 800b06c:	611c      	str	r4, [r3, #16]
  obj->Next = NULL;
 800b06e:	6121      	str	r1, [r4, #16]
 800b070:	e7e8      	b.n	800b044 <TimerStart+0x2c>
    if( obj->Timestamp  > next->Timestamp )
 800b072:	6811      	ldr	r1, [r2, #0]
 800b074:	4288      	cmp	r0, r1
 800b076:	d902      	bls.n	800b07e <TimerStart+0x66>
        next = next->Next;
 800b078:	0013      	movs	r3, r2
 800b07a:	6912      	ldr	r2, [r2, #16]
 800b07c:	e7f3      	b.n	800b066 <TimerStart+0x4e>
        cur->Next = obj;
 800b07e:	611c      	str	r4, [r3, #16]
        obj->Next = next;
 800b080:	6122      	str	r2, [r4, #16]
 800b082:	e7df      	b.n	800b044 <TimerStart+0x2c>
 800b084:	20000a74 	.word	0x20000a74

0800b088 <TimerIrqHandler>:
{
 800b088:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800b08a:	f000 fb9b 	bl	800b7c4 <HW_RTC_GetTimerContext>
 800b08e:	0005      	movs	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 800b090:	f000 fb50 	bl	800b734 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 800b094:	4c18      	ldr	r4, [pc, #96]	; (800b0f8 <TimerIrqHandler+0x70>)
 800b096:	6822      	ldr	r2, [r4, #0]
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d014      	beq.n	800b0c6 <TimerIrqHandler+0x3e>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800b09c:	1b40      	subs	r0, r0, r5
 800b09e:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 800b0a0:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d105      	bne.n	800b0b4 <TimerIrqHandler+0x2c>
    TimerListHead = TimerListHead->Next;
 800b0a8:	6913      	ldr	r3, [r2, #16]
 800b0aa:	6023      	str	r3, [r4, #0]
    exec_cb( cur->Callback );
 800b0ac:	68d3      	ldr	r3, [r2, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d108      	bne.n	800b0c4 <TimerIrqHandler+0x3c>
 800b0b2:	e7fe      	b.n	800b0b2 <TimerIrqHandler+0x2a>
      if (next->Timestamp > DeltaContext)
 800b0b4:	6819      	ldr	r1, [r3, #0]
 800b0b6:	4281      	cmp	r1, r0
 800b0b8:	d902      	bls.n	800b0c0 <TimerIrqHandler+0x38>
        next->Timestamp -= DeltaContext;
 800b0ba:	1a09      	subs	r1, r1, r0
 800b0bc:	6019      	str	r1, [r3, #0]
 800b0be:	e7f0      	b.n	800b0a2 <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 800b0c0:	601d      	str	r5, [r3, #0]
 800b0c2:	e7ee      	b.n	800b0a2 <TimerIrqHandler+0x1a>
   exec_cb( cur->Callback );
 800b0c4:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <TimerIrqHandler+0x4c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d10c      	bne.n	800b0ec <TimerIrqHandler+0x64>
}
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800b0d4:	681d      	ldr	r5, [r3, #0]
 800b0d6:	f000 fa27 	bl	800b528 <HW_RTC_GetTimerElapsedTime>
 800b0da:	4285      	cmp	r5, r0
 800b0dc:	d2f6      	bcs.n	800b0cc <TimerIrqHandler+0x44>
   cur = TimerListHead;
 800b0de:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 800b0e0:	691a      	ldr	r2, [r3, #16]
   exec_cb( cur->Callback );
 800b0e2:	68db      	ldr	r3, [r3, #12]
   TimerListHead = TimerListHead->Next;
 800b0e4:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback );
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1ec      	bne.n	800b0c4 <TimerIrqHandler+0x3c>
 800b0ea:	e7fe      	b.n	800b0ea <TimerIrqHandler+0x62>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 800b0ec:	7a03      	ldrb	r3, [r0, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1ef      	bne.n	800b0d2 <TimerIrqHandler+0x4a>
    TimerSetTimeout( TimerListHead );
 800b0f2:	f7ff ff65 	bl	800afc0 <TimerSetTimeout>
}
 800b0f6:	e7ec      	b.n	800b0d2 <TimerIrqHandler+0x4a>
 800b0f8:	20000a74 	.word	0x20000a74

0800b0fc <TimerStop>:
{
 800b0fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b0fe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b102:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800b104:	4d12      	ldr	r5, [pc, #72]	; (800b150 <TimerStop+0x54>)
 800b106:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <TimerStop+0x14>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d102      	bne.n	800b116 <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b110:	f386 8810 	msr	PRIMASK, r6
}  
 800b114:	bd70      	pop	{r4, r5, r6, pc}
  if( TimerListHead == obj ) // Stop the Head                  
 800b116:	4283      	cmp	r3, r0
 800b118:	d111      	bne.n	800b13e <TimerStop+0x42>
    if( TimerListHead->IsRunning == true ) // The head is already running 
 800b11a:	7a1a      	ldrb	r2, [r3, #8]
 800b11c:	691c      	ldr	r4, [r3, #16]
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d00a      	beq.n	800b138 <TimerStop+0x3c>
      if( TimerListHead->Next != NULL )
 800b122:	2c00      	cmp	r4, #0
 800b124:	d006      	beq.n	800b134 <TimerStop+0x38>
        TimerListHead->IsRunning = false;
 800b126:	2200      	movs	r2, #0
        TimerSetTimeout( TimerListHead );
 800b128:	0020      	movs	r0, r4
        TimerListHead->IsRunning = false;
 800b12a:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 800b12c:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 800b12e:	f7ff ff47 	bl	800afc0 <TimerSetTimeout>
 800b132:	e7ed      	b.n	800b110 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 800b134:	f000 fa0c 	bl	800b550 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800b138:	602c      	str	r4, [r5, #0]
 800b13a:	e7e9      	b.n	800b110 <TimerStop+0x14>
 800b13c:	0013      	movs	r3, r2
        cur = cur->Next;
 800b13e:	691a      	ldr	r2, [r3, #16]
    while( cur != NULL )
 800b140:	2a00      	cmp	r2, #0
 800b142:	d0e5      	beq.n	800b110 <TimerStop+0x14>
      if( cur == obj )
 800b144:	4290      	cmp	r0, r2
 800b146:	d1f9      	bne.n	800b13c <TimerStop+0x40>
        if( cur->Next != NULL )
 800b148:	6902      	ldr	r2, [r0, #16]
 800b14a:	611a      	str	r2, [r3, #16]
 800b14c:	e7e0      	b.n	800b110 <TimerStop+0x14>
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	20000a74 	.word	0x20000a74

0800b154 <TimerSetValue>:
{
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800b158:	0008      	movs	r0, r1
 800b15a:	f000 f9d3 	bl	800b504 <HW_RTC_ms2Tick>
 800b15e:	0004      	movs	r4, r0
  TimerStop( obj );
 800b160:	0028      	movs	r0, r5
 800b162:	f7ff ffcb 	bl	800b0fc <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800b166:	f000 f9cb 	bl	800b500 <HW_RTC_GetMinimumTimeout>
 800b16a:	4284      	cmp	r4, r0
 800b16c:	d200      	bcs.n	800b170 <TimerSetValue+0x1c>
 800b16e:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 800b170:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 800b172:	606c      	str	r4, [r5, #4]
}
 800b174:	bd70      	pop	{r4, r5, r6, pc}

0800b176 <TimerGetCurrentTime>:
{
 800b176:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800b178:	f000 f9e2 	bl	800b540 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800b17c:	f000 f9ca 	bl	800b514 <HW_RTC_Tick2ms>
}
 800b180:	bd10      	pop	{r4, pc}

0800b182 <TimerGetElapsedTime>:
{
 800b182:	b570      	push	{r4, r5, r6, lr}
 800b184:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800b186:	f000 f9db 	bl	800b540 <HW_RTC_GetTimerValue>
 800b18a:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800b18c:	0028      	movs	r0, r5
 800b18e:	f000 f9b9 	bl	800b504 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800b192:	1a20      	subs	r0, r4, r0
 800b194:	f000 f9be 	bl	800b514 <HW_RTC_Tick2ms>
}
 800b198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b19c <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b19c:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <rand1+0x1c>)
 800b19e:	4807      	ldr	r0, [pc, #28]	; (800b1bc <rand1+0x20>)
 800b1a0:	681a      	ldr	r2, [r3, #0]
{
 800b1a2:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b1a4:	4350      	muls	r0, r2
 800b1a6:	4a06      	ldr	r2, [pc, #24]	; (800b1c0 <rand1+0x24>)
 800b1a8:	4906      	ldr	r1, [pc, #24]	; (800b1c4 <rand1+0x28>)
 800b1aa:	1880      	adds	r0, r0, r2
 800b1ac:	6018      	str	r0, [r3, #0]
 800b1ae:	f7f5 f845 	bl	800023c <__aeabi_uidivmod>
}
 800b1b2:	0008      	movs	r0, r1
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	200000d4 	.word	0x200000d4
 800b1bc:	41c64e6d 	.word	0x41c64e6d
 800b1c0:	00003039 	.word	0x00003039
 800b1c4:	7fffffff 	.word	0x7fffffff

0800b1c8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <srand1+0x8>)
 800b1ca:	6018      	str	r0, [r3, #0]
}
 800b1cc:	4770      	bx	lr
 800b1ce:	46c0      	nop			; (mov r8, r8)
 800b1d0:	200000d4 	.word	0x200000d4

0800b1d4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	0005      	movs	r5, r0
 800b1d8:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800b1da:	f7ff ffdf 	bl	800b19c <rand1>
 800b1de:	1b61      	subs	r1, r4, r5
 800b1e0:	3101      	adds	r1, #1
 800b1e2:	f7f5 f915 	bl	8000410 <__aeabi_idivmod>
 800b1e6:	1948      	adds	r0, r1, r5
}
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}

0800b1ea <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800b1ea:	2300      	movs	r3, #0
{
 800b1ec:	b510      	push	{r4, lr}
    while( size-- )
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d100      	bne.n	800b1f4 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800b1f2:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800b1f4:	5ccc      	ldrb	r4, [r1, r3]
 800b1f6:	54c4      	strb	r4, [r0, r3]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	e7f8      	b.n	800b1ee <memcpy1+0x4>

0800b1fc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800b1fc:	1e53      	subs	r3, r2, #1
 800b1fe:	18c0      	adds	r0, r0, r3
    while( size-- )
 800b200:	2300      	movs	r3, #0
{
 800b202:	b530      	push	{r4, r5, lr}
    while( size-- )
 800b204:	429a      	cmp	r2, r3
 800b206:	d100      	bne.n	800b20a <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800b208:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800b20a:	5ccd      	ldrb	r5, [r1, r3]
 800b20c:	425c      	negs	r4, r3
 800b20e:	5505      	strb	r5, [r0, r4]
 800b210:	3301      	adds	r3, #1
 800b212:	e7f7      	b.n	800b204 <memcpyr+0x8>

0800b214 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800b214:	4b04      	ldr	r3, [pc, #16]	; (800b228 <memset1+0x14>)
 800b216:	3a01      	subs	r2, #1
 800b218:	b292      	uxth	r2, r2
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d100      	bne.n	800b220 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800b21e:	4770      	bx	lr
        *dst++ = value;
 800b220:	7001      	strb	r1, [r0, #0]
 800b222:	3001      	adds	r0, #1
 800b224:	e7f7      	b.n	800b216 <memset1+0x2>
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	0000ffff 	.word	0x0000ffff

0800b22c <BSP_sensor_Read>:
#if defined(SENSOR_ENABLED) || defined (LRWAN_NS1)
  BSP_HUMIDITY_Get_Hum(HUMIDITY_handle, &HUMIDITY_Value);
  BSP_TEMPERATURE_Get_Temp(TEMPERATURE_handle, &TEMPERATURE_Value);
  BSP_PRESSURE_Get_Press(PRESSURE_handle, &PRESSURE_Value);
#endif  
  sensor_data->humidity    = HUMIDITY_Value;
 800b22c:	2300      	movs	r3, #0
 800b22e:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800b230:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800b232:	6003      	str	r3, [r0, #0]
  
  sensor_data->latitude  = (int32_t) ((STSOP_LATTITUDE  * MAX_GPS_POS) /90);
 800b234:	4b02      	ldr	r3, [pc, #8]	; (800b240 <BSP_sensor_Read+0x14>)
 800b236:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t) ((STSOP_LONGITUDE  * MAX_GPS_POS )/180);
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <BSP_sensor_Read+0x18>)
 800b23a:	6103      	str	r3, [r0, #16]
  /* USER CODE END 5 */
}
 800b23c:	4770      	bx	lr
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	003e090d 	.word	0x003e090d
 800b244:	000503ab 	.word	0x000503ab

0800b248 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable( HUMIDITY_handle );
  BSP_TEMPERATURE_Sensor_Enable( TEMPERATURE_handle );
  BSP_PRESSURE_Sensor_Enable( PRESSURE_handle );
#endif
    /* USER CODE END 6 */
}
 800b248:	4770      	bx	lr
	...

0800b24c <DBG_Init>:
  * @brief Initializes the debug
  * @param None
  * @retval None
  */
void DBG_Init( void )
{
 800b24c:	b530      	push	{r4, r5, lr}
 800b24e:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStopMode( );
  HAL_DBGMCU_EnableDBGStandbyMode( );
  
#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure ={0};
 800b250:	220c      	movs	r2, #12
 800b252:	2100      	movs	r1, #0
 800b254:	a803      	add	r0, sp, #12
 800b256:	f001 f8c4 	bl	800c3e2 <memset>
  
  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 800b25a:	2303      	movs	r3, #3
 800b25c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800b25e:	23c0      	movs	r3, #192	; 0xc0
  __GPIOA_CLK_ENABLE() ;  
 800b260:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b262:	20a0      	movs	r0, #160	; 0xa0
  __GPIOA_CLK_ENABLE() ;  
 800b264:	4c10      	ldr	r4, [pc, #64]	; (800b2a8 <DBG_Init+0x5c>)
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800b266:	01db      	lsls	r3, r3, #7
 800b268:	9301      	str	r3, [sp, #4]
  __GPIOA_CLK_ENABLE() ;  
 800b26a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b26c:	a901      	add	r1, sp, #4
  __GPIOA_CLK_ENABLE() ;  
 800b26e:	432b      	orrs	r3, r5
 800b270:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b274:	05c0      	lsls	r0, r0, #23
  __GPIOA_CLK_ENABLE() ;  
 800b276:	402b      	ands	r3, r5
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b27c:	f7f9 fd5e 	bl	8004d3c <HAL_GPIO_Init>
  __GPIOA_CLK_DISABLE() ;
 800b280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b282:	43ab      	bics	r3, r5
 800b284:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  __HAL_RCC_DBGMCU_CLK_ENABLE( );
 800b286:	2380      	movs	r3, #128	; 0x80
 800b288:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b28a:	03db      	lsls	r3, r3, #15
 800b28c:	4313      	orrs	r3, r2
 800b28e:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode( );
 800b290:	f7f9 fa80 	bl	8004794 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode( );
 800b294:	f7f9 fa86 	bl	80047a4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode( );
 800b298:	f7f9 fa8c 	bl	80047b4 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
 800b29c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b29e:	4a03      	ldr	r2, [pc, #12]	; (800b2ac <DBG_Init+0x60>)
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	6363      	str	r3, [r4, #52]	; 0x34
#endif
}
 800b2a4:	b007      	add	sp, #28
 800b2a6:	bd30      	pop	{r4, r5, pc}
 800b2a8:	40021000 	.word	0x40021000
 800b2ac:	ffbfffff 	.word	0xffbfffff

0800b2b0 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 800b2b0:	e7fe      	b.n	800b2b0 <Error_Handler>
	...

0800b2b4 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800b2b4:	0001      	movs	r1, r0
 800b2b6:	23ff      	movs	r3, #255	; 0xff
 800b2b8:	4399      	bics	r1, r3
 800b2ba:	000b      	movs	r3, r1
{
 800b2bc:	0002      	movs	r2, r0
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800b2be:	1e58      	subs	r0, r3, #1
 800b2c0:	4183      	sbcs	r3, r0
 800b2c2:	00d8      	lsls	r0, r3, #3
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <HW_GPIO_GetBitPos+0x30>)
 800b2c6:	421a      	tst	r2, r3
 800b2c8:	d001      	beq.n	800b2ce <HW_GPIO_GetBitPos+0x1a>
 800b2ca:	2304      	movs	r3, #4
 800b2cc:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800b2ce:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <HW_GPIO_GetBitPos+0x34>)
 800b2d0:	421a      	tst	r2, r3
 800b2d2:	d001      	beq.n	800b2d8 <HW_GPIO_GetBitPos+0x24>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <HW_GPIO_GetBitPos+0x38>)
 800b2da:	421a      	tst	r2, r3
 800b2dc:	d001      	beq.n	800b2e2 <HW_GPIO_GetBitPos+0x2e>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4318      	orrs	r0, r3
  
  return PinPos;
}
 800b2e2:	4770      	bx	lr
 800b2e4:	fffff0f0 	.word	0xfffff0f0
 800b2e8:	ffffcccc 	.word	0xffffcccc
 800b2ec:	ffffaaaa 	.word	0xffffaaaa

0800b2f0 <HW_GPIO_Init>:
{
 800b2f0:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800b2f2:	4c21      	ldr	r4, [pc, #132]	; (800b378 <HW_GPIO_Init+0x88>)
{
 800b2f4:	b087      	sub	sp, #28
 800b2f6:	4b21      	ldr	r3, [pc, #132]	; (800b37c <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800b2f8:	42a0      	cmp	r0, r4
 800b2fa:	d02a      	beq.n	800b352 <HW_GPIO_Init+0x62>
 800b2fc:	d80c      	bhi.n	800b318 <HW_GPIO_Init+0x28>
 800b2fe:	24a0      	movs	r4, #160	; 0xa0
 800b300:	05e4      	lsls	r4, r4, #23
 800b302:	42a0      	cmp	r0, r4
 800b304:	d017      	beq.n	800b336 <HW_GPIO_Init+0x46>
 800b306:	2580      	movs	r5, #128	; 0x80
 800b308:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b30a:	432c      	orrs	r4, r5
 800b30c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	402b      	ands	r3, r5
 800b312:	9305      	str	r3, [sp, #20]
 800b314:	9b05      	ldr	r3, [sp, #20]
 800b316:	e016      	b.n	800b346 <HW_GPIO_Init+0x56>
 800b318:	4c19      	ldr	r4, [pc, #100]	; (800b380 <HW_GPIO_Init+0x90>)
 800b31a:	42a0      	cmp	r0, r4
 800b31c:	d022      	beq.n	800b364 <HW_GPIO_Init+0x74>
 800b31e:	4c19      	ldr	r4, [pc, #100]	; (800b384 <HW_GPIO_Init+0x94>)
 800b320:	42a0      	cmp	r0, r4
 800b322:	d1f0      	bne.n	800b306 <HW_GPIO_Init+0x16>
 800b324:	2508      	movs	r5, #8
 800b326:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b328:	432c      	orrs	r4, r5
 800b32a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	402b      	ands	r3, r5
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	e007      	b.n	800b346 <HW_GPIO_Init+0x56>
 800b336:	2501      	movs	r5, #1
 800b338:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b33a:	432c      	orrs	r4, r5
 800b33c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	402b      	ands	r3, r5
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800b346:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 800b348:	0011      	movs	r1, r2
 800b34a:	f7f9 fcf7 	bl	8004d3c <HAL_GPIO_Init>
}
 800b34e:	b007      	add	sp, #28
 800b350:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800b352:	2502      	movs	r5, #2
 800b354:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b356:	432c      	orrs	r4, r5
 800b358:	62dc      	str	r4, [r3, #44]	; 0x2c
 800b35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35c:	402b      	ands	r3, r5
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	9b02      	ldr	r3, [sp, #8]
 800b362:	e7f0      	b.n	800b346 <HW_GPIO_Init+0x56>
 800b364:	2504      	movs	r5, #4
 800b366:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b368:	432c      	orrs	r4, r5
 800b36a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	402b      	ands	r3, r5
 800b370:	9303      	str	r3, [sp, #12]
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	e7e7      	b.n	800b346 <HW_GPIO_Init+0x56>
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	50000400 	.word	0x50000400
 800b37c:	40021000 	.word	0x40021000
 800b380:	50000800 	.word	0x50000800
 800b384:	50000c00 	.word	0x50000c00

0800b388 <HW_GPIO_SetIrq>:
{
 800b388:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800b38a:	0008      	movs	r0, r1
{
 800b38c:	001d      	movs	r5, r3
 800b38e:	000c      	movs	r4, r1
 800b390:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800b392:	f7ff ff8f 	bl	800b2b4 <HW_GPIO_GetBitPos>
  if ( irqHandler != NULL)
 800b396:	2d00      	cmp	r5, #0
 800b398:	d00d      	beq.n	800b3b6 <HW_GPIO_SetIrq+0x2e>
    GpioIrq[ BitPos ] = irqHandler;
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <HW_GPIO_SetIrq+0x30>)
 800b39c:	0080      	lsls	r0, r0, #2
 800b39e:	50c5      	str	r5, [r0, r3]
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800b3a0:	0020      	movs	r0, r4
 800b3a2:	f000 fccf 	bl	800bd44 <MSP_GetIRQn>
 800b3a6:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	0031      	movs	r1, r6
 800b3ac:	f7f9 fc70 	bl	8004c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800b3b0:	0020      	movs	r0, r4
 800b3b2:	f7f9 fc97 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
}
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	20000a78 	.word	0x20000a78

0800b3bc <HW_GPIO_IrqHandler>:
{
 800b3bc:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 800b3be:	f7ff ff79 	bl	800b2b4 <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 800b3c2:	4b03      	ldr	r3, [pc, #12]	; (800b3d0 <HW_GPIO_IrqHandler+0x14>)
 800b3c4:	0080      	lsls	r0, r0, #2
 800b3c6:	58c3      	ldr	r3, [r0, r3]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d000      	beq.n	800b3ce <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ] ( );
 800b3cc:	4798      	blx	r3
}
 800b3ce:	bd10      	pop	{r4, pc}
 800b3d0:	20000a78 	.word	0x20000a78

0800b3d4 <HW_GPIO_Write>:
{
 800b3d4:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 800b3d6:	b2d2      	uxtb	r2, r2
 800b3d8:	f7f9 fd6a 	bl	8004eb0 <HAL_GPIO_WritePin>
}
 800b3dc:	bd10      	pop	{r4, pc}
	...

0800b3e0 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 800b3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TimerTime_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800b3e2:	4e24      	ldr	r6, [pc, #144]	; (800b474 <HW_RTC_GetCalendarValue+0x94>)
{
 800b3e4:	0005      	movs	r5, r0
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	0030      	movs	r0, r6
{
 800b3ea:	000c      	movs	r4, r1
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800b3ec:	f7fb f8c8 	bl	8006580 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	0029      	movs	r1, r5
 800b3f4:	0030      	movs	r0, r6
    first_read = RTC_TimeStruct->SubSeconds;
 800b3f6:	6867      	ldr	r7, [r4, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800b3f8:	f7fb f8ec 	bl	80065d4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	0021      	movs	r1, r4
 800b400:	0030      	movs	r0, r6
 800b402:	f7fb f8bd 	bl	8006580 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 800b406:	6862      	ldr	r2, [r4, #4]
 800b408:	42ba      	cmp	r2, r7
 800b40a:	d1f1      	bne.n	800b3f0 <HW_RTC_GetCalendarValue+0x10>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800b40c:	2703      	movs	r7, #3
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 800b40e:	78e9      	ldrb	r1, [r5, #3]
 800b410:	4e19      	ldr	r6, [pc, #100]	; (800b478 <HW_RTC_GetCalendarValue+0x98>)
 
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800b412:	203d      	movs	r0, #61	; 0x3d
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 800b414:	434e      	muls	r6, r1
 800b416:	3603      	adds	r6, #3
 800b418:	08b3      	lsrs	r3, r6, #2
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800b41a:	4039      	ands	r1, r7
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 800b41c:	9301      	str	r3, [sp, #4]
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800b41e:	424b      	negs	r3, r1
 800b420:	414b      	adcs	r3, r1
 800b422:	4916      	ldr	r1, [pc, #88]	; (800b47c <HW_RTC_GetCalendarValue+0x9c>)
 800b424:	425b      	negs	r3, r3
 800b426:	400b      	ands	r3, r1
 800b428:	4915      	ldr	r1, [pc, #84]	; (800b480 <HW_RTC_GetCalendarValue+0xa0>)
 800b42a:	185b      	adds	r3, r3, r1
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800b42c:	7869      	ldrb	r1, [r5, #1]

  calendarValue += (RTC_DateStruct->Date -1);
 800b42e:	78ad      	ldrb	r5, [r5, #2]
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800b430:	3901      	subs	r1, #1
 800b432:	4348      	muls	r0, r1
 800b434:	3001      	adds	r0, #1
 800b436:	0fc6      	lsrs	r6, r0, #31
 800b438:	46b4      	mov	ip, r6
 800b43a:	0049      	lsls	r1, r1, #1
 800b43c:	40cb      	lsrs	r3, r1
 800b43e:	9e01      	ldr	r6, [sp, #4]
 800b440:	3d01      	subs	r5, #1
 800b442:	4460      	add	r0, ip
 800b444:	19ae      	adds	r6, r5, r6
 800b446:	1040      	asrs	r0, r0, #1
 800b448:	1986      	adds	r6, r0, r6
 800b44a:	401f      	ands	r7, r3
  
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY; 
 800b44c:	480d      	ldr	r0, [pc, #52]	; (800b484 <HW_RTC_GetCalendarValue+0xa4>)
  calendarValue += (RTC_DateStruct->Date -1);
 800b44e:	1bf7      	subs	r7, r6, r7
  calendarValue *= SECONDS_IN_1DAY; 
 800b450:	4347      	muls	r7, r0

  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 800b452:	20e1      	movs	r0, #225	; 0xe1
 800b454:	7823      	ldrb	r3, [r4, #0]
 800b456:	0100      	lsls	r0, r0, #4
 800b458:	4358      	muls	r0, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800b45a:	233c      	movs	r3, #60	; 0x3c
 800b45c:	7861      	ldrb	r1, [r4, #1]
 800b45e:	434b      	muls	r3, r1
 800b460:	18c0      	adds	r0, r0, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800b462:	78a3      	ldrb	r3, [r4, #2]
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800b464:	18c0      	adds	r0, r0, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800b466:	19c0      	adds	r0, r0, r7


  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <HW_RTC_GetCalendarValue+0xa8>)
 800b46a:	0280      	lsls	r0, r0, #10
 800b46c:	1a80      	subs	r0, r0, r2
 800b46e:	18c0      	adds	r0, r0, r3

  return( calendarValue );
}
 800b470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b472:	46c0      	nop			; (mov r8, r8)
 800b474:	20000ab8 	.word	0x20000ab8
 800b478:	000005b5 	.word	0x000005b5
 800b47c:	ffaaaab0 	.word	0xffaaaab0
 800b480:	0099aaa0 	.word	0x0099aaa0
 800b484:	00015180 	.word	0x00015180
 800b488:	000003ff 	.word	0x000003ff

0800b48c <HW_RTC_setMcuWakeUpTime>:
{
 800b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((McuWakeUpTimeInitialized == false) &&
 800b48e:	4d1a      	ldr	r5, [pc, #104]	; (800b4f8 <HW_RTC_setMcuWakeUpTime+0x6c>)
{
 800b490:	b087      	sub	sp, #28
  if ((McuWakeUpTimeInitialized == false) &&
 800b492:	1d6c      	adds	r4, r5, #5
 800b494:	7fe7      	ldrb	r7, [r4, #31]
 800b496:	2f00      	cmp	r7, #0
 800b498:	d12c      	bne.n	800b4f4 <HW_RTC_setMcuWakeUpTime+0x68>
      ( HAL_NVIC_GetPendingIRQ( RTC_Alarm_IRQn ) == 1))
 800b49a:	2002      	movs	r0, #2
 800b49c:	f7f9 fc36 	bl	8004d0c <HAL_NVIC_GetPendingIRQ>
  if ((McuWakeUpTimeInitialized == false) &&
 800b4a0:	2801      	cmp	r0, #1
 800b4a2:	d127      	bne.n	800b4f4 <HW_RTC_setMcuWakeUpTime+0x68>
    McuWakeUpTimeInitialized = true;
 800b4a4:	77e0      	strb	r0, [r4, #31]
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 800b4a6:	a901      	add	r1, sp, #4
 800b4a8:	4668      	mov	r0, sp
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 800b4aa:	002e      	movs	r6, r5
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 800b4ac:	f7ff ff98 	bl	800b3e0 <HW_RTC_GetCalendarValue>
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 800b4b0:	2280      	movs	r2, #128	; 0x80
 800b4b2:	3628      	adds	r6, #40	; 0x28
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 800b4b4:	0004      	movs	r4, r0
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 800b4b6:	003b      	movs	r3, r7
 800b4b8:	0052      	lsls	r2, r2, #1
 800b4ba:	0031      	movs	r1, r6
 800b4bc:	0028      	movs	r0, r5
 800b4be:	f7fb f8ab 	bl	8006618 <HAL_RTC_GetAlarm>
          24*(RTC_AlarmStructure.AlarmDateWeekDay)));
 800b4c2:	002b      	movs	r3, r5
 800b4c4:	2018      	movs	r0, #24
 800b4c6:	3329      	adds	r3, #41	; 0x29
 800b4c8:	7fdb      	ldrb	r3, [r3, #31]
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800b4ca:	7872      	ldrb	r2, [r6, #1]
          24*(RTC_AlarmStructure.AlarmDateWeekDay)));
 800b4cc:	4358      	muls	r0, r3
          60*(RTC_AlarmStructure.AlarmTime.Hours+
 800b4ce:	7833      	ldrb	r3, [r6, #0]
 800b4d0:	18c0      	adds	r0, r0, r3
 800b4d2:	233c      	movs	r3, #60	; 0x3c
 800b4d4:	4358      	muls	r0, r3
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800b4d6:	1880      	adds	r0, r0, r2
    McuWakeUpTimeCal += McuWakeUpTime;
 800b4d8:	002a      	movs	r2, r5
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800b4da:	4358      	muls	r0, r3
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 800b4dc:	78b3      	ldrb	r3, [r6, #2]
    McuWakeUpTimeCal += McuWakeUpTime;
 800b4de:	3250      	adds	r2, #80	; 0x50
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 800b4e0:	18c0      	adds	r0, r0, r3
    hit = ( hit << N_PREDIV_S ) + (PREDIV_S - RTC_AlarmStructure.AlarmTime.SubSeconds);
 800b4e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b4e4:	0280      	lsls	r0, r0, #10
 800b4e6:	1ac0      	subs	r0, r0, r3
 800b4e8:	4b04      	ldr	r3, [pc, #16]	; (800b4fc <HW_RTC_setMcuWakeUpTime+0x70>)
 800b4ea:	18c0      	adds	r0, r0, r3
    McuWakeUpTimeCal += McuWakeUpTime;
 800b4ec:	8813      	ldrh	r3, [r2, #0]
 800b4ee:	1a18      	subs	r0, r3, r0
 800b4f0:	1904      	adds	r4, r0, r4
 800b4f2:	8014      	strh	r4, [r2, #0]
}
 800b4f4:	b007      	add	sp, #28
 800b4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f8:	20000ab8 	.word	0x20000ab8
 800b4fc:	000003ff 	.word	0x000003ff

0800b500 <HW_RTC_GetMinimumTimeout>:
}
 800b500:	2003      	movs	r0, #3
 800b502:	4770      	bx	lr

0800b504 <HW_RTC_ms2Tick>:
{
 800b504:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 800b506:	0e41      	lsrs	r1, r0, #25
 800b508:	227d      	movs	r2, #125	; 0x7d
 800b50a:	01c0      	lsls	r0, r0, #7
 800b50c:	2300      	movs	r3, #0
 800b50e:	f7f4 fffd 	bl	800050c <__aeabi_uldivmod>
}
 800b512:	bd10      	pop	{r4, pc}

0800b514 <HW_RTC_Tick2ms>:
{
 800b514:	b510      	push	{r4, lr}
  return  ( ( (uint64_t)( tick )* CONV_NUMER ) / CONV_DENOM );
 800b516:	227d      	movs	r2, #125	; 0x7d
 800b518:	2300      	movs	r3, #0
 800b51a:	2100      	movs	r1, #0
 800b51c:	f7f5 f816 	bl	800054c <__aeabi_lmul>
 800b520:	0649      	lsls	r1, r1, #25
 800b522:	09c0      	lsrs	r0, r0, #7
 800b524:	4308      	orrs	r0, r1
}
 800b526:	bd10      	pop	{r4, pc}

0800b528 <HW_RTC_GetTimerElapsedTime>:
{
 800b528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800b52a:	a901      	add	r1, sp, #4
 800b52c:	4668      	mov	r0, sp
 800b52e:	f7ff ff57 	bl	800b3e0 <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 800b532:	4b02      	ldr	r3, [pc, #8]	; (800b53c <HW_RTC_GetTimerElapsedTime+0x14>)
 800b534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b536:	1ac0      	subs	r0, r0, r3
}
 800b538:	b007      	add	sp, #28
 800b53a:	bd00      	pop	{pc}
 800b53c:	20000ab8 	.word	0x20000ab8

0800b540 <HW_RTC_GetTimerValue>:
{
 800b540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800b542:	a901      	add	r1, sp, #4
 800b544:	4668      	mov	r0, sp
 800b546:	f7ff ff4b 	bl	800b3e0 <HW_RTC_GetCalendarValue>
}
 800b54a:	b007      	add	sp, #28
 800b54c:	bd00      	pop	{pc}
	...

0800b550 <HW_RTC_StopAlarm>:
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800b550:	4806      	ldr	r0, [pc, #24]	; (800b56c <HW_RTC_StopAlarm+0x1c>)
 800b552:	4b07      	ldr	r3, [pc, #28]	; (800b570 <HW_RTC_StopAlarm+0x20>)
 800b554:	6801      	ldr	r1, [r0, #0]
{
 800b556:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800b558:	68ca      	ldr	r2, [r1, #12]
 800b55a:	b2d2      	uxtb	r2, r2
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 800b560:	2180      	movs	r1, #128	; 0x80
 800b562:	0049      	lsls	r1, r1, #1
 800b564:	f7fa fd64 	bl	8006030 <HAL_RTC_DeactivateAlarm>
}
 800b568:	bd10      	pop	{r4, pc}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	20000ab8 	.word	0x20000ab8
 800b570:	fffffe7f 	.word	0xfffffe7f

0800b574 <HW_RTC_SetAlarm>:
{
 800b574:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800b576:	4c4f      	ldr	r4, [pc, #316]	; (800b6b4 <HW_RTC_SetAlarm+0x140>)
{
 800b578:	b087      	sub	sp, #28
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800b57a:	0023      	movs	r3, r4
 800b57c:	3350      	adds	r3, #80	; 0x50
{
 800b57e:	0006      	movs	r6, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800b580:	2500      	movs	r5, #0
 800b582:	5f5d      	ldrsh	r5, [r3, r5]
 800b584:	f7ff ffd0 	bl	800b528 <HW_RTC_GetTimerElapsedTime>
 800b588:	3503      	adds	r5, #3
 800b58a:	1a30      	subs	r0, r6, r0
 800b58c:	4285      	cmp	r5, r0
 800b58e:	d300      	bcc.n	800b592 <HW_RTC_SetAlarm+0x1e>
 800b590:	e06b      	b.n	800b66a <HW_RTC_SetAlarm+0xf6>
    LowPower_Enable( e_LOW_POWER_RTC );
 800b592:	2001      	movs	r0, #1
 800b594:	f7ff fcf0 	bl	800af78 <LowPower_Enable>
  if( LowPower_GetState() == 0 )
 800b598:	f7ff fcfa 	bl	800af90 <LowPower_GetState>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d107      	bne.n	800b5b0 <HW_RTC_SetAlarm+0x3c>
    LowPower_Enable( e_LOW_POWER_RTC );
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f7ff fce9 	bl	800af78 <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 800b5a6:	0023      	movs	r3, r4
 800b5a8:	3350      	adds	r3, #80	; 0x50
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	5e9b      	ldrsh	r3, [r3, r2]
 800b5ae:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800b5b0:	0023      	movs	r3, r4
 800b5b2:	3354      	adds	r3, #84	; 0x54
 800b5b4:	795a      	ldrb	r2, [r3, #5]
 800b5b6:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800b5b8:	9200      	str	r2, [sp, #0]
 800b5ba:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800b5bc:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800b5be:	9201      	str	r2, [sp, #4]
 800b5c0:	79da      	ldrb	r2, [r3, #7]
 800b5c2:	791d      	ldrb	r5, [r3, #4]
 800b5c4:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800b5c6:	7e5a      	ldrb	r2, [r3, #25]
 800b5c8:	7edb      	ldrb	r3, [r3, #27]
 800b5ca:	9203      	str	r2, [sp, #12]
 800b5cc:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm( );
 800b5ce:	f7ff ffbf 	bl	800b550 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800b5d2:	4a39      	ldr	r2, [pc, #228]	; (800b6b8 <HW_RTC_SetAlarm+0x144>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800b5d4:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800b5d6:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800b5d8:	0d9b      	lsrs	r3, r3, #22
 800b5da:	18fb      	adds	r3, r7, r3
 800b5dc:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800b5de:	4a37      	ldr	r2, [pc, #220]	; (800b6bc <HW_RTC_SetAlarm+0x148>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800b5e0:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800b5e2:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800b5e4:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800b5e6:	4296      	cmp	r6, r2
 800b5e8:	d843      	bhi.n	800b672 <HW_RTC_SetAlarm+0xfe>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800b5ea:	4a35      	ldr	r2, [pc, #212]	; (800b6c0 <HW_RTC_SetAlarm+0x14c>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800b5ec:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800b5ee:	4296      	cmp	r6, r2
 800b5f0:	d844      	bhi.n	800b67c <HW_RTC_SetAlarm+0x108>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800b5f2:	466a      	mov	r2, sp
 800b5f4:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800b5f6:	2e3b      	cmp	r6, #59	; 0x3b
 800b5f8:	d845      	bhi.n	800b686 <HW_RTC_SetAlarm+0x112>
 800b5fa:	0a9a      	lsrs	r2, r3, #10
 800b5fc:	0294      	lsls	r4, r2, #10
 800b5fe:	1b1c      	subs	r4, r3, r4
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	b2a4      	uxth	r4, r4
 800b604:	18d2      	adds	r2, r2, r3
 800b606:	1996      	adds	r6, r2, r6
 800b608:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800b60a:	2e3b      	cmp	r6, #59	; 0x3b
 800b60c:	d83f      	bhi.n	800b68e <HW_RTC_SetAlarm+0x11a>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800b60e:	2f3b      	cmp	r7, #59	; 0x3b
 800b610:	d842      	bhi.n	800b698 <HW_RTC_SetAlarm+0x124>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800b612:	2d17      	cmp	r5, #23
 800b614:	d845      	bhi.n	800b6a2 <HW_RTC_SetAlarm+0x12e>
 800b616:	9a03      	ldr	r2, [sp, #12]
  if( RTC_DateStruct.Year % 4 == 0 ) 
 800b618:	9904      	ldr	r1, [sp, #16]
 800b61a:	3a01      	subs	r2, #1
 800b61c:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <HW_RTC_SetAlarm+0x150>)
 800b61e:	0789      	lsls	r1, r1, #30
 800b620:	d144      	bne.n	800b6ac <HW_RTC_SetAlarm+0x138>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 800b622:	5c99      	ldrb	r1, [r3, r2]
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800b624:	4288      	cmp	r0, r1
 800b626:	d902      	bls.n	800b62e <HW_RTC_SetAlarm+0xba>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800b628:	f7f4 fef2 	bl	8000410 <__aeabi_idivmod>
 800b62c:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800b62e:	9a05      	ldr	r2, [sp, #20]
 800b630:	4b20      	ldr	r3, [pc, #128]	; (800b6b4 <HW_RTC_SetAlarm+0x140>)
 800b632:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 800b634:	22a0      	movs	r2, #160	; 0xa0
 800b636:	0512      	lsls	r2, r2, #20
 800b638:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 800b63a:	001a      	movs	r2, r3
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800b63c:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 800b63e:	3229      	adds	r2, #41	; 0x29
 800b640:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800b642:	9a02      	ldr	r2, [sp, #8]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800b644:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800b646:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800b648:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800b64a:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800b64c:	0040      	lsls	r0, r0, #1
 800b64e:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800b650:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800b652:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800b654:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800b656:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800b658:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800b65a:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800b65c:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b65e:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b660:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800b662:	f7fa febd 	bl	80063e0 <HAL_RTC_SetAlarm_IT>
}
 800b666:	b007      	add	sp, #28
 800b668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LowPower_Disable( e_LOW_POWER_RTC );
 800b66a:	2001      	movs	r0, #1
 800b66c:	f7ff fc78 	bl	800af60 <LowPower_Disable>
 800b670:	e792      	b.n	800b598 <HW_RTC_SetAlarm+0x24>
    timeoutValue -= SECONDS_IN_1DAY;
 800b672:	4915      	ldr	r1, [pc, #84]	; (800b6c8 <HW_RTC_SetAlarm+0x154>)
    rtcAlarmDays++;
 800b674:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800b676:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 800b678:	b280      	uxth	r0, r0
 800b67a:	e7b4      	b.n	800b5e6 <HW_RTC_SetAlarm+0x72>
    timeoutValue -= SECONDS_IN_1HOUR;
 800b67c:	4913      	ldr	r1, [pc, #76]	; (800b6cc <HW_RTC_SetAlarm+0x158>)
    rtcAlarmHours++;
 800b67e:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800b680:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800b682:	b2ad      	uxth	r5, r5
 800b684:	e7b3      	b.n	800b5ee <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 800b686:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800b688:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800b68a:	b2bf      	uxth	r7, r7
 800b68c:	e7b3      	b.n	800b5f6 <HW_RTC_SetAlarm+0x82>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800b68e:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800b690:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800b692:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800b694:	b2bf      	uxth	r7, r7
 800b696:	e7b8      	b.n	800b60a <HW_RTC_SetAlarm+0x96>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800b698:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800b69a:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800b69c:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800b69e:	b2ad      	uxth	r5, r5
 800b6a0:	e7b5      	b.n	800b60e <HW_RTC_SetAlarm+0x9a>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800b6a2:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800b6a4:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800b6a6:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800b6a8:	b280      	uxth	r0, r0
 800b6aa:	e7b2      	b.n	800b612 <HW_RTC_SetAlarm+0x9e>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800b6ac:	189b      	adds	r3, r3, r2
 800b6ae:	7b19      	ldrb	r1, [r3, #12]
 800b6b0:	e7b8      	b.n	800b624 <HW_RTC_SetAlarm+0xb0>
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	20000ab8 	.word	0x20000ab8
 800b6b8:	000003ff 	.word	0x000003ff
 800b6bc:	0001517f 	.word	0x0001517f
 800b6c0:	00000e0f 	.word	0x00000e0f
 800b6c4:	0800d3cc 	.word	0x0800d3cc
 800b6c8:	fffeae80 	.word	0xfffeae80
 800b6cc:	fffff1f0 	.word	0xfffff1f0

0800b6d0 <HW_RTC_IrqHandler>:
  LowPower_Enable( e_LOW_POWER_RTC );
 800b6d0:	2001      	movs	r0, #1
{
 800b6d2:	b510      	push	{r4, lr}
  LowPower_Enable( e_LOW_POWER_RTC );
 800b6d4:	f7ff fc50 	bl	800af78 <LowPower_Enable>
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800b6d8:	4809      	ldr	r0, [pc, #36]	; (800b700 <HW_RTC_IrqHandler+0x30>)
 800b6da:	6803      	ldr	r3, [r0, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	04d2      	lsls	r2, r2, #19
 800b6e0:	d50d      	bpl.n	800b6fe <HW_RTC_IrqHandler+0x2e>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800b6e2:	68da      	ldr	r2, [r3, #12]
 800b6e4:	05d2      	lsls	r2, r2, #23
 800b6e6:	d50a      	bpl.n	800b6fe <HW_RTC_IrqHandler+0x2e>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 800b6e8:	68d9      	ldr	r1, [r3, #12]
 800b6ea:	4a06      	ldr	r2, [pc, #24]	; (800b704 <HW_RTC_IrqHandler+0x34>)
 800b6ec:	b2c9      	uxtb	r1, r1
 800b6ee:	430a      	orrs	r2, r1
 800b6f0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800b6f2:	2280      	movs	r2, #128	; 0x80
 800b6f4:	4b04      	ldr	r3, [pc, #16]	; (800b708 <HW_RTC_IrqHandler+0x38>)
 800b6f6:	0292      	lsls	r2, r2, #10
 800b6f8:	615a      	str	r2, [r3, #20]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b6fa:	f000 fb1b 	bl	800bd34 <HAL_RTC_AlarmAEventCallback>
}
 800b6fe:	bd10      	pop	{r4, pc}
 800b700:	20000ab8 	.word	0x20000ab8
 800b704:	fffffe7f 	.word	0xfffffe7f
 800b708:	40010400 	.word	0x40010400

0800b70c <HW_RTC_DelayMs>:
{
 800b70c:	b570      	push	{r4, r5, r6, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 800b70e:	0e41      	lsrs	r1, r0, #25
 800b710:	227d      	movs	r2, #125	; 0x7d
 800b712:	2300      	movs	r3, #0
 800b714:	01c0      	lsls	r0, r0, #7
 800b716:	f7f4 fef9 	bl	800050c <__aeabi_uldivmod>
 800b71a:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue( );
 800b71c:	f7ff ff10 	bl	800b540 <HW_RTC_GetTimerValue>
 800b720:	0005      	movs	r5, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 800b722:	f7ff ff0d 	bl	800b540 <HW_RTC_GetTimerValue>
 800b726:	1b40      	subs	r0, r0, r5
 800b728:	42a0      	cmp	r0, r4
 800b72a:	d300      	bcc.n	800b72e <HW_RTC_DelayMs+0x22>
}
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("nop");
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	e7f7      	b.n	800b722 <HW_RTC_DelayMs+0x16>
	...

0800b734 <HW_RTC_SetTimerContext>:
{
 800b734:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800b736:	4c04      	ldr	r4, [pc, #16]	; (800b748 <HW_RTC_SetTimerContext+0x14>)
 800b738:	0021      	movs	r1, r4
 800b73a:	0020      	movs	r0, r4
 800b73c:	3158      	adds	r1, #88	; 0x58
 800b73e:	306c      	adds	r0, #108	; 0x6c
 800b740:	f7ff fe4e 	bl	800b3e0 <HW_RTC_GetCalendarValue>
 800b744:	6560      	str	r0, [r4, #84]	; 0x54
}
 800b746:	bd10      	pop	{r4, pc}
 800b748:	20000ab8 	.word	0x20000ab8

0800b74c <HW_RTC_Init>:
{
 800b74c:	b570      	push	{r4, r5, r6, lr}
  if( HW_RTC_Initalized == false )
 800b74e:	4c19      	ldr	r4, [pc, #100]	; (800b7b4 <HW_RTC_Init+0x68>)
{
 800b750:	b086      	sub	sp, #24
  if( HW_RTC_Initalized == false )
 800b752:	0026      	movs	r6, r4
 800b754:	3670      	adds	r6, #112	; 0x70
 800b756:	7835      	ldrb	r5, [r6, #0]
 800b758:	2d00      	cmp	r5, #0
 800b75a:	d128      	bne.n	800b7ae <HW_RTC_Init+0x62>
  RtcHandle.Instance = RTC;
 800b75c:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <HW_RTC_Init+0x6c>)
  HAL_RTC_Init( &RtcHandle );
 800b75e:	0020      	movs	r0, r4
  RtcHandle.Instance = RTC;
 800b760:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800b762:	231f      	movs	r3, #31
 800b764:	60a3      	str	r3, [r4, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800b766:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <HW_RTC_Init+0x70>)
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800b768:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800b76a:	60e3      	str	r3, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800b76c:	6125      	str	r5, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b76e:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b770:	61e5      	str	r5, [r4, #28]
  HAL_RTC_Init( &RtcHandle );
 800b772:	f7fa fcf3 	bl	800615c <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800b776:	4b12      	ldr	r3, [pc, #72]	; (800b7c0 <HW_RTC_Init+0x74>)
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 800b778:	002a      	movs	r2, r5
 800b77a:	4669      	mov	r1, sp
 800b77c:	0020      	movs	r0, r4
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800b77e:	9300      	str	r3, [sp, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 800b780:	f7fa fdc2 	bl	8006308 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800b784:	002a      	movs	r2, r5
 800b786:	a901      	add	r1, sp, #4
 800b788:	0020      	movs	r0, r4
  RTC_TimeStruct.Hours = 0;
 800b78a:	9501      	str	r5, [sp, #4]
  RTC_TimeStruct.TimeFormat = 0;
 800b78c:	9502      	str	r5, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800b78e:	9505      	str	r5, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800b790:	9504      	str	r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800b792:	f7fa fd39 	bl	8006208 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800b796:	0020      	movs	r0, r4
 800b798:	f7fa ffa0 	bl	80066dc <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800b79c:	2180      	movs	r1, #128	; 0x80
 800b79e:	0020      	movs	r0, r4
 800b7a0:	0049      	lsls	r1, r1, #1
 800b7a2:	f7fa fc45 	bl	8006030 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext( );
 800b7a6:	f7ff ffc5 	bl	800b734 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	7033      	strb	r3, [r6, #0]
}
 800b7ae:	b006      	add	sp, #24
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	20000ab8 	.word	0x20000ab8
 800b7b8:	40002800 	.word	0x40002800
 800b7bc:	000003ff 	.word	0x000003ff
 800b7c0:	00010101 	.word	0x00010101

0800b7c4 <HW_RTC_GetTimerContext>:
  return (uint32_t) RtcTimerContext.Rtc_Time;
 800b7c4:	4b01      	ldr	r3, [pc, #4]	; (800b7cc <HW_RTC_GetTimerContext+0x8>)
 800b7c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 800b7c8:	4770      	bx	lr
 800b7ca:	46c0      	nop			; (mov r8, r8)
 800b7cc:	20000ab8 	.word	0x20000ab8

0800b7d0 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 800b7d0:	b530      	push	{r4, r5, lr}
 800b7d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 800b7d4:	2214      	movs	r2, #20
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	a801      	add	r0, sp, #4
  initStruct.Mode =GPIO_MODE_AF_PP;
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate= SPI1_AF ;

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800b7da:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitTypeDef initStruct={0};
 800b7dc:	f000 fe01 	bl	800c3e2 <memset>
  initStruct.Mode =GPIO_MODE_AF_PP;
 800b7e0:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800b7e2:	05e4      	lsls	r4, r4, #23
  initStruct.Mode =GPIO_MODE_AF_PP;
 800b7e4:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 800b7e6:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800b7e8:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800b7ea:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800b7ec:	0020      	movs	r0, r4
 800b7ee:	2120      	movs	r1, #32
  initStruct.Speed = GPIO_SPEED_HIGH;
 800b7f0:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800b7f2:	f7ff fd7d 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800b7f6:	aa01      	add	r2, sp, #4
 800b7f8:	0020      	movs	r0, r4
 800b7fa:	2140      	movs	r1, #64	; 0x40
 800b7fc:	f7ff fd78 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800b800:	0020      	movs	r0, r4

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b802:	2401      	movs	r4, #1
  initStruct.Pull = GPIO_PULLUP;

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800b804:	4d09      	ldr	r5, [pc, #36]	; (800b82c <HW_SPI_IoInit+0x5c>)
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800b806:	aa01      	add	r2, sp, #4
 800b808:	2180      	movs	r1, #128	; 0x80
 800b80a:	f7ff fd71 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800b80e:	aa01      	add	r2, sp, #4
 800b810:	0028      	movs	r0, r5
 800b812:	2140      	movs	r1, #64	; 0x40
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b814:	9402      	str	r4, [sp, #8]
  initStruct.Pull = GPIO_PULLUP;
 800b816:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800b818:	f7ff fd6a 	bl	800b2f0 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800b81c:	0022      	movs	r2, r4
 800b81e:	2140      	movs	r1, #64	; 0x40
 800b820:	0028      	movs	r0, r5
 800b822:	f7ff fdd7 	bl	800b3d4 <HW_GPIO_Write>
}
 800b826:	b007      	add	sp, #28
 800b828:	bd30      	pop	{r4, r5, pc}
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	50000400 	.word	0x50000400

0800b830 <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800b830:	4b1a      	ldr	r3, [pc, #104]	; (800b89c <HW_SPI_Init+0x6c>)
 800b832:	481b      	ldr	r0, [pc, #108]	; (800b8a0 <HW_SPI_Init+0x70>)
{
 800b834:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800b836:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800b838:	4b1a      	ldr	r3, [pc, #104]	; (800b8a4 <HW_SPI_Init+0x74>)
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800b83a:	491b      	ldr	r1, [pc, #108]	; (800b8a8 <HW_SPI_Init+0x78>)
  uint32_t SysClkTmp = SystemCoreClock;
 800b83c:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800b83e:	2300      	movs	r3, #0
  while( SysClkTmp > hz)
 800b840:	428a      	cmp	r2, r1
 800b842:	d903      	bls.n	800b84c <HW_SPI_Init+0x1c>
  {
    divisor++;
 800b844:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 800b846:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 800b848:	2b07      	cmp	r3, #7
 800b84a:	d1f9      	bne.n	800b840 <HW_SPI_Init+0x10>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800b84c:	075a      	lsls	r2, r3, #29
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800b84e:	0799      	lsls	r1, r3, #30
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800b850:	0fd2      	lsrs	r2, r2, #31
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800b852:	0fc9      	lsrs	r1, r1, #31
 800b854:	0109      	lsls	r1, r1, #4
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800b856:	0152      	lsls	r2, r2, #5
 800b858:	430a      	orrs	r2, r1
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800b85a:	2101      	movs	r1, #1
 800b85c:	400b      	ands	r3, r1
 800b85e:	00db      	lsls	r3, r3, #3
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800b860:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800b862:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800b864:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800b866:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800b868:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800b86a:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800b86c:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800b86e:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 800b870:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800b872:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800b874:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 800b876:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800b878:	0052      	lsls	r2, r2, #1
 800b87a:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800b87c:	32fc      	adds	r2, #252	; 0xfc
 800b87e:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE(); 
 800b880:	4a0a      	ldr	r2, [pc, #40]	; (800b8ac <HW_SPI_Init+0x7c>)
 800b882:	015b      	lsls	r3, r3, #5
 800b884:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b886:	430b      	orrs	r3, r1
 800b888:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800b88a:	f7fa ff8d 	bl	80067a8 <HAL_SPI_Init>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d001      	beq.n	800b896 <HW_SPI_Init+0x66>
     Error_Handler();
 800b892:	f7ff fd0d 	bl	800b2b0 <Error_Handler>
  HW_SPI_IoInit(  );
 800b896:	f7ff ff9b 	bl	800b7d0 <HW_SPI_IoInit>
}
 800b89a:	bd10      	pop	{r4, pc}
 800b89c:	40013000 	.word	0x40013000
 800b8a0:	20000b2c 	.word	0x20000b2c
 800b8a4:	20000030 	.word	0x20000030
 800b8a8:	00989680 	.word	0x00989680
 800b8ac:	40021000 	.word	0x40021000

0800b8b0 <HW_SPI_IoDeInit>:
{
 800b8b0:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800b8b2:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800b8b4:	2501      	movs	r5, #1
  initStruct.Pull =GPIO_PULLDOWN  ;
 800b8b6:	2602      	movs	r6, #2
{
 800b8b8:	b086      	sub	sp, #24
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800b8ba:	05e4      	lsls	r4, r4, #23
  GPIO_InitTypeDef initStruct={0};
 800b8bc:	2214      	movs	r2, #20
 800b8be:	2100      	movs	r1, #0
 800b8c0:	a801      	add	r0, sp, #4
 800b8c2:	f000 fd8e 	bl	800c3e2 <memset>
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800b8c6:	aa01      	add	r2, sp, #4
 800b8c8:	0020      	movs	r0, r4
 800b8ca:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800b8cc:	9502      	str	r5, [sp, #8]
  initStruct.Pull =GPIO_PULLDOWN  ;
 800b8ce:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800b8d0:	f7ff fd0e 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0 );
 800b8d4:	0020      	movs	r0, r4
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	2180      	movs	r1, #128	; 0x80
 800b8da:	f7ff fd7b 	bl	800b3d4 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 800b8de:	aa01      	add	r2, sp, #4
 800b8e0:	0020      	movs	r0, r4
 800b8e2:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull =GPIO_PULLDOWN; 
 800b8e4:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 800b8e6:	f7ff fd03 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MISO_PORT, RADIO_MISO_PIN, 0 );
 800b8ea:	0020      	movs	r0, r4
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2140      	movs	r1, #64	; 0x40
 800b8f0:	f7ff fd70 	bl	800b3d4 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 800b8f4:	aa01      	add	r2, sp, #4
 800b8f6:	0020      	movs	r0, r4
 800b8f8:	2120      	movs	r1, #32
  initStruct.Pull =GPIO_PULLDOWN  ; 
 800b8fa:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 800b8fc:	f7ff fcf8 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 800b900:	0020      	movs	r0, r4
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 800b902:	4c09      	ldr	r4, [pc, #36]	; (800b928 <HW_SPI_IoDeInit+0x78>)
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 800b904:	2200      	movs	r2, #0
 800b906:	2120      	movs	r1, #32
 800b908:	f7ff fd64 	bl	800b3d4 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 800b90c:	aa01      	add	r2, sp, #4
 800b90e:	0020      	movs	r0, r4
 800b910:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull = GPIO_PULLUP;
 800b912:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 800b914:	f7ff fcec 	bl	800b2f0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN , 1 );
 800b918:	002a      	movs	r2, r5
 800b91a:	2140      	movs	r1, #64	; 0x40
 800b91c:	0020      	movs	r0, r4
 800b91e:	f7ff fd59 	bl	800b3d4 <HW_GPIO_Write>
}
 800b922:	b006      	add	sp, #24
 800b924:	bd70      	pop	{r4, r5, r6, pc}
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	50000400 	.word	0x50000400

0800b92c <HW_SPI_InOut>:
{
 800b92c:	b510      	push	{r4, lr}
 800b92e:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800b930:	2416      	movs	r4, #22
 800b932:	2301      	movs	r3, #1
{
 800b934:	b086      	sub	sp, #24
 800b936:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800b938:	446c      	add	r4, sp
 800b93a:	425b      	negs	r3, r3
{
 800b93c:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800b93e:	0022      	movs	r2, r4
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	4803      	ldr	r0, [pc, #12]	; (800b950 <HW_SPI_InOut+0x24>)
 800b944:	3302      	adds	r3, #2
 800b946:	f7fa ff6f 	bl	8006828 <HAL_SPI_TransmitReceive>
  return rxData;
 800b94a:	8820      	ldrh	r0, [r4, #0]
}
 800b94c:	b006      	add	sp, #24
 800b94e:	bd10      	pop	{r4, pc}
 800b950:	20000b2c 	.word	0x20000b2c

0800b954 <LoraRxData>:


}

static void LoraRxData( lora_AppData_t *AppData )
{
 800b954:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 4 */
  switch (AppData->Port)
 800b956:	7943      	ldrb	r3, [r0, #5]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d002      	beq.n	800b962 <LoraRxData+0xe>
 800b95c:	2b63      	cmp	r3, #99	; 0x63
 800b95e:	d00d      	beq.n	800b97c <LoraRxData+0x28>
  default:
    break;
  }

  /* USER CODE END 4 */
}
 800b960:	bd10      	pop	{r4, pc}
    if( AppData->BuffSize == 1 )
 800b962:	7902      	ldrb	r2, [r0, #4]
 800b964:	2a01      	cmp	r2, #1
 800b966:	d1fb      	bne.n	800b960 <LoraRxData+0xc>
      AppLedStateOn = AppData->Buff[0] & 0x01;
 800b968:	6803      	ldr	r3, [r0, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	4013      	ands	r3, r2
 800b96e:	4a09      	ldr	r2, [pc, #36]	; (800b994 <LoraRxData+0x40>)
 800b970:	7013      	strb	r3, [r2, #0]
      if ( AppLedStateOn == RESET )
 800b972:	d10d      	bne.n	800b990 <LoraRxData+0x3c>
        PRINTF("LED OFF\n\r");
 800b974:	4808      	ldr	r0, [pc, #32]	; (800b998 <LoraRxData+0x44>)
        PRINTF("LED ON\n\r");
 800b976:	f000 fbfb 	bl	800c170 <vcom_Send>
 800b97a:	e7f1      	b.n	800b960 <LoraRxData+0xc>
    AppLedStateOn= (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 800b97c:	6803      	ldr	r3, [r0, #0]
 800b97e:	789a      	ldrb	r2, [r3, #2]
 800b980:	0013      	movs	r3, r2
 800b982:	3b64      	subs	r3, #100	; 0x64
 800b984:	4259      	negs	r1, r3
 800b986:	414b      	adcs	r3, r1
 800b988:	4902      	ldr	r1, [pc, #8]	; (800b994 <LoraRxData+0x40>)
 800b98a:	700b      	strb	r3, [r1, #0]
      if ( AppLedStateOn == RESET )
 800b98c:	2a64      	cmp	r2, #100	; 0x64
 800b98e:	d1f1      	bne.n	800b974 <LoraRxData+0x20>
        PRINTF("LED ON\n\r");
 800b990:	4802      	ldr	r0, [pc, #8]	; (800b99c <LoraRxData+0x48>)
 800b992:	e7f0      	b.n	800b976 <LoraRxData+0x22>
 800b994:	20000b84 	.word	0x20000b84
 800b998:	0800d584 	.word	0x0800d584
 800b99c:	0800d58e 	.word	0x0800d58e

0800b9a0 <temperatureFunction>:
int temperatureFunction(){
 800b9a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			   data_write[0] = MCP9808_REG_TEMP;
 800b9a2:	2305      	movs	r3, #5
 800b9a4:	aa03      	add	r2, sp, #12
			   HAL_I2C_Master_Transmit(&hi2c1, MCP9808_ADDR, data_write, 1,
 800b9a6:	2601      	movs	r6, #1
			   data_write[0] = MCP9808_REG_TEMP;
 800b9a8:	8013      	strh	r3, [r2, #0]
		   data_write[1] = 0x00;  // config msb
 800b9aa:	2300      	movs	r3, #0
			   HAL_I2C_Master_Transmit(&hi2c1, MCP9808_ADDR, data_write, 1,
 800b9ac:	4d13      	ldr	r5, [pc, #76]	; (800b9fc <temperatureFunction+0x5c>)
 800b9ae:	4276      	negs	r6, r6
		   data_write[1] = 0x00;  // config msb
 800b9b0:	7093      	strb	r3, [r2, #2]
			   HAL_I2C_Master_Transmit(&hi2c1, MCP9808_ADDR, data_write, 1,
 800b9b2:	2130      	movs	r1, #48	; 0x30
 800b9b4:	3301      	adds	r3, #1
			   HAL_I2C_Master_Receive(&hi2c1, MCP9808_ADDR, data_read, 2,
 800b9b6:	ac02      	add	r4, sp, #8
			   HAL_I2C_Master_Transmit(&hi2c1, MCP9808_ADDR, data_write, 1,
 800b9b8:	9600      	str	r6, [sp, #0]
 800b9ba:	0028      	movs	r0, r5
 800b9bc:	f7f9 fbfc 	bl	80051b8 <HAL_I2C_Master_Transmit>
			   HAL_I2C_Master_Receive(&hi2c1, MCP9808_ADDR, data_read, 2,
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	0022      	movs	r2, r4
 800b9c4:	2130      	movs	r1, #48	; 0x30
 800b9c6:	9600      	str	r6, [sp, #0]
 800b9c8:	0028      	movs	r0, r5
 800b9ca:	f7f9 fc8d 	bl	80052e8 <HAL_I2C_Master_Receive>
			   	       if(data_read[0] & 0xE0) {
 800b9ce:	7823      	ldrb	r3, [r4, #0]
 800b9d0:	221f      	movs	r2, #31
 800b9d2:	0019      	movs	r1, r3
 800b9d4:	4391      	bics	r1, r2
 800b9d6:	d001      	beq.n	800b9dc <temperatureFunction+0x3c>
			   	           data_read[0] = data_read[0] & 0x1F;  // clear flag bits
 800b9d8:	4013      	ands	r3, r2
 800b9da:	7023      	strb	r3, [r4, #0]
 800b9dc:	7860      	ldrb	r0, [r4, #1]
			   	       if((data_read[0] & 0x10) == 0x10) {
 800b9de:	7823      	ldrb	r3, [r4, #0]
 800b9e0:	0900      	lsrs	r0, r0, #4
 800b9e2:	06da      	lsls	r2, r3, #27
 800b9e4:	d507      	bpl.n	800b9f6 <temperatureFunction+0x56>
			   	           tempval = -(256 - (data_read[0] << 4) + (data_read[1] >> 4));
 800b9e6:	220f      	movs	r2, #15
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	1a18      	subs	r0, r3, r0
 800b9ee:	3801      	subs	r0, #1
 800b9f0:	38ff      	subs	r0, #255	; 0xff
}
 800b9f2:	b004      	add	sp, #16
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
			   	           tempval = (data_read[0] << 4) + (data_read[1] >> 4);
 800b9f6:	011b      	lsls	r3, r3, #4
 800b9f8:	1818      	adds	r0, r3, r0
return tempval;
 800b9fa:	e7fa      	b.n	800b9f2 <temperatureFunction+0x52>
 800b9fc:	20000e9c 	.word	0x20000e9c

0800ba00 <main>:
{
 800ba00:	b530      	push	{r4, r5, lr}
 800ba02:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init( );
 800ba04:	f7f8 fea8 	bl	8004758 <HAL_Init>
  SystemClock_Config( );
 800ba08:	f000 f9ac 	bl	800bd64 <SystemClock_Config>
  DBG_Init( );
 800ba0c:	f7ff fc1e 	bl	800b24c <DBG_Init>
  HW_Init( );
 800ba10:	f000 fa58 	bl	800bec4 <HW_Init>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba14:	2214      	movs	r2, #20
 800ba16:	2100      	movs	r1, #0
 800ba18:	a805      	add	r0, sp, #20
 800ba1a:	f000 fce2 	bl	800c3e2 <memset>

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba1e:	2004      	movs	r0, #4
 800ba20:	4b49      	ldr	r3, [pc, #292]	; (800bb48 <main+0x148>)
 __HAL_RCC_GPIOH_CLK_ENABLE();
 __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba22:	2501      	movs	r5, #1
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

 /*Configure GPIO pin : B1_Pin */
 GPIO_InitStruct.Pin = B1_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba26:	2400      	movs	r4, #0
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba28:	4301      	orrs	r1, r0
 800ba2a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800ba2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2e:	4002      	ands	r2, r0
 800ba30:	9201      	str	r2, [sp, #4]
 800ba32:	9a01      	ldr	r2, [sp, #4]
 __HAL_RCC_GPIOH_CLK_ENABLE();
 800ba34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ba36:	307c      	adds	r0, #124	; 0x7c
 800ba38:	4301      	orrs	r1, r0
 800ba3a:	62d9      	str	r1, [r3, #44]	; 0x2c
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba3c:	2102      	movs	r1, #2
 __HAL_RCC_GPIOH_CLK_ENABLE();
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	4002      	ands	r2, r0
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ba42:	20a0      	movs	r0, #160	; 0xa0
 __HAL_RCC_GPIOH_CLK_ENABLE();
 800ba44:	9202      	str	r2, [sp, #8]
 800ba46:	9a02      	ldr	r2, [sp, #8]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ba4a:	05c0      	lsls	r0, r0, #23
 __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba4c:	432a      	orrs	r2, r5
 800ba4e:	62da      	str	r2, [r3, #44]	; 0x2c
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	402a      	ands	r2, r5
 800ba54:	9203      	str	r2, [sp, #12]
 800ba56:	9a03      	ldr	r2, [sp, #12]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ba60:	2200      	movs	r2, #0
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba62:	400b      	ands	r3, r1
 800ba64:	9304      	str	r3, [sp, #16]
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ba66:	311e      	adds	r1, #30
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba68:	9b04      	ldr	r3, [sp, #16]
 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ba6a:	f7f9 fa21 	bl	8004eb0 <HAL_GPIO_WritePin>
 GPIO_InitStruct.Pin = B1_Pin;
 800ba6e:	2380      	movs	r3, #128	; 0x80
 800ba70:	019b      	lsls	r3, r3, #6
 800ba72:	9305      	str	r3, [sp, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ba74:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <main+0x14c>)
 HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ba76:	a905      	add	r1, sp, #20
 800ba78:	4835      	ldr	r0, [pc, #212]	; (800bb50 <main+0x150>)
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ba7a:	9306      	str	r3, [sp, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7c:	9407      	str	r4, [sp, #28]
 HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ba7e:	f7f9 f95d 	bl	8004d3c <HAL_GPIO_Init>
 /*Configure GPIO pin : LD2_Pin */
 GPIO_InitStruct.Pin = LD2_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ba82:	20a0      	movs	r0, #160	; 0xa0
 GPIO_InitStruct.Pin = LD2_Pin;
 800ba84:	2320      	movs	r3, #32
 HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ba86:	05c0      	lsls	r0, r0, #23
 800ba88:	a905      	add	r1, sp, #20
 GPIO_InitStruct.Pin = LD2_Pin;
 800ba8a:	9305      	str	r3, [sp, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba8c:	9506      	str	r5, [sp, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba8e:	9407      	str	r4, [sp, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba90:	9408      	str	r4, [sp, #32]
 HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ba92:	f7f9 f953 	bl	8004d3c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800ba96:	482f      	ldr	r0, [pc, #188]	; (800bb54 <main+0x154>)
 800ba98:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <main+0x158>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ba9a:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 800ba9c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800ba9e:	23e1      	movs	r3, #225	; 0xe1
 800baa0:	025b      	lsls	r3, r3, #9
 800baa2:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800baa4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800baa6:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800baa8:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800baaa:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800baac:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800baae:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bab0:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bab2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bab4:	f7fb fa98 	bl	8006fe8 <HAL_UART_Init>
 800bab8:	42a0      	cmp	r0, r4
 800baba:	d001      	beq.n	800bac0 <main+0xc0>
    Error_Handler();
 800babc:	f7ff fbf8 	bl	800b2b0 <Error_Handler>
  hi2c1.Instance = I2C1;
 800bac0:	4c26      	ldr	r4, [pc, #152]	; (800bb5c <main+0x15c>)
 800bac2:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <main+0x160>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bac4:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 800bac6:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000708;
 800bac8:	23e1      	movs	r3, #225	; 0xe1
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bace:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bad0:	0020      	movs	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 800bad2:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bad4:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bad6:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bad8:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bada:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800badc:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bade:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bae0:	f7f9 fb14 	bl	800510c <HAL_I2C_Init>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d001      	beq.n	800baec <main+0xec>
    Error_Handler();
 800bae8:	f7ff fbe2 	bl	800b2b0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800baec:	2100      	movs	r1, #0
 800baee:	0020      	movs	r0, r4
 800baf0:	f7f8 fde8 	bl	80046c4 <HAL_I2CEx_ConfigAnalogFilter>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d001      	beq.n	800bafc <main+0xfc>
    Error_Handler();
 800baf8:	f7ff fbda 	bl	800b2b0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bafc:	2100      	movs	r1, #0
 800bafe:	0020      	movs	r0, r4
 800bb00:	f7f8 fe06 	bl	8004710 <HAL_I2CEx_ConfigDigitalFilter>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d001      	beq.n	800bb0c <main+0x10c>
    Error_Handler();
 800bb08:	f7ff fbd2 	bl	800b2b0 <Error_Handler>
  lora_Init( &LoRaMainCallbacks, &LoRaParamInit);
 800bb0c:	4915      	ldr	r1, [pc, #84]	; (800bb64 <main+0x164>)
 800bb0e:	0008      	movs	r0, r1
 800bb10:	3010      	adds	r0, #16
 800bb12:	f7fb fbc3 	bl	800729c <lora_Init>
  PRINTF("VERSION: %X\n\r", VERSION);
 800bb16:	4914      	ldr	r1, [pc, #80]	; (800bb68 <main+0x168>)
 800bb18:	4814      	ldr	r0, [pc, #80]	; (800bb6c <main+0x16c>)
 800bb1a:	f000 fb29 	bl	800c170 <vcom_Send>
	  PRINTF("TEMP: %" PRId16,( int16_t ) temperatureFunction());
 800bb1e:	f7ff ff3f 	bl	800b9a0 <temperatureFunction>
 800bb22:	b201      	sxth	r1, r0
 800bb24:	4812      	ldr	r0, [pc, #72]	; (800bb70 <main+0x170>)
 800bb26:	f000 fb23 	bl	800c170 <vcom_Send>
	  PRINTF("\n\r");
 800bb2a:	4812      	ldr	r0, [pc, #72]	; (800bb74 <main+0x174>)
 800bb2c:	f000 fb20 	bl	800c170 <vcom_Send>
    lora_fsm( );
 800bb30:	f7fb fc08 	bl	8007344 <lora_fsm>
  __ASM volatile ("cpsid i" : : : "memory");
 800bb34:	b672      	cpsid	i
    if ( lora_getDeviceState( ) == DEVICE_STATE_SLEEP )
 800bb36:	f7fb fce9 	bl	800750c <lora_getDeviceState>
 800bb3a:	2805      	cmp	r0, #5
 800bb3c:	d101      	bne.n	800bb42 <main+0x142>
      LowPower_Handler( );
 800bb3e:	f7ff fa2d 	bl	800af9c <LowPower_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 800bb42:	b662      	cpsie	i
 800bb44:	e7eb      	b.n	800bb1e <main+0x11e>
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	40021000 	.word	0x40021000
 800bb4c:	10210000 	.word	0x10210000
 800bb50:	50000800 	.word	0x50000800
 800bb54:	20000ee8 	.word	0x20000ee8
 800bb58:	40004400 	.word	0x40004400
 800bb5c:	20000e9c 	.word	0x20000e9c
 800bb60:	40005400 	.word	0x40005400
 800bb64:	200000d8 	.word	0x200000d8
 800bb68:	44031120 	.word	0x44031120
 800bb6c:	0800d597 	.word	0x0800d597
 800bb70:	0800d5a5 	.word	0x0800d5a5
 800bb74:	0800d578 	.word	0x0800d578

0800bb78 <LoraTxData>:
{
 800bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	0004      	movs	r4, r0
  BSP_sensor_Read( &sensor_data );
 800bb7e:	a802      	add	r0, sp, #8
{
 800bb80:	000f      	movs	r7, r1
  BSP_sensor_Read( &sensor_data );
 800bb82:	f7ff fb53 	bl	800b22c <BSP_sensor_Read>
  int m=temperatureFunction();
 800bb86:	f7ff ff0b 	bl	800b9a0 <temperatureFunction>
  pressure    = ( uint16_t )( sensor_data.pressure * 100 / 10 );  /* in hPa / 10 */
 800bb8a:	4928      	ldr	r1, [pc, #160]	; (800bc2c <LoraTxData+0xb4>)
  int m=temperatureFunction();
 800bb8c:	0006      	movs	r6, r0
  pressure    = ( uint16_t )( sensor_data.pressure * 100 / 10 );  /* in hPa / 10 */
 800bb8e:	9802      	ldr	r0, [sp, #8]
 800bb90:	f7f5 f970 	bl	8000e74 <__aeabi_fmul>
 800bb94:	4926      	ldr	r1, [pc, #152]	; (800bc30 <LoraTxData+0xb8>)
 800bb96:	f7f4 ff95 	bl	8000ac4 <__aeabi_fdiv>
 800bb9a:	f7f4 fd01 	bl	80005a0 <__aeabi_f2uiz>
 800bb9e:	b285      	uxth	r5, r0
  humidity    = ( uint16_t )( sensor_data.humidity * 2 );        /* in %*2     */
 800bba0:	9804      	ldr	r0, [sp, #16]
 800bba2:	1c01      	adds	r1, r0, #0
 800bba4:	f7f4 fdf4 	bl	8000790 <__aeabi_fadd>
 800bba8:	f7f4 fcfa 	bl	80005a0 <__aeabi_f2uiz>
 800bbac:	b283      	uxth	r3, r0
 800bbae:	9301      	str	r3, [sp, #4]
  batteryLevel = HW_GetBatteryLevel( );                     /* 1 (very low) to 254 (fully charged) */
 800bbb0:	f000 f9ee 	bl	800bf90 <HW_GetBatteryLevel>
  AppData->Port = LPP_APP_PORT;
 800bbb4:	2363      	movs	r3, #99	; 0x63
 800bbb6:	7163      	strb	r3, [r4, #5]
  *IsTxConfirmed =  LORAWAN_CONFIRMED_MSG;
 800bbb8:	2300      	movs	r3, #0
  AppData->Buff[i++] = cchannel++;
 800bbba:	6822      	ldr	r2, [r4, #0]
  *IsTxConfirmed =  LORAWAN_CONFIRMED_MSG;
 800bbbc:	703b      	strb	r3, [r7, #0]
  AppData->Buff[i++] = cchannel++;
 800bbbe:	7013      	strb	r3, [r2, #0]
  AppData->Buff[i++] = LPP_DATATYPE_BAROMETER;
 800bbc0:	2273      	movs	r2, #115	; 0x73
 800bbc2:	6821      	ldr	r1, [r4, #0]
 800bbc4:	704a      	strb	r2, [r1, #1]
  AppData->Buff[i++] = ( pressure >> 8 ) & 0xFF;
 800bbc6:	6821      	ldr	r1, [r4, #0]
 800bbc8:	0a2a      	lsrs	r2, r5, #8
 800bbca:	708a      	strb	r2, [r1, #2]
  AppData->Buff[i++] = pressure & 0xFF;
 800bbcc:	6822      	ldr	r2, [r4, #0]
 800bbce:	70d5      	strb	r5, [r2, #3]
  AppData->Buff[i++] = cchannel++;
 800bbd0:	2501      	movs	r5, #1
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	7115      	strb	r5, [r2, #4]
  AppData->Buff[i++] = LPP_DATATYPE_TEMPERATURE; 
 800bbd6:	2267      	movs	r2, #103	; 0x67
 800bbd8:	6821      	ldr	r1, [r4, #0]
 800bbda:	714a      	strb	r2, [r1, #5]
  AppData->Buff[i++] = ( temperature >> 8 ) & 0xFF;
 800bbdc:	6821      	ldr	r1, [r4, #0]
 800bbde:	b232      	sxth	r2, r6
 800bbe0:	1212      	asrs	r2, r2, #8
 800bbe2:	718a      	strb	r2, [r1, #6]
  AppData->Buff[i++] = temperature & 0xFF;
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	71d6      	strb	r6, [r2, #7]
  AppData->Buff[i++] = cchannel++;
 800bbe8:	2202      	movs	r2, #2
 800bbea:	6821      	ldr	r1, [r4, #0]
 800bbec:	720a      	strb	r2, [r1, #8]
  AppData->Buff[i++] = LPP_DATATYPE_HUMIDITY;
 800bbee:	6821      	ldr	r1, [r4, #0]
 800bbf0:	3266      	adds	r2, #102	; 0x66
 800bbf2:	724a      	strb	r2, [r1, #9]
  AppData->Buff[i++] = humidity & 0xFF;
 800bbf4:	6822      	ldr	r2, [r4, #0]
 800bbf6:	9901      	ldr	r1, [sp, #4]
 800bbf8:	7291      	strb	r1, [r2, #10]
  AppData->Buff[i++] = cchannel++;
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	6821      	ldr	r1, [r4, #0]
 800bbfe:	72ca      	strb	r2, [r1, #11]
  AppData->Buff[i++] = LPP_DATATYPE_DIGITAL_INPUT; 
 800bc00:	6822      	ldr	r2, [r4, #0]
  AppData->Buff[i++] = batteryLevel*100/254;
 800bc02:	21fe      	movs	r1, #254	; 0xfe
  AppData->Buff[i++] = LPP_DATATYPE_DIGITAL_INPUT; 
 800bc04:	7313      	strb	r3, [r2, #12]
  AppData->Buff[i++] = batteryLevel*100/254;
 800bc06:	3364      	adds	r3, #100	; 0x64
 800bc08:	4358      	muls	r0, r3
 800bc0a:	f7f4 fb1b 	bl	8000244 <__divsi3>
  AppData->Buff[i++] = cchannel++;
 800bc0e:	2304      	movs	r3, #4
  AppData->Buff[i++] = batteryLevel*100/254;
 800bc10:	6826      	ldr	r6, [r4, #0]
 800bc12:	7370      	strb	r0, [r6, #13]
  AppData->Buff[i++] = cchannel++;
 800bc14:	6822      	ldr	r2, [r4, #0]
 800bc16:	7393      	strb	r3, [r2, #14]
  AppData->Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT; 
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	73dd      	strb	r5, [r3, #15]
  AppData->Buff[i++] = AppLedStateOn;
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <LoraTxData+0xbc>)
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	7413      	strb	r3, [r2, #16]
  AppData->BuffSize = i;
 800bc24:	2311      	movs	r3, #17
 800bc26:	7123      	strb	r3, [r4, #4]
}
 800bc28:	b009      	add	sp, #36	; 0x24
 800bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2c:	42c80000 	.word	0x42c80000
 800bc30:	41200000 	.word	0x41200000
 800bc34:	20000b84 	.word	0x20000b84

0800bc38 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr

0800bc3c <HAL_MspInit>:
  */


void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <HAL_MspInit+0x30>)
{
 800bc40:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bc44:	430a      	orrs	r2, r1
 800bc46:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800bc48:	2280      	movs	r2, #128	; 0x80
 800bc4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800bc4c:	0552      	lsls	r2, r2, #21
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 800bc52:	f7f9 fbe1 	bl	8005418 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 800bc56:	f7f9 fc25 	bl	80054a4 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	4a04      	ldr	r2, [pc, #16]	; (800bc70 <HAL_MspInit+0x34>)
 800bc5e:	6811      	ldr	r1, [r2, #0]
 800bc60:	430b      	orrs	r3, r1
 800bc62:	6013      	str	r3, [r2, #0]
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 800bc64:	f7f9 fc14 	bl	8005490 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	40021000 	.word	0x40021000
 800bc70:	40022000 	.word	0x40022000

0800bc74 <HAL_I2C_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bc74:	b510      	push	{r4, lr}
 800bc76:	0004      	movs	r4, r0
 800bc78:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc7a:	2214      	movs	r2, #20
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	a801      	add	r0, sp, #4
 800bc80:	f000 fbaf 	bl	800c3e2 <memset>
  if(hi2c->Instance==I2C1)
 800bc84:	4b11      	ldr	r3, [pc, #68]	; (800bccc <HAL_I2C_MspInit+0x58>)
 800bc86:	6822      	ldr	r2, [r4, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d11c      	bne.n	800bcc6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc8c:	2102      	movs	r1, #2
 800bc8e:	4c10      	ldr	r4, [pc, #64]	; (800bcd0 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc90:	4810      	ldr	r0, [pc, #64]	; (800bcd4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc94:	430a      	orrs	r2, r1
 800bc96:	62e2      	str	r2, [r4, #44]	; 0x2c
 800bc98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc9a:	400b      	ands	r3, r1
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bca0:	23c0      	movs	r3, #192	; 0xc0
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bca6:	2312      	movs	r3, #18
 800bca8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bcaa:	3b11      	subs	r3, #17
 800bcac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcae:	185b      	adds	r3, r3, r1
 800bcb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcb2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcb8:	f7f9 f840 	bl	8004d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bcbc:	2380      	movs	r3, #128	; 0x80
 800bcbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bcc0:	039b      	lsls	r3, r3, #14
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800bcc6:	b006      	add	sp, #24
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	40005400 	.word	0x40005400
 800bcd0:	40021000 	.word	0x40021000
 800bcd4:	50000400 	.word	0x50000400

0800bcd8 <HAL_RTC_MspInit>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800bcd8:	2304      	movs	r3, #4
{
 800bcda:	b500      	push	{lr}
 800bcdc:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800bcde:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bce4:	3301      	adds	r3, #1
 800bce6:	33ff      	adds	r3, #255	; 0xff
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bce8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bcea:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bcec:	f7f9 fc1c 	bl	8005528 <HAL_RCC_OscConfig>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d001      	beq.n	800bcf8 <HAL_RTC_MspInit+0x20>
  {
    Error_Handler();
 800bcf4:	f7ff fadc 	bl	800b2b0 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bcf8:	2320      	movs	r3, #32
 800bcfa:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bcfc:	2380      	movs	r3, #128	; 0x80
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bcfe:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bd00:	025b      	lsls	r3, r3, #9
 800bd02:	9301      	str	r3, [sp, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd04:	f7f9 ff9c 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d001      	beq.n	800bd10 <HAL_RTC_MspInit+0x38>
  { 
    Error_Handler();
 800bd0c:	f7ff fad0 	bl	800b2b0 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800bd10:	2380      	movs	r3, #128	; 0x80
 800bd12:	4a07      	ldr	r2, [pc, #28]	; (800bd30 <HAL_RTC_MspInit+0x58>)
 800bd14:	02db      	lsls	r3, r3, #11
 800bd16:	6d11      	ldr	r1, [r2, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800bd18:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 800bd1a:	430b      	orrs	r3, r1
 800bd1c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800bd1e:	2200      	movs	r2, #0
 800bd20:	0011      	movs	r1, r2
 800bd22:	f7f8 ffb5 	bl	8004c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800bd26:	2002      	movs	r0, #2
 800bd28:	f7f8 ffdc 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
}
 800bd2c:	b019      	add	sp, #100	; 0x64
 800bd2e:	bd00      	pop	{pc}
 800bd30:	40021000 	.word	0x40021000

0800bd34 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bd34:	b510      	push	{r4, lr}
  TimerIrqHandler( );
 800bd36:	f7ff f9a7 	bl	800b088 <TimerIrqHandler>
}
 800bd3a:	bd10      	pop	{r4, pc}

0800bd3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bd3c:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler( GPIO_Pin );
 800bd3e:	f7ff fb3d 	bl	800b3bc <HW_GPIO_IrqHandler>
}
 800bd42:	bd10      	pop	{r4, pc}

0800bd44 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
  switch( GPIO_Pin )
 800bd44:	3801      	subs	r0, #1
{
 800bd46:	b500      	push	{lr}
  switch( GPIO_Pin )
 800bd48:	2807      	cmp	r0, #7
 800bd4a:	d807      	bhi.n	800bd5c <MSP_GetIRQn+0x18>
 800bd4c:	f7f4 f9dc 	bl	8000108 <__gnu_thumb1_case_uqi>
 800bd50:	04060808 	.word	0x04060808
 800bd54:	04060606 	.word	0x04060606
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 800bd58:	2006      	movs	r0, #6
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
  }
}
 800bd5a:	bd00      	pop	{pc}
    default: return EXTI4_15_IRQn;
 800bd5c:	2007      	movs	r0, #7
 800bd5e:	e7fc      	b.n	800bd5a <MSP_GetIRQn+0x16>
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 800bd60:	2005      	movs	r0, #5
 800bd62:	e7fa      	b.n	800bd5a <MSP_GetIRQn+0x16>

0800bd64 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 800bd64:	b500      	push	{lr}
 800bd66:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bd68:	2214      	movs	r2, #20
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	a801      	add	r0, sp, #4
 800bd6e:	f000 fb38 	bl	800c3e2 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bd72:	222c      	movs	r2, #44	; 0x2c
 800bd74:	2100      	movs	r1, #0
 800bd76:	a807      	add	r0, sp, #28
 800bd78:	f000 fb33 	bl	800c3e2 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800bd80:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800bd82:	2380      	movs	r3, #128	; 0x80
 800bd84:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800bd86:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800bd88:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800bd8a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800bd8c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800bd8e:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bd90:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd92:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bd94:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800bd96:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd98:	f7f9 fbc6 	bl	8005528 <HAL_RCC_OscConfig>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d001      	beq.n	800bda4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800bda0:	f7ff fa86 	bl	800b2b0 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bda4:	2380      	movs	r3, #128	; 0x80
 800bda6:	4a11      	ldr	r2, [pc, #68]	; (800bdec <SystemClock_Config+0x88>)
 800bda8:	055b      	lsls	r3, r3, #21
 800bdaa:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800bdac:	430b      	orrs	r3, r1
 800bdae:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bdb0:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <SystemClock_Config+0x8c>)
 800bdb2:	4910      	ldr	r1, [pc, #64]	; (800bdf4 <SystemClock_Config+0x90>)
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	4011      	ands	r1, r2
 800bdb8:	2280      	movs	r2, #128	; 0x80
 800bdba:	0112      	lsls	r2, r2, #4
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800bdc0:	2110      	movs	r1, #16
 800bdc2:	001a      	movs	r2, r3
 800bdc4:	6853      	ldr	r3, [r2, #4]
 800bdc6:	400b      	ands	r3, r1
 800bdc8:	d1fc      	bne.n	800bdc4 <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800bdca:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800bdcc:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800bdce:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800bdd0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bdd2:	3a0c      	subs	r2, #12
 800bdd4:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bdd6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bdd8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bdda:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800bddc:	f7f9 fe58 	bl	8005a90 <HAL_RCC_ClockConfig>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d001      	beq.n	800bde8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800bde4:	f7ff fa64 	bl	800b2b0 <Error_Handler>
  }
}
 800bde8:	b015      	add	sp, #84	; 0x54
 800bdea:	bd00      	pop	{pc}
 800bdec:	40021000 	.word	0x40021000
 800bdf0:	40007000 	.word	0x40007000
 800bdf4:	ffffe7ff 	.word	0xffffe7ff

0800bdf8 <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed( void )
{
  return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 800bdf8:	4b04      	ldr	r3, [pc, #16]	; (800be0c <HW_GetRandomSeed+0x14>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	4b04      	ldr	r3, [pc, #16]	; (800be10 <HW_GetRandomSeed+0x18>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4058      	eors	r0, r3
 800be02:	4b04      	ldr	r3, [pc, #16]	; (800be14 <HW_GetRandomSeed+0x1c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4058      	eors	r0, r3
}
 800be08:	4770      	bx	lr
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	1ff80050 	.word	0x1ff80050
 800be10:	1ff80054 	.word	0x1ff80054
 800be14:	1ff80064 	.word	0x1ff80064

0800be18 <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId( uint8_t *id )
{
    id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 800be18:	4911      	ldr	r1, [pc, #68]	; (800be60 <HW_GetUniqueId+0x48>)
 800be1a:	4a12      	ldr	r2, [pc, #72]	; (800be64 <HW_GetUniqueId+0x4c>)
 800be1c:	680b      	ldr	r3, [r1, #0]
{
 800be1e:	b510      	push	{r4, lr}
    id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 800be20:	6814      	ldr	r4, [r2, #0]
 800be22:	191b      	adds	r3, r3, r4
 800be24:	0e1b      	lsrs	r3, r3, #24
 800be26:	71c3      	strb	r3, [r0, #7]
    id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
 800be28:	6814      	ldr	r4, [r2, #0]
 800be2a:	680b      	ldr	r3, [r1, #0]
 800be2c:	191b      	adds	r3, r3, r4
 800be2e:	0c1b      	lsrs	r3, r3, #16
 800be30:	7183      	strb	r3, [r0, #6]
    id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
 800be32:	6814      	ldr	r4, [r2, #0]
 800be34:	680b      	ldr	r3, [r1, #0]
 800be36:	191b      	adds	r3, r3, r4
 800be38:	0a1b      	lsrs	r3, r3, #8
 800be3a:	7143      	strb	r3, [r0, #5]
    id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 800be3c:	6812      	ldr	r2, [r2, #0]
 800be3e:	680b      	ldr	r3, [r1, #0]
 800be40:	189b      	adds	r3, r3, r2
 800be42:	7103      	strb	r3, [r0, #4]
    id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
 800be44:	4b08      	ldr	r3, [pc, #32]	; (800be68 <HW_GetUniqueId+0x50>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	0e12      	lsrs	r2, r2, #24
 800be4a:	70c2      	strb	r2, [r0, #3]
    id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	0c12      	lsrs	r2, r2, #16
 800be50:	7082      	strb	r2, [r0, #2]
    id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	0a12      	lsrs	r2, r2, #8
 800be56:	7042      	strb	r2, [r0, #1]
    id[0] = ( ( *( uint32_t* )ID2 ) );
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	7003      	strb	r3, [r0, #0]
}
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	46c0      	nop			; (mov r8, r8)
 800be60:	1ff80050 	.word	0x1ff80050
 800be64:	1ff80064 	.word	0x1ff80064
 800be68:	1ff80054 	.word	0x1ff80054

0800be6c <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
  if( AdcInitialized == false )
 800be6c:	4812      	ldr	r0, [pc, #72]	; (800beb8 <HW_AdcInit+0x4c>)
{
 800be6e:	b510      	push	{r4, lr}
  if( AdcInitialized == false )
 800be70:	7843      	ldrb	r3, [r0, #1]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d11e      	bne.n	800beb4 <HW_AdcInit+0x48>
    AdcInitialized = true;
#if 0
    GPIO_InitTypeDef initStruct;
#endif
    
    hadc.Instance  = ADC1;
 800be76:	4911      	ldr	r1, [pc, #68]	; (800bebc <HW_AdcInit+0x50>)
    AdcInitialized = true;
 800be78:	2201      	movs	r2, #1
    hadc.Instance  = ADC1;
 800be7a:	6041      	str	r1, [r0, #4]
    
    hadc.Init.OversamplingMode      = DISABLE;
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800be7c:	2180      	movs	r1, #128	; 0x80
 800be7e:	0609      	lsls	r1, r1, #24
 800be80:	6081      	str	r1, [r0, #8]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
    hadc.Init.LowPowerAutoWait      = DISABLE;
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800be82:	2107      	movs	r1, #7
    hadc.Init.OversamplingMode      = DISABLE;
 800be84:	6443      	str	r3, [r0, #68]	; 0x44
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800be86:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800be88:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800be8a:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800be8c:	6103      	str	r3, [r0, #16]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800be8e:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800be90:	6283      	str	r3, [r0, #40]	; 0x28
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800be92:	6303      	str	r3, [r0, #48]	; 0x30
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
    hadc.Init.DMAContinuousRequests = DISABLE;
 800be94:	6343      	str	r3, [r0, #52]	; 0x34

    ADCCLK_ENABLE();
 800be96:	2380      	movs	r3, #128	; 0x80
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800be98:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800be9a:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 800be9c:	7042      	strb	r2, [r0, #1]
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800be9e:	3203      	adds	r2, #3
 800bea0:	6182      	str	r2, [r0, #24]
    ADCCLK_ENABLE();
 800bea2:	4a07      	ldr	r2, [pc, #28]	; (800bec0 <HW_AdcInit+0x54>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800bea4:	6401      	str	r1, [r0, #64]	; 0x40
    ADCCLK_ENABLE();
 800bea6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	430b      	orrs	r3, r1
 800beac:	6353      	str	r3, [r2, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 800beae:	3004      	adds	r0, #4
 800beb0:	f7f8 fcd8 	bl	8004864 <HAL_ADC_Init>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
#endif
  }
}
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	20000b88 	.word	0x20000b88
 800bebc:	40012400 	.word	0x40012400
 800bec0:	40021000 	.word	0x40021000

0800bec4 <HW_Init>:
{
 800bec4:	b513      	push	{r0, r1, r4, lr}
  if( McuInitialized == false )
 800bec6:	4c0a      	ldr	r4, [pc, #40]	; (800bef0 <HW_Init+0x2c>)
 800bec8:	7823      	ldrb	r3, [r4, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10f      	bne.n	800beee <HW_Init+0x2a>
    HW_AdcInit( );
 800bece:	f7ff ffcd 	bl	800be6c <HW_AdcInit>
    Radio.IoInit( );
 800bed2:	4b08      	ldr	r3, [pc, #32]	; (800bef4 <HW_Init+0x30>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	4798      	blx	r3
    HW_SPI_Init( );
 800beda:	f7ff fca9 	bl	800b830 <HW_SPI_Init>
    HW_RTC_Init( );
 800bede:	f7ff fc35 	bl	800b74c <HW_RTC_Init>
    vcom_Init( );
 800bee2:	f000 f923 	bl	800c12c <vcom_Init>
    BSP_sensor_Init( );
 800bee6:	f7ff f9af 	bl	800b248 <BSP_sensor_Init>
    McuInitialized = true;
 800beea:	2301      	movs	r3, #1
 800beec:	7023      	strb	r3, [r4, #0]
}
 800beee:	bd13      	pop	{r0, r1, r4, pc}
 800bef0:	20000b88 	.word	0x20000b88
 800bef4:	0800cfc4 	.word	0x0800cfc4

0800bef8 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 800bef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800befa:	0007      	movs	r7, r0

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 800befc:	2000      	movs	r0, #0
  
  if( AdcInitialized == true )
 800befe:	4e1e      	ldr	r6, [pc, #120]	; (800bf78 <HW_AdcReadChannel+0x80>)
 800bf00:	7873      	ldrb	r3, [r6, #1]
 800bf02:	4283      	cmp	r3, r0
 800bf04:	d036      	beq.n	800bf74 <HW_AdcReadChannel+0x7c>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800bf06:	2308      	movs	r3, #8
 800bf08:	491c      	ldr	r1, [pc, #112]	; (800bf7c <HW_AdcReadChannel+0x84>)
 800bf0a:	684a      	ldr	r2, [r1, #4]
 800bf0c:	421a      	tst	r2, r3
 800bf0e:	d0fc      	beq.n	800bf0a <HW_AdcReadChannel+0x12>
      
    ADCCLK_ENABLE();
 800bf10:	2380      	movs	r3, #128	; 0x80
 800bf12:	4d1b      	ldr	r5, [pc, #108]	; (800bf80 <HW_AdcReadChannel+0x88>)
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    
    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 800bf18:	1d34      	adds	r4, r6, #4
    ADCCLK_ENABLE();
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	636b      	str	r3, [r5, #52]	; 0x34
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 800bf1e:	2100      	movs	r1, #0
 800bf20:	0020      	movs	r0, r4
 800bf22:	f7f8 fe65 	bl	8004bf0 <HAL_ADCEx_Calibration_Start>
    
    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800bf26:	4b17      	ldr	r3, [pc, #92]	; (800bf84 <HW_AdcReadChannel+0x8c>)
    adcConf.Rank = ADC_RANK_NONE; 
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf28:	4669      	mov	r1, sp
    adcConf.Channel = ADC_CHANNEL_MASK;
 800bf2a:	9300      	str	r3, [sp, #0]
    adcConf.Rank = ADC_RANK_NONE; 
 800bf2c:	4b16      	ldr	r3, [pc, #88]	; (800bf88 <HW_AdcReadChannel+0x90>)
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf2e:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_NONE; 
 800bf30:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf32:	f7f8 fdf9 	bl	8004b28 <HAL_ADC_ConfigChannel>
      
    /* configure adc channel */
    adcConf.Channel = Channel;
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf36:	2380      	movs	r3, #128	; 0x80
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf38:	4669      	mov	r1, sp
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf3a:	015b      	lsls	r3, r3, #5
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf3c:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bf3e:	9301      	str	r3, [sp, #4]
    adcConf.Channel = Channel;
 800bf40:	9700      	str	r7, [sp, #0]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800bf42:	f7f8 fdf1 	bl	8004b28 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start( &hadc);
 800bf46:	0020      	movs	r0, r4
 800bf48:	f7f8 fd60 	bl	8004a0c <HAL_ADC_Start>
      
    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	0020      	movs	r0, r4
 800bf50:	4249      	negs	r1, r1
 800bf52:	f7f8 fd87 	bl	8004a64 <HAL_ADC_PollForConversion>
      
    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue ( &hadc);
 800bf56:	0020      	movs	r0, r4
 800bf58:	f7f8 fde2 	bl	8004b20 <HAL_ADC_GetValue>

    __HAL_ADC_DISABLE( &hadc) ;
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	6873      	ldr	r3, [r6, #4]
    adcData = HAL_ADC_GetValue ( &hadc);
 800bf60:	b280      	uxth	r0, r0
    __HAL_ADC_DISABLE( &hadc) ;
 800bf62:	6899      	ldr	r1, [r3, #8]
 800bf64:	430a      	orrs	r2, r1
 800bf66:	609a      	str	r2, [r3, #8]
 800bf68:	2203      	movs	r2, #3
 800bf6a:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800bf6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf6e:	4a07      	ldr	r2, [pc, #28]	; (800bf8c <HW_AdcReadChannel+0x94>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	636b      	str	r3, [r5, #52]	; 0x34
  }
  return adcData;
}
 800bf74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	20000b88 	.word	0x20000b88
 800bf7c:	40007000 	.word	0x40007000
 800bf80:	40021000 	.word	0x40021000
 800bf84:	0007ffff 	.word	0x0007ffff
 800bf88:	00001001 	.word	0x00001001
 800bf8c:	fffffdff 	.word	0xfffffdff

0800bf90 <HW_GetBatteryLevel>:
{
 800bf90:	b570      	push	{r4, r5, r6, lr}
  measuredLevel = HW_AdcReadChannel( ADC_CHANNEL_VREFINT ); 
 800bf92:	4810      	ldr	r0, [pc, #64]	; (800bfd4 <HW_GetBatteryLevel+0x44>)
 800bf94:	f7ff ffb0 	bl	800bef8 <HW_AdcReadChannel>
    batteryLevel = 0;
 800bf98:	2400      	movs	r4, #0
  measuredLevel = HW_AdcReadChannel( ADC_CHANNEL_VREFINT ); 
 800bf9a:	0001      	movs	r1, r0
  if (measuredLevel == 0)
 800bf9c:	42a0      	cmp	r0, r4
 800bf9e:	d014      	beq.n	800bfca <HW_GetBatteryLevel+0x3a>
    batteryLevelmV= (( (uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL ) )/ measuredLevel);
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <HW_GetBatteryLevel+0x48>)
 800bfa2:	4d0e      	ldr	r5, [pc, #56]	; (800bfdc <HW_GetBatteryLevel+0x4c>)
 800bfa4:	8818      	ldrh	r0, [r3, #0]
 800bfa6:	4368      	muls	r0, r5
 800bfa8:	f7f4 f8c2 	bl	8000130 <__udivsi3>
 800bfac:	0003      	movs	r3, r0
  if (batteryLevelmV > VDD_BAT)
 800bfae:	42a8      	cmp	r0, r5
 800bfb0:	d80d      	bhi.n	800bfce <HW_GetBatteryLevel+0x3e>
  else if (batteryLevelmV < VDD_MIN)
 800bfb2:	4a0b      	ldr	r2, [pc, #44]	; (800bfe0 <HW_GetBatteryLevel+0x50>)
 800bfb4:	4290      	cmp	r0, r2
 800bfb6:	d908      	bls.n	800bfca <HW_GetBatteryLevel+0x3a>
    batteryLevel = (( (uint32_t) (batteryLevelmV - VDD_MIN)*LORAWAN_MAX_BAT) /(VDD_BAT-VDD_MIN) ); 
 800bfb8:	20fe      	movs	r0, #254	; 0xfe
 800bfba:	2196      	movs	r1, #150	; 0x96
 800bfbc:	4358      	muls	r0, r3
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <HW_GetBatteryLevel+0x54>)
 800bfc0:	00c9      	lsls	r1, r1, #3
 800bfc2:	18c0      	adds	r0, r0, r3
 800bfc4:	f7f4 f8b4 	bl	8000130 <__udivsi3>
 800bfc8:	b2c4      	uxtb	r4, r0
}
 800bfca:	0020      	movs	r0, r4
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
    batteryLevel = LORAWAN_MAX_BAT;
 800bfce:	24fe      	movs	r4, #254	; 0xfe
 800bfd0:	e7fb      	b.n	800bfca <HW_GetBatteryLevel+0x3a>
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	44020000 	.word	0x44020000
 800bfd8:	1ff80078 	.word	0x1ff80078
 800bfdc:	00000bb8 	.word	0x00000bb8
 800bfe0:	00000707 	.word	0x00000707
 800bfe4:	fff90610 	.word	0xfff90610

0800bfe8 <HW_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterStopMode( void)
{
 800bfe8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bfea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bfee:	b672      	cpsid	i
  HW_SPI_IoDeInit( );
 800bff0:	f7ff fc5e 	bl	800b8b0 <HW_SPI_IoDeInit>
  Radio.IoDeInit( );
 800bff4:	4b08      	ldr	r3, [pc, #32]	; (800c018 <HW_EnterStopMode+0x30>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	4798      	blx	r3
  vcom_IoDeInit( );
 800bffa:	f000 f96f 	bl	800c2dc <vcom_IoDeInit>
  DISABLE_IRQ( );

  HW_IoDeInit( );
  
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800bffe:	2304      	movs	r3, #4
 800c000:	4a06      	ldr	r2, [pc, #24]	; (800c01c <HW_EnterStopMode+0x34>)
 800c002:	6811      	ldr	r1, [r2, #0]
 800c004:	430b      	orrs	r3, r1
 800c006:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c008:	f384 8810 	msr	PRIMASK, r4
  
  RESTORE_PRIMASK( );

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800c00c:	2101      	movs	r1, #1
 800c00e:	0008      	movs	r0, r1
 800c010:	f7f9 fa22 	bl	8005458 <HAL_PWR_EnterSTOPMode>
}
 800c014:	bd10      	pop	{r4, pc}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	0800cfc4 	.word	0x0800cfc4
 800c01c:	40007000 	.word	0x40007000

0800c020 <HW_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void HW_ExitStopMode( void)
{
 800c020:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c022:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c026:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800c028:	2201      	movs	r2, #1
 800c02a:	4b13      	ldr	r3, [pc, #76]	; (800c078 <HW_ExitStopMode+0x58>)
 800c02c:	6819      	ldr	r1, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET ) {}
 800c032:	2204      	movs	r2, #4
 800c034:	6819      	ldr	r1, [r3, #0]
 800c036:	4211      	tst	r1, r2
 800c038:	d0fc      	beq.n	800c034 <HW_ExitStopMode+0x14>
  
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800c03a:	2280      	movs	r2, #128	; 0x80
 800c03c:	6819      	ldr	r1, [r3, #0]
 800c03e:	0452      	lsls	r2, r2, #17
 800c040:	430a      	orrs	r2, r1
 800c042:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET ) {}
 800c044:	2280      	movs	r2, #128	; 0x80
 800c046:	0492      	lsls	r2, r2, #18
 800c048:	6819      	ldr	r1, [r3, #0]
 800c04a:	4211      	tst	r1, r2
 800c04c:	d0fc      	beq.n	800c048 <HW_ExitStopMode+0x28>
  
  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 800c04e:	2203      	movs	r2, #3
 800c050:	68d9      	ldr	r1, [r3, #12]
 800c052:	430a      	orrs	r2, r1
  
  /* Wait till PLL is used as system clock source */ 
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 800c054:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 800c056:	60da      	str	r2, [r3, #12]
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	400a      	ands	r2, r1
 800c05c:	2a0c      	cmp	r2, #12
 800c05e:	d1fb      	bne.n	800c058 <HW_ExitStopMode+0x38>
  HW_SPI_IoInit( );
 800c060:	f7ff fbb6 	bl	800b7d0 <HW_SPI_IoInit>
  Radio.IoInit( );
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <HW_ExitStopMode+0x5c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	4798      	blx	r3
  vcom_IoInit( );
 800c06c:	f000 f8fe 	bl	800c26c <vcom_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c070:	f384 8810 	msr	PRIMASK, r4
    
  /*initilizes the peripherals*/
  HW_IoInit( );

  RESTORE_PRIMASK( );
}
 800c074:	bd13      	pop	{r0, r1, r4, pc}
 800c076:	46c0      	nop			; (mov r8, r8)
 800c078:	40021000 	.word	0x40021000
 800c07c:	0800cfc4 	.word	0x0800cfc4

0800c080 <HW_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterSleepMode( void)
{
 800c080:	b510      	push	{r4, lr}
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800c082:	2101      	movs	r1, #1
 800c084:	2000      	movs	r0, #0
 800c086:	f7f9 f9cf 	bl	8005428 <HAL_PWR_EnterSLEEPMode>
}
 800c08a:	bd10      	pop	{r4, pc}

0800c08c <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 800c08c:	4770      	bx	lr

0800c08e <HardFault_Handler>:
  __ASM volatile ("nop");
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	e7fd      	b.n	800c08e <HardFault_Handler>

0800c092 <SVC_Handler>:
 800c092:	4770      	bx	lr

0800c094 <PendSV_Handler>:
 800c094:	4770      	bx	lr

0800c096 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800c096:	b510      	push	{r4, lr}
  HAL_IncTick();
 800c098:	f7f8 fb6e 	bl	8004778 <HAL_IncTick>
}
 800c09c:	bd10      	pop	{r4, pc}

0800c09e <USART2_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART2_IRQHandler( void )
{
 800c09e:	b510      	push	{r4, lr}
   vcom_Print( );
 800c0a0:	f000 f8ae 	bl	800c200 <vcom_Print>
}
 800c0a4:	bd10      	pop	{r4, pc}

0800c0a6 <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 800c0a6:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler ( );
 800c0a8:	f7ff fb12 	bl	800b6d0 <HW_RTC_IrqHandler>
}
 800c0ac:	bd10      	pop	{r4, pc}

0800c0ae <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 800c0ae:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	f7f8 ff03 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800c0b6:	2002      	movs	r0, #2
 800c0b8:	f7f8 ff00 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
}
 800c0bc:	bd10      	pop	{r4, pc}

0800c0be <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 800c0be:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800c0c0:	2004      	movs	r0, #4
 800c0c2:	f7f8 fefb 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800c0c6:	2008      	movs	r0, #8
 800c0c8:	f7f8 fef8 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
}
 800c0cc:	bd10      	pop	{r4, pc}

0800c0ce <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 800c0ce:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800c0d0:	2010      	movs	r0, #16
 800c0d2:	f7f8 fef3 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800c0d6:	2020      	movs	r0, #32
 800c0d8:	f7f8 fef0 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800c0dc:	2040      	movs	r0, #64	; 0x40
 800c0de:	f7f8 feed 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800c0e2:	2080      	movs	r0, #128	; 0x80
 800c0e4:	f7f8 feea 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800c0e8:	2080      	movs	r0, #128	; 0x80
 800c0ea:	0040      	lsls	r0, r0, #1
 800c0ec:	f7f8 fee6 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800c0f0:	2080      	movs	r0, #128	; 0x80
 800c0f2:	0080      	lsls	r0, r0, #2
 800c0f4:	f7f8 fee2 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800c0f8:	2080      	movs	r0, #128	; 0x80
 800c0fa:	00c0      	lsls	r0, r0, #3
 800c0fc:	f7f8 fede 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800c100:	2080      	movs	r0, #128	; 0x80
 800c102:	0100      	lsls	r0, r0, #4
 800c104:	f7f8 feda 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800c108:	2080      	movs	r0, #128	; 0x80
 800c10a:	0140      	lsls	r0, r0, #5
 800c10c:	f7f8 fed6 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800c110:	2080      	movs	r0, #128	; 0x80
 800c112:	0180      	lsls	r0, r0, #6
 800c114:	f7f8 fed2 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800c118:	2080      	movs	r0, #128	; 0x80
 800c11a:	01c0      	lsls	r0, r0, #7
 800c11c:	f7f8 fece 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800c120:	2080      	movs	r0, #128	; 0x80
 800c122:	0200      	lsls	r0, r0, #8
 800c124:	f7f8 feca 	bl	8004ebc <HAL_GPIO_EXTI_IRQHandler>
}
 800c128:	bd10      	pop	{r4, pc}
	...

0800c12c <vcom_Init>:
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 800c12c:	480e      	ldr	r0, [pc, #56]	; (800c168 <vcom_Init+0x3c>)
 800c12e:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <vcom_Init+0x40>)
{
 800c130:	b510      	push	{r4, lr}
  UartHandle.Instance        = USARTX;
 800c132:	6003      	str	r3, [r0, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 800c134:	23e1      	movs	r3, #225	; 0xe1
 800c136:	025b      	lsls	r3, r3, #9
 800c138:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800c13a:	2300      	movs	r3, #0
 800c13c:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800c13e:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800c140:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800c142:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800c144:	330c      	adds	r3, #12
 800c146:	6143      	str	r3, [r0, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c148:	f7fa ff4e 	bl	8006fe8 <HAL_UART_Init>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d001      	beq.n	800c154 <vcom_Init+0x28>
  {
    /* Initialization Error */
    Error_Handler(); 
 800c150:	f7ff f8ae 	bl	800b2b0 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 800c154:	2200      	movs	r2, #0
 800c156:	2101      	movs	r1, #1
 800c158:	201c      	movs	r0, #28
 800c15a:	f7f8 fd99 	bl	8004c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 800c15e:	201c      	movs	r0, #28
 800c160:	f7f8 fdc0 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
}
 800c164:	bd10      	pop	{r4, pc}
 800c166:	46c0      	nop			; (mov r8, r8)
 800c168:	20000bec 	.word	0x20000bec
 800c16c:	40004400 	.word	0x40004400

0800c170 <vcom_Send>:
  HAL_UART_DeInit(&UartHandle);
#endif
}

void vcom_Send( char *format, ... )
{
 800c170:	b40f      	push	{r0, r1, r2, r3}
 800c172:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c174:	b0a5      	sub	sp, #148	; 0x94
 800c176:	ab2a      	add	r3, sp, #168	; 0xa8
 800c178:	cb02      	ldmia	r3!, {r1}
  va_list args;
  va_start(args, format);
 800c17a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c17c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c180:	b672      	cpsid	i
  
  BACKUP_PRIMASK();
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 800c182:	9a03      	ldr	r2, [sp, #12]
 800c184:	a804      	add	r0, sp, #16
 800c186:	f000 f94b 	bl	800c420 <vsiprintf>
  
  if (iw+len<BUFSIZE)
 800c18a:	4d1b      	ldr	r5, [pc, #108]	; (800c1f8 <vcom_Send+0x88>)
  len = vsprintf(&tempBuff[0], format, args);
 800c18c:	b2c3      	uxtb	r3, r0
  if (iw+len<BUFSIZE)
 800c18e:	3570      	adds	r5, #112	; 0x70
  len = vsprintf(&tempBuff[0], format, args);
 800c190:	9301      	str	r3, [sp, #4]
  if (iw+len<BUFSIZE)
 800c192:	882b      	ldrh	r3, [r5, #0]
 800c194:	b2c2      	uxtb	r2, r0
 800c196:	189b      	adds	r3, r3, r2
 800c198:	2bff      	cmp	r3, #255	; 0xff
 800c19a:	dc14      	bgt.n	800c1c6 <vcom_Send+0x56>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 800c19c:	882b      	ldrh	r3, [r5, #0]
 800c19e:	4817      	ldr	r0, [pc, #92]	; (800c1fc <vcom_Send+0x8c>)
 800c1a0:	a904      	add	r1, sp, #16
 800c1a2:	18c0      	adds	r0, r0, r3
 800c1a4:	f000 f914 	bl	800c3d0 <memcpy>
    iw+=len;
 800c1a8:	882c      	ldrh	r4, [r5, #0]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	18e4      	adds	r4, r4, r3
  {
    lenTop=BUFSIZE-iw;
    memcpy( &buff[iw], &tempBuff[0], lenTop);
    len-=lenTop;
    memcpy( &buff[0], &tempBuff[lenTop], len);
    iw = len;
 800c1ae:	b2a4      	uxth	r4, r4
 800c1b0:	802c      	strh	r4, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b2:	f387 8810 	msr	PRIMASK, r7
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 800c1b6:	201c      	movs	r0, #28
 800c1b8:	f7f8 fd9e 	bl	8004cf8 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 800c1bc:	b025      	add	sp, #148	; 0x94
 800c1be:	bcf0      	pop	{r4, r5, r6, r7}
 800c1c0:	bc08      	pop	{r3}
 800c1c2:	b004      	add	sp, #16
 800c1c4:	4718      	bx	r3
    lenTop=BUFSIZE-iw;
 800c1c6:	882c      	ldrh	r4, [r5, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800c1c8:	4e0c      	ldr	r6, [pc, #48]	; (800c1fc <vcom_Send+0x8c>)
    lenTop=BUFSIZE-iw;
 800c1ca:	b2e4      	uxtb	r4, r4
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800c1cc:	8828      	ldrh	r0, [r5, #0]
    lenTop=BUFSIZE-iw;
 800c1ce:	4261      	negs	r1, r4
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800c1d0:	b2cb      	uxtb	r3, r1
 800c1d2:	001a      	movs	r2, r3
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	1830      	adds	r0, r6, r0
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	f000 f8f9 	bl	800c3d0 <memcpy>
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800c1de:	aa04      	add	r2, sp, #16
 800c1e0:	4694      	mov	ip, r2
    len-=lenTop;
 800c1e2:	9b01      	ldr	r3, [sp, #4]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800c1e4:	0030      	movs	r0, r6
    len-=lenTop;
 800c1e6:	18e4      	adds	r4, r4, r3
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800c1e8:	9b00      	ldr	r3, [sp, #0]
    len-=lenTop;
 800c1ea:	b2e4      	uxtb	r4, r4
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800c1ec:	4463      	add	r3, ip
 800c1ee:	0019      	movs	r1, r3
 800c1f0:	0022      	movs	r2, r4
 800c1f2:	f000 f8ed 	bl	800c3d0 <memcpy>
 800c1f6:	e7da      	b.n	800c1ae <vcom_Send+0x3e>
 800c1f8:	20000bec 	.word	0x20000bec
 800c1fc:	20000c60 	.word	0x20000c60

0800c200 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 800c200:	b570      	push	{r4, r5, r6, lr}
    CurChar = &buff[ir];
    ir= (ir+1) %BUFSIZE;
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800c202:	2596      	movs	r5, #150	; 0x96
    ir= (ir+1) %BUFSIZE;
 800c204:	24ff      	movs	r4, #255	; 0xff
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800c206:	006d      	lsls	r5, r5, #1
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800c208:	4814      	ldr	r0, [pc, #80]	; (800c25c <vcom_Print+0x5c>)
 800c20a:	0003      	movs	r3, r0
 800c20c:	0002      	movs	r2, r0
 800c20e:	3370      	adds	r3, #112	; 0x70
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	3272      	adds	r2, #114	; 0x72
 800c214:	8812      	ldrh	r2, [r2, #0]
 800c216:	3301      	adds	r3, #1
 800c218:	33ff      	adds	r3, #255	; 0xff
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	4a10      	ldr	r2, [pc, #64]	; (800c260 <vcom_Print+0x60>)
 800c21e:	4013      	ands	r3, r2
 800c220:	d503      	bpl.n	800c22a <vcom_Print+0x2a>
 800c222:	4a10      	ldr	r2, [pc, #64]	; (800c264 <vcom_Print+0x64>)
 800c224:	3b01      	subs	r3, #1
 800c226:	4313      	orrs	r3, r2
 800c228:	3301      	adds	r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dc03      	bgt.n	800c236 <vcom_Print+0x36>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 800c22e:	201c      	movs	r0, #28
 800c230:	f7f8 fd78 	bl	8004d24 <HAL_NVIC_ClearPendingIRQ>
}
 800c234:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c236:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c23a:	b672      	cpsid	i
    CurChar = &buff[ir];
 800c23c:	0002      	movs	r2, r0
 800c23e:	3272      	adds	r2, #114	; 0x72
 800c240:	8811      	ldrh	r1, [r2, #0]
    ir= (ir+1) %BUFSIZE;
 800c242:	1c4b      	adds	r3, r1, #1
 800c244:	4023      	ands	r3, r4
 800c246:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c248:	f386 8810 	msr	PRIMASK, r6
    CurChar = &buff[ir];
 800c24c:	4b06      	ldr	r3, [pc, #24]	; (800c268 <vcom_Print+0x68>)
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800c24e:	2201      	movs	r2, #1
    CurChar = &buff[ir];
 800c250:	18c9      	adds	r1, r1, r3
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800c252:	002b      	movs	r3, r5
 800c254:	f7fa fe30 	bl	8006eb8 <HAL_UART_Transmit>
 800c258:	e7d6      	b.n	800c208 <vcom_Print+0x8>
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	20000bec 	.word	0x20000bec
 800c260:	800000ff 	.word	0x800000ff
 800c264:	ffffff00 	.word	0xffffff00
 800c268:	20000c60 	.word	0x20000c60

0800c26c <vcom_IoInit>:

void vcom_IoInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct={0};
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 800c26c:	2201      	movs	r2, #1
 800c26e:	4b14      	ldr	r3, [pc, #80]	; (800c2c0 <vcom_IoInit+0x54>)
{
 800c270:	b530      	push	{r4, r5, lr}
  USARTX_TX_GPIO_CLK_ENABLE();
 800c272:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
{
 800c274:	b089      	sub	sp, #36	; 0x24
  USARTX_TX_GPIO_CLK_ENABLE();
 800c276:	4311      	orrs	r1, r2
 800c278:	62d9      	str	r1, [r3, #44]	; 0x2c
 800c27a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTX_TX_AF;

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800c27c:	25a0      	movs	r5, #160	; 0xa0
  USARTX_TX_GPIO_CLK_ENABLE();
 800c27e:	4011      	ands	r1, r2
 800c280:	9101      	str	r1, [sp, #4]
 800c282:	9901      	ldr	r1, [sp, #4]
  USARTX_RX_GPIO_CLK_ENABLE();
 800c284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800c286:	2404      	movs	r4, #4
  USARTX_RX_GPIO_CLK_ENABLE();
 800c288:	4311      	orrs	r1, r2
 800c28a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800c28e:	05ed      	lsls	r5, r5, #23
  USARTX_RX_GPIO_CLK_ENABLE();
 800c290:	4013      	ands	r3, r2
 800c292:	9302      	str	r3, [sp, #8]
 800c294:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800c296:	2302      	movs	r3, #2
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800c298:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800c29a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800c29c:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800c29e:	189b      	adds	r3, r3, r2
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800c2a0:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800c2a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800c2a4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 800c2a6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800c2a8:	f7f8 fd48 	bl	8004d3c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800c2ac:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTX_RX_AF;

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800c2ae:	a903      	add	r1, sp, #12
 800c2b0:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800c2b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 800c2b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800c2b6:	f7f8 fd41 	bl	8004d3c <HAL_GPIO_Init>
}
 800c2ba:	b009      	add	sp, #36	; 0x24
 800c2bc:	bd30      	pop	{r4, r5, pc}
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	40021000 	.word	0x40021000

0800c2c4 <HAL_UART_MspInit>:
  USARTX_CLK_ENABLE(); 
 800c2c4:	2380      	movs	r3, #128	; 0x80
 800c2c6:	4a04      	ldr	r2, [pc, #16]	; (800c2d8 <HAL_UART_MspInit+0x14>)
{
 800c2c8:	b510      	push	{r4, lr}
  USARTX_CLK_ENABLE(); 
 800c2ca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c2cc:	029b      	lsls	r3, r3, #10
 800c2ce:	430b      	orrs	r3, r1
 800c2d0:	6393      	str	r3, [r2, #56]	; 0x38
  vcom_IoInit( );
 800c2d2:	f7ff ffcb 	bl	800c26c <vcom_IoInit>
}
 800c2d6:	bd10      	pop	{r4, pc}
 800c2d8:	40021000 	.word	0x40021000

0800c2dc <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStructure={0};
 800c2e0:	220c      	movs	r2, #12
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	a805      	add	r0, sp, #20
 800c2e6:	f000 f87c 	bl	800c3e2 <memset>
  
  USARTX_TX_GPIO_CLK_ENABLE();
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	4b10      	ldr	r3, [pc, #64]	; (800c330 <vcom_IoDeInit+0x54>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800c2ee:	24a0      	movs	r4, #160	; 0xa0
  USARTX_TX_GPIO_CLK_ENABLE();
 800c2f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800c2f2:	05e4      	lsls	r4, r4, #23
  USARTX_TX_GPIO_CLK_ENABLE();
 800c2f4:	4311      	orrs	r1, r2
 800c2f6:	62d9      	str	r1, [r3, #44]	; 0x2c
 800c2f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800c2fa:	0020      	movs	r0, r4
  USARTX_TX_GPIO_CLK_ENABLE();
 800c2fc:	4011      	ands	r1, r2
 800c2fe:	9101      	str	r1, [sp, #4]
 800c300:	9901      	ldr	r1, [sp, #4]
  USARTX_RX_GPIO_CLK_ENABLE();
 800c302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c304:	4311      	orrs	r1, r2
 800c306:	62d9      	str	r1, [r3, #44]	; 0x2c
 800c308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800c30a:	a903      	add	r1, sp, #12
  USARTX_RX_GPIO_CLK_ENABLE();
 800c30c:	401a      	ands	r2, r3
 800c30e:	9202      	str	r2, [sp, #8]
 800c310:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800c312:	2303      	movs	r3, #3
 800c314:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
 800c316:	3301      	adds	r3, #1
 800c318:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800c31a:	f7f8 fd0f 	bl	8004d3c <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 800c31e:	2308      	movs	r3, #8
  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 800c320:	a903      	add	r1, sp, #12
 800c322:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 800c324:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 800c326:	f7f8 fd09 	bl	8004d3c <HAL_GPIO_Init>
}
 800c32a:	b008      	add	sp, #32
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	40021000 	.word	0x40021000

0800c334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800c334:	480d      	ldr	r0, [pc, #52]	; (800c36c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800c336:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800c338:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c33a:	e003      	b.n	800c344 <LoopCopyDataInit>

0800c33c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c33c:	4b0c      	ldr	r3, [pc, #48]	; (800c370 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800c33e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c340:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c342:	3104      	adds	r1, #4

0800c344 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800c344:	480b      	ldr	r0, [pc, #44]	; (800c374 <LoopForever+0xa>)
  ldr  r3, =_edata
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <LoopForever+0xe>)
  adds  r2, r0, r1
 800c348:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c34a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c34c:	d3f6      	bcc.n	800c33c <CopyDataInit>
  ldr  r2, =_sbss
 800c34e:	4a0b      	ldr	r2, [pc, #44]	; (800c37c <LoopForever+0x12>)
  b  LoopFillZerobss
 800c350:	e002      	b.n	800c358 <LoopFillZerobss>

0800c352 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800c352:	2300      	movs	r3, #0
  str  r3, [r2]
 800c354:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c356:	3204      	adds	r2, #4

0800c358 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800c358:	4b09      	ldr	r3, [pc, #36]	; (800c380 <LoopForever+0x16>)
  cmp  r2, r3
 800c35a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c35c:	d3f9      	bcc.n	800c352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800c35e:	f7f8 f983 	bl	8004668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c362:	f000 f811 	bl	800c388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c366:	f7ff fb4b 	bl	800ba00 <main>

0800c36a <LoopForever>:

LoopForever:
    b LoopForever
 800c36a:	e7fe      	b.n	800c36a <LoopForever>
   ldr   r0, =_estack
 800c36c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800c370:	0800d654 	.word	0x0800d654
  ldr  r0, =_sdata
 800c374:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c378:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 800c37c:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 800c380:	20000f5c 	.word	0x20000f5c

0800c384 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c384:	e7fe      	b.n	800c384 <ADC1_COMP_IRQHandler>
	...

0800c388 <__libc_init_array>:
 800c388:	b570      	push	{r4, r5, r6, lr}
 800c38a:	2600      	movs	r6, #0
 800c38c:	4d0c      	ldr	r5, [pc, #48]	; (800c3c0 <__libc_init_array+0x38>)
 800c38e:	4c0d      	ldr	r4, [pc, #52]	; (800c3c4 <__libc_init_array+0x3c>)
 800c390:	1b64      	subs	r4, r4, r5
 800c392:	10a4      	asrs	r4, r4, #2
 800c394:	42a6      	cmp	r6, r4
 800c396:	d109      	bne.n	800c3ac <__libc_init_array+0x24>
 800c398:	2600      	movs	r6, #0
 800c39a:	f000 fd89 	bl	800ceb0 <_init>
 800c39e:	4d0a      	ldr	r5, [pc, #40]	; (800c3c8 <__libc_init_array+0x40>)
 800c3a0:	4c0a      	ldr	r4, [pc, #40]	; (800c3cc <__libc_init_array+0x44>)
 800c3a2:	1b64      	subs	r4, r4, r5
 800c3a4:	10a4      	asrs	r4, r4, #2
 800c3a6:	42a6      	cmp	r6, r4
 800c3a8:	d105      	bne.n	800c3b6 <__libc_init_array+0x2e>
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	00b3      	lsls	r3, r6, #2
 800c3ae:	58eb      	ldr	r3, [r5, r3]
 800c3b0:	4798      	blx	r3
 800c3b2:	3601      	adds	r6, #1
 800c3b4:	e7ee      	b.n	800c394 <__libc_init_array+0xc>
 800c3b6:	00b3      	lsls	r3, r6, #2
 800c3b8:	58eb      	ldr	r3, [r5, r3]
 800c3ba:	4798      	blx	r3
 800c3bc:	3601      	adds	r6, #1
 800c3be:	e7f2      	b.n	800c3a6 <__libc_init_array+0x1e>
 800c3c0:	0800d64c 	.word	0x0800d64c
 800c3c4:	0800d64c 	.word	0x0800d64c
 800c3c8:	0800d64c 	.word	0x0800d64c
 800c3cc:	0800d650 	.word	0x0800d650

0800c3d0 <memcpy>:
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d100      	bne.n	800c3da <memcpy+0xa>
 800c3d8:	bd10      	pop	{r4, pc}
 800c3da:	5ccc      	ldrb	r4, [r1, r3]
 800c3dc:	54c4      	strb	r4, [r0, r3]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	e7f8      	b.n	800c3d4 <memcpy+0x4>

0800c3e2 <memset>:
 800c3e2:	0003      	movs	r3, r0
 800c3e4:	1812      	adds	r2, r2, r0
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d100      	bne.n	800c3ec <memset+0xa>
 800c3ea:	4770      	bx	lr
 800c3ec:	7019      	strb	r1, [r3, #0]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	e7f9      	b.n	800c3e6 <memset+0x4>
	...

0800c3f4 <_vsiprintf_r>:
 800c3f4:	b500      	push	{lr}
 800c3f6:	b09b      	sub	sp, #108	; 0x6c
 800c3f8:	9100      	str	r1, [sp, #0]
 800c3fa:	9104      	str	r1, [sp, #16]
 800c3fc:	4906      	ldr	r1, [pc, #24]	; (800c418 <_vsiprintf_r+0x24>)
 800c3fe:	9105      	str	r1, [sp, #20]
 800c400:	9102      	str	r1, [sp, #8]
 800c402:	4906      	ldr	r1, [pc, #24]	; (800c41c <_vsiprintf_r+0x28>)
 800c404:	9103      	str	r1, [sp, #12]
 800c406:	4669      	mov	r1, sp
 800c408:	f000 f8d6 	bl	800c5b8 <_svfiprintf_r>
 800c40c:	2300      	movs	r3, #0
 800c40e:	9a00      	ldr	r2, [sp, #0]
 800c410:	7013      	strb	r3, [r2, #0]
 800c412:	b01b      	add	sp, #108	; 0x6c
 800c414:	bd00      	pop	{pc}
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	7fffffff 	.word	0x7fffffff
 800c41c:	ffff0208 	.word	0xffff0208

0800c420 <vsiprintf>:
 800c420:	b510      	push	{r4, lr}
 800c422:	0013      	movs	r3, r2
 800c424:	000a      	movs	r2, r1
 800c426:	0001      	movs	r1, r0
 800c428:	4802      	ldr	r0, [pc, #8]	; (800c434 <vsiprintf+0x14>)
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	f7ff ffe2 	bl	800c3f4 <_vsiprintf_r>
 800c430:	bd10      	pop	{r4, pc}
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	200000fc 	.word	0x200000fc

0800c438 <_malloc_r>:
 800c438:	2303      	movs	r3, #3
 800c43a:	b570      	push	{r4, r5, r6, lr}
 800c43c:	1ccd      	adds	r5, r1, #3
 800c43e:	439d      	bics	r5, r3
 800c440:	3508      	adds	r5, #8
 800c442:	0006      	movs	r6, r0
 800c444:	2d0c      	cmp	r5, #12
 800c446:	d21e      	bcs.n	800c486 <_malloc_r+0x4e>
 800c448:	250c      	movs	r5, #12
 800c44a:	42a9      	cmp	r1, r5
 800c44c:	d81d      	bhi.n	800c48a <_malloc_r+0x52>
 800c44e:	0030      	movs	r0, r6
 800c450:	f000 fb56 	bl	800cb00 <__malloc_lock>
 800c454:	4a25      	ldr	r2, [pc, #148]	; (800c4ec <_malloc_r+0xb4>)
 800c456:	6814      	ldr	r4, [r2, #0]
 800c458:	0021      	movs	r1, r4
 800c45a:	2900      	cmp	r1, #0
 800c45c:	d119      	bne.n	800c492 <_malloc_r+0x5a>
 800c45e:	4c24      	ldr	r4, [pc, #144]	; (800c4f0 <_malloc_r+0xb8>)
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <_malloc_r+0x36>
 800c466:	0030      	movs	r0, r6
 800c468:	f000 fb1a 	bl	800caa0 <_sbrk_r>
 800c46c:	6020      	str	r0, [r4, #0]
 800c46e:	0029      	movs	r1, r5
 800c470:	0030      	movs	r0, r6
 800c472:	f000 fb15 	bl	800caa0 <_sbrk_r>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d12b      	bne.n	800c4d2 <_malloc_r+0x9a>
 800c47a:	230c      	movs	r3, #12
 800c47c:	0030      	movs	r0, r6
 800c47e:	6033      	str	r3, [r6, #0]
 800c480:	f000 fb3f 	bl	800cb02 <__malloc_unlock>
 800c484:	e003      	b.n	800c48e <_malloc_r+0x56>
 800c486:	2d00      	cmp	r5, #0
 800c488:	dadf      	bge.n	800c44a <_malloc_r+0x12>
 800c48a:	230c      	movs	r3, #12
 800c48c:	6033      	str	r3, [r6, #0]
 800c48e:	2000      	movs	r0, #0
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	680b      	ldr	r3, [r1, #0]
 800c494:	1b5b      	subs	r3, r3, r5
 800c496:	d419      	bmi.n	800c4cc <_malloc_r+0x94>
 800c498:	2b0b      	cmp	r3, #11
 800c49a:	d903      	bls.n	800c4a4 <_malloc_r+0x6c>
 800c49c:	600b      	str	r3, [r1, #0]
 800c49e:	18cc      	adds	r4, r1, r3
 800c4a0:	6025      	str	r5, [r4, #0]
 800c4a2:	e003      	b.n	800c4ac <_malloc_r+0x74>
 800c4a4:	684b      	ldr	r3, [r1, #4]
 800c4a6:	428c      	cmp	r4, r1
 800c4a8:	d10d      	bne.n	800c4c6 <_malloc_r+0x8e>
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	0030      	movs	r0, r6
 800c4ae:	f000 fb28 	bl	800cb02 <__malloc_unlock>
 800c4b2:	0020      	movs	r0, r4
 800c4b4:	2207      	movs	r2, #7
 800c4b6:	300b      	adds	r0, #11
 800c4b8:	1d23      	adds	r3, r4, #4
 800c4ba:	4390      	bics	r0, r2
 800c4bc:	1ac3      	subs	r3, r0, r3
 800c4be:	d0e7      	beq.n	800c490 <_malloc_r+0x58>
 800c4c0:	425a      	negs	r2, r3
 800c4c2:	50e2      	str	r2, [r4, r3]
 800c4c4:	e7e4      	b.n	800c490 <_malloc_r+0x58>
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	000c      	movs	r4, r1
 800c4ca:	e7ef      	b.n	800c4ac <_malloc_r+0x74>
 800c4cc:	000c      	movs	r4, r1
 800c4ce:	6849      	ldr	r1, [r1, #4]
 800c4d0:	e7c3      	b.n	800c45a <_malloc_r+0x22>
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	1cc4      	adds	r4, r0, #3
 800c4d6:	439c      	bics	r4, r3
 800c4d8:	42a0      	cmp	r0, r4
 800c4da:	d0e1      	beq.n	800c4a0 <_malloc_r+0x68>
 800c4dc:	1a21      	subs	r1, r4, r0
 800c4de:	0030      	movs	r0, r6
 800c4e0:	f000 fade 	bl	800caa0 <_sbrk_r>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d1db      	bne.n	800c4a0 <_malloc_r+0x68>
 800c4e8:	e7c7      	b.n	800c47a <_malloc_r+0x42>
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	20000d60 	.word	0x20000d60
 800c4f0:	20000d64 	.word	0x20000d64

0800c4f4 <__ssputs_r>:
 800c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f6:	688e      	ldr	r6, [r1, #8]
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	0007      	movs	r7, r0
 800c4fc:	000c      	movs	r4, r1
 800c4fe:	9203      	str	r2, [sp, #12]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	429e      	cmp	r6, r3
 800c504:	d83c      	bhi.n	800c580 <__ssputs_r+0x8c>
 800c506:	2390      	movs	r3, #144	; 0x90
 800c508:	898a      	ldrh	r2, [r1, #12]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	421a      	tst	r2, r3
 800c50e:	d034      	beq.n	800c57a <__ssputs_r+0x86>
 800c510:	2503      	movs	r5, #3
 800c512:	6909      	ldr	r1, [r1, #16]
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	1a5b      	subs	r3, r3, r1
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	6963      	ldr	r3, [r4, #20]
 800c51c:	9802      	ldr	r0, [sp, #8]
 800c51e:	435d      	muls	r5, r3
 800c520:	0feb      	lsrs	r3, r5, #31
 800c522:	195d      	adds	r5, r3, r5
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	106d      	asrs	r5, r5, #1
 800c528:	3301      	adds	r3, #1
 800c52a:	181b      	adds	r3, r3, r0
 800c52c:	42ab      	cmp	r3, r5
 800c52e:	d900      	bls.n	800c532 <__ssputs_r+0x3e>
 800c530:	001d      	movs	r5, r3
 800c532:	0553      	lsls	r3, r2, #21
 800c534:	d532      	bpl.n	800c59c <__ssputs_r+0xa8>
 800c536:	0029      	movs	r1, r5
 800c538:	0038      	movs	r0, r7
 800c53a:	f7ff ff7d 	bl	800c438 <_malloc_r>
 800c53e:	1e06      	subs	r6, r0, #0
 800c540:	d109      	bne.n	800c556 <__ssputs_r+0x62>
 800c542:	230c      	movs	r3, #12
 800c544:	603b      	str	r3, [r7, #0]
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	2001      	movs	r0, #1
 800c54a:	89a2      	ldrh	r2, [r4, #12]
 800c54c:	4240      	negs	r0, r0
 800c54e:	4313      	orrs	r3, r2
 800c550:	81a3      	strh	r3, [r4, #12]
 800c552:	b005      	add	sp, #20
 800c554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c556:	9a02      	ldr	r2, [sp, #8]
 800c558:	6921      	ldr	r1, [r4, #16]
 800c55a:	f7ff ff39 	bl	800c3d0 <memcpy>
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <__ssputs_r+0xc0>)
 800c562:	401a      	ands	r2, r3
 800c564:	2380      	movs	r3, #128	; 0x80
 800c566:	4313      	orrs	r3, r2
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	6126      	str	r6, [r4, #16]
 800c56e:	18f6      	adds	r6, r6, r3
 800c570:	6026      	str	r6, [r4, #0]
 800c572:	6165      	str	r5, [r4, #20]
 800c574:	9e01      	ldr	r6, [sp, #4]
 800c576:	1aed      	subs	r5, r5, r3
 800c578:	60a5      	str	r5, [r4, #8]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	429e      	cmp	r6, r3
 800c57e:	d900      	bls.n	800c582 <__ssputs_r+0x8e>
 800c580:	9e01      	ldr	r6, [sp, #4]
 800c582:	0032      	movs	r2, r6
 800c584:	9903      	ldr	r1, [sp, #12]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	f000 faa7 	bl	800cada <memmove>
 800c58c:	68a3      	ldr	r3, [r4, #8]
 800c58e:	2000      	movs	r0, #0
 800c590:	1b9b      	subs	r3, r3, r6
 800c592:	60a3      	str	r3, [r4, #8]
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	199e      	adds	r6, r3, r6
 800c598:	6026      	str	r6, [r4, #0]
 800c59a:	e7da      	b.n	800c552 <__ssputs_r+0x5e>
 800c59c:	002a      	movs	r2, r5
 800c59e:	0038      	movs	r0, r7
 800c5a0:	f000 fafa 	bl	800cb98 <_realloc_r>
 800c5a4:	1e06      	subs	r6, r0, #0
 800c5a6:	d1e0      	bne.n	800c56a <__ssputs_r+0x76>
 800c5a8:	6921      	ldr	r1, [r4, #16]
 800c5aa:	0038      	movs	r0, r7
 800c5ac:	f000 faaa 	bl	800cb04 <_free_r>
 800c5b0:	e7c7      	b.n	800c542 <__ssputs_r+0x4e>
 800c5b2:	46c0      	nop			; (mov r8, r8)
 800c5b4:	fffffb7f 	.word	0xfffffb7f

0800c5b8 <_svfiprintf_r>:
 800c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ba:	b0a1      	sub	sp, #132	; 0x84
 800c5bc:	9003      	str	r0, [sp, #12]
 800c5be:	001d      	movs	r5, r3
 800c5c0:	898b      	ldrh	r3, [r1, #12]
 800c5c2:	000f      	movs	r7, r1
 800c5c4:	0016      	movs	r6, r2
 800c5c6:	061b      	lsls	r3, r3, #24
 800c5c8:	d511      	bpl.n	800c5ee <_svfiprintf_r+0x36>
 800c5ca:	690b      	ldr	r3, [r1, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10e      	bne.n	800c5ee <_svfiprintf_r+0x36>
 800c5d0:	2140      	movs	r1, #64	; 0x40
 800c5d2:	f7ff ff31 	bl	800c438 <_malloc_r>
 800c5d6:	6038      	str	r0, [r7, #0]
 800c5d8:	6138      	str	r0, [r7, #16]
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d105      	bne.n	800c5ea <_svfiprintf_r+0x32>
 800c5de:	230c      	movs	r3, #12
 800c5e0:	9a03      	ldr	r2, [sp, #12]
 800c5e2:	3801      	subs	r0, #1
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	b021      	add	sp, #132	; 0x84
 800c5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ea:	2340      	movs	r3, #64	; 0x40
 800c5ec:	617b      	str	r3, [r7, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	ac08      	add	r4, sp, #32
 800c5f2:	6163      	str	r3, [r4, #20]
 800c5f4:	3320      	adds	r3, #32
 800c5f6:	7663      	strb	r3, [r4, #25]
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	76a3      	strb	r3, [r4, #26]
 800c5fc:	9507      	str	r5, [sp, #28]
 800c5fe:	0035      	movs	r5, r6
 800c600:	782b      	ldrb	r3, [r5, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <_svfiprintf_r+0x52>
 800c606:	2b25      	cmp	r3, #37	; 0x25
 800c608:	d146      	bne.n	800c698 <_svfiprintf_r+0xe0>
 800c60a:	1bab      	subs	r3, r5, r6
 800c60c:	9305      	str	r3, [sp, #20]
 800c60e:	d00c      	beq.n	800c62a <_svfiprintf_r+0x72>
 800c610:	0032      	movs	r2, r6
 800c612:	0039      	movs	r1, r7
 800c614:	9803      	ldr	r0, [sp, #12]
 800c616:	f7ff ff6d 	bl	800c4f4 <__ssputs_r>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d100      	bne.n	800c620 <_svfiprintf_r+0x68>
 800c61e:	e0ae      	b.n	800c77e <_svfiprintf_r+0x1c6>
 800c620:	6962      	ldr	r2, [r4, #20]
 800c622:	9b05      	ldr	r3, [sp, #20]
 800c624:	4694      	mov	ip, r2
 800c626:	4463      	add	r3, ip
 800c628:	6163      	str	r3, [r4, #20]
 800c62a:	782b      	ldrb	r3, [r5, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d100      	bne.n	800c632 <_svfiprintf_r+0x7a>
 800c630:	e0a5      	b.n	800c77e <_svfiprintf_r+0x1c6>
 800c632:	2201      	movs	r2, #1
 800c634:	2300      	movs	r3, #0
 800c636:	4252      	negs	r2, r2
 800c638:	6062      	str	r2, [r4, #4]
 800c63a:	a904      	add	r1, sp, #16
 800c63c:	3254      	adds	r2, #84	; 0x54
 800c63e:	1852      	adds	r2, r2, r1
 800c640:	1c6e      	adds	r6, r5, #1
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	60e3      	str	r3, [r4, #12]
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	7013      	strb	r3, [r2, #0]
 800c64a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c64c:	7831      	ldrb	r1, [r6, #0]
 800c64e:	2205      	movs	r2, #5
 800c650:	4853      	ldr	r0, [pc, #332]	; (800c7a0 <_svfiprintf_r+0x1e8>)
 800c652:	f000 fa37 	bl	800cac4 <memchr>
 800c656:	1c75      	adds	r5, r6, #1
 800c658:	2800      	cmp	r0, #0
 800c65a:	d11f      	bne.n	800c69c <_svfiprintf_r+0xe4>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	06d3      	lsls	r3, r2, #27
 800c660:	d504      	bpl.n	800c66c <_svfiprintf_r+0xb4>
 800c662:	2353      	movs	r3, #83	; 0x53
 800c664:	a904      	add	r1, sp, #16
 800c666:	185b      	adds	r3, r3, r1
 800c668:	2120      	movs	r1, #32
 800c66a:	7019      	strb	r1, [r3, #0]
 800c66c:	0713      	lsls	r3, r2, #28
 800c66e:	d504      	bpl.n	800c67a <_svfiprintf_r+0xc2>
 800c670:	2353      	movs	r3, #83	; 0x53
 800c672:	a904      	add	r1, sp, #16
 800c674:	185b      	adds	r3, r3, r1
 800c676:	212b      	movs	r1, #43	; 0x2b
 800c678:	7019      	strb	r1, [r3, #0]
 800c67a:	7833      	ldrb	r3, [r6, #0]
 800c67c:	2b2a      	cmp	r3, #42	; 0x2a
 800c67e:	d016      	beq.n	800c6ae <_svfiprintf_r+0xf6>
 800c680:	0035      	movs	r5, r6
 800c682:	2100      	movs	r1, #0
 800c684:	200a      	movs	r0, #10
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	782a      	ldrb	r2, [r5, #0]
 800c68a:	1c6e      	adds	r6, r5, #1
 800c68c:	3a30      	subs	r2, #48	; 0x30
 800c68e:	2a09      	cmp	r2, #9
 800c690:	d94e      	bls.n	800c730 <_svfiprintf_r+0x178>
 800c692:	2900      	cmp	r1, #0
 800c694:	d018      	beq.n	800c6c8 <_svfiprintf_r+0x110>
 800c696:	e010      	b.n	800c6ba <_svfiprintf_r+0x102>
 800c698:	3501      	adds	r5, #1
 800c69a:	e7b1      	b.n	800c600 <_svfiprintf_r+0x48>
 800c69c:	4b40      	ldr	r3, [pc, #256]	; (800c7a0 <_svfiprintf_r+0x1e8>)
 800c69e:	6822      	ldr	r2, [r4, #0]
 800c6a0:	1ac0      	subs	r0, r0, r3
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4083      	lsls	r3, r0
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	002e      	movs	r6, r5
 800c6ac:	e7ce      	b.n	800c64c <_svfiprintf_r+0x94>
 800c6ae:	9b07      	ldr	r3, [sp, #28]
 800c6b0:	1d19      	adds	r1, r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	9107      	str	r1, [sp, #28]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	db01      	blt.n	800c6be <_svfiprintf_r+0x106>
 800c6ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6bc:	e004      	b.n	800c6c8 <_svfiprintf_r+0x110>
 800c6be:	425b      	negs	r3, r3
 800c6c0:	60e3      	str	r3, [r4, #12]
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	6023      	str	r3, [r4, #0]
 800c6c8:	782b      	ldrb	r3, [r5, #0]
 800c6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c6cc:	d10a      	bne.n	800c6e4 <_svfiprintf_r+0x12c>
 800c6ce:	786b      	ldrb	r3, [r5, #1]
 800c6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d2:	d135      	bne.n	800c740 <_svfiprintf_r+0x188>
 800c6d4:	9b07      	ldr	r3, [sp, #28]
 800c6d6:	3502      	adds	r5, #2
 800c6d8:	1d1a      	adds	r2, r3, #4
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	9207      	str	r2, [sp, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	db2b      	blt.n	800c73a <_svfiprintf_r+0x182>
 800c6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e4:	4e2f      	ldr	r6, [pc, #188]	; (800c7a4 <_svfiprintf_r+0x1ec>)
 800c6e6:	7829      	ldrb	r1, [r5, #0]
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	0030      	movs	r0, r6
 800c6ec:	f000 f9ea 	bl	800cac4 <memchr>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d006      	beq.n	800c702 <_svfiprintf_r+0x14a>
 800c6f4:	2340      	movs	r3, #64	; 0x40
 800c6f6:	1b80      	subs	r0, r0, r6
 800c6f8:	4083      	lsls	r3, r0
 800c6fa:	6822      	ldr	r2, [r4, #0]
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	4313      	orrs	r3, r2
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	7829      	ldrb	r1, [r5, #0]
 800c704:	2206      	movs	r2, #6
 800c706:	4828      	ldr	r0, [pc, #160]	; (800c7a8 <_svfiprintf_r+0x1f0>)
 800c708:	1c6e      	adds	r6, r5, #1
 800c70a:	7621      	strb	r1, [r4, #24]
 800c70c:	f000 f9da 	bl	800cac4 <memchr>
 800c710:	2800      	cmp	r0, #0
 800c712:	d03c      	beq.n	800c78e <_svfiprintf_r+0x1d6>
 800c714:	4b25      	ldr	r3, [pc, #148]	; (800c7ac <_svfiprintf_r+0x1f4>)
 800c716:	2b00      	cmp	r3, #0
 800c718:	d125      	bne.n	800c766 <_svfiprintf_r+0x1ae>
 800c71a:	2207      	movs	r2, #7
 800c71c:	9b07      	ldr	r3, [sp, #28]
 800c71e:	3307      	adds	r3, #7
 800c720:	4393      	bics	r3, r2
 800c722:	3308      	adds	r3, #8
 800c724:	9307      	str	r3, [sp, #28]
 800c726:	6963      	ldr	r3, [r4, #20]
 800c728:	9a04      	ldr	r2, [sp, #16]
 800c72a:	189b      	adds	r3, r3, r2
 800c72c:	6163      	str	r3, [r4, #20]
 800c72e:	e766      	b.n	800c5fe <_svfiprintf_r+0x46>
 800c730:	4343      	muls	r3, r0
 800c732:	2101      	movs	r1, #1
 800c734:	189b      	adds	r3, r3, r2
 800c736:	0035      	movs	r5, r6
 800c738:	e7a6      	b.n	800c688 <_svfiprintf_r+0xd0>
 800c73a:	2301      	movs	r3, #1
 800c73c:	425b      	negs	r3, r3
 800c73e:	e7d0      	b.n	800c6e2 <_svfiprintf_r+0x12a>
 800c740:	2300      	movs	r3, #0
 800c742:	200a      	movs	r0, #10
 800c744:	001a      	movs	r2, r3
 800c746:	3501      	adds	r5, #1
 800c748:	6063      	str	r3, [r4, #4]
 800c74a:	7829      	ldrb	r1, [r5, #0]
 800c74c:	1c6e      	adds	r6, r5, #1
 800c74e:	3930      	subs	r1, #48	; 0x30
 800c750:	2909      	cmp	r1, #9
 800c752:	d903      	bls.n	800c75c <_svfiprintf_r+0x1a4>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0c5      	beq.n	800c6e4 <_svfiprintf_r+0x12c>
 800c758:	9209      	str	r2, [sp, #36]	; 0x24
 800c75a:	e7c3      	b.n	800c6e4 <_svfiprintf_r+0x12c>
 800c75c:	4342      	muls	r2, r0
 800c75e:	2301      	movs	r3, #1
 800c760:	1852      	adds	r2, r2, r1
 800c762:	0035      	movs	r5, r6
 800c764:	e7f1      	b.n	800c74a <_svfiprintf_r+0x192>
 800c766:	ab07      	add	r3, sp, #28
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	003a      	movs	r2, r7
 800c76c:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c76e:	0021      	movs	r1, r4
 800c770:	9803      	ldr	r0, [sp, #12]
 800c772:	e000      	b.n	800c776 <_svfiprintf_r+0x1be>
 800c774:	bf00      	nop
 800c776:	9004      	str	r0, [sp, #16]
 800c778:	9b04      	ldr	r3, [sp, #16]
 800c77a:	3301      	adds	r3, #1
 800c77c:	d1d3      	bne.n	800c726 <_svfiprintf_r+0x16e>
 800c77e:	89bb      	ldrh	r3, [r7, #12]
 800c780:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c782:	065b      	lsls	r3, r3, #25
 800c784:	d400      	bmi.n	800c788 <_svfiprintf_r+0x1d0>
 800c786:	e72e      	b.n	800c5e6 <_svfiprintf_r+0x2e>
 800c788:	2001      	movs	r0, #1
 800c78a:	4240      	negs	r0, r0
 800c78c:	e72b      	b.n	800c5e6 <_svfiprintf_r+0x2e>
 800c78e:	ab07      	add	r3, sp, #28
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	003a      	movs	r2, r7
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c796:	0021      	movs	r1, r4
 800c798:	9803      	ldr	r0, [sp, #12]
 800c79a:	f000 f879 	bl	800c890 <_printf_i>
 800c79e:	e7ea      	b.n	800c776 <_svfiprintf_r+0x1be>
 800c7a0:	0800d610 	.word	0x0800d610
 800c7a4:	0800d616 	.word	0x0800d616
 800c7a8:	0800d61a 	.word	0x0800d61a
 800c7ac:	00000000 	.word	0x00000000
 800c7b0:	0800c4f5 	.word	0x0800c4f5

0800c7b4 <_printf_common>:
 800c7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7b6:	0015      	movs	r5, r2
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	688a      	ldr	r2, [r1, #8]
 800c7bc:	690b      	ldr	r3, [r1, #16]
 800c7be:	9000      	str	r0, [sp, #0]
 800c7c0:	000c      	movs	r4, r1
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	da00      	bge.n	800c7c8 <_printf_common+0x14>
 800c7c6:	0013      	movs	r3, r2
 800c7c8:	0022      	movs	r2, r4
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	3243      	adds	r2, #67	; 0x43
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	2a00      	cmp	r2, #0
 800c7d2:	d001      	beq.n	800c7d8 <_printf_common+0x24>
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	602b      	str	r3, [r5, #0]
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	069b      	lsls	r3, r3, #26
 800c7dc:	d502      	bpl.n	800c7e4 <_printf_common+0x30>
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	602b      	str	r3, [r5, #0]
 800c7e4:	2706      	movs	r7, #6
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	401f      	ands	r7, r3
 800c7ea:	d027      	beq.n	800c83c <_printf_common+0x88>
 800c7ec:	0023      	movs	r3, r4
 800c7ee:	3343      	adds	r3, #67	; 0x43
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	1e5a      	subs	r2, r3, #1
 800c7f4:	4193      	sbcs	r3, r2
 800c7f6:	6822      	ldr	r2, [r4, #0]
 800c7f8:	0692      	lsls	r2, r2, #26
 800c7fa:	d430      	bmi.n	800c85e <_printf_common+0xaa>
 800c7fc:	0022      	movs	r2, r4
 800c7fe:	9901      	ldr	r1, [sp, #4]
 800c800:	3243      	adds	r2, #67	; 0x43
 800c802:	9800      	ldr	r0, [sp, #0]
 800c804:	9e08      	ldr	r6, [sp, #32]
 800c806:	47b0      	blx	r6
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	d025      	beq.n	800c858 <_printf_common+0xa4>
 800c80c:	2306      	movs	r3, #6
 800c80e:	6820      	ldr	r0, [r4, #0]
 800c810:	682a      	ldr	r2, [r5, #0]
 800c812:	68e1      	ldr	r1, [r4, #12]
 800c814:	4003      	ands	r3, r0
 800c816:	2500      	movs	r5, #0
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d103      	bne.n	800c824 <_printf_common+0x70>
 800c81c:	1a8d      	subs	r5, r1, r2
 800c81e:	43eb      	mvns	r3, r5
 800c820:	17db      	asrs	r3, r3, #31
 800c822:	401d      	ands	r5, r3
 800c824:	68a3      	ldr	r3, [r4, #8]
 800c826:	6922      	ldr	r2, [r4, #16]
 800c828:	4293      	cmp	r3, r2
 800c82a:	dd01      	ble.n	800c830 <_printf_common+0x7c>
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	18ed      	adds	r5, r5, r3
 800c830:	2700      	movs	r7, #0
 800c832:	42bd      	cmp	r5, r7
 800c834:	d120      	bne.n	800c878 <_printf_common+0xc4>
 800c836:	2000      	movs	r0, #0
 800c838:	e010      	b.n	800c85c <_printf_common+0xa8>
 800c83a:	3701      	adds	r7, #1
 800c83c:	68e3      	ldr	r3, [r4, #12]
 800c83e:	682a      	ldr	r2, [r5, #0]
 800c840:	1a9b      	subs	r3, r3, r2
 800c842:	42bb      	cmp	r3, r7
 800c844:	ddd2      	ble.n	800c7ec <_printf_common+0x38>
 800c846:	0022      	movs	r2, r4
 800c848:	2301      	movs	r3, #1
 800c84a:	3219      	adds	r2, #25
 800c84c:	9901      	ldr	r1, [sp, #4]
 800c84e:	9800      	ldr	r0, [sp, #0]
 800c850:	9e08      	ldr	r6, [sp, #32]
 800c852:	47b0      	blx	r6
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d1f0      	bne.n	800c83a <_printf_common+0x86>
 800c858:	2001      	movs	r0, #1
 800c85a:	4240      	negs	r0, r0
 800c85c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c85e:	2030      	movs	r0, #48	; 0x30
 800c860:	18e1      	adds	r1, r4, r3
 800c862:	3143      	adds	r1, #67	; 0x43
 800c864:	7008      	strb	r0, [r1, #0]
 800c866:	0021      	movs	r1, r4
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	3145      	adds	r1, #69	; 0x45
 800c86c:	7809      	ldrb	r1, [r1, #0]
 800c86e:	18a2      	adds	r2, r4, r2
 800c870:	3243      	adds	r2, #67	; 0x43
 800c872:	3302      	adds	r3, #2
 800c874:	7011      	strb	r1, [r2, #0]
 800c876:	e7c1      	b.n	800c7fc <_printf_common+0x48>
 800c878:	0022      	movs	r2, r4
 800c87a:	2301      	movs	r3, #1
 800c87c:	321a      	adds	r2, #26
 800c87e:	9901      	ldr	r1, [sp, #4]
 800c880:	9800      	ldr	r0, [sp, #0]
 800c882:	9e08      	ldr	r6, [sp, #32]
 800c884:	47b0      	blx	r6
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	d0e6      	beq.n	800c858 <_printf_common+0xa4>
 800c88a:	3701      	adds	r7, #1
 800c88c:	e7d1      	b.n	800c832 <_printf_common+0x7e>
	...

0800c890 <_printf_i>:
 800c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c892:	b089      	sub	sp, #36	; 0x24
 800c894:	9204      	str	r2, [sp, #16]
 800c896:	000a      	movs	r2, r1
 800c898:	3243      	adds	r2, #67	; 0x43
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	9003      	str	r0, [sp, #12]
 800c89e:	9202      	str	r2, [sp, #8]
 800c8a0:	7e0a      	ldrb	r2, [r1, #24]
 800c8a2:	000c      	movs	r4, r1
 800c8a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a6:	2a6e      	cmp	r2, #110	; 0x6e
 800c8a8:	d100      	bne.n	800c8ac <_printf_i+0x1c>
 800c8aa:	e086      	b.n	800c9ba <_printf_i+0x12a>
 800c8ac:	d81f      	bhi.n	800c8ee <_printf_i+0x5e>
 800c8ae:	2a63      	cmp	r2, #99	; 0x63
 800c8b0:	d033      	beq.n	800c91a <_printf_i+0x8a>
 800c8b2:	d808      	bhi.n	800c8c6 <_printf_i+0x36>
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	d100      	bne.n	800c8ba <_printf_i+0x2a>
 800c8b8:	e08c      	b.n	800c9d4 <_printf_i+0x144>
 800c8ba:	2a58      	cmp	r2, #88	; 0x58
 800c8bc:	d04d      	beq.n	800c95a <_printf_i+0xca>
 800c8be:	0025      	movs	r5, r4
 800c8c0:	3542      	adds	r5, #66	; 0x42
 800c8c2:	702a      	strb	r2, [r5, #0]
 800c8c4:	e030      	b.n	800c928 <_printf_i+0x98>
 800c8c6:	2a64      	cmp	r2, #100	; 0x64
 800c8c8:	d001      	beq.n	800c8ce <_printf_i+0x3e>
 800c8ca:	2a69      	cmp	r2, #105	; 0x69
 800c8cc:	d1f7      	bne.n	800c8be <_printf_i+0x2e>
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	6825      	ldr	r5, [r4, #0]
 800c8d2:	1d0a      	adds	r2, r1, #4
 800c8d4:	0628      	lsls	r0, r5, #24
 800c8d6:	d529      	bpl.n	800c92c <_printf_i+0x9c>
 800c8d8:	6808      	ldr	r0, [r1, #0]
 800c8da:	601a      	str	r2, [r3, #0]
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	da03      	bge.n	800c8e8 <_printf_i+0x58>
 800c8e0:	232d      	movs	r3, #45	; 0x2d
 800c8e2:	9a02      	ldr	r2, [sp, #8]
 800c8e4:	4240      	negs	r0, r0
 800c8e6:	7013      	strb	r3, [r2, #0]
 800c8e8:	4e6b      	ldr	r6, [pc, #428]	; (800ca98 <_printf_i+0x208>)
 800c8ea:	270a      	movs	r7, #10
 800c8ec:	e04f      	b.n	800c98e <_printf_i+0xfe>
 800c8ee:	2a73      	cmp	r2, #115	; 0x73
 800c8f0:	d074      	beq.n	800c9dc <_printf_i+0x14c>
 800c8f2:	d808      	bhi.n	800c906 <_printf_i+0x76>
 800c8f4:	2a6f      	cmp	r2, #111	; 0x6f
 800c8f6:	d01f      	beq.n	800c938 <_printf_i+0xa8>
 800c8f8:	2a70      	cmp	r2, #112	; 0x70
 800c8fa:	d1e0      	bne.n	800c8be <_printf_i+0x2e>
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	6809      	ldr	r1, [r1, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	e003      	b.n	800c90e <_printf_i+0x7e>
 800c906:	2a75      	cmp	r2, #117	; 0x75
 800c908:	d016      	beq.n	800c938 <_printf_i+0xa8>
 800c90a:	2a78      	cmp	r2, #120	; 0x78
 800c90c:	d1d7      	bne.n	800c8be <_printf_i+0x2e>
 800c90e:	0022      	movs	r2, r4
 800c910:	2178      	movs	r1, #120	; 0x78
 800c912:	3245      	adds	r2, #69	; 0x45
 800c914:	7011      	strb	r1, [r2, #0]
 800c916:	4e61      	ldr	r6, [pc, #388]	; (800ca9c <_printf_i+0x20c>)
 800c918:	e022      	b.n	800c960 <_printf_i+0xd0>
 800c91a:	0025      	movs	r5, r4
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	3542      	adds	r5, #66	; 0x42
 800c920:	1d11      	adds	r1, r2, #4
 800c922:	6019      	str	r1, [r3, #0]
 800c924:	6813      	ldr	r3, [r2, #0]
 800c926:	702b      	strb	r3, [r5, #0]
 800c928:	2301      	movs	r3, #1
 800c92a:	e065      	b.n	800c9f8 <_printf_i+0x168>
 800c92c:	6808      	ldr	r0, [r1, #0]
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	0669      	lsls	r1, r5, #25
 800c932:	d5d3      	bpl.n	800c8dc <_printf_i+0x4c>
 800c934:	b200      	sxth	r0, r0
 800c936:	e7d1      	b.n	800c8dc <_printf_i+0x4c>
 800c938:	6819      	ldr	r1, [r3, #0]
 800c93a:	6825      	ldr	r5, [r4, #0]
 800c93c:	1d08      	adds	r0, r1, #4
 800c93e:	6018      	str	r0, [r3, #0]
 800c940:	6808      	ldr	r0, [r1, #0]
 800c942:	062e      	lsls	r6, r5, #24
 800c944:	d505      	bpl.n	800c952 <_printf_i+0xc2>
 800c946:	4e54      	ldr	r6, [pc, #336]	; (800ca98 <_printf_i+0x208>)
 800c948:	2708      	movs	r7, #8
 800c94a:	2a6f      	cmp	r2, #111	; 0x6f
 800c94c:	d01b      	beq.n	800c986 <_printf_i+0xf6>
 800c94e:	270a      	movs	r7, #10
 800c950:	e019      	b.n	800c986 <_printf_i+0xf6>
 800c952:	066d      	lsls	r5, r5, #25
 800c954:	d5f7      	bpl.n	800c946 <_printf_i+0xb6>
 800c956:	b280      	uxth	r0, r0
 800c958:	e7f5      	b.n	800c946 <_printf_i+0xb6>
 800c95a:	3145      	adds	r1, #69	; 0x45
 800c95c:	4e4e      	ldr	r6, [pc, #312]	; (800ca98 <_printf_i+0x208>)
 800c95e:	700a      	strb	r2, [r1, #0]
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	6822      	ldr	r2, [r4, #0]
 800c964:	1d01      	adds	r1, r0, #4
 800c966:	6800      	ldr	r0, [r0, #0]
 800c968:	6019      	str	r1, [r3, #0]
 800c96a:	0615      	lsls	r5, r2, #24
 800c96c:	d521      	bpl.n	800c9b2 <_printf_i+0x122>
 800c96e:	07d3      	lsls	r3, r2, #31
 800c970:	d502      	bpl.n	800c978 <_printf_i+0xe8>
 800c972:	2320      	movs	r3, #32
 800c974:	431a      	orrs	r2, r3
 800c976:	6022      	str	r2, [r4, #0]
 800c978:	2710      	movs	r7, #16
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d103      	bne.n	800c986 <_printf_i+0xf6>
 800c97e:	2320      	movs	r3, #32
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	439a      	bics	r2, r3
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	0023      	movs	r3, r4
 800c988:	2200      	movs	r2, #0
 800c98a:	3343      	adds	r3, #67	; 0x43
 800c98c:	701a      	strb	r2, [r3, #0]
 800c98e:	6863      	ldr	r3, [r4, #4]
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	db58      	blt.n	800ca48 <_printf_i+0x1b8>
 800c996:	2204      	movs	r2, #4
 800c998:	6821      	ldr	r1, [r4, #0]
 800c99a:	4391      	bics	r1, r2
 800c99c:	6021      	str	r1, [r4, #0]
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d154      	bne.n	800ca4c <_printf_i+0x1bc>
 800c9a2:	9d02      	ldr	r5, [sp, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d05a      	beq.n	800ca5e <_printf_i+0x1ce>
 800c9a8:	0025      	movs	r5, r4
 800c9aa:	7833      	ldrb	r3, [r6, #0]
 800c9ac:	3542      	adds	r5, #66	; 0x42
 800c9ae:	702b      	strb	r3, [r5, #0]
 800c9b0:	e055      	b.n	800ca5e <_printf_i+0x1ce>
 800c9b2:	0655      	lsls	r5, r2, #25
 800c9b4:	d5db      	bpl.n	800c96e <_printf_i+0xde>
 800c9b6:	b280      	uxth	r0, r0
 800c9b8:	e7d9      	b.n	800c96e <_printf_i+0xde>
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	680d      	ldr	r5, [r1, #0]
 800c9be:	1d10      	adds	r0, r2, #4
 800c9c0:	6949      	ldr	r1, [r1, #20]
 800c9c2:	6018      	str	r0, [r3, #0]
 800c9c4:	6813      	ldr	r3, [r2, #0]
 800c9c6:	062e      	lsls	r6, r5, #24
 800c9c8:	d501      	bpl.n	800c9ce <_printf_i+0x13e>
 800c9ca:	6019      	str	r1, [r3, #0]
 800c9cc:	e002      	b.n	800c9d4 <_printf_i+0x144>
 800c9ce:	066d      	lsls	r5, r5, #25
 800c9d0:	d5fb      	bpl.n	800c9ca <_printf_i+0x13a>
 800c9d2:	8019      	strh	r1, [r3, #0]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9d02      	ldr	r5, [sp, #8]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	e04f      	b.n	800ca7c <_printf_i+0x1ec>
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	1d11      	adds	r1, r2, #4
 800c9e0:	6019      	str	r1, [r3, #0]
 800c9e2:	6815      	ldr	r5, [r2, #0]
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6862      	ldr	r2, [r4, #4]
 800c9e8:	0028      	movs	r0, r5
 800c9ea:	f000 f86b 	bl	800cac4 <memchr>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d001      	beq.n	800c9f6 <_printf_i+0x166>
 800c9f2:	1b40      	subs	r0, r0, r5
 800c9f4:	6060      	str	r0, [r4, #4]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	9a02      	ldr	r2, [sp, #8]
 800c9fe:	7013      	strb	r3, [r2, #0]
 800ca00:	e03c      	b.n	800ca7c <_printf_i+0x1ec>
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	002a      	movs	r2, r5
 800ca06:	9904      	ldr	r1, [sp, #16]
 800ca08:	9803      	ldr	r0, [sp, #12]
 800ca0a:	9d05      	ldr	r5, [sp, #20]
 800ca0c:	47a8      	blx	r5
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	d03e      	beq.n	800ca90 <_printf_i+0x200>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	079b      	lsls	r3, r3, #30
 800ca16:	d415      	bmi.n	800ca44 <_printf_i+0x1b4>
 800ca18:	9b07      	ldr	r3, [sp, #28]
 800ca1a:	68e0      	ldr	r0, [r4, #12]
 800ca1c:	4298      	cmp	r0, r3
 800ca1e:	da39      	bge.n	800ca94 <_printf_i+0x204>
 800ca20:	0018      	movs	r0, r3
 800ca22:	e037      	b.n	800ca94 <_printf_i+0x204>
 800ca24:	0022      	movs	r2, r4
 800ca26:	2301      	movs	r3, #1
 800ca28:	3219      	adds	r2, #25
 800ca2a:	9904      	ldr	r1, [sp, #16]
 800ca2c:	9803      	ldr	r0, [sp, #12]
 800ca2e:	9e05      	ldr	r6, [sp, #20]
 800ca30:	47b0      	blx	r6
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	d02c      	beq.n	800ca90 <_printf_i+0x200>
 800ca36:	3501      	adds	r5, #1
 800ca38:	68e3      	ldr	r3, [r4, #12]
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	1a9b      	subs	r3, r3, r2
 800ca3e:	42ab      	cmp	r3, r5
 800ca40:	dcf0      	bgt.n	800ca24 <_printf_i+0x194>
 800ca42:	e7e9      	b.n	800ca18 <_printf_i+0x188>
 800ca44:	2500      	movs	r5, #0
 800ca46:	e7f7      	b.n	800ca38 <_printf_i+0x1a8>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0ad      	beq.n	800c9a8 <_printf_i+0x118>
 800ca4c:	9d02      	ldr	r5, [sp, #8]
 800ca4e:	0039      	movs	r1, r7
 800ca50:	f7f3 fbf4 	bl	800023c <__aeabi_uidivmod>
 800ca54:	5c73      	ldrb	r3, [r6, r1]
 800ca56:	3d01      	subs	r5, #1
 800ca58:	702b      	strb	r3, [r5, #0]
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d1f7      	bne.n	800ca4e <_printf_i+0x1be>
 800ca5e:	2f08      	cmp	r7, #8
 800ca60:	d109      	bne.n	800ca76 <_printf_i+0x1e6>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	07db      	lsls	r3, r3, #31
 800ca66:	d506      	bpl.n	800ca76 <_printf_i+0x1e6>
 800ca68:	6863      	ldr	r3, [r4, #4]
 800ca6a:	6922      	ldr	r2, [r4, #16]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	dc02      	bgt.n	800ca76 <_printf_i+0x1e6>
 800ca70:	2330      	movs	r3, #48	; 0x30
 800ca72:	3d01      	subs	r5, #1
 800ca74:	702b      	strb	r3, [r5, #0]
 800ca76:	9b02      	ldr	r3, [sp, #8]
 800ca78:	1b5b      	subs	r3, r3, r5
 800ca7a:	6123      	str	r3, [r4, #16]
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	aa07      	add	r2, sp, #28
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	0021      	movs	r1, r4
 800ca84:	9b04      	ldr	r3, [sp, #16]
 800ca86:	9803      	ldr	r0, [sp, #12]
 800ca88:	f7ff fe94 	bl	800c7b4 <_printf_common>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	d1b8      	bne.n	800ca02 <_printf_i+0x172>
 800ca90:	2001      	movs	r0, #1
 800ca92:	4240      	negs	r0, r0
 800ca94:	b009      	add	sp, #36	; 0x24
 800ca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca98:	0800d621 	.word	0x0800d621
 800ca9c:	0800d632 	.word	0x0800d632

0800caa0 <_sbrk_r>:
 800caa0:	2300      	movs	r3, #0
 800caa2:	b570      	push	{r4, r5, r6, lr}
 800caa4:	4c06      	ldr	r4, [pc, #24]	; (800cac0 <_sbrk_r+0x20>)
 800caa6:	0005      	movs	r5, r0
 800caa8:	0008      	movs	r0, r1
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	f000 f9f0 	bl	800ce90 <_sbrk>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d103      	bne.n	800cabc <_sbrk_r+0x1c>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d000      	beq.n	800cabc <_sbrk_r+0x1c>
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	bd70      	pop	{r4, r5, r6, pc}
 800cabe:	46c0      	nop			; (mov r8, r8)
 800cac0:	20000f58 	.word	0x20000f58

0800cac4 <memchr>:
 800cac4:	b2c9      	uxtb	r1, r1
 800cac6:	1882      	adds	r2, r0, r2
 800cac8:	4290      	cmp	r0, r2
 800caca:	d101      	bne.n	800cad0 <memchr+0xc>
 800cacc:	2000      	movs	r0, #0
 800cace:	4770      	bx	lr
 800cad0:	7803      	ldrb	r3, [r0, #0]
 800cad2:	428b      	cmp	r3, r1
 800cad4:	d0fb      	beq.n	800cace <memchr+0xa>
 800cad6:	3001      	adds	r0, #1
 800cad8:	e7f6      	b.n	800cac8 <memchr+0x4>

0800cada <memmove>:
 800cada:	b510      	push	{r4, lr}
 800cadc:	4288      	cmp	r0, r1
 800cade:	d902      	bls.n	800cae6 <memmove+0xc>
 800cae0:	188b      	adds	r3, r1, r2
 800cae2:	4298      	cmp	r0, r3
 800cae4:	d303      	bcc.n	800caee <memmove+0x14>
 800cae6:	2300      	movs	r3, #0
 800cae8:	e007      	b.n	800cafa <memmove+0x20>
 800caea:	5c8b      	ldrb	r3, [r1, r2]
 800caec:	5483      	strb	r3, [r0, r2]
 800caee:	3a01      	subs	r2, #1
 800caf0:	d2fb      	bcs.n	800caea <memmove+0x10>
 800caf2:	bd10      	pop	{r4, pc}
 800caf4:	5ccc      	ldrb	r4, [r1, r3]
 800caf6:	54c4      	strb	r4, [r0, r3]
 800caf8:	3301      	adds	r3, #1
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d1fa      	bne.n	800caf4 <memmove+0x1a>
 800cafe:	e7f8      	b.n	800caf2 <memmove+0x18>

0800cb00 <__malloc_lock>:
 800cb00:	4770      	bx	lr

0800cb02 <__malloc_unlock>:
 800cb02:	4770      	bx	lr

0800cb04 <_free_r>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	0005      	movs	r5, r0
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	d010      	beq.n	800cb2e <_free_r+0x2a>
 800cb0c:	1f0c      	subs	r4, r1, #4
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	da00      	bge.n	800cb16 <_free_r+0x12>
 800cb14:	18e4      	adds	r4, r4, r3
 800cb16:	0028      	movs	r0, r5
 800cb18:	f7ff fff2 	bl	800cb00 <__malloc_lock>
 800cb1c:	4a1d      	ldr	r2, [pc, #116]	; (800cb94 <_free_r+0x90>)
 800cb1e:	6813      	ldr	r3, [r2, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d105      	bne.n	800cb30 <_free_r+0x2c>
 800cb24:	6063      	str	r3, [r4, #4]
 800cb26:	6014      	str	r4, [r2, #0]
 800cb28:	0028      	movs	r0, r5
 800cb2a:	f7ff ffea 	bl	800cb02 <__malloc_unlock>
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d909      	bls.n	800cb48 <_free_r+0x44>
 800cb34:	6821      	ldr	r1, [r4, #0]
 800cb36:	1860      	adds	r0, r4, r1
 800cb38:	4283      	cmp	r3, r0
 800cb3a:	d1f3      	bne.n	800cb24 <_free_r+0x20>
 800cb3c:	6818      	ldr	r0, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	1841      	adds	r1, r0, r1
 800cb42:	6021      	str	r1, [r4, #0]
 800cb44:	e7ee      	b.n	800cb24 <_free_r+0x20>
 800cb46:	0013      	movs	r3, r2
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	d001      	beq.n	800cb52 <_free_r+0x4e>
 800cb4e:	42a2      	cmp	r2, r4
 800cb50:	d9f9      	bls.n	800cb46 <_free_r+0x42>
 800cb52:	6819      	ldr	r1, [r3, #0]
 800cb54:	1858      	adds	r0, r3, r1
 800cb56:	42a0      	cmp	r0, r4
 800cb58:	d10b      	bne.n	800cb72 <_free_r+0x6e>
 800cb5a:	6820      	ldr	r0, [r4, #0]
 800cb5c:	1809      	adds	r1, r1, r0
 800cb5e:	1858      	adds	r0, r3, r1
 800cb60:	6019      	str	r1, [r3, #0]
 800cb62:	4282      	cmp	r2, r0
 800cb64:	d1e0      	bne.n	800cb28 <_free_r+0x24>
 800cb66:	6810      	ldr	r0, [r2, #0]
 800cb68:	6852      	ldr	r2, [r2, #4]
 800cb6a:	1841      	adds	r1, r0, r1
 800cb6c:	6019      	str	r1, [r3, #0]
 800cb6e:	605a      	str	r2, [r3, #4]
 800cb70:	e7da      	b.n	800cb28 <_free_r+0x24>
 800cb72:	42a0      	cmp	r0, r4
 800cb74:	d902      	bls.n	800cb7c <_free_r+0x78>
 800cb76:	230c      	movs	r3, #12
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	e7d5      	b.n	800cb28 <_free_r+0x24>
 800cb7c:	6821      	ldr	r1, [r4, #0]
 800cb7e:	1860      	adds	r0, r4, r1
 800cb80:	4282      	cmp	r2, r0
 800cb82:	d103      	bne.n	800cb8c <_free_r+0x88>
 800cb84:	6810      	ldr	r0, [r2, #0]
 800cb86:	6852      	ldr	r2, [r2, #4]
 800cb88:	1841      	adds	r1, r0, r1
 800cb8a:	6021      	str	r1, [r4, #0]
 800cb8c:	6062      	str	r2, [r4, #4]
 800cb8e:	605c      	str	r4, [r3, #4]
 800cb90:	e7ca      	b.n	800cb28 <_free_r+0x24>
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	20000d60 	.word	0x20000d60

0800cb98 <_realloc_r>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	0007      	movs	r7, r0
 800cb9c:	000d      	movs	r5, r1
 800cb9e:	0016      	movs	r6, r2
 800cba0:	2900      	cmp	r1, #0
 800cba2:	d105      	bne.n	800cbb0 <_realloc_r+0x18>
 800cba4:	0011      	movs	r1, r2
 800cba6:	f7ff fc47 	bl	800c438 <_malloc_r>
 800cbaa:	0004      	movs	r4, r0
 800cbac:	0020      	movs	r0, r4
 800cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb0:	2a00      	cmp	r2, #0
 800cbb2:	d103      	bne.n	800cbbc <_realloc_r+0x24>
 800cbb4:	f7ff ffa6 	bl	800cb04 <_free_r>
 800cbb8:	0034      	movs	r4, r6
 800cbba:	e7f7      	b.n	800cbac <_realloc_r+0x14>
 800cbbc:	f000 f812 	bl	800cbe4 <_malloc_usable_size_r>
 800cbc0:	002c      	movs	r4, r5
 800cbc2:	42b0      	cmp	r0, r6
 800cbc4:	d2f2      	bcs.n	800cbac <_realloc_r+0x14>
 800cbc6:	0031      	movs	r1, r6
 800cbc8:	0038      	movs	r0, r7
 800cbca:	f7ff fc35 	bl	800c438 <_malloc_r>
 800cbce:	1e04      	subs	r4, r0, #0
 800cbd0:	d0ec      	beq.n	800cbac <_realloc_r+0x14>
 800cbd2:	0029      	movs	r1, r5
 800cbd4:	0032      	movs	r2, r6
 800cbd6:	f7ff fbfb 	bl	800c3d0 <memcpy>
 800cbda:	0029      	movs	r1, r5
 800cbdc:	0038      	movs	r0, r7
 800cbde:	f7ff ff91 	bl	800cb04 <_free_r>
 800cbe2:	e7e3      	b.n	800cbac <_realloc_r+0x14>

0800cbe4 <_malloc_usable_size_r>:
 800cbe4:	1f0b      	subs	r3, r1, #4
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	1f18      	subs	r0, r3, #4
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	da01      	bge.n	800cbf2 <_malloc_usable_size_r+0xe>
 800cbee:	580b      	ldr	r3, [r1, r0]
 800cbf0:	18c0      	adds	r0, r0, r3
 800cbf2:	4770      	bx	lr

0800cbf4 <ceil>:
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	004b      	lsls	r3, r1, #1
 800cbf8:	4a39      	ldr	r2, [pc, #228]	; (800cce0 <ceil+0xec>)
 800cbfa:	0d5b      	lsrs	r3, r3, #21
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	189e      	adds	r6, r3, r2
 800cc00:	000c      	movs	r4, r1
 800cc02:	0005      	movs	r5, r0
 800cc04:	9003      	str	r0, [sp, #12]
 800cc06:	2e13      	cmp	r6, #19
 800cc08:	dc32      	bgt.n	800cc70 <ceil+0x7c>
 800cc0a:	2e00      	cmp	r6, #0
 800cc0c:	da13      	bge.n	800cc36 <ceil+0x42>
 800cc0e:	4a35      	ldr	r2, [pc, #212]	; (800cce4 <ceil+0xf0>)
 800cc10:	4b35      	ldr	r3, [pc, #212]	; (800cce8 <ceil+0xf4>)
 800cc12:	f7f4 fc85 	bl	8001520 <__aeabi_dadd>
 800cc16:	2200      	movs	r2, #0
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f7f3 fc29 	bl	8000470 <__aeabi_dcmpgt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d006      	beq.n	800cc30 <ceil+0x3c>
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	db57      	blt.n	800ccd6 <ceil+0xe2>
 800cc26:	432c      	orrs	r4, r5
 800cc28:	2500      	movs	r5, #0
 800cc2a:	42ac      	cmp	r4, r5
 800cc2c:	d000      	beq.n	800cc30 <ceil+0x3c>
 800cc2e:	4c2f      	ldr	r4, [pc, #188]	; (800ccec <ceil+0xf8>)
 800cc30:	0028      	movs	r0, r5
 800cc32:	0021      	movs	r1, r4
 800cc34:	e026      	b.n	800cc84 <ceil+0x90>
 800cc36:	4f2e      	ldr	r7, [pc, #184]	; (800ccf0 <ceil+0xfc>)
 800cc38:	4137      	asrs	r7, r6
 800cc3a:	003b      	movs	r3, r7
 800cc3c:	400b      	ands	r3, r1
 800cc3e:	4303      	orrs	r3, r0
 800cc40:	d020      	beq.n	800cc84 <ceil+0x90>
 800cc42:	9000      	str	r0, [sp, #0]
 800cc44:	9101      	str	r1, [sp, #4]
 800cc46:	4a27      	ldr	r2, [pc, #156]	; (800cce4 <ceil+0xf0>)
 800cc48:	4b27      	ldr	r3, [pc, #156]	; (800cce8 <ceil+0xf4>)
 800cc4a:	9800      	ldr	r0, [sp, #0]
 800cc4c:	9901      	ldr	r1, [sp, #4]
 800cc4e:	f7f4 fc67 	bl	8001520 <__aeabi_dadd>
 800cc52:	2200      	movs	r2, #0
 800cc54:	2300      	movs	r3, #0
 800cc56:	f7f3 fc0b 	bl	8000470 <__aeabi_dcmpgt>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0e8      	beq.n	800cc30 <ceil+0x3c>
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	dd03      	ble.n	800cc6a <ceil+0x76>
 800cc62:	2380      	movs	r3, #128	; 0x80
 800cc64:	035b      	lsls	r3, r3, #13
 800cc66:	4133      	asrs	r3, r6
 800cc68:	18e4      	adds	r4, r4, r3
 800cc6a:	43bc      	bics	r4, r7
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	e7df      	b.n	800cc30 <ceil+0x3c>
 800cc70:	2e33      	cmp	r6, #51	; 0x33
 800cc72:	dd09      	ble.n	800cc88 <ceil+0x94>
 800cc74:	2380      	movs	r3, #128	; 0x80
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	429e      	cmp	r6, r3
 800cc7a:	d103      	bne.n	800cc84 <ceil+0x90>
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	000b      	movs	r3, r1
 800cc80:	f7f4 fc4e 	bl	8001520 <__aeabi_dadd>
 800cc84:	b005      	add	sp, #20
 800cc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc88:	2701      	movs	r7, #1
 800cc8a:	4a1a      	ldr	r2, [pc, #104]	; (800ccf4 <ceil+0x100>)
 800cc8c:	427f      	negs	r7, r7
 800cc8e:	189b      	adds	r3, r3, r2
 800cc90:	40df      	lsrs	r7, r3
 800cc92:	4238      	tst	r0, r7
 800cc94:	d0f6      	beq.n	800cc84 <ceil+0x90>
 800cc96:	9000      	str	r0, [sp, #0]
 800cc98:	9101      	str	r1, [sp, #4]
 800cc9a:	4a12      	ldr	r2, [pc, #72]	; (800cce4 <ceil+0xf0>)
 800cc9c:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <ceil+0xf4>)
 800cc9e:	9800      	ldr	r0, [sp, #0]
 800cca0:	9901      	ldr	r1, [sp, #4]
 800cca2:	f7f4 fc3d 	bl	8001520 <__aeabi_dadd>
 800cca6:	2200      	movs	r2, #0
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f7f3 fbe1 	bl	8000470 <__aeabi_dcmpgt>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d0be      	beq.n	800cc30 <ceil+0x3c>
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	dd02      	ble.n	800ccbc <ceil+0xc8>
 800ccb6:	2e14      	cmp	r6, #20
 800ccb8:	d102      	bne.n	800ccc0 <ceil+0xcc>
 800ccba:	3401      	adds	r4, #1
 800ccbc:	43bd      	bics	r5, r7
 800ccbe:	e7b7      	b.n	800cc30 <ceil+0x3c>
 800ccc0:	2334      	movs	r3, #52	; 0x34
 800ccc2:	1b9e      	subs	r6, r3, r6
 800ccc4:	3b33      	subs	r3, #51	; 0x33
 800ccc6:	40b3      	lsls	r3, r6
 800ccc8:	18ed      	adds	r5, r5, r3
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	429d      	cmp	r5, r3
 800ccce:	419b      	sbcs	r3, r3
 800ccd0:	425b      	negs	r3, r3
 800ccd2:	18e4      	adds	r4, r4, r3
 800ccd4:	e7f2      	b.n	800ccbc <ceil+0xc8>
 800ccd6:	2480      	movs	r4, #128	; 0x80
 800ccd8:	2500      	movs	r5, #0
 800ccda:	0624      	lsls	r4, r4, #24
 800ccdc:	e7a8      	b.n	800cc30 <ceil+0x3c>
 800ccde:	46c0      	nop			; (mov r8, r8)
 800cce0:	fffffc01 	.word	0xfffffc01
 800cce4:	8800759c 	.word	0x8800759c
 800cce8:	7e37e43c 	.word	0x7e37e43c
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	000fffff 	.word	0x000fffff
 800ccf4:	fffffbed 	.word	0xfffffbed

0800ccf8 <floor>:
 800ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccfa:	004b      	lsls	r3, r1, #1
 800ccfc:	4a39      	ldr	r2, [pc, #228]	; (800cde4 <floor+0xec>)
 800ccfe:	0d5b      	lsrs	r3, r3, #21
 800cd00:	b085      	sub	sp, #20
 800cd02:	189e      	adds	r6, r3, r2
 800cd04:	000c      	movs	r4, r1
 800cd06:	0005      	movs	r5, r0
 800cd08:	9003      	str	r0, [sp, #12]
 800cd0a:	2e13      	cmp	r6, #19
 800cd0c:	dc34      	bgt.n	800cd78 <floor+0x80>
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	da15      	bge.n	800cd3e <floor+0x46>
 800cd12:	4a35      	ldr	r2, [pc, #212]	; (800cde8 <floor+0xf0>)
 800cd14:	4b35      	ldr	r3, [pc, #212]	; (800cdec <floor+0xf4>)
 800cd16:	f7f4 fc03 	bl	8001520 <__aeabi_dadd>
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f7f3 fba7 	bl	8000470 <__aeabi_dcmpgt>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d008      	beq.n	800cd38 <floor+0x40>
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	da59      	bge.n	800cdde <floor+0xe6>
 800cd2a:	0063      	lsls	r3, r4, #1
 800cd2c:	085b      	lsrs	r3, r3, #1
 800cd2e:	432b      	orrs	r3, r5
 800cd30:	2500      	movs	r5, #0
 800cd32:	42ab      	cmp	r3, r5
 800cd34:	d000      	beq.n	800cd38 <floor+0x40>
 800cd36:	4c2e      	ldr	r4, [pc, #184]	; (800cdf0 <floor+0xf8>)
 800cd38:	0028      	movs	r0, r5
 800cd3a:	0021      	movs	r1, r4
 800cd3c:	e026      	b.n	800cd8c <floor+0x94>
 800cd3e:	4f2d      	ldr	r7, [pc, #180]	; (800cdf4 <floor+0xfc>)
 800cd40:	4137      	asrs	r7, r6
 800cd42:	003b      	movs	r3, r7
 800cd44:	400b      	ands	r3, r1
 800cd46:	4303      	orrs	r3, r0
 800cd48:	d020      	beq.n	800cd8c <floor+0x94>
 800cd4a:	9000      	str	r0, [sp, #0]
 800cd4c:	9101      	str	r1, [sp, #4]
 800cd4e:	4a26      	ldr	r2, [pc, #152]	; (800cde8 <floor+0xf0>)
 800cd50:	4b26      	ldr	r3, [pc, #152]	; (800cdec <floor+0xf4>)
 800cd52:	9800      	ldr	r0, [sp, #0]
 800cd54:	9901      	ldr	r1, [sp, #4]
 800cd56:	f7f4 fbe3 	bl	8001520 <__aeabi_dadd>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f7f3 fb87 	bl	8000470 <__aeabi_dcmpgt>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d0e8      	beq.n	800cd38 <floor+0x40>
 800cd66:	2c00      	cmp	r4, #0
 800cd68:	da03      	bge.n	800cd72 <floor+0x7a>
 800cd6a:	2380      	movs	r3, #128	; 0x80
 800cd6c:	035b      	lsls	r3, r3, #13
 800cd6e:	4133      	asrs	r3, r6
 800cd70:	18e4      	adds	r4, r4, r3
 800cd72:	43bc      	bics	r4, r7
 800cd74:	2500      	movs	r5, #0
 800cd76:	e7df      	b.n	800cd38 <floor+0x40>
 800cd78:	2e33      	cmp	r6, #51	; 0x33
 800cd7a:	dd09      	ble.n	800cd90 <floor+0x98>
 800cd7c:	2380      	movs	r3, #128	; 0x80
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	429e      	cmp	r6, r3
 800cd82:	d103      	bne.n	800cd8c <floor+0x94>
 800cd84:	0002      	movs	r2, r0
 800cd86:	000b      	movs	r3, r1
 800cd88:	f7f4 fbca 	bl	8001520 <__aeabi_dadd>
 800cd8c:	b005      	add	sp, #20
 800cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd90:	2701      	movs	r7, #1
 800cd92:	4a19      	ldr	r2, [pc, #100]	; (800cdf8 <floor+0x100>)
 800cd94:	427f      	negs	r7, r7
 800cd96:	189b      	adds	r3, r3, r2
 800cd98:	40df      	lsrs	r7, r3
 800cd9a:	4238      	tst	r0, r7
 800cd9c:	d0f6      	beq.n	800cd8c <floor+0x94>
 800cd9e:	9000      	str	r0, [sp, #0]
 800cda0:	9101      	str	r1, [sp, #4]
 800cda2:	4a11      	ldr	r2, [pc, #68]	; (800cde8 <floor+0xf0>)
 800cda4:	4b11      	ldr	r3, [pc, #68]	; (800cdec <floor+0xf4>)
 800cda6:	9800      	ldr	r0, [sp, #0]
 800cda8:	9901      	ldr	r1, [sp, #4]
 800cdaa:	f7f4 fbb9 	bl	8001520 <__aeabi_dadd>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f7f3 fb5d 	bl	8000470 <__aeabi_dcmpgt>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d0be      	beq.n	800cd38 <floor+0x40>
 800cdba:	2c00      	cmp	r4, #0
 800cdbc:	da02      	bge.n	800cdc4 <floor+0xcc>
 800cdbe:	2e14      	cmp	r6, #20
 800cdc0:	d102      	bne.n	800cdc8 <floor+0xd0>
 800cdc2:	3401      	adds	r4, #1
 800cdc4:	43bd      	bics	r5, r7
 800cdc6:	e7b7      	b.n	800cd38 <floor+0x40>
 800cdc8:	2334      	movs	r3, #52	; 0x34
 800cdca:	1b9e      	subs	r6, r3, r6
 800cdcc:	3b33      	subs	r3, #51	; 0x33
 800cdce:	40b3      	lsls	r3, r6
 800cdd0:	18ed      	adds	r5, r5, r3
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	429d      	cmp	r5, r3
 800cdd6:	419b      	sbcs	r3, r3
 800cdd8:	425b      	negs	r3, r3
 800cdda:	18e4      	adds	r4, r4, r3
 800cddc:	e7f2      	b.n	800cdc4 <floor+0xcc>
 800cdde:	2500      	movs	r5, #0
 800cde0:	002c      	movs	r4, r5
 800cde2:	e7a9      	b.n	800cd38 <floor+0x40>
 800cde4:	fffffc01 	.word	0xfffffc01
 800cde8:	8800759c 	.word	0x8800759c
 800cdec:	7e37e43c 	.word	0x7e37e43c
 800cdf0:	bff00000 	.word	0xbff00000
 800cdf4:	000fffff 	.word	0x000fffff
 800cdf8:	fffffbed 	.word	0xfffffbed

0800cdfc <round>:
 800cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfe:	004a      	lsls	r2, r1, #1
 800ce00:	0007      	movs	r7, r0
 800ce02:	481f      	ldr	r0, [pc, #124]	; (800ce80 <round+0x84>)
 800ce04:	0d52      	lsrs	r2, r2, #21
 800ce06:	1815      	adds	r5, r2, r0
 800ce08:	000e      	movs	r6, r1
 800ce0a:	2d13      	cmp	r5, #19
 800ce0c:	dc18      	bgt.n	800ce40 <round+0x44>
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	da09      	bge.n	800ce26 <round+0x2a>
 800ce12:	0fcb      	lsrs	r3, r1, #31
 800ce14:	07db      	lsls	r3, r3, #31
 800ce16:	2200      	movs	r2, #0
 800ce18:	1c69      	adds	r1, r5, #1
 800ce1a:	d101      	bne.n	800ce20 <round+0x24>
 800ce1c:	4919      	ldr	r1, [pc, #100]	; (800ce84 <round+0x88>)
 800ce1e:	430b      	orrs	r3, r1
 800ce20:	0019      	movs	r1, r3
 800ce22:	0010      	movs	r0, r2
 800ce24:	e017      	b.n	800ce56 <round+0x5a>
 800ce26:	4a18      	ldr	r2, [pc, #96]	; (800ce88 <round+0x8c>)
 800ce28:	412a      	asrs	r2, r5
 800ce2a:	420a      	tst	r2, r1
 800ce2c:	d101      	bne.n	800ce32 <round+0x36>
 800ce2e:	2f00      	cmp	r7, #0
 800ce30:	d012      	beq.n	800ce58 <round+0x5c>
 800ce32:	2380      	movs	r3, #128	; 0x80
 800ce34:	031b      	lsls	r3, r3, #12
 800ce36:	412b      	asrs	r3, r5
 800ce38:	199b      	adds	r3, r3, r6
 800ce3a:	4393      	bics	r3, r2
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	e7ef      	b.n	800ce20 <round+0x24>
 800ce40:	2d33      	cmp	r5, #51	; 0x33
 800ce42:	dd0b      	ble.n	800ce5c <round+0x60>
 800ce44:	2380      	movs	r3, #128	; 0x80
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	429d      	cmp	r5, r3
 800ce4a:	d105      	bne.n	800ce58 <round+0x5c>
 800ce4c:	003a      	movs	r2, r7
 800ce4e:	000b      	movs	r3, r1
 800ce50:	0038      	movs	r0, r7
 800ce52:	f7f4 fb65 	bl	8001520 <__aeabi_dadd>
 800ce56:	0007      	movs	r7, r0
 800ce58:	0038      	movs	r0, r7
 800ce5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce5c:	2601      	movs	r6, #1
 800ce5e:	480b      	ldr	r0, [pc, #44]	; (800ce8c <round+0x90>)
 800ce60:	4276      	negs	r6, r6
 800ce62:	1812      	adds	r2, r2, r0
 800ce64:	40d6      	lsrs	r6, r2
 800ce66:	423e      	tst	r6, r7
 800ce68:	d0f6      	beq.n	800ce58 <round+0x5c>
 800ce6a:	2233      	movs	r2, #51	; 0x33
 800ce6c:	1b55      	subs	r5, r2, r5
 800ce6e:	3a32      	subs	r2, #50	; 0x32
 800ce70:	40aa      	lsls	r2, r5
 800ce72:	19d2      	adds	r2, r2, r7
 800ce74:	42ba      	cmp	r2, r7
 800ce76:	41a4      	sbcs	r4, r4
 800ce78:	4264      	negs	r4, r4
 800ce7a:	190b      	adds	r3, r1, r4
 800ce7c:	43b2      	bics	r2, r6
 800ce7e:	e7cf      	b.n	800ce20 <round+0x24>
 800ce80:	fffffc01 	.word	0xfffffc01
 800ce84:	3ff00000 	.word	0x3ff00000
 800ce88:	000fffff 	.word	0x000fffff
 800ce8c:	fffffbed 	.word	0xfffffbed

0800ce90 <_sbrk>:
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <_sbrk+0x18>)
 800ce92:	0002      	movs	r2, r0
 800ce94:	6819      	ldr	r1, [r3, #0]
 800ce96:	2900      	cmp	r1, #0
 800ce98:	d101      	bne.n	800ce9e <_sbrk+0xe>
 800ce9a:	4904      	ldr	r1, [pc, #16]	; (800ceac <_sbrk+0x1c>)
 800ce9c:	6019      	str	r1, [r3, #0]
 800ce9e:	6818      	ldr	r0, [r3, #0]
 800cea0:	1882      	adds	r2, r0, r2
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	4770      	bx	lr
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	20000d68 	.word	0x20000d68
 800ceac:	20000f60 	.word	0x20000f60

0800ceb0 <_init>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	46c0      	nop			; (mov r8, r8)
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr

0800cebc <_fini>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec2:	bc08      	pop	{r3}
 800cec4:	469e      	mov	lr, r3
 800cec6:	4770      	bx	lr
